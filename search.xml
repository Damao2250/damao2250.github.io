<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录邻里邦自动签到接口</title>
      <link href="/2024/12/26/%E8%AE%B0%E5%BD%95%E9%82%BB%E9%87%8C%E9%82%A6%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/12/26/%E8%AE%B0%E5%BD%95%E9%82%BB%E9%87%8C%E9%82%A6%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><ul><li>接口：<a href="https://m-center-prod-linli.timesgroup.cn/times/pub-center/verifycode/api/v1/send">https://m-center-prod-linli.timesgroup.cn/times/pub-center/verifycode/api/v1/send</a></li><li>请求方法：POST</li><li>请求参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需要修改 phoneNumber 为自己的手机号码</span></span><br><span class="line">&#123;<span class="string">&quot;phoneNumber&quot;</span>:<span class="string">&quot;1342341234&quot;</span>,<span class="string">&quot;areaCode&quot;</span>:<span class="string">&quot;86&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li><li>返回结果<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>:<span class="string">&quot;验证码发送成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="根据验证码获取-token"><a href="#根据验证码获取-token" class="headerlink" title="根据验证码获取 token"></a>根据验证码获取 token</h2><ul><li>接口：<a href="https://m-center-prod-linli.timesgroup.cn/times/times-bff/bff/api-c/v1/oauth/token">https://m-center-prod-linli.timesgroup.cn/times/times-bff/bff/api-c/v1/oauth/token</a></li><li>请求方法：POST</li><li>请求参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改 username 为自己的手机号码</span></span><br><span class="line"><span class="comment">// 修改 password 为收到的验证码</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;grant_type&quot;</span>:<span class="string">&quot;sms_code&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scope&quot;</span>:<span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="string">&quot;client_id&quot;</span>:<span class="string">&quot;mini_charge&quot;</span>,</span><br><span class="line">  <span class="string">&quot;client_secret&quot;</span>:<span class="string">&quot;times&quot;</span>,</span><br><span class="line">  <span class="string">&quot;username&quot;</span>:<span class="string">&quot;13412341234&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">  <span class="string">&quot;areaCode&quot;</span>:<span class="string">&quot;86&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回结果<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;authUserDTO&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;expiresIn&quot;</span>:<span class="number">86399</span>,</span><br><span class="line">      <span class="string">&quot;refreshToken&quot;</span>:<span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9&quot;</span>,</span><br><span class="line">      <span class="string">&quot;token&quot;</span>:<span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9&quot;</span>,</span><br><span class="line">      <span class="string">&quot;tokenHead&quot;</span>:<span class="string">&quot;Bearer &quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userDTO&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;eWechatOpenId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;eWechatUnionId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;extUserId&quot;</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;isCancel&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;isEnable&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;isShowRealName&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;isSupplement&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;phone&quot;</span>:<span class="string">&quot;13412341234&quot;</span>,</span><br><span class="line">      <span class="string">&quot;phoneAreaCode&quot;</span>:<span class="string">&quot;86&quot;</span>,</span><br><span class="line">      <span class="string">&quot;projectId&quot;</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;projectName&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sex&quot;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;storeType&quot;</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;storeUrl&quot;</span>:<span class="string">&quot;https://mall-prod-app-linli.timesgroup.cn/app/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;updateTime&quot;</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;userImage&quot;</span>:<span class="string">&quot;https://thirdwx.qlogo.cn/&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userName&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;wxMinipOpenId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;wxOpenId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;wxUnionId&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userProjectHistoryDTOS&quot;</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;projectId&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;projectName&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;storeType&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;storeUrl&quot;</span>:<span class="string">&quot;https://mall-prod-app-linli.timesgroup.cn/app/index&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取会员-id-memberId"><a href="#获取会员-id-memberId" class="headerlink" title="获取会员 id - memberId"></a>获取会员 id - memberId</h2><ul><li>接口：<a href="https://m-center-prod-linli.timesgroup.cn/times/member-bff/member/api-c/v1/member/detailByPhone?phone=13412341234&phoneArea=86">https://m-center-prod-linli.timesgroup.cn/times/member-bff/member/api-c/v1/member/detailByPhone?phone=13412341234&amp;phoneArea=86</a></li><li>请求方法：GET</li><li>请求参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 url 中的 phone 值替换为自己的手机号码</span></span><br></pre></td></tr></table></figure></li><li>请求头加入上一步返回来的 token 拼接在 <code>Bearer </code>后，如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">&quot;Bearer eyJhbGciOiJSU&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回结果，只需要拿到结果中的 memberId<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;cardNo&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cardType&quot;</span>: <span class="string">&quot;111&quot;</span>,</span><br><span class="line">    <span class="string">&quot;couponNum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="number">1702007451000</span>,</span><br><span class="line">    <span class="string">&quot;createUser&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grow&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;integral&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;integralTotal&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;isDeleted&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;isEnable&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;isShowRealName&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;memberCardRelats&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1702007451000</span>,</span><br><span class="line">        <span class="string">&quot;createUser&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;expirationTime&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;grow&quot;</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;isDeleted&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;levelId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;levelName&quot;</span>: <span class="string">&quot;普通会员&quot;</span>,</span><br><span class="line">        <span class="string">&quot;memberCardId&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;memberCardImage&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;memberCardName&quot;</span>: <span class="string">&quot;时代邻里会员卡&quot;</span>,</span><br><span class="line">        <span class="string">&quot;memberCode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;memberId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;rangeBegin&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;rangeEnd&quot;</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="string">&quot;updateTime&quot;</span>: <span class="number">1702187857000</span>,</span><br><span class="line">        <span class="string">&quot;updateUser&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;upgradedTime&quot;</span>: <span class="number">1702007451000</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;memberCode&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;memberId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;memberIdStr&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;memberImage&quot;</span>: <span class="string">&quot;https://thirdwx.qlogo.cn/mmopen/vi_32&quot;</span>,</span><br><span class="line">    <span class="string">&quot;memberName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;memberSources&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="number">1702007451000</span>,</span><br><span class="line">        <span class="string">&quot;createUser&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;isDeleted&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;memberId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;sourceCode&quot;</span>: <span class="string">&quot;linlipro&quot;</span>,</span><br><span class="line">        <span class="string">&quot;updateTime&quot;</span>: <span class="number">1702007451000</span>,</span><br><span class="line">        <span class="string">&quot;updateUser&quot;</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;memberType&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;memo&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phoneAreaCode&quot;</span>: <span class="string">&quot;86&quot;</span>,</span><br><span class="line">    <span class="string">&quot;realName&quot;</span>: <span class="string">&quot;微信用户&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;updateTime&quot;</span>: <span class="number">1735185253000</span>,</span><br><span class="line">    <span class="string">&quot;updateUser&quot;</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><ul><li>接口：<a href="https://m-center-prod-linli.timesgroup.cn/times/member-bff/user-behaviour//api-c/v1/user-behaviour/collect">https://m-center-prod-linli.timesgroup.cn/times/member-bff/user-behaviour//api-c/v1/user-behaviour/collect</a></li><li>请求方法：POST</li><li>请求头<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二步返回来的 token 拼接在 `Bearer `后</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">&#x27;Bearer eyJhbGciOiJSU&#x27;</span>,</span><br><span class="line">    <span class="title class_">Content</span>-<span class="title class_">Type</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>请求参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// memberId 为第三步返回的 memberId</span></span><br><span class="line"><span class="comment">// createTime、sign为当前时间 格式：YYYY-MM-DD HH:mm:ss</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;behaviourId&quot;</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="string">&quot;clientCode&quot;</span>: <span class="string">&quot;sys_linlibang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2024-11-27 08:19:45&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mapPamater&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;sign&quot;</span>: <span class="string">&quot;2024-11-27 08:19:45&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;memberId&quot;</span>: <span class="string">&quot;12332131232133&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回结果<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="自动刷新-token"><a href="#自动刷新-token" class="headerlink" title="自动刷新 token"></a>自动刷新 token</h2><ul><li><p>token 过期时间，当前测试为 8 小时过期，需要在过期前刷新 token，下次签到就不用重新获取验证码登录（理论上可以无限续期）</p></li><li><p>接口：<a href="https://m-center-prod-linli.timesgroup.cn/times/auth/oauth/token">https://m-center-prod-linli.timesgroup.cn/times/auth/oauth/token</a></p></li><li><p>请求方法：POST</p></li><li><p>请求参数（FormData 格式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// grant_type=refresh_token&amp;client_secret=times&amp;client_id=app_c&amp;scope=all&amp;refresh_token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2iMava32uw</span></span><br><span class="line"><span class="comment">// 第一次刷新：refresh_token 需要设置为第二步获取返回来的 refreshToken</span></span><br><span class="line"><span class="comment">// 第一次以后的刷新：refresh_token 获取本接口返回来的 refreshToken 即可</span></span><br><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;client_secret&quot;</span>, <span class="string">&quot;times&quot;</span>)</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;client_id&quot;</span>, <span class="string">&quot;app_c&quot;</span>)</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;scope&quot;</span>, <span class="string">&quot;all&quot;</span>)</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;refresh_token&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;expiresIn&quot;</span>:<span class="number">86399</span>,</span><br><span class="line">    <span class="string">&quot;refreshToken&quot;</span>:<span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;token&quot;</span>:<span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tokenHead&quot;</span>:<span class="string">&quot;Bearer &quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>:<span class="string">&quot;操作成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邻里邦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-细细的红线</title>
      <link href="/2024/12/20/2024-%E7%BB%86%E7%BB%86%E7%9A%84%E7%BA%A2%E7%BA%BF/"/>
      <url>/2024/12/20/2024-%E7%BB%86%E7%BB%86%E7%9A%84%E7%BA%A2%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>又到了一年一度的讲故事时间，那就少罗嗦先看故事吧</p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/The_Thin_Red_Line.jpg" alt="The_Thin_Red_Line.jpg"></p><h2 id="《细细的红线》故事"><a href="#《细细的红线》故事" class="headerlink" title="《细细的红线》故事"></a>《细细的红线》故事</h2><p>1854年，在克里米亚战争的巴拉克拉瓦战役中，英国军队铸就了一个传奇般的军事神话——“细细的红线”。</p><p>当时，苏格兰高地兵团第93团肩负着阻击俄罗斯重骑兵的艰巨任务。由于兵力不足，无法形成坚固的方阵，代理指挥官克林做出了一个近乎疯狂的决策：在面对数量相当的俄国骑兵冲击时，他命令部队正面排列成两列横队，形成了一条细薄的战线。这种战术在当时的军事教条中是不被认可的，因为它风险极高——两列横队过于薄弱，一旦首轮射击未能击溃敌军，他们将直接面临被骑兵碾过的致命威胁。</p><p>然而，这些苏格兰勇士凭借他们高昂的士气和坚不可摧的心理素质，在距离敌军仅28码的近距离，直到能看清马匹眼白时才开火。他们的一次齐射便击倒了俄军一半的兵力，引发了俄军毁灭性的恐慌和溃败。最终，苏格兰高地兵团用他们的鲜血和子弹成功抵御了俄军的三轮冲锋，一战成名。战地记者在报道中写道：“阻挡在排山倒海般冲杀而来的俄军骑兵与英军基地之间的，只有“一道细细的红线。”，这红线指的正是身着红色军服的第93团官兵。</p><p>从此，英语里多了一个短语“细细的红线”(thin red line)，指的就是英国军人面对惊涛骇浪也岿然不动的大无畏精神。</p><h2 id="我的故事"><a href="#我的故事" class="headerlink" title="我的故事"></a>我的故事</h2><p>看完上面的故事，你应该也能联想到我今年也经历了“细细的红线”战役吧，其实并没有哈，只是今年太过于沉溺在短平快的信息流中了，魔法口袋中实在没有其他故事可以掏出来讲而已。其实现实中遇到的那些事，即使当下觉得非常惨烈与沉重，但只要不是生离死别，都远不如历史上的任何大事件。</p><p>今年可以说是非常平平无奇的一年，生活按部就班几乎没有任何波澜。本来也想偷懒不写的，但是不写吧，又觉得这一年真的白过了，于是在脑海里回想了好久，也掏出几件事记录如下吧</p><h3 id="整备小窝"><a href="#整备小窝" class="headerlink" title="整备小窝"></a>整备小窝</h3><p>  继2023年12月29日收楼之后，就开始忙着筹备各种家电家具，其实早在双十一就开始购买了一些，家电类的各种参数对比得眼花缭乱，最后选了美的居多。</p><p>  大件家具去佛山看的（姐夫的弟弟店里），因为是熟人全程看不到一个小时，就全部定好了主选和备选，回来他给我们发了价格表后就基本落定了。</p><p>  柜子也是大头，几乎2023年初份就开始下订了，中间改了一次风格（一开始决定跟一个邻居的一样，后来去看了另一个邻居的样板房，就照搬了另一个邻居的）。</p><p>  最搞笑的时当时还没收楼，房子也还没装修完，甚至瓷砖也没贴，我就着急让柜子定制的人来量尺寸（人家还是从增城跑来南沙的）。他们也没问我装修进度如何，我以为装修到那个程度就可以量了，但是人家以为的是已经都装修好了。<br>  结果他们来量尺的那天房地产那边就开始严管不给非工作人员进入，后来量尺的那个小伙子只能爬围墙进入，现在想想其实是非常危险的。最后他发现居然还差这么多还没装修，我估计他当时心里应该是在骂我的了。但是又不能白跑了这么远的路程，只能硬着头皮量了能量的，说剩下需要量的，等装修完后让我量了拍照给他就可以了。</p><p>  最后就是精装给刷的灰色墙漆，实在是太暗了无法忍受，叫人来重新刷了一遍白色的乳胶漆。前后对比真的差距太明显了。</p><p>  下面放一张最后选定的清单列表：<br>  <details><br>    <summary>点击展开查看大图</summary><br>    <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%AE%B6%E5%85%B7%E5%AE%B6%E7%94%B5%E8%AE%BE%E5%A4%87%E9%80%89%E8%B4%AD%E6%B8%85%E5%8D%95_2024-12-20_15-13-30.png" alt="具家电设备选购清单"><br>  </details></p><h3 id="拔智齿"><a href="#拔智齿" class="headerlink" title="拔智齿"></a>拔智齿</h3><p>  在处理智齿这件事上真的是一把辛酸一把泪，一直以为自己的智齿长得很正不用拔也可以，以前经常睡觉会自己咬到自己，也没想到是因为智齿长的太大了，后来发现右下智齿有点发炎就决定去拔了（2020-07-05）。</p><p>  拔了之后没多久到了11月份发现，下排右边尖牙后后面的那颗牙（应该是叫第二前磨牙）每次喝冷水或者刷牙都非常酸痛，特别是进入十一月份开始转凉了。这个时候才记起来这个牙齿之前不知道啥时候崩了一个角，一直没注意，导致现在已经伤到里面的牙髓神经了（后面问了医生之后才知道是被两颗长得有点歪的智齿往中间挤，结果把它给挤崩的）。此时（2020-11-27）只能不得已做了根管治疗。</p><p>  还剩下三根智齿，睡觉还是经常会咬到自己，于是就去把左下的智齿给拔（2021-12-11），拔的时候医生说要不要顺便把左上的一颗也一起拔了，我说不用。唉，现在想来真是找罪受啊。心想着下面的都拔了，跟上面不会咬合，总不能还咬到自己吧！（自己立下的flag）</p><p>  后来还是逃不了要拔智齿，时间来到了今年的三月份，之前立下的flag，没多久就打脸了，虽然智齿不会咬合咬到自己，但是牙齿跟牙龈的硬度不是一样的啊！那段时间经常发生的不是左边的牙龈被智齿磨出溃疡就是右边磨！这可怎么忍受，说拔就拔（2024-03-30），先拔了一颗，过了一周立马去拔第二颗，终于给拔完了。</p><p>  本来应该两次要给它全拔完的，硬是被拖了近四年，拔了四次！这花钱还不说，还咔咔遭罪。所以听完我的辛酸史，智齿不好的，该拔还是尽早啊！</p><h3 id="大意所致的离职"><a href="#大意所致的离职" class="headerlink" title="大意所致的离职"></a>大意所致的离职</h3><p>  不是很想讲这段经历的，但它确实是属于我今年你的一部分，而且是很深刻的一部分。事情的起因是前公司老板发信息给我有意邀我回前公司（前公司离家比较近，现公司在市区离家较远，每天通勤2.5小时），我确实也厌倦了这么长的通勤时间。</p><p>  于是我也向她表明了自己的态度，经过一番沟通后约定了时间去前公司与技术总监沟通技术方向是否符合。经过沟通后当天技术总监已经向老板表明技术是OK的，然后老板也跟我谈了具体的薪资待遇。虽然是降薪了，但是胜在离家近啊，我欣然同意。</p><p>  此时（9月份），老板表示希望我能在国庆后入职，因为国庆后有一位员工期满离职，我也表示我回去回尽快提交离职申请，可能最慢需要30天，老板也表示理解。当时我也想着要不要让她给我发offer先的，但是我想着都这么熟了，而且技术总监面试也通过了，这应该不是很要紧。</p><p>  当时她也提了一嘴，就是找个时间（她并没有说具体得时间）和现在的技术组长见个面聊一下，以为那个所谓的技术组长我也认识，以前我在这家公司的准备要离职的前几个月他才来的公司。我说“ok啊，没问题”，因为都认识的我就没太放在心上。</p><p>  回到先公司后的第二天，我就提了离职，公司这边也同意了我国庆前离职，last day为9月30日。到周末就约了个时间跟那个技术组长聊了一会让技术，双方都觉得没啥问题。回来后就发现前老板始终没有给我其他的信息反馈了，也没有谈入职事宜。</p><p>  我觉得有点不对劲，就主动发了信息询问。结果才得知，她说技术组长反馈我的技术不符合公司的发展速度！我只能说“好的，很抱歉技术没能符合公司的预期”。我怀着好意提前办理好离职，生怕他们公司没能及时有人进去接手工作，这倒好，把自己的饭碗给砸了。</p><p>  事已至此，只能怪自己太大意了，或者说信任给的太多了，临近国庆，只能先安心做好离职交接工作。</p><p>  国庆先跟老婆回她家带了几天，体验摘百香果和钓鱼的乐趣。然后回老家，因为刚好是重阳节到奶奶迁坟的日子，就顺着回去呆了一周（前后呆了近半个月才回广州）。</p><p>  回到广州后就立马筹备着投简历，虽然这个时候又刚好碰上工作非常难找的时期，但是自己还是比较自信的（flag）。一开始先投家附近的，发现招聘人都是几个月甚至一年前在线的了，有些近期在线的投了也没有回应。就这样投了一周没回应信心瞬间减半。</p><p>  第二周把范围扩大，条件也放宽到外包，依然没有回应。在最后没希望的时候有一家有回应了，后来去面试也没问题，但是工资40%作为绩效，这谁顶的住，果断拒绝了。</p><p>  第三周投到了周三也没有回应，这个时候几乎没信心了。但是天无绝人之路，终于有一家约了面试，周四面完后都OK，虽然有点降薪，但是总好过没工作吧，于是当天就决定接下offer，第二天就立马入职了，入职立马开干…</p><h3 id="湛江之行"><a href="#湛江之行" class="headerlink" title="湛江之行"></a>湛江之行</h3><p>  12月14日在小昌的邀约下，我们俩去湛江见了冰。小昌本来是去参加他表妹的婚礼的，但是冰刚好就在附近，于是萌生想法，趁着周末先去看看冰，然后再去参加婚礼。他跟我提议后我俩一拍即合（其实他是想让我帮他分担他开车的路程）。</p><p>  到的时候已是中午，多年的老友许久未见面，必然是要喝上两杯的。冰也是好菜款待我们俩，龙虾、蟹、鲍鱼、花螺、海鱼、皮皮虾、生蚝，满桌全都是海鲜，吃不完根本吃不完。其实看他买的海鲜也不便宜，看着他买都有点心疼，全程下来花了得有两千来块。</p><p>  接近傍晚吃饱喝足没啥事了，冰带我们去海边远远参观了一下他们的“战舰”，然后回去简单吃个晚餐冰就得要回他的基地了，我们也回酒店休息了。</p><p>  附一张海边的图：<br>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/20241220172537.jpg" alt="战舰"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>  一眨眼有到年末了，收获了脸庞的岁月划痕，也收获了很多无形的资产。总之尽了最大努力了，遗憾也好，痛苦也好，快乐也好，留在2024，2025继续加油！未来还是需要砥砺前行，不放弃就有希望！我的2025要充满干劲争取收获一台属于我们的车和小不点</p><h3 id="送给自己：无论现在是低谷还是高峰，请相信，凡事发生，皆有利于我"><a href="#送给自己：无论现在是低谷还是高峰，请相信，凡事发生，皆有利于我" class="headerlink" title="送给自己：无论现在是低谷还是高峰，请相信，凡事发生，皆有利于我"></a>送给自己：无论现在是低谷还是高峰，请相信，凡事发生，皆有利于我</h3>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2024 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getBoundingClientRect-获取元素的位置</title>
      <link href="/2024/11/27/getBoundingClientRect-%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%8D%E7%BD%AE/"/>
      <url>/2024/11/27/getBoundingClientRect-%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a>getBoundingClientRect()</h2><ul><li>用于获取元素的位置以及大小相关的信息</li><li>DOM 元素的一个方法，返回一个 DOMRect 对象，包含元素的大小及其相对于视口的位置</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">getBoundingClientRect</span>（）</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li>有 6 个属性：top，<code>lef</code>，<code>right</code>，<code>bottom</code>，<code>width</code>，<code>height</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bottom：<span class="number">353</span>,   <span class="comment">//元素底部距离窗口顶部的距离 (等于 y + height)</span></span><br><span class="line">  <span class="attr">height</span>: <span class="number">24</span>,    <span class="comment">//元素的高度</span></span><br><span class="line">  <span class="attr">left</span>: <span class="number">428</span>,     <span class="comment">//元素左侧距离窗口左侧的距离</span></span><br><span class="line">  <span class="attr">right</span>: <span class="number">1140</span>,   <span class="comment">//元素右侧距离窗口左侧的距离(等于 x + width)</span></span><br><span class="line">  <span class="attr">top</span>: <span class="number">329</span>,      <span class="comment">//元素顶部距离窗口的距离</span></span><br><span class="line">  <span class="attr">width</span>: <span class="number">712</span>,    <span class="comment">//元素的宽度</span></span><br><span class="line">  <span class="attr">x</span>: <span class="number">428</span>,        <span class="comment">//元素左上角相对于视口的横坐标</span></span><br><span class="line">  <span class="attr">y</span>: <span class="number">329</span>         <span class="comment">//元素左上角相对于视口的纵坐标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用：检查元素是否在视口内"><a href="#应用：检查元素是否在视口内" class="headerlink" title="应用：检查元素是否在视口内"></a>应用：检查元素是否在视口内</h2><ul><li>获取元素位置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isElementVisible</span> = (<span class="params">el</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取浏览器窗口的宽高</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isElementVisible</span> = (<span class="params">el</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="keyword">const</span> vWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">  <span class="keyword">const</span> vHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确认元素是否在视口内条件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rect.right &lt; 0 ||</span></span><br><span class="line"><span class="comment">// rect.bottom &lt; 0 ||</span></span><br><span class="line"><span class="comment">// rect.left &gt; vWidth ||</span></span><br><span class="line"><span class="comment">// rect.top &gt; vHeight</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/getBoundingClientRect-%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="getBoundingClientRect-示意图"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isElementVisible</span> = (<span class="params">el</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="keyword">const</span> vWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">  <span class="keyword">const</span> vHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    rect.<span class="property">right</span> &lt; <span class="number">0</span> ||</span><br><span class="line">    rect.<span class="property">bottom</span> &lt; <span class="number">0</span> ||</span><br><span class="line">    rect.<span class="property">left</span> &gt; vWidth ||</span><br><span class="line">    rect.<span class="property">top</span> &gt; vHeight</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getBoundingClientRect 方法会使浏览器发生回流和重绘，性能消耗稍大，但兼容性比 Intersection Observer 要好</span></span><br></pre></td></tr></table></figure><ul><li><p>Intersection Observer 方案</p><ul><li>Intersection Observer API 提供了一种异步检测目标元素与祖先元素或 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Viewport">viewport</a> 相交情况变化的方法。在目标元素与视口或者其他指定元素发生交集时和触发配置的回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取要监测的元素</span></span><br><span class="line"><span class="keyword">const</span> boxes = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.box&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建观察者，配置回调函数</span></span><br><span class="line"><span class="comment">// 通过 isIntersecting 属性判断元素与视口是否相交</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(entry.<span class="property">target</span>, entry.<span class="property">isIntersecting</span> ? <span class="string">&quot;visible&quot;</span> : <span class="string">&quot;invisible&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">boxes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">box</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(box)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元素位置 </tag>
            
            <tag> getBoundingClientRect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web端视频时间轴预览图思路</title>
      <link href="/2024/11/25/Web%E7%AB%AF%E8%A7%86%E9%A2%91%E6%97%B6%E9%97%B4%E8%BD%B4%E9%A2%84%E8%A7%88%E5%9B%BE%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/11/25/Web%E7%AB%AF%E8%A7%86%E9%A2%91%E6%97%B6%E9%97%B4%E8%BD%B4%E9%A2%84%E8%A7%88%E5%9B%BE%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="Web端视频时间轴预览图思路"><a href="#Web端视频时间轴预览图思路" class="headerlink" title="Web端视频时间轴预览图思路"></a>Web端视频时间轴预览图思路</h3><ul><li><p>在鼠标首次移动到时间轴上时，获取到一雪碧图，它包含了鼠标所指位置附近的预览画面。在鼠标沿着时间滑动的时候，会根据判断是否需要请求新的雪碧图</p></li><li><p>接口返回一个数据是让前端拿到视频的预览信息，可以定位到预览图在哪个 URL 的几行几列，后端则负责雪碧图的生成</p></li><li><p>后端可以通过FFmpeg抽取关键帧</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.dreamfever.me/posts/2024-07-07-ffmpeg-sprite-sheet/">https://blog.dreamfever.me/posts/2024-07-07-ffmpeg-sprite-sheet/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的调试工具PageSpy</title>
      <link href="/2024/10/18/%E6%9C%89%E8%B6%A3%E7%9A%84%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7PageSpy/"/>
      <url>/2024/10/18/%E6%9C%89%E8%B6%A3%E7%9A%84%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7PageSpy/</url>
      
        <content type="html"><![CDATA[<h2 id="贴地址"><a href="#贴地址" class="headerlink" title="贴地址"></a>贴地址</h2><ul><li>PageSpy：<a href="https://pagespy.org/">https://pagespy.org</a></li></ul><h2 id="PageSpy"><a href="#PageSpy" class="headerlink" title="PageSpy"></a>PageSpy</h2><ul><li>PageSpy 是一款兼容 Web &#x2F; 小程序 &#x2F; React Native &#x2F; 鸿蒙 App 等平台项目的开源调试平台。基于对原生 API 的封装，它将调用原生方法时的参数进行过滤、转化，整理成一定格式的消息供调试端消费；调试端收到消息数据后，提供类似本地控制台的功能界面将数据呈现出来。</li></ul><h2 id="现实调试存在问题与PageSpy优势"><a href="#现实调试存在问题与PageSpy优势" class="headerlink" title="现实调试存在问题与PageSpy优势"></a>现实调试存在问题与PageSpy优势</h2><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/why-is-pagespy-zh-a37ee831.png" alt="why-is-pagespy-zh-a37ee831"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><p>日常开发中，项目出现问题基本都会通过 本地浏览器控制台 排查。可有些时候因为无法使用控制台，而导致排查故障需要多花费很多时间和人力，比如：</p><ul><li>真机调试 H5：以往有产品提供了可以在 H5 上查看信息的面板，但真机屏幕太小操作不便、显示不友好，以及数据会被截断；</li><li>远程办公、异地协同：传统沟通方式如邮件、电话、视频等，沟通问题的周期长、效率不高、故障信息不全面，容易误解误判；</li><li>用户设备白屏：除了需要提前获知出现问题的用户信息，定位问题的方式包括查看数据监控、日志分析，甚至还要跑到客户现场等，这些方式依赖排障人员要理解业务场景、技术实现；</li></ul></li><li><p>网站全局的 “问题反馈” 组件</p><ul><li>大多注重用户体验的网站，会在产品端为用户提供反馈问题的表单组件。从用户的角度这确实会提升好感，但用户提交的内容对于排查问题的帮助可能并不大，根本原因是：用户提交的基本上是文字概述和截图，或许还包含用户信息，但开发者更希望看到的是：<ul><li>用户是如何操作的；</li><li>伴随着操作，程序的运行时行为数据。例如：打印的日志、发出的网络请求以及响应数据等；</li></ul></li></ul></li></ul><h2 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h2><h3 id="PageSpy-在线实时调试"><a href="#PageSpy-在线实时调试" class="headerlink" title="PageSpy 在线实时调试"></a>PageSpy 在线实时调试</h3><ul><li>产品联调期间，测试人员上报问题后，开发者通过 「 PageSpy 在线实时调试」 查看程序的运行数据，其中包括实时的 Console 、Network 、Page 、Storage 以及 System 信息，还可以发送代码到真机上执行；</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/online-debug.png"></p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/pagespy-devtools.png"></p><h3 id="PageSpy-日志回放调试"><a href="#PageSpy-日志回放调试" class="headerlink" title="PageSpy 日志回放调试"></a>PageSpy 日志回放调试</h3><ul><li>系统接入 PageSpy 之后，收到类似的反馈只需告诉对方 上传日志 即可</li><li>对方上传完成后就可以前往回放调试，开发者除了可以看到运行时数据外，还可以看到用户的操作轨迹</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/replay-debug.png"></p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/replay-page.gif"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="部署PageSpy服务"><a href="#部署PageSpy服务" class="headerlink" title="部署PageSpy服务"></a>部署PageSpy服务</h3><ul><li>使用 Docker 部署<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> <span class="literal">--restart</span>=always <span class="literal">-v</span> ./log:/app/log <span class="literal">-v</span> ./<span class="keyword">data</span>:/app/<span class="keyword">data</span> <span class="literal">-p</span> <span class="number">6752</span>:<span class="number">6752</span> <span class="literal">--name</span>=<span class="string">&quot;pageSpy&quot;</span> ghcr.io/huolalatech/page<span class="literal">-spy-web</span>:latest</span><br></pre></td></tr></table></figure></li><li>使用 Node 部署<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @huolala<span class="literal">-tech</span>/page<span class="literal">-spy-api</span>@latest &amp;&amp; page<span class="literal">-spy-api</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm install <span class="literal">-g</span> @huolala<span class="literal">-tech</span>/page<span class="literal">-spy-api</span>@latest &amp;&amp; page<span class="literal">-spy-api</span></span><br></pre></td></tr></table></figure></li><li>启动完成后，打开浏览器访问 <a href="http://localhost:6752/">http://localhost:6752</a> 体验</li></ul><h3 id="使用PageSpy"><a href="#使用PageSpy" class="headerlink" title="使用PageSpy"></a>使用PageSpy</h3><ul><li>在客户端的项目中加载 PageSpy:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- PageSpy SDK --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://&lt;your-pagespy-host&gt;/page-spy/index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插件（非必须，但建议使用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://&lt;your-pagespy-host&gt;/plugin/data-harbor/index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://&lt;your-pagespy-host&gt;/plugin/rrweb/index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>初始化 PageSpy 和插件，它们的初始化参数都提供了可选的 配置项 用于自定义 SDK 的行为：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">$harbor</span> = <span class="keyword">new</span> <span class="title class_">DataHarborPlugin</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">$rrweb</span> = <span class="keyword">new</span> <span class="title class_">RRWebPlugin</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  [<span class="variable language_">window</span>.<span class="property">$harbor</span>, <span class="variable language_">window</span>.<span class="property">$rrweb</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">PageSpy</span>.<span class="title function_">registerPlugin</span>(p)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">$pageSpy</span> = <span class="keyword">new</span> <span class="title class_">PageSpy</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>引入的插件提供了哪些功能？</li><li>DataHarborPlugin 和 RRWebPlugin 两个插件，主要用于拓展 PageSpy 的能力：<ul><li>DataHarborPlugin：PageSpy 本身仅支持在线模式，即调试期间「客户端和调试端必须同时在线」，DataHarborPlugin 让 PageSpy 实现了离线模式的调试。点击 离线日志回放 查看更多详细信息；</li><li>RRWebPlugin：记录用户操作轨迹，底层使用 rrweb。通常和 DataHarborPlugin 绑定在一起使用。</li></ul></li></ul><h3 id="在小程序中使用"><a href="#在小程序中使用" class="headerlink" title="在小程序中使用"></a>在小程序中使用</h3><ul><li>第一步: 在项目中安装依赖。我们提供了几种小程序平台的 SDK，请根据需要安装：<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微信小程序</span></span><br><span class="line">yarn add @huolala<span class="literal">-tech</span>/page<span class="literal">-spy-wechat</span>@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付宝小程序</span></span><br><span class="line">yarn add @huolala<span class="literal">-tech</span>/page<span class="literal">-spy-alipay</span>@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># UniAPP</span></span><br><span class="line">yarn add @huolala<span class="literal">-tech</span>/page<span class="literal">-spy-uniapp</span>@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Taro</span></span><br><span class="line">yarn add @huolala<span class="literal">-tech</span>/page<span class="literal">-spy-taro</span>@latest</span><br></pre></td></tr></table></figure></li><li>第二步: 将 PageSpy 服务域名填入小程序的 http、websocket 请求白名单中。注意除了开发环境，小程序强制要求使用 https 和 wss 协议：<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://&lt;your<span class="literal">-pagespy-host</span>&gt;</span><br><span class="line">wss://&lt;your<span class="literal">-pagespy-host</span>&gt;</span><br></pre></td></tr></table></figure></li><li>第三步: 在入口文件中引入 SDK 并实例化，初始化参数提供了可选的 配置项 用于自定义 SDK 的行为：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PageSpy</span> <span class="keyword">from</span> <span class="string">&#x27;@huolala-tech/page-spy-wechat&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PageSpy</span>(&#123;</span><br><span class="line">  <span class="attr">api</span>: <span class="string">&quot;&lt;your-pagespy-host&gt;&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="在框架中集成"><a href="#在框架中集成" class="headerlink" title="在框架中集成"></a>在框架中集成</h3><ul><li>React：CodeSandbox - <a href="https://codesandbox.io/p/sandbox/page-spy-with-react-k3pzzt">PageSpy in React</a></li><li>Vue：CodeSandbox - <a href="https://codesandbox.io/p/sandbox/page-spy-with-vue-ft35qs">PageSpy in Vue</a></li><li>Svelte：CodeSandbox - <a href="https://codesandbox.io/p/sandbox/page-spy-with-svelte-p6mxd6">PageSpy in Svelte</a></li><li>Angular：CodeSandbox - <a href="https://codesandbox.io/p/sandbox/page-spy-with-angular-6wg3ps">PageSpy in Angular</a></li><li>Nextjs：CodeSandbox - <a href="https://codesandbox.io/p/sandbox/page-spy-with-nextjs-5htxv5">PageSpy in Nextjs</a></li><li>Nuxtjs：CodeSandbox - <a href="https://codesandbox.io/p/sandbox/page-spy-with-nuxtjs-8znq22">PageSpy in Nuxtjs</a></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="PageSpy-1"><a href="#PageSpy-1" class="headerlink" title="PageSpy"></a>PageSpy</h3><ul><li>约定实例变量名称为 $pageSpy &#x3D; new PageSpy(…)；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)</span><br><span class="line">$pageSpy.<span class="title function_">updateRoomInfo</span>()</span><br><span class="line">$pageSpy.<span class="title function_">abort</span>()</span><br><span class="line"><span class="title class_">PageSpy</span>.<span class="title function_">registerPlugin</span>()</span><br><span class="line"><span class="title class_">PageSpy</span>.<span class="property">pluginsWithOrder</span></span><br><span class="line">$pageSpy.<span class="property">version</span></span><br><span class="line">$pageSpy.<span class="property">config</span></span><br><span class="line">$pageSpy.<span class="property">socketStore</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>DataHarborPlugin</li><li>约定实例变量名称为 $harbor &#x3D; new DataHarborPlugin(…)；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)</span><br><span class="line">$harbor.<span class="title function_">onOfflineLog</span>()</span><br></pre></td></tr></table></figure></li></ul><h3 id="RRWebPlugin"><a href="#RRWebPlugin" class="headerlink" title="RRWebPlugin"></a>RRWebPlugin</h3><ul><li>约定实例变量名称为 $rrweb &#x3D; new RRWebPlugin(…)；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="API参考地址"><a href="#API参考地址" class="headerlink" title="API参考地址"></a>API参考地址</h3><ul><li><a href="https://www.pagespy.org/#/docs/api">https://www.pagespy.org/#/docs/api</a></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.v2ex.com/t/107906">https://www.v2ex.com/t/107906</a></li><li><a href="https://www.pagespy.org/">https://www.pagespy.org</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 调试工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PageSpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>窄门大道</title>
      <link href="/2024/10/14/%E7%AA%84%E9%97%A8%E5%A4%A7%E9%81%93/"/>
      <url>/2024/10/14/%E7%AA%84%E9%97%A8%E5%A4%A7%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h3 id="我们需要的是一份水涨船高的事业"><a href="#我们需要的是一份水涨船高的事业" class="headerlink" title="我们需要的是一份水涨船高的事业"></a>我们需要的是一份水涨船高的事业</h3><p>工作❌  事业✅</p><p>我们需要的并不是一份工作</p><p>而是一份水涨船高的事业</p><p>我们没有选择</p><p>因为随着年龄的增长</p><p>人生的风险是指数增加的</p><p>而不是线性增加的</p><p>走了一个越来越陡峭的线</p><p>增加的速度会非常快</p><p>越到后面你会发现麻绳越来越细</p><p>可能还断了 越断越多 越断越快</p><p>这就是指数增长的风险</p><p>但工资是怎么样的呢</p><p>工资是线性增长的</p><p>这还是在特别理想的情况下</p><p>通常是常数，也就是不变</p><p>可能三年也可能五年都不变</p><p>不但不变，搞不好在当下这个环境还降了</p><p>这种事情你听过吗</p><p>以前是从来没有听过这种事情的</p><p>至少在我们的成长经历中是没有经历过的</p><p>这种线性的增加速度怎么赶得上指数增加速度</p><p>我们没有选择</p><p>我们需要的是一份水涨船高的事业</p><p>我们要去哪里</p><p>我们当然要去更高远处</p><p>但是首先知道在哪里</p><p>然后怎么去</p><h3 id="这世界是一款叫生的游戏"><a href="#这世界是一款叫生的游戏" class="headerlink" title="这世界是一款叫生的游戏"></a>这世界是一款叫生的游戏</h3><p>这世界是一款游戏：生</p><p>一个游戏它越是高级越是复杂越是牛</p><p>它的规则就越是简单</p><p>比如像我们这款游戏</p><p>生有两个规则</p><p>第一个：要长久</p><p>第二个：要繁荣</p><p>这两条规则是一切的根本大法</p><p>符合这两条游戏规则的就可以继续玩</p><p>不符合那就没戏</p><h3 id="三追求"><a href="#三追求" class="headerlink" title="三追求"></a>三追求</h3><p>这是世界是一款游戏叫“生”</p><p>那我们每个人在其中都是一款子游戏，叫人生</p><p>它既然是一款游戏，那它就应该有道道、有攻略</p><p>个人生的结构应是怎样的呢</p><p>硬要给它划分你会发现其实很简单</p><p>可以给他划分成三个层次</p><p>我们把整个世界整个社会看成一个大机器</p><p>你会发现第一个层面</p><p>也是绝大部分人所在的层面</p><p>“技能层面”</p><p>在这个层面的人需要把自己打磨成这个大机器需要的某种零件或工具</p><p>然后安装进去不间断运行</p><p>大机器就能给我们一个约定好的回报——工资or奖金</p><p>它的好处就是稳，短期内几乎没有风险</p><p>弊端就是长期几乎是无穷大的风险</p><p>这是第一层，我想绝大部分人所在这个层面，无需多说</p><p>看第二层</p><p>第二层突然就只剩5%的人了，或者可能不到5%</p><p>“产权层面”</p><p>这个层面的人，他永远只思考一件事情</p><p>就是我们怎么才能在这个大机器上拥有点什么</p><p>让这个大机器的某一部分是我的</p><p>广厦千万间能不能有我一间，然我我租出去</p><p>他永远在想这个问题</p><p>做得好的呢他这个广厦千万间可能就在北上广</p><p>做得不好的呢可能在十八线</p><p>所以产权这个游戏他范围非常宽广</p><p>他不光投资算，创业也算</p><p>甚至自己写个小说或者创业也算</p><p>包括哪怕生个娃其实本质上也算一个产权游戏</p><p>这属于第二个层面</p><p>第三个层面就更有意思了</p><p>只有5%里的5%的人了</p><p>大约就是千分之一到万分之一的人在玩这个游戏</p><p>“关系层面”</p><p>关系这个层面它有意思的在哪里</p><p>他在意的是去定义这个机器的功能</p><p>他不是拥有，他也不需要拥有</p><p>因为你想他在画圈的时候，定义那块干什么，那块怎么组织</p><p>他连这个圈都能画了</p><p>他还不能决定这个圈是谁的吗</p><p>这样你会发现这规律、这结构出来了</p><p>“关系定义了产权”</p><p>“产权定义了技能”</p><p>一切决定了我们的命运的走向</p><h3 id="番外：文凭就是产品合格证"><a href="#番外：文凭就是产品合格证" class="headerlink" title="番外：文凭就是产品合格证"></a>番外：文凭就是产品合格证</h3><p>教育的目的是干什么？</p><p>肯定不是为了拓宽人类认知边界</p><p>而是为了培养一批“通用生物计算机”</p><p>这样的话文凭就是产品合格证</p><p>而且还是那种不太靠谱的合格证</p><p>那合格证的目的是什么？</p><p>是为了博得客户的信任</p><p>既然是为了博得客户的信任</p><p>那我们花费这么大的代价</p><p>这么长的时间</p><p>这个代价是不是有点太大了</p>]]></content>
      
      
      <categories>
          
          <category> 窄门大道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 窄门大道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易瀑布流布局</title>
      <link href="/2024/09/30/%E7%AE%80%E6%98%93%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
      <url>/2024/09/30/%E7%AE%80%E6%98%93%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">column-count</span>: <span class="number">4</span>; <span class="comment">/* 定义列数 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">column-gap</span>: <span class="number">16px</span>; <span class="comment">/* 定义列与列之间的间隙 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">16px</span>; <span class="comment">/* 定义每项的底部间隙 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">break-inside</span>: avoid; <span class="comment">/* 防止内容被分割到不同的列 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 11<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 14<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 15<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><style>  .container-test {    column-count: 4; /* 定义列数 */    column-gap: 16px; /* 定义列与列之间的间隙 */  }  .item-test {    background-color: #f2f2f2;    padding: 8px;    margin-bottom: 16px; /* 定义每项的底部间隙 */    break-inside: avoid; /* 防止内容被分割到不同的列 */  }</style><div class="container-test">  <div class="item-test">Item 1</div>  <div class="item-test">Item 2 Item 2 Item 2 Item 2 Item 2 Item 2 Item 2 </div>  <div class="item-test">Item 3</div>  <div class="item-test">Item 4 Item 4 Item 4 Item 4 Item 4 Item 4 Item 4 Item 4 Item 4 Item 4 Item 4 </div>  <div class="item-test">Item 5</div>  <div class="item-test">Item 6</div>  <div class="item-test">Item 7</div>  <div class="item-test">Item 8</div>  <div class="item-test">Item 9 Item 9 Item 9 Item 9</div>  <div class="item-test">Item 10</div>  <div class="item-test">Item 11</div>  <div class="item-test">Item 12</div>  <div class="item-test">Item 13</div>  <div class="item-test">Item 14</div>  <div class="item-test">Item 15</div></div>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>治大国</title>
      <link href="/2024/09/30/%E6%B2%BB%E5%A4%A7%E5%9B%BD/"/>
      <url>/2024/09/30/%E6%B2%BB%E5%A4%A7%E5%9B%BD/</url>
      
        <content type="html"><![CDATA[<p>治大国，若烹小鲜。</p><p>以道莅天下，其鬼不神；非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。</p><p>夫两不相伤，故德交归焉。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mr.Go</title>
      <link href="/2024/09/22/Mr-Go/"/>
      <url>/2024/09/22/Mr-Go/</url>
      
        <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>每个 <code>Go</code> 程序都由包构成</li><li>程序都从 <code>main</code> 包开始运行</li><li>下面的程序通过导入路径 <code>&quot;fmt&quot;</code> 和 <code>&quot;math/rand&quot;</code> 来使用这两个包</li><li>按照约定，包名与导入路径的最后一个元素一致，例如，<code>&quot;math/rand&quot;</code> 包中的源码均以 <code>package rand</code> 语句开始。就像 <code>mian</code> 包以 <code>package main</code> 开始<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我最喜欢的数字是 &quot;</span>, rand.Intn(<span class="number">10</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><ul><li>此代码用圆括号将导入的包分成一组，这是“分组”形式的导入语句。</li><li>当然你也可以编写多个导入语句，例如：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br></pre></td></tr></table></figure></li><li>不过使用分组导入语句要更好。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;现在你有了 %g 个问题.&quot;</span>, math.Sqrt(<span class="number">7</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导出名"><a href="#导出名" class="headerlink" title="导出名"></a>导出名</h2><ul><li>在 <code>Go</code> 中，如果一个名字以大写字母开头，那么它就是已导出的。例如，<code>Pizza</code> 就是个已导出名，<code>Pi</code> 也同样，它导出自 math 包。</li><li><code>pizza</code> 和 <code>pi</code> 并未以大写字母开头，所以它们是未导出的。</li><li>在导入一个包时，你只能引用其中已导出的名字。 任何「未导出」的名字在该包外均无法访问。</li><li>执行代码，观察错误信息。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prog.<span class="keyword">go</span>:<span class="number">9</span>:<span class="number">19</span>: undefined: math.pi</span><br></pre></td></tr></table></figure></li><li>要修复错误，请将 <code>math.pi</code> 改名为 <code>math.Pi</code>，然后再试着执行一次。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(math.pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>函数可接受零个或多个参数。</li><li>在本例中，<code>add</code> 接受两个 <code>int</code> 类型的参数。</li><li>注意类型在变量名的后面。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="函数形参类型简写"><a href="#函数形参类型简写" class="headerlink" title="函数形参类型简写"></a>函数形参类型简写</h2><ul><li>当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其它都可以省略。</li><li>在上例中，<code>x int, y int</code>，可以被简写为 <code>x, y int</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><ul><li>函数可以返回任意数量的返回值。</li><li>swap 函数返回了两个字符串。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := swap(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="带名字的返回值"><a href="#带名字的返回值" class="headerlink" title="带名字的返回值"></a>带名字的返回值</h2><ul><li><code>Go</code> 的返回值可被命名，它们会被视作定义在函数顶部的变量。</li><li>返回值的命名应当能反应其含义，它可以作为文档使用。</li><li>没有参数的 <code>return</code> 语句会直接返回已命名的返回值，也就是「裸」返回值。</li><li>裸返回语句应当仅用在下面这样的短函数中。在长的函数中它们会影响代码的可读性。</li><li>命名返回值确定返回值为 <code>int</code> 类型<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123;</span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(split(<span class="number">17</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><code>var</code> 语句用于声明一系列变量。和函数的参数列表一样，类型在最后。</li><li>如例中所示，<code>var</code> 语句可以出现在包或函数的层级。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, python, java <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">fmt.Println(i, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h2><ul><li>变量声明可以包含初始值，每个变量对应一个。</li><li>如果提供了初始值，则类型可以省略；变量会从初始值中推断出类型。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line">fmt.Println(i, j, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h2><ul><li>在函数中，短赋值语句 <code>:=</code> 可在隐式确定类型的 <code>var</code> 声明中使用。</li><li>函数外的每个语句都 必须 以关键字开始（<code>var</code>、<code>func</code> 等），因此 <code>:=</code> 结构不能在函数外使用。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">k := <span class="number">3</span></span><br><span class="line">c, python, java := <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(i, j, k, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li>Go 的基本类型有<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span></span><br><span class="line"><span class="type">string</span></span><br><span class="line"><span class="type">int</span>  <span class="type">int8</span>  <span class="type">int16</span>  <span class="type">int32</span>  <span class="type">int64</span></span><br><span class="line"><span class="type">uint</span> <span class="type">uint8</span> <span class="type">uint16</span> <span class="type">uint32</span> <span class="type">uint64</span> <span class="type">uintptr</span></span><br><span class="line"><span class="type">byte</span> <span class="comment">// uint8 的别名</span></span><br><span class="line"><span class="type">rune</span> <span class="comment">// int32 的别名</span></span><br><span class="line">     <span class="comment">// 表示一个 Unicode 码位</span></span><br><span class="line"><span class="type">float32</span> <span class="type">float64</span></span><br><span class="line"><span class="type">complex64</span> <span class="type">complex128</span></span><br></pre></td></tr></table></figure></li><li>本例展示了几种类型的变量。 和导入语句一样，变量声明也可以「分组」成一个代码块。</li><li><code>int</code>、<code>uint</code> 和 <code>uintptr</code> 类型在 32-位系统上通常为 32-位宽，在 64-位系统上则为 64-位宽。当你需要一个整数值时应使用 <code>int</code> 类型， 除非你有特殊的理由使用固定大小或无符号的整数类型。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ToBe   <span class="type">bool</span>       = <span class="literal">false</span></span><br><span class="line">MaxInt <span class="type">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">z      <span class="type">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;类型：%T 值：%v\n&quot;</span>, ToBe, ToBe)</span><br><span class="line">fmt.Printf(<span class="string">&quot;类型：%T 值：%v\n&quot;</span>, MaxInt, MaxInt)</span><br><span class="line">fmt.Printf(<span class="string">&quot;类型：%T 值：%v\n&quot;</span>, z, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h2><ul><li>没有明确初始化的变量声明会被赋予对应类型的 零值。</li><li>零值是：<ul><li>数值类型为 0，</li><li>布尔类型为 false，</li><li>字符串为 “”（空字符串）。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v %v %v %q\n&quot;</span>, i, f, b, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>表达式 <code>T(v)</code> 将值 <code>v</code> 转换为类型 <code>T</code>。</li><li>一些数值类型的转换：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure>或者，更加简短的形式：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="type">float64</span>(i)</span><br><span class="line">u := <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure></li><li>与 <code>C</code> 不同的是，<code>Go</code> 在不同类型的项之间赋值时需要显式转换。试着移除例子中的 float64 或 uint 的类型转换，看看会发生什么。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = math.Sqrt(<span class="type">float64</span>(x*x + y*y))</span><br><span class="line"><span class="keyword">var</span> z <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br><span class="line">fmt.Println(x, y, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><ul><li>在声明一个变量而不指定其类型时（即使用不带类型的 <code>:=</code> 语法 <code>var =</code> 表达式语法），变量的类型会通过右值推断出来。</li><li>当声明的右值确定了类型时，新变量的类型与其相同：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">j := i <span class="comment">// j 也是一个 int</span></span><br></pre></td></tr></table></figure></li><li>不过当右边包含未指明类型的数值常量时，新变量的类型就可能是 <code>int</code>、<code>float64</code> 或 <code>complex128</code> 了，这取决于常量的精度：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span>           <span class="comment">// int</span></span><br><span class="line">f := <span class="number">3.142</span>        <span class="comment">// float64</span></span><br><span class="line">g := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex128</span></span><br></pre></td></tr></table></figure></li><li>试着修改示例代码中 v 的初始值，并观察它是如何影响类型的。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := <span class="number">42</span> <span class="comment">// 修改这里看看！</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;v is of type %T\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>常量的声明与变量类似，只不过使用 <code>const</code> 关键字。</li><li>常量可以是字符、字符串、布尔值或数值。</li><li>常量不能用 <code>:=</code> 语法声明。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> World = <span class="string">&quot;世界&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Hello&quot;</span>, World)</span><br><span class="line">fmt.Println(<span class="string">&quot;Happy&quot;</span>, Pi, <span class="string">&quot;Day&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Truth = <span class="literal">true</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Go rules?&quot;</span>, Truth)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h2><ul><li>数值常量是高精度的值。</li><li>一个未指定类型的常量由上下文来决定其类型。</li><li>再试着一下输出 <code>needInt(Big)</code> 吧。</li><li>（<code>int</code> 类型可以存储最大 <code>64</code> 位的整数，根据平台不同有时会更小。）<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// 将 1 左移 100 位来创建一个非常大的数字</span></span><br><span class="line"><span class="comment">// 即这个数的二进制是 1 后面跟着 100 个 0</span></span><br><span class="line">Big = <span class="number">1</span> &lt;&lt; <span class="number">100</span></span><br><span class="line"><span class="comment">// 再往右移 99 位，即 Small = 1 &lt;&lt; 1，或者说 Small = 2</span></span><br><span class="line">Small = Big &gt;&gt; <span class="number">99</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">needInt</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> x*<span class="number">10</span> + <span class="number">1</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">needFloat</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * <span class="number">0.1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(needInt(Small))</span><br><span class="line">fmt.Println(needFloat(Small))</span><br><span class="line">fmt.Println(needFloat(Big))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个新的css属性：field-sizing</title>
      <link href="/2024/09/20/%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84css%E5%B1%9E%E6%80%A7%EF%BC%9Afield-sizing/"/>
      <url>/2024/09/20/%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84css%E5%B1%9E%E6%80%A7%EF%BC%9Afield-sizing/</url>
      
        <content type="html"><![CDATA[<h2 id="field-sizing-控制表单尺寸自适应的CSS"><a href="#field-sizing-控制表单尺寸自适应的CSS" class="headerlink" title="field-sizing 控制表单尺寸自适应的CSS"></a>field-sizing 控制表单尺寸自适应的CSS</h2><ul><li>语法<ul><li>fixed，输入框、文本区域和下拉选择，无论内容如何，​​它们宽高都是固定</li><li>content，输入框、文本区域和下拉选择元素的宽高会根据内容的大小而变化</li></ul></li><li>需要 Chrome 123版本以上才能查看效果<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">field-sizing</span>: fixed | content</span><br></pre></td></tr></table></figure></li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;min-height:300px; width: 300px; border:2px solid #ccc;padding: 5px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid #ccc; min-width: 100px;max-width: 300px; field-sizing: content&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;field-sizing: content; width: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">style</span>=<span class="string">&quot;field-sizing: content; display:block;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>测试数据<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>测试一条很长很长很长很长很长的数据<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当前环境不可预览效果，可复制代码到html预览查看<div style="min-height:300px; width: 300px; border:2px solid #ccc;padding: 5px;"><input style="border:1px solid #ccc; min-width: 100px;max-width: 300px; field-sizing: content" /><textarea style="field-sizing: content; width: 200px;"></textarea><div>  <select style="field-sizing: content; display:block;">    <option value="3">测试</option>    <option value="2">测试数据</option>    <option value="1">测试一条很长很长很长很长很长的数据</option>  </select></div></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>故失道而后德</title>
      <link href="/2024/09/20/%E6%95%85%E5%A4%B1%E9%81%93%E8%80%8C%E5%90%8E%E5%BE%B7/"/>
      <url>/2024/09/20/%E6%95%85%E5%A4%B1%E9%81%93%E8%80%8C%E5%90%8E%E5%BE%B7/</url>
      
        <content type="html"><![CDATA[<p>故失道而后德，失德面后仁，失仁而后义，失义而后礼。</p><p>夫礼者，忠信之薄，而乱之首。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>视图转换动画-startViewTransition</title>
      <link href="/2024/08/28/%E8%A7%86%E5%9B%BE%E8%BD%AC%E6%8D%A2%E5%8A%A8%E7%94%BB-startViewTransition/"/>
      <url>/2024/08/28/%E8%A7%86%E5%9B%BE%E8%BD%AC%E6%8D%A2%E5%8A%A8%E7%94%BB-startViewTransition/</url>
      
        <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><div style="widht: 1000px; height: 250px; background: #ccc; display: flex;">  <div style="flex:1; border-right:1px solid #000; position:relative;">    <div id="box1" style="position:absolute; left:0; top:0; width:50px; height:50px;background:#58bc58;">有效果的</div>  </div>  <div style="flex:1; position:relative;">    <div id="box2" style="position:absolute; left:0; top:0; width:50px; height:50px; background:#58b;">没有效果的</div>  </div></div><div>  <button id='changeBtn' style="margin-top:10px; user-select:none;">移动位置</button></div><script>  let changeBtn = document.getElementById('changeBtn')  let index1 = 0  let index2 = 0  changeBtn.onclick = async (ev)=>{    console.log(ev)    let box2 = document.getElementById('box2')    let box3 = document.getElementById('box1')    if( index2%2 === 0 ){      box2.style.left = '150px'      box2.style.top = '150px'    } else {      box2.style.left = '0px'      box2.style.top = '0px'    }    index2++    if( document.startViewTransition ){ // 支持        document.startViewTransition(() => { // 开始视图变换        let box1 = document.getElementById('box1')        if( index1%2 === 0 ){          box1.style.left = '150px'          box1.style.top = '150px'        } else {          box1.style.left = '0px'          box1.style.top = '0px'        }        index1++      });    } else { // 不支持      console.log('不支持startViewTransition')    }  }</script><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用document.startViewTransition，浏览器会捕捉当前页面的状态，类似于实时截图，或者“快照”</span></span><br><span class="line"><span class="comment">// 执行实际的 dom 变化，再次记录变化后的页面状态（截图）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发两者的过渡动画，包括透明度、位移等变化，也可以自定义 CSS 动画</span></span><br><span class="line"><span class="comment">// 默认情况下是整个页面的淡入淡出变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ::view-transition-old表示「旧视图」的状态，也就是变化之前的截图</span></span><br><span class="line"><span class="comment">// ::view-transition-new表示「新视图」的状态，也就是变化之后的截图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要指定具体元素的变化，可以给该元素指定 view-transition-name</span></span><br><span class="line"><span class="comment">// 前后变化不一定要同一元素，浏览器是根据 view-transition-name 寻找的</span></span><br><span class="line"><span class="comment">// 同一时间页面上不能出现两个相同 view-transition-name 的元素，不然视图变化会失效</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;widht: 1000px; height: 250px; background: #ccc; display: flex;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;flex:1; border-right:1px solid #000; position:relative;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute; left:0; top:0; width:50px; height:50px;background:#58bc58;&quot;</span>&gt;</span>有效果的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;flex:1; position:relative;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute; left:0; top:0; width:50px; height:50px; background:#58b;&quot;</span>&gt;</span>没有效果的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;changeBtn&#x27;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:10px; user-select:none;&quot;</span>&gt;</span>移动位置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> changeBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;changeBtn&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> index1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> index2 = <span class="number">0</span></span><br><span class="line">changeBtn.<span class="property">onclick</span> = <span class="title function_">async</span> (ev)=&gt;&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ev)</span><br><span class="line">  <span class="keyword">let</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box2&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> box3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span>( index2%<span class="number">2</span> === <span class="number">0</span> )&#123;</span><br><span class="line">    box2.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;150px&#x27;</span></span><br><span class="line">    box2.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;150px&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    box2.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">    box2.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  index2++</span><br><span class="line">  <span class="keyword">if</span>( <span class="variable language_">document</span>.<span class="property">startViewTransition</span> )&#123; <span class="comment">// 支持</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">startViewTransition</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 开始视图变换</span></span><br><span class="line">      <span class="keyword">let</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span>( index1%<span class="number">2</span> === <span class="number">0</span> )&#123;</span><br><span class="line">        box1.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;150px&#x27;</span></span><br><span class="line">        box1.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;150px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        box1.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">        box1.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      index1++</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不支持</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持startViewTransition&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> startViewTransition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-module相关</title>
      <link href="/2024/08/14/go-module%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/08/14/go-module%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="go-mod-命令"><a href="#go-mod-命令" class="headerlink" title="go mod 命令"></a>go mod 命令</h2><ul><li><code>go mod init</code> 模块名初始化<code>go mod</code>，生成<code>go.mod</code>文件，后可接参数指定<code>module</code>名。</li><li><code>go mod download</code> 手动触发下载依赖包到本地cache(默认为<code>$GOPATH/pkg/mod</code>目录)</li><li><code>go mod graph</code> 打印项目的模块依赖结构</li><li><code>go mod tidy</code> 添加缺少的包，且删除无用的包</li><li><code>go mod verify</code> 校验模块是否被篡改过</li><li><code>go mod why</code> 查看为什么需要依赖</li><li><code>go mod vendor</code> 导出项目所有依赖到<code>vendor</code>下</li><li><code>go mod edit -fmt</code> 参数格式化</li><li><code>go mod edit -require=golang.org/x/text</code> 添加依赖</li><li><code>go mod edit -droprequire=golang.org/x/text</code> 删除依赖</li><li><code>go list -m -json all</code> 以json的方式打印依赖详情</li><li><code>go list -m -u all</code> 来检查可以升级的<code>package</code></li><li><code>go get -u need-upgrade-package</code> 升级后会将新的依赖版本更新到<code>go.mod</code>中</li><li><code>go get -u</code> 升级所有依赖到最新的版本</li><li><code>go get package@verison</code> 更新到指定版本</li></ul><h2 id="给项目添加依赖写进-go-mod"><a href="#给项目添加依赖写进-go-mod" class="headerlink" title="给项目添加依赖写进 go.mod"></a>给项目添加依赖写进 go.mod</h2><ul><li>在项目中有import，然后go build就会go module自动下载并添加</li><li>自己手工使用go get下载安装后，会自动加入go.mod</li></ul><h2 id="go-mod-文件"><a href="#go-mod-文件" class="headerlink" title="go.mod 文件"></a>go.mod 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span> github.<span class="property">com</span>/<span class="title class_">Ackites</span>/<span class="title class_">KillWxapkg</span></span><br><span class="line"></span><br><span class="line">go <span class="number">1.23</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span> (</span><br><span class="line">github.<span class="property">com</span>/ditashi/jsbeautifier-go v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20141206144643</span>-2520a8026a9c</span><br><span class="line">github.<span class="property">com</span>/dop251/goja v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20240806095544</span>-3491d4a58fbe</span><br><span class="line">github.<span class="property">com</span>/fsnotify/fsnotify v1<span class="number">.7</span><span class="number">.0</span></span><br><span class="line">github.<span class="property">com</span>/tdewolff/parse/v2 v2<span class="number">.7</span><span class="number">.15</span></span><br><span class="line">github.<span class="property">com</span>/yosssi/gohtml v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20201013000340</span>-ee4748c638f4</span><br><span class="line">golang.<span class="property">org</span>/x/crypto v0<span class="number">.26</span><span class="number">.0</span></span><br><span class="line">golang.<span class="property">org</span>/x/net v0<span class="number">.28</span><span class="number">.0</span></span><br><span class="line">golang.<span class="property">org</span>/x/text v0<span class="number">.17</span><span class="number">.0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span> (</span><br><span class="line">github.<span class="property">com</span>/dlclark/regexp2 v1<span class="number">.11</span><span class="number">.4</span> <span class="comment">// indirect</span></span><br><span class="line">github.<span class="property">com</span>/go-sourcemap/sourcemap v2<span class="number">.1</span><span class="number">.3</span>+incompatible <span class="comment">// indirect</span></span><br><span class="line">github.<span class="property">com</span>/google/pprof v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20230207041349</span>-798e818bf904 <span class="comment">// indirect</span></span><br><span class="line">golang.<span class="property">org</span>/x/sys v0<span class="number">.23</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">exclude</span>(</span><br><span class="line">  golang.<span class="property">org</span>/x/text v0<span class="number">.17</span><span class="number">.0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">replace</span>(</span><br><span class="line">  golang.<span class="property">org</span>/x/text v0<span class="number">.17</span><span class="number">.0</span> =&gt; golang.<span class="property">org</span>/x/text v0<span class="number">.18</span><span class="number">.0</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>第一项：当前项目的模块路径</li><li>第二项：项目使用的go版本</li><li>第三项：require项目所需的直接依赖包及其版本</li><li>exclude：用于从使用中排除一个特定的模块版本</li><li>replace：用于将一个包的版本替换为另一个包版本</li><li>其中require后的indirect说明这个依赖是非直接依赖</li></ul><h2 id="go-sum文件"><a href="#go-sum文件" class="headerlink" title="go.sum文件"></a>go.sum文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">github.<span class="property">com</span>/ditashi/jsbeautifier-go v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20141206144643</span>-2520a8026a9c <span class="attr">h1</span>:+<span class="title class_">Zo5Ca9GH0RoeVZQKzFJcTLoAixx5</span>s5Gq3pTIS+n354=</span><br><span class="line">github.<span class="property">com</span>/ditashi/jsbeautifier-go v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20141206144643</span>-2520a8026a9c/go.<span class="property">mod</span> <span class="attr">h1</span>:<span class="title class_">HJGU9ULdREjOcVGZVPB</span>5s6zYmHi1RxzT71l2wQyLmnE=</span><br><span class="line">github.<span class="property">com</span>/dlclark/regexp2 v1<span class="number">.11</span><span class="number">.4</span> <span class="attr">h1</span>:rPYF9/<span class="title class_">LECdNymJufQKmri</span>9gV604RvvABwgOA8un7yAo=</span><br><span class="line">github.<span class="property">com</span>/dlclark/regexp2 v1<span class="number">.11</span><span class="number">.4</span>/go.<span class="property">mod</span> <span class="attr">h1</span>:<span class="title class_">DHkYz0B</span>9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=</span><br><span class="line">github.<span class="property">com</span>/dop251/goja v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20240806095544</span>-3491d4a58fbe <span class="attr">h1</span>:jwFJkgsdelB87ohlXaAGSd05Cb5ALDFa9iW9IGRHcRM=</span><br><span class="line">github.<span class="property">com</span>/dop251/goja v0<span class="number">.0</span><span class="number">.0</span>-<span class="number">20240806095544</span>-3491d4a58fbe/go.<span class="property">mod</span> <span class="attr">h1</span>:<span class="variable constant_">DF</span>+w/nLMIkvRpyhd/0K+<span class="title class_">Okbh3</span>fVZBtXLwRtS/ccAa5w=</span><br><span class="line">github.<span class="property">com</span>/fsnotify/fsnotify v1<span class="number">.7</span><span class="number">.0</span> <span class="attr">h1</span>:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=</span><br></pre></td></tr></table></figure><ul><li>每一行都是由模块路径，模块版本，哈希值组成</li><li>其中哈希值是用来保证当前缓存的模块不会被篡改</li><li>hash是以h1：开头的字符串，表示生成checksum的算法是第一版的hash算法</li></ul>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS泛型定义实例</title>
      <link href="/2024/06/26/TS%E6%B3%9B%E5%9E%8B%E5%AE%9A%E4%B9%89%E5%AE%9E%E4%BE%8B/"/>
      <url>/2024/06/26/TS%E6%B3%9B%E5%9E%8B%E5%AE%9A%E4%B9%89%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="定义泛型函数"><a href="#定义泛型函数" class="headerlink" title="定义泛型函数"></a>定义泛型函数</h2><ul><li>为了确保传入的类型与返回的类型相同，使用<code>类型变量T</code>表示传入参数和返回值的类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>泛型函数两种调用方式：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定传入参数类型</span></span><br><span class="line"><span class="comment">// 事实没必要使用尖括号（&lt;&gt;）来明确地传入类型</span></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;string&gt;(<span class="string">&quot;myString&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 较常用，使用 类型推论，推断传入类型和返回类型</span></span><br><span class="line"><span class="comment">// 编译器可以查看myString的值，然后把T设置为它的类型</span></span><br><span class="line"><span class="keyword">let</span> output = <span class="title function_">identity</span>(<span class="string">&quot;myString&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h2><ul><li>明确表示传入的参数为T类型的数组，确保参数有<code>.length</code>这个属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T[]): T[] &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也可以这样表示</span></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;T&gt;): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h2><ul><li><p>泛型函数的类型，只需要将类型参数写在最前面，跟函数声明一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = identity;</span><br><span class="line"><span class="comment">// 也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity2</span>: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity;</span><br></pre></td></tr></table></figure></li><li><p>可以使用带有调用签名的对象字面量来定义泛型函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &#123;&lt;T&gt;(<span class="attr">arg</span>: T): T&#125; = identity;</span><br></pre></td></tr></table></figure></li><li><p>上面例子里的对象字面量可以拿出来做为一个接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">GenericIdentityFn</span> &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span> = identity;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>把泛型参数当作整个接口的一个参数，指定<code>GenericIdentityFn</code>的类型，这样接口里的其它成员也能知道这个参数的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class="line">    (<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;number&gt; = identity;</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><ul><li><p>泛型类看上去与泛型接口差不多。 泛型类使用（ <code>&lt;&gt;</code>）括起泛型类型，跟在类名后面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">zeroValue</span>: T;</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;number&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>GenericNumber</code>类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用number类型。 也可以使用字符串或其它更复杂的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringNumeric = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;string&gt;();</span><br><span class="line">stringNumeric.<span class="property">zeroValue</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">stringNumeric.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringNumeric.<span class="title function_">add</span>(stringNumeric.<span class="property">zeroValue</span>, <span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><ul><li>定义一个接口来描述约束条件。 创建一个包含<code>.length</code>属性的接口，使用这个接口和extends关键字来实现约束<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  </span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loggingIdentity</span>(<span class="string">&quot;good&quot;</span>) <span class="comment">// √</span></span><br><span class="line"><span class="title function_">loggingIdentity</span>(<span class="number">123</span>) <span class="comment">// ×</span></span><br><span class="line"><span class="title function_">loggingIdentity</span>(&#123;<span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;) <span class="comment">// √</span></span><br><span class="line"><span class="title function_">loggingIdentity</span>(&#123;&#125;) <span class="comment">// ×</span></span><br><span class="line"><span class="title function_">loggingIdentity</span>([]) <span class="comment">// √</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h2><ul><li>声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getProperty</span>(<span class="params">obj: T, key: K</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;m&quot;</span>); <span class="comment">// error: Argument of type &#x27;m&#x27; isn&#x27;t assignable to &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27;.</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染页面过程</title>
      <link href="/2024/06/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/06/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器是如何渲染页面的？"><a href="#浏览器是如何渲染页面的？" class="headerlink" title="浏览器是如何渲染页面的？"></a>浏览器是如何渲染页面的？</h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。<br>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画<br>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。<br>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><h3 id="渲染的第一步是解析-HTML。"><a href="#渲染的第一步是解析-HTML。" class="headerlink" title="渲染的第一步是解析 HTML。"></a>渲染的第一步是解析 HTML。</h3><p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。<br>如果主线程解析到link位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。<br>如果主线程解析到script位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。<br>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p><h3 id="渲染的下一步是样式计算。"><a href="#渲染的下一步是样式计算。" class="headerlink" title="渲染的下一步是样式计算。"></a>渲染的下一步是样式计算。</h3><p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。<br>在这一过程中，很多预设值会变成绝对值，比如red会变成rgb(255,0,0)；相对单位会变成绝对单位，比如em会变成px<br>这一步完成后，会得到一棵带有样式的 DOM 树。</p><h3 id="接下来是布局，布局完成后会得到布局树。"><a href="#接下来是布局，布局完成后会得到布局树。" class="headerlink" title="接下来是布局，布局完成后会得到布局树。"></a>接下来是布局，布局完成后会得到布局树。</h3><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。<br>大部分时候，DOM 树和布局树并非一一对应。<br>比如display:none的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p><h3 id="下一步是分层"><a href="#下一步是分层" class="headerlink" title="下一步是分层"></a>下一步是分层</h3><p>主线程会使用一套复杂的策略对整个布局树中进行分层。<br>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。<br>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过will-change属性更大程度的影响分层结果。</p><h3 id="再下一步是绘制"><a href="#再下一步是绘制" class="headerlink" title="再下一步是绘制"></a>再下一步是绘制</h3><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。<br>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。<br>合成线程首先对每个图层进行分块，将其划分为更多的小区域。<br>它会从线程池中拿取多个线程来完成分块工作。<br>分块完成后，进入光栅化阶段。<br>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。<br>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。<br>光栅化的结果，就是一块一块的位图</p><h3 id="最后一个阶段就是画了"><a href="#最后一个阶段就是画了" class="headerlink" title="最后一个阶段就是画了"></a>最后一个阶段就是画了</h3><p>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。<br>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。<br>变形发生在合成线程，与渲染主线程无关，这就是transform效率高的本质原因。<br>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p><p><a href="https://www.cnblogs.com/xw-01/p/18259655">摘自&lt;二价亚铁&gt;-你不知道的CSS之包含块-附加</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux防火墙</title>
      <link href="/2024/05/29/Linux%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2024/05/29/Linux%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<h2 id="查看firewall服务状态"><a href="#查看firewall服务状态" class="headerlink" title="查看firewall服务状态"></a>查看firewall服务状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status firewalld</span><br></pre></td></tr></table></figure><ul><li>出现 Active: active (running) 表示防火墙启动状态</li><li>出现 Active: inactive (dead)  表示防火墙关闭状态</li><li>出现 Unit firewalld.service could not be found. 表示没有找到防火墙，需要先安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt install firewalld</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum install firewalld</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看firewall的状态"><a href="#查看firewall的状态" class="headerlink" title="查看firewall的状态"></a>查看firewall的状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><h2 id="开启、重启、关闭、firewalld-service服务"><a href="#开启、重启、关闭、firewalld-service服务" class="headerlink" title="开启、重启、关闭、firewalld.service服务"></a>开启、重启、关闭、firewalld.service服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">$ service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">$ service firewalld stop</span><br></pre></td></tr></table></figure><h2 id="查询端口是否开放"><a href="#查询端口是否开放" class="headerlink" title="查询端口是否开放"></a>查询端口是否开放</h2><ul><li>yes 表示开放 no表示不开放<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --query-port=8080/tcp</span><br></pre></td></tr></table></figure></li></ul><h2 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-port=80/tcp</span><br></pre></td></tr></table></figure><h2 id="移除端口"><a href="#移除端口" class="headerlink" title="移除端口"></a>移除端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --remove-port=8080/tcp</span><br></pre></td></tr></table></figure><h2 id="查看已开放的端口"><a href="#查看已开放的端口" class="headerlink" title="查看已开放的端口"></a>查看已开放的端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp</span><br></pre></td></tr></table></figure><h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br></pre></td></tr></table></figure><h2 id="设置关闭开机自启动"><a href="#设置关闭开机自启动" class="headerlink" title="设置关闭开机自启动"></a>设置关闭开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h2 id="重启防火墙-修改配置后要重启防火墙"><a href="#重启防火墙-修改配置后要重启防火墙" class="headerlink" title="重启防火墙(修改配置后要重启防火墙)"></a>重启防火墙(修改配置后要重启防火墙)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>firwall-cmd：是Linux提供的操作firewall的一个工具；</li><li>–permanent：表示设置为持久；</li><li>–add-port：标识添加的端口；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用命令</title>
      <link href="/2024/05/22/Windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/05/22/Windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h2><ul><li>Windows下查看命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route PRINT</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">===========================================================================</span><br><span class="line">接口列表</span><br><span class="line">  8...9e b6 d0 f6 5d 5f ......Microsoft Wi-Fi Direct Virtual Adapter</span><br><span class="line">  6...ae b6 d0 f6 5d 5f ......Microsoft Wi-Fi Direct Virtual Adapter <span class="comment">#2</span></span><br><span class="line"> 13...d8 9e f3 f2 08 2c ......ASIX USB to Gigabit Ethernet Family Adapter <span class="comment">#2</span></span><br><span class="line"> 23...9c b6 d0 f6 5d 5f ......Killer Wireless-n/a/ac 1535 Wireless Network Adapter</span><br><span class="line"> 19...00 ff bf 92 2a 5a ......Sangfor SSL VPN CS Support System VNIC</span><br><span class="line">  1...........................Software Loopback Interface 1</span><br><span class="line"> 21...00 15 5d e8 e1 ee ......Hyper-V Virtual Ethernet Adapter</span><br><span class="line"> 33...00 15 5d 43 a6 09 ......Hyper-V Virtual Ethernet Adapter <span class="comment">#2</span></span><br><span class="line"> 40...00 15 5d 75 16 ff ......Hyper-V Virtual Ethernet Adapter <span class="comment">#3</span></span><br><span class="line"> 45...00 15 5d f5 0d 55 ......Hyper-V Virtual Ethernet Adapter <span class="comment">#4</span></span><br><span class="line">===========================================================================</span><br><span class="line"></span><br><span class="line">IPv4 路由表</span><br><span class="line">===========================================================================</span><br><span class="line">活动路由:</span><br><span class="line">          网络目标        网络掩码                  网关              接口   跃点数</span><br><span class="line">          0.0.0.0          0.0.0.0          172.18.2.1     172.18.3.140     35</span><br><span class="line">        127.0.0.0        255.0.0.0            在链路上         127.0.0.1    331</span><br><span class="line">  255.255.255.255  255.255.255.255            在链路上      172.30.224.1   5256</span><br><span class="line">===========================================================================</span><br><span class="line">永久路由:</span><br><span class="line">          网络地址          网络掩码         网关地址   跃点数</span><br><span class="line">        137.0.0.0      255.255.0.0      138.0.0.250       1</span><br><span class="line">        138.0.0.0      255.255.0.0     137.0.23.176       1</span><br><span class="line">===========================================================================</span><br><span class="line"></span><br><span class="line">IPv6 路由表</span><br><span class="line">===========================================================================</span><br><span class="line">活动路由:</span><br><span class="line"> 接口跃点数网络目标                网关</span><br><span class="line">  1    331 ::1/128                  在链路上</span><br><span class="line"> 13    291 fe80::/64                在链路上</span><br><span class="line"> 23    291 fe80::/64                在链路上</span><br><span class="line">===========================================================================</span><br><span class="line">永久路由:</span><br><span class="line">  无</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>Linux系统中查看路由表：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip route show</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">netstat -rn</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO取指针和取值</title>
      <link href="/2024/05/10/GO%E5%8F%96%E6%8C%87%E9%92%88%E5%92%8C%E5%8F%96%E5%80%BC/"/>
      <url>/2024/05/10/GO%E5%8F%96%E6%8C%87%E9%92%88%E5%92%8C%E5%8F%96%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<ul><li>GO取值和取指针的操作<ul><li><code>*</code>是取值，即获取指针指向的值；<code>&amp;</code>取指针，即获取变量的地址<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">func <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 取值 start</span></span><br><span class="line"><span class="keyword">var</span> a int = <span class="number">666</span></span><br><span class="line"><span class="keyword">var</span> b int = a  <span class="comment">// a是值传递，b取到的是a的值</span></span><br><span class="line">fmt.<span class="title class_">Println</span>(b) <span class="comment">// 输出：666</span></span><br><span class="line"><span class="comment">// 取值 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a的类型 start</span></span><br><span class="line">fmt.<span class="title class_">Printf</span>(<span class="string">&quot;a的类型为：: %T\n&quot;</span>, a) <span class="comment">// a的类型为：: int</span></span><br><span class="line"><span class="comment">// a的类型 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取指针 start</span></span><br><span class="line"><span class="keyword">var</span> c *int = &amp;a <span class="comment">// c取到的是a的地址，c是一个指针，指向a的地址</span></span><br><span class="line">fmt.<span class="title class_">Println</span>(c)  <span class="comment">// 输出：0xc00000a0b8</span></span><br><span class="line"><span class="comment">// 取指针 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针类型 start</span></span><br><span class="line">fmt.<span class="title class_">Printf</span>(<span class="string">&quot;c的指针类型为：: %T\n&quot;</span>, c) <span class="comment">// c的指针类型为：: *int</span></span><br><span class="line"><span class="comment">// 指针类型 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过指针取值 start</span></span><br><span class="line">fmt.<span class="title class_">Println</span>(*c) <span class="comment">// 输出：666</span></span><br><span class="line"><span class="comment">// 通过指针取值 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改指针指向的值 start</span></span><br><span class="line">*c = <span class="number">789</span></span><br><span class="line">fmt.<span class="title class_">Println</span>(*c) <span class="comment">// 输出：789</span></span><br><span class="line"><span class="comment">// 修改指针指向的值 end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针作为参数传递并参与运算</span></span><br><span class="line"><span class="title function_">sum1</span>(c)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">sum1</span>(<span class="params">params *int</span>) &#123;</span><br><span class="line">fmt.<span class="title class_">Println</span>(*params) <span class="comment">// 输出：789</span></span><br><span class="line">*params = *params + <span class="number">1</span></span><br><span class="line">fmt.<span class="title class_">Println</span>(*params) <span class="comment">// 输出：790</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
            <tag> 指针类型 </tag>
            
            <tag> 指针取值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的groupBy</title>
      <link href="/2024/04/26/JS%E4%B8%AD%E7%9A%84groupBy/"/>
      <url>/2024/04/26/JS%E4%B8%AD%E7%9A%84groupBy/</url>
      
        <content type="html"><![CDATA[<h2 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h2><ul><li>使用 <code>reduce</code> 方法实现 <code>groupBy</code> 函数来实现将数组中的元素根据某个属性或条件分组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">groupBy</span> = (<span class="params">array, key</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">result, element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 key 函数获取分组的键</span></span><br><span class="line">    <span class="keyword">const</span> groupKey = <span class="title function_">key</span>(element);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果结果对象中没有这个键，就创建一个空数组</span></span><br><span class="line">    <span class="keyword">if</span> (!result[groupKey]) &#123;</span><br><span class="line">      result[groupKey] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将元素添加到对应的数组中</span></span><br><span class="line">    result[groupKey].<span class="title function_">push</span>(element);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jim&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Joan&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 groupBy 方法</span></span><br><span class="line"><span class="keyword">const</span> peopleByAge = <span class="title function_">groupBy</span>(people, <span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">age</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(peopleByAge);</span><br><span class="line"></span><br><span class="line"><span class="comment">// `groupBy` 函数接收两个参数：一个数组和一个函数，这个函数用于从数组的每个元素中提取分组的键。</span></span><br><span class="line"><span class="comment">// `reduce` 方法遍历数组，为每个不同的键创建一个新数组，并将具有相同键的元素添加到对应的数组中。</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;20&#x27;</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;30&#x27;</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jim&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Joan&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原生支持-Object-groupBy"><a href="#原生支持-Object-groupBy" class="headerlink" title="原生支持 Object.groupBy"></a>原生支持 Object.groupBy</h2><ul><li><code>ECMAScript 2024（ES15）</code>提案已加入 <code>Object.groupBy</code> 方法</li><li>注意目前需要谷歌浏览器<code>117</code>以上的版本才能运行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jim&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Joan&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">const</span> peopleByAge = <span class="title class_">Object</span>.<span class="title function_">groupBy</span>(people, <span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">age</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(peopleByAge);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;20&#x27;</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;30&#x27;</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jim&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Joan&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groupBy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的键盘事件</title>
      <link href="/2024/03/01/Vue%E4%B8%AD%E7%9A%84%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
      <url>/2024/03/01/Vue%E4%B8%AD%E7%9A%84%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="字母键"><a href="#字母键" class="headerlink" title="字母键"></a>字母键</h2><ul><li>只有按下q键时才会执行send方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-<span class="attr">on</span>:keyup.<span class="property">Q</span>=<span class="string">&quot;send&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="大写锁定键"><a href="#大写锁定键" class="headerlink" title="大写锁定键"></a>大写锁定键</h2><ul><li>只有按下capslock键时才会执行send方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-<span class="attr">on</span>:keyup.<span class="property">caps</span>-lock=<span class="string">&quot;send&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="回车键"><a href="#回车键" class="headerlink" title="回车键"></a>回车键</h2><ul><li>只有按下回车键时才会执行 send 方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-<span class="attr">on</span>:keyup.<span class="property">enter</span>=<span class="string">&quot;send&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Alt-字母组合键"><a href="#Alt-字母组合键" class="headerlink" title="Alt+字母组合键"></a>Alt+字母组合键</h2><ul><li>keyup事件时需要同时按下组合键才会执行send方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-<span class="attr">on</span>:keyup.<span class="property">Alt</span>.<span class="property">y</span>=<span class="string">&quot;send&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义按键"><a href="#自定义按键" class="headerlink" title="自定义按键"></a>自定义按键</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 13是回车键的键码，将他的别名定义为send</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">send</span>=<span class="number">13</span></span><br><span class="line"><span class="comment">// 只有按下回车键时才会执行send方法</span></span><br><span class="line">&lt;input v-<span class="attr">on</span>:keydown.<span class="property">send</span>=<span class="string">&quot;send&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2023</title>
      <link href="/2023/12/28/%E6%88%91%E7%9A%842023/"/>
      <url>/2023/12/28/%E6%88%91%E7%9A%842023/</url>
      
        <content type="html"><![CDATA[<p>时间飞逝，转眼又是年末，是时候掏出我去年的年终总结啦 (╯°□°）╯︵ ┻━┻</p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/a14238c613d054a0c412ddd2339e666.jpg"></p><p>哈哈，玩笑归玩笑，但今年确实重感冒了几次，不确定是不是阳了，但是能确定的是戴口罩几年体抗力是有所下降了。</p><p>过去的一年其实有不少事情值得记录以待他日回味的，但当我准备动笔记录那些忙碌的故事时，却总感到思绪断片不知从何入手，恨不得每个时刻都能流水线般全都记下，但每个精彩的瞬间又都是一段段孤立的片段，在努力回忆这一年做过的事情，希望可以拼凑出一个完整的2023。</p><h2 id="膝盖疼"><a href="#膝盖疼" class="headerlink" title="膝盖疼"></a>膝盖疼</h2><p>先说一个持续时间最长的也是困扰我最久事情吧，那就是蹲下几分钟后右脚的膝盖会超级痛，站起来无法立马伸直走动，但是左脚啥问题都没有。从22年11月中旬左右，一直到23年10月份才有好转，起初发现这个现象的时候没多在意，以为是蹲久了膝盖会有点痛而已，好家伙这一痛之后，接下来的好几个月都有这种症状。</p><p>等我反应过来的时候已经到23年2月份了（也就是过完春节后），立马寻医问诊，去医院拍片医生说没看出来有什么异常，给开了一些缓解关节疼痛的药及外贴的药膏，按照医嘱用药后是有些缓解，没那么痛了。但是这并没有持续多久，大概半个多月后又回到原来的症状。一直到到五月底，又去看了一位中医，医生说需要调理一周看看情况，给开了一周的中药（捏着鼻子喝的那种）。真别说这个中药有点效果，喝了三天之后感觉已经好了很多了，蹲个几分钟起来就只有一点点痛的感觉了，不会至于说无法伸直。但是好景不长，服完一周的药后，大概第三个星期，又回到原来的症状，跟那个中医说了情况，他回应这个是慢性病再开药调理一周，回想前面的西药服用完也差不多是这个效果，心想先不理了。</p><p>联系到平时的工作，想着是不是因为久坐的原因，于是平时坐一段时间后就起身走动走动，拒绝二郎腿，换了一个靠背支撑比较硬的椅子，持续两个月之后疼痛感已经有所好转了。再到后面10月底左右基本蹲下去再起来不会有什么疼痛感，感觉比较正常了，一直到现在虽然还会有点点感觉不一样，但是基本可以忽略不计了。可最后也还是不知道是什么原因引起的，也不知道是中药还是西药起的作用才好的。</p><p>这一整个过程是真的煎熬，有种“问天天不应，叫地地不灵”的感觉，疼痛折磨就算了，找不出个病因，心理也很折磨。咋说，还是那句老话“身体是革命的本钱”，平时还是要好好锻炼，多注意休息。</p><h2 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h2><p>按照时间线，应该说到我的毕业设计了，从2月份开始准备开题报告，到4月中旬的论文初稿完成，再到4月25的答辩，一路紧张准备着，终于再在7月中旬顺利拿到了仲恺农业工程学院的毕业证书。这也算是体验了一次毕设的设计修改完成的流程，毕业设计的指导老师也算是比较上心的。据他所说，我是写的比较认真的一个，所以最后抽部分人去答辩里面有我一个名额。因为都是自己写的项目，答辩的时候基本没什么压力。再说到这个毕业证书，然后用处不是很大了，但也胜过没有。从此我也是仲恺的校友之一了，哈哈u(￣▽￣)”</p><h2 id="求婚-领证"><a href="#求婚-领证" class="headerlink" title="求婚&amp;领证"></a>求婚&amp;领证</h2><p>接下来就是比较重要的两件事情了——求婚和领证。求婚这个事情早在六月初的时候就开始规划了，设想过很多种方案，网上看了很多攻略，知道最重要的就是道具和氛围，于是马上购买了必备的求婚钻石戒指（哈哈，当然是莫桑石戒指）。因为当时我俩比较喜欢去灵山岛那边露营，灵山岛风景又很优美，设想过在那边直接让外卖送一大束花过来，然后自己掏出戒指开始求婚，现场很多免费的演员，只要自己大声喊出来，一定会有很多吃瓜群众过来凑热闹的，于是后面好几次去灵山岛我都在背包里放着我的“钻戒”带过去。但是去到那边我才发现这也太空旷了，“群众演员”也是三三两两比较稀疏，如果是外卖送过来的花必定显得太单薄，而且最最最重要的一点是我忘记了自己不是一头“社牛”，完全没有这个勇气，这个想法只能告一段落。</p><p>又过了段时间依然没有其他头绪，于是网上找了很多那些所谓的求婚现场布置团队，跟人家一聊，报价2k+还需要提供场地。一来没预算，二来没场地，租场地又要支出一笔钱，后来灵光一闪，灵山岛不就是一个免费的场地嘛？纠集了好久还是放弃了，一个费钱，一个指引她到场地需要确保万无一失，还需要一些熟人来捧场，不然会比较尬场。</p><p>纠结来纠结去，时间就到了九月份，正好9月21日是她生日，那不如就趁着这个机会生日加求婚一起进行。这样一举两得，自己网上买道具回来可比请人来要划算得多，两百多就搞定生日道具跟求婚用的道具。当你以为万事俱备只欠东风的时候，意外情况就出现了。她生日那天是星期四，但是按照惯例她星期二出差星期五才回来呀！既然是这样，那我就先摆好道具，定好蛋糕周五送过来，等周五她回来的时候就给她一个惊喜也可以，OK，那就这么愉快的决定了。但是，凡事都有个但是，你以为这就完了嘛？我公司三十周年庆活动刚好也选在了周五这一天，全公司人员都需要到接近增城那边举办半马活动！这真是双重打击。可是我的道具都已经买好了呀，而且错过了这个时间，都不知道排到什么时候了。</p><p>于是在她生日那天请了一天假，跟她说太累想休息一天，她也没太多注意，然后打了大半天的气球，绑出一个心形得形状，在客订摆放好生日用的道具，在卧室摆放好求婚用的道具，把所有的道具都摆好。设想到时她回来先在客厅看到给她生日布置的场景，然后在引导她到卧室看到求婚的场景，接着自己跟求婚。嗯，堪称非常完美，绝对万无一失了！她生日的当天晚上，当然还是得拍一下我精心布置的生日场景给她，祝福她生日快乐，当晚我也订了一束鲜艳的玫瑰花（记住这束花，后面要考），拍照给她看，她乐呵得发朋友圈夸我突然变得浪漫。当天晚上也忙着摆道具到凌晨，忙完倒头就睡了。</p><p>第二天早早起来把昨晚的那一束花放到卧室，开着空调不让它萎蔫，然后参加公司下午举办的半马活动，想着参加完就立马回来把所有的一切都准备好，等她回来，给她一个惊喜。但是现实先给我一个惊喜，当天下午她居然说这次要提早回来！啊？？？那我准备的不是白费了？看到她给我发这个消息的时候，我的半马才跑了一半，一看时间，我跑完结束的时候她差不多到南站，于是跟她说让她等我一起回去，她答应说可以，于是我赶紧来跑完，但是越往后面跑就越没体力了，肯本跑不动，只能慢慢跑，跑完之后发现她已经在七号线等我了，但我从我的位置到她在七号线等我的位置还要接近一个半小时的时间。她等了半个小时之后已经不耐烦了，说要先回去，我左磨右磨才劝得住她等我。她能等我我已经很不错了，我已经不在想着有啥惊喜了，回去到门口就直接告诉她我给她准备的一些惊喜。</p><p>此时我已经没抱有让她特别惊喜的想念了。然而柳暗花明又一村，我又看到希望了，她在等我的时候跟我说她妹妹今天也要去我们那里，而且已经准备到了，哈哈哈，我大喜，天助我也！赶紧跟她妹妹联系，说明我的计划，让她帮我提前帮我弄好灯光，到此一切准备就绪。回去的路上把那些想好的台词重复n次，心里依然觉得很紧张，哈哈哈… 回去后，按计划她先看到布置的生日场景，她很开心，接着我跟她说“你知道我昨晚拍照给你花放在哪里了嘛？我把它放在卧室里开了一天的空调等你回来，你可以进去帮我拿出来吗？”于是她就进卧室了，我赶紧把我的求婚戒指拿出来，她开门的那个一刻给惊喜到了，她回头的时候我已经准备好求婚的仪式，正式跟她求婚，到此完成了我的求婚仪式</p><p>求完婚后我们也确定了领证的日子，定在了23023年10月23日。领证就比较流水线了，提前跟民政局预约好时间，预约好婚检。当天就是约好化妆师、跟拍，化完妆后直接去民政局排队领证，跟拍全程在摄影拍照。当时也是叫了双方的亲戚过来吃晚饭，晚饭的过程我们还搞了一些活动，一人一张彩票加一张刮刮乐，后面还有抽奖部分人能拿到面额更大的刮刮乐（该说不说，刮刮乐我买了一本多一点，全都刮完了，没有回本），大家都很开心，我也终于走到了我人生一个比较大的转折点</p><p>来两张配图：<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/0a86b0c28ecf90c065c4b63ac7ae01e.jpg"></p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/839e159021fccbbead32e5032eb5c17.jpg"></p><h2 id="收楼"><a href="#收楼" class="headerlink" title="收楼"></a>收楼</h2><p>最后一个要说的就是我们赶在2023年12月29日收楼啦，收楼过程算是比较顺利，没啥大问题。终于可以开始打造属于我们温暖的小窝啦！</p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/1704193905798.jpg"></p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/715b43d33f3fb4c1c3d384085e88d18.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用网址记录</title>
      <link href="/2023/12/19/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/12/19/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="医药"><a href="#医药" class="headerlink" title="医药"></a>医药</h2><ul><li>中国医药信息查询平台：<a href="https://www.dayi.org.cn/">https://www.dayi.org.cn/</a></li></ul><h2 id="气象-地图"><a href="#气象-地图" class="headerlink" title="气象&#x2F;地图"></a>气象&#x2F;地图</h2><ul><li>MSN天气图：<a href="https://www.msn.cn/zh-cn/weather/maps?type=temperature">https://www.msn.cn/zh-cn/weather/maps?type=temperature</a></li></ul><h2 id="影视-or-网盘-or-图书"><a href="#影视-or-网盘-or-图书" class="headerlink" title="影视 or 网盘 or 图书"></a>影视 or 网盘 or 图书</h2><ul><li>奈飞热剧-PAN99：<a href="https://pan99.xyz/">https://pan99.xyz/</a></li><li>云盘分享社：<a href="https://www.yunpanfenxiang.cn/">https://www.yunpanfenxiang.cn/</a></li><li>耐卡-欧美剧集：<a href="https://mcar.vip/forum.php?mod=forumdisplay&fid=129">https://mcar.vip/forum.php?mod=forumdisplay&fid=129</a></li><li>4K世界：<a href="https://www.4ksj.com/4k-uhd-1.html">https://www.4ksj.com/4k-uhd-1.html</a></li><li>libvio(影视)：<a href="https://www.libvio.me/">https://www.libvio.me/</a></li><li>Anna’s Archive（电子书）：<a href="https://zh.annas-archive.org/">https://zh.annas-archive.org/</a></li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul><li>丑搜-博客搜索：<a href="https://uglysearch.othing.xyz/">https://uglysearch.othing.xyz/</a></li></ul><h2 id="网络宽带"><a href="#网络宽带" class="headerlink" title="网络宽带"></a>网络宽带</h2><ul><li>广东电信宽带测速平台：<a href="https://10000.gd.cn/#/speed">https://10000.gd.cn/#/speed</a></li><li>中国科学技术大学测速网站：<a href="https://test.ustc.edu.cn/">https://test.ustc.edu.cn/</a></li><li>speedtest：<a href="https://www.speedtest.net/">https://www.speedtest.net/</a></li><li>speedtest.im：<a href="https://speedtest.im/">https://speedtest.im/</a></li></ul><h2 id="政企相关"><a href="#政企相关" class="headerlink" title="政企相关"></a>政企相关</h2><ul><li>广州阳光家缘：<a href="http://zfcj.gz.gov.cn/zfcj/ygjy">http://zfcj.gz.gov.cn/zfcj/ygjy</a></li><li>南沙区金洲农贸市场菜篮子零售价：<a href="https://www.gzns.gov.cn/zwgk/zdlyxxgk/jghsf/jgbz/">https://www.gzns.gov.cn/zwgk/zdlyxxgk/jghsf/jgbz/</a></li><li>中国家电网-零售监测：<a href="http://info.cheaa.com/zhoubao.shtml">http://info.cheaa.com/zhoubao.shtml</a></li><li>国家统计局-统计年鉴：<a href="https://www.stats.gov.cn/sj/ndsj/">https://www.stats.gov.cn/sj/ndsj/</a></li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li>CS自学指南：<a href="https://csdiy.wiki/">https://csdiy.wiki/</a></li><li>AI算法工程师手册：<a href="https://www.huaxiaozhuan.com/">https://www.huaxiaozhuan.com/</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>所有时区的精确时间：<a href="https://time.is/">https://time.is/</a></li><li>中国家电网：<a href="http://www.cheaa.com/">http://www.cheaa.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网址 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人民币数字大写转换工具</title>
      <link href="/2023/11/27/%E4%BA%BA%E6%B0%91%E5%B8%81%E6%95%B0%E5%AD%97%E5%A4%A7%E5%86%99%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/11/27/%E4%BA%BA%E6%B0%91%E5%B8%81%E6%95%B0%E5%AD%97%E5%A4%A7%E5%86%99%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertCurrency</span>(<span class="params">currencyDigits</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> integral, decimal, outputCharacters, parts, digits, radices, bigRadices, decimals, zeroCount, i, p, d, ds, quotient, modulus;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">typeof</span> (currencyDigits) === <span class="string">&#x27;number&#x27;</span>) currencyDigits = <span class="title class_">String</span>(currencyDigits);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;&quot;</span> == currencyDigits) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;不能为空 请输入数字金额!如：123.23&quot;</span>), <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> != currencyDigits.<span class="title function_">match</span>(<span class="regexp">/[^,.\d]/</span>)) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;输入字符串中的字符无效!&quot;</span>), <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == currencyDigits.<span class="title function_">match</span>(<span class="regexp">/^((\d&#123;1,3&#125;(,\d&#123;3&#125;)*(.((\d&#123;3&#125;,)*\d&#123;1,3&#125;))?)|(\d+(.\d+)?))$/</span>)) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;请输入正确的数字金额!&quot;</span>), <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (currencyDigits = (currencyDigits = currencyDigits.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&quot;&quot;</span>)).<span class="title function_">replace</span>(<span class="regexp">/^0+/</span>, <span class="string">&quot;&quot;</span>), <span class="title class_">Number</span>(currencyDigits) &gt;</span><br><span class="line">    <span class="number">99999999999.99</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;Too large a number to convert!&quot;</span>), <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ((parts = currencyDigits.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)).<span class="property">length</span> &gt; <span class="number">1</span> ? (integral = parts[<span class="number">0</span>], decimal = (decimal = parts[<span class="number">1</span>]).<span class="title function_">substr</span>(<span class="number">0</span>,</span><br><span class="line">    <span class="number">2</span>)) : (integral = parts[<span class="number">0</span>], decimal = <span class="string">&quot;&quot;</span>), digits = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;零&quot;</span>, <span class="string">&quot;壹&quot;</span>, <span class="string">&quot;贰&quot;</span>, <span class="string">&quot;叁&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;玖&quot;</span>), radices = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;拾&quot;</span>, <span class="string">&quot;佰&quot;</span>, <span class="string">&quot;仟&quot;</span>), bigRadices = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;万&quot;</span>, <span class="string">&quot;亿&quot;</span>), decimals = <span class="keyword">new</span> <span class="title class_">Array</span>(</span><br><span class="line">        <span class="string">&quot;角&quot;</span>, <span class="string">&quot;分&quot;</span>), outputCharacters = <span class="string">&quot;&quot;</span>, <span class="title class_">Number</span>(integral) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (zeroCount = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; integral.<span class="property">length</span>; i++) quotient = (p = integral.<span class="property">length</span> - i - <span class="number">1</span>) / <span class="number">4</span>, modulus = p %</span><br><span class="line">      <span class="number">4</span>, <span class="string">&quot;0&quot;</span> == (d = integral.<span class="title function_">substr</span>(i, <span class="number">1</span>)) ? zeroCount++ : (zeroCount &gt; <span class="number">0</span> &amp;&amp; (outputCharacters += digits[<span class="number">0</span>]),</span><br><span class="line">        zeroCount = <span class="number">0</span>, outputCharacters += digits[<span class="title class_">Number</span>(d)] + radices[modulus]), <span class="number">0</span> == modulus &amp;&amp; zeroCount &lt; <span class="number">4</span> &amp;&amp;</span><br><span class="line">      (outputCharacters += bigRadices[quotient]);</span><br><span class="line">    outputCharacters += <span class="string">&quot;元&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;&quot;</span> != decimal)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; decimal.<span class="property">length</span>; i++) d = decimal.<span class="title function_">substr</span>(i, <span class="number">1</span>), ds = decimal.<span class="title function_">substr</span>(-<span class="number">1</span>, <span class="number">1</span>), outputCharacters +=</span><br><span class="line">      <span class="number">0</span> == d ? <span class="number">0</span> == ds ? <span class="string">&quot;&quot;</span> : digits[<span class="title class_">Number</span>(d)] : digits[<span class="title class_">Number</span>(d)] + decimals[i];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span> == outputCharacters &amp;&amp; (outputCharacters = <span class="string">&quot;零元&quot;</span>), <span class="string">&quot;&quot;</span> == decimal &amp;&amp; (outputCharacters += <span class="string">&quot;整&quot;</span>),</span><br><span class="line">    outputCharacters = <span class="string">&quot;&quot;</span> + outputCharacters</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">convertCurrency</span>(<span class="string">&#x27;123.23&#x27;</span>)) <span class="comment">// 壹佰贰拾叁元贰角叁分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">convertCurrency</span>(<span class="number">999.99</span>)) <span class="comment">// 玖佰玖拾玖元玖角玖分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">convertCurrency</span>(<span class="number">0</span>)) <span class="comment">// 零元整</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 人民币数字大写转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS运算符备忘</title>
      <link href="/2023/11/17/JS%E8%BF%90%E7%AE%97%E7%AC%A6%E5%A4%87%E5%BF%98/"/>
      <url>/2023/11/17/JS%E8%BF%90%E7%AE%97%E7%AC%A6%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<h2 id="链判断运算符"><a href="#链判断运算符" class="headerlink" title="链判断运算符 ?."></a>链判断运算符 <code>?.</code></h2><ul><li><p>读取对象内部的某个属性时，判断上层对象是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取message data.result.state.message</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常写法</span></span><br><span class="line"><span class="keyword">const</span> message = ( data &amp;&amp; data.<span class="property">result</span> &amp;&amp; data.<span class="property">result</span>.<span class="property">state</span> &amp;&amp; data.<span class="property">result</span>.<span class="property">state</span>.<span class="property">message</span> ) || <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链判断运算符写法</span></span><br><span class="line"><span class="keyword">const</span> message = data?.<span class="property">result</span>?.<span class="property">state</span>?.<span class="property">message</span> || <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>三元运算符<code>?:</code>也常用于判断对象是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state.code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = state ? state.<span class="property">code</span> : <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>?.</code>运算符常见形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a?.<span class="property">b</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">a == <span class="literal">null</span> ? <span class="literal">undefined</span> : a.<span class="property">b</span></span><br><span class="line"></span><br><span class="line">a?.[x]</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">a == <span class="literal">null</span> ? <span class="literal">undefined</span> : a[x]</span><br><span class="line"></span><br><span class="line">a?.<span class="title function_">b</span>()</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">a == <span class="literal">null</span> ? <span class="literal">undefined</span> : a.<span class="title function_">b</span>()</span><br><span class="line"></span><br><span class="line">a?.()</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">a == <span class="literal">null</span> ? <span class="literal">undefined</span> : <span class="title function_">a</span>()</span><br></pre></td></tr></table></figure></li></ul><h2 id="Null-判断运算符-、"><a href="#Null-判断运算符-、" class="headerlink" title="Null 判断运算符 ||、??"></a>Null 判断运算符 <code>||</code>、<code>??</code></h2><ul><li><p>如果某个属性的值是<code>null</code>或<code>undefined</code>，有时候需要为它们指定默认值</p></li><li><p>常见做法是通过<code>||</code>运算符指定默认值，但是属性的值如果为空字符串或<code>false</code>或<code>0</code>，默认值也会生效，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = data.<span class="property">value</span> || <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment">// 当data.value等于null、undefine、false、0或空值的时候value的值都是&#x27;123&#x27;</span></span><br><span class="line"><span class="comment">// 这样会导致无法判断false、0或者空值</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>??</code>运算符，只有值为<code>null</code>或<code>undefined</code>时，才会返回右侧的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = data.<span class="property">value</span> ?? <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment">// 当data.value等于null、undefine的时候value的值才是&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="逻辑赋值运算符-、-、"><a href="#逻辑赋值运算符-、-、" class="headerlink" title="逻辑赋值运算符 ||=、&amp;&amp;=、??="></a>逻辑赋值运算符 <code>||=</code>、<code>&amp;&amp;=</code>、<code>??=</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或赋值运算符</span></span><br><span class="line">x ||= y</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">x || (x = y)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与赋值运算符</span></span><br><span class="line">x &amp;&amp;= y</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">x &amp;&amp; (x = y)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Null 赋值运算符</span></span><br><span class="line">x ??= y</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">x ?? (x = y)</span><br></pre></td></tr></table></figure><ul><li><p>写法对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 老的写法</span></span><br><span class="line">user.<span class="property">id</span> = user.<span class="property">id</span> || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的写法</span></span><br><span class="line">user.<span class="property">id</span> ||= <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ||=  值为 null、undefined、false、0或空时取默认值</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">id</span> ||= <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">id</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">id</span> ||= <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">id</span>) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;&amp;= 与上面相反，值不为 null、undefined、false、0或空时取默认值</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">id</span> &amp;&amp;= <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">id</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">id</span> &amp;&amp;= <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">id</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ??=  ,值为 null undefined 时取默认值</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">id</span> ??= <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">id</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">id</span> ??= <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">id</span>) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">user.<span class="property">id</span> ??= <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">id</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><code>&amp;&amp;</code>与、<code>!!</code>或、<code>!</code>非，<code>!!</code>非的取反</li></ul><h2 id="逻辑位运算符"><a href="#逻辑位运算符" class="headerlink" title="逻辑位运算符"></a>逻辑位运算符</h2><ul><li><code>&amp;</code>位与、<code>|</code>位或、<code>^</code>位异或、<code>~</code>位非</li></ul><h2 id="位移运算符"><a href="#位移运算符" class="headerlink" title="位移运算符"></a>位移运算符</h2><ul><li><code>&lt;&lt;</code>左移、<code>&gt;&gt;</code>右移、<code>&gt;&gt;&gt;</code>无符号右移</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同分辨率屏幕的适配</title>
      <link href="/2023/11/04/%E4%B8%8D%E5%90%8C%E5%88%86%E8%BE%A8%E7%8E%87%E5%B1%8F%E5%B9%95%E7%9A%84%E9%80%82%E9%85%8D/"/>
      <url>/2023/11/04/%E4%B8%8D%E5%90%8C%E5%88%86%E8%BE%A8%E7%8E%87%E5%B1%8F%E5%B9%95%E7%9A%84%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="使用两个转换库"><a href="#使用两个转换库" class="headerlink" title="使用两个转换库"></a>使用两个转换库</h2><ul><li>postcss-pxtorem<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postcss-pxtorem 插件，可以从像素单位生成 rem 单位</span><br></pre></td></tr></table></figure></li><li>amfe-flexible<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">amfe-flexible 是配置可伸缩布局方案，主要是将 1rem 设为 viewWidth/10</span><br><span class="line">PC端设计稿为1920时：1920/10 = 192</span><br><span class="line">移动端设计稿为750时：750/10 = 75</span><br></pre></td></tr></table></figure></li></ul><h2 id="在项目中配置"><a href="#在项目中配置" class="headerlink" title="在项目中配置"></a>在项目中配置</h2><ul><li><p>1、安装依赖</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss<span class="literal">-pxtorem</span></span><br><span class="line">npm install amfe<span class="literal">-flexible</span></span><br></pre></td></tr></table></figure></li><li><p>2、<code>vue.config.js</code>中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postCssPxToRem = <span class="built_in">require</span>(<span class="string">&#x27;postcss-pxtorem&#x27;</span>)</span><br><span class="line"><span class="comment">// import postCssPxToRem from &#x27;postcss-pxtorem&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="title function_">postCssPxToRem</span>(&#123;</span><br><span class="line">            <span class="attr">rootValue</span>: <span class="number">192</span>, <span class="comment">// 设计稿尺寸 1rem 的大小</span></span><br><span class="line">            <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>] <span class="comment">// 需要转换的属性列表，*表示全部转换</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或<code>vite.config.ts</code>中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> postCssPxToRem <span class="keyword">from</span> <span class="string">&#x27;postcss-pxtorem&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">postCssPxToRem</span>(&#123;</span><br><span class="line">          <span class="attr">rootValue</span>: <span class="string">&#x27;192&#x27;</span>,</span><br><span class="line">          <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>3、main.js 中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;amfe-flexible&#x27;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分辨率适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF方案</title>
      <link href="/2023/10/27/CF%E6%96%B9%E6%A1%88/"/>
      <url>/2023/10/27/CF%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备-v2rayN"><a href="#1-准备-v2rayN" class="headerlink" title="1. 准备 v2rayN"></a>1. 准备 v2rayN</h2><ul><li>下载安装 <a href="https://github.com/2dust/v2rayN/releases">v2rayN最新版</a></li></ul><h2 id="2-cloudflare"><a href="#2-cloudflare" class="headerlink" title="2. cloudflare"></a>2. cloudflare</h2><ul><li><p>访问 <a href="https://dash.cloudflare.com/">cloudflare</a>，使用临时邮箱或自己的邮箱注册一个账号</p></li><li><p>临时邮箱：<a href="https://www.linshiyouxiang.net/">https://www.linshiyouxiang.net/</a></p></li><li><p>注册好cloudflare后，选择添加站点，选择workers和pages，然后重新验证邮箱，去邮箱点击验证的链接即可</p></li><li><p>验证邮箱后，点击创建worker，修改worker名称，点击部署，点击配置worker，点击快速编辑</p></li><li><p>进入配置worker页面后，点击快速编辑，把worker.js的代码全部删除，然后复制<a href="https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js">部署代码https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js</a> 粘贴到worker.js</p></li><li><p>粘贴完worker.js后，需要修改第七行的<code>userID</code>，需要先去<a href="https://1024tools.com/uuid">uuid生成：https://1024tools.com/uuid</a>，生成后选择一组复制粘贴到第七行的<code>userID</code></p></li><li><p>worker.js的第九行的<code>proxyIP</code>，使用下面其中一组代理即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cdn-all.xn--b6gac.eu.org</span><br><span class="line">cdn.xn--b6gac.eu.org </span><br><span class="line">cdn-b100.xn--b6gac.eu.org </span><br><span class="line">edgetunnel.anycast.eu.org </span><br><span class="line">cdn.anycast.eu.org （亚洲地区）</span><br></pre></td></tr></table></figure></li><li><p>完成userID和proxyIP配置后，点击保存并部署，部署完后点击 发送 按钮，看右边能正常返回来json说明部署成功</p></li><li><p>将刚刚点击发送的URL与userID拼接成url地址访问，如：<a href="https://worker007.u1-kejy8.workers.dev/299a134c-c7b7-45f8-b8a8-649c86%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%60vless://%60%E5%BC%80%E5%A4%B4%E7%9A%84%E9%82%A3%E4%B8%80%E8%A1%8C%E5%85%A8%E9%83%A8%E5%A4%8D%E5%88%B6%E5%88%B0v2rayN">https://worker007.u1-kejy8.workers.dev/299a134c-c7b7-45f8-b8a8-649c86，然后将`vless://`开头的那一行全部复制到v2rayN</a></p></li><li><p>打开v2rayN，点击服务器，点击从剪贴板导入批量URL，导入后可以看到节点，然后双击节点，传输层安全选择空，端口改为80或者2052</p></li><li><p>地址需要使用到邮箱IP，使用workers win专用<a href="https://jdssl.top/wp-content/uploads/2023/07/works%E4%B8%93%E7%94%A8ip%E4%BC%98%E9%80%89.zip">ip优选 https://jdssl.top/wp-content/uploads/2023/07/works%E4%B8%93%E7%94%A8ip%E4%BC%98%E9%80%89.zip</a>，下载后打开文件夹，随便双击一个bat结尾的文件，双击前需要确保所有的科学上网工具都是关闭的，地址改为优选IP</p></li><li><p>无法优选ip 可以使用这个（youxuan.jdssl.link）域名在v2ray 填优选ip处填写，把端口改为：80 并把下面的tls关闭</p></li></ul><h2 id="参考：https-blog-taoshuge-eu-org-post-4"><a href="#参考：https-blog-taoshuge-eu-org-post-4" class="headerlink" title="参考：https://blog.taoshuge.eu.org/post/4/"></a>参考：<a href="https://blog.taoshuge.eu.org/post/4/">https://blog.taoshuge.eu.org/post/4/</a></h2>]]></content>
      
      
      <categories>
          
          <category> cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css自定义有序列表</title>
      <link href="/2023/09/13/css%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8/"/>
      <url>/2023/09/13/css%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-属性-list-style-type"><a href="#CSS-属性-list-style-type" class="headerlink" title="CSS 属性 list-style-type"></a>CSS 属性 list-style-type</h2><ul><li><code>list-style-type</code>可以设置列表元素的 marker（比如圆点、符号、或者自定义计数器样式）, 默认为disc实心圆点</li><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type">MDN</a></li></ul><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><ul><li><code>none</code> 不显示<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: none;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:none !important;">  <li style="list-style-type:none !important;">白日依山尽</li>  <li style="list-style-type:none !important;">黄河入海流</li>  <li style="list-style-type:none !important;">欲穷千里目</li>  <li style="list-style-type:none !important;">更上一层楼</li></ul></li><li><code>disc</code> 实心圆(默认)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: disc;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:disc !important;">  <li style="list-style-type:disc !important;">白日依山尽</li>  <li style="list-style-type:disc !important;">黄河入海流</li>  <li style="list-style-type:disc !important;">欲穷千里目</li>  <li style="list-style-type:disc !important;">更上一层楼</li></ul></li><li><code>circle</code> 空心圆<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: circle;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:circle !important;">  <li style="list-style-type:circle !important;">白日依山尽</li>  <li style="list-style-type:circle !important;">黄河入海流</li>  <li style="list-style-type:circle !important;">欲穷千里目</li>  <li style="list-style-type:circle !important;">更上一层楼</li></ul></li><li><code>square</code> 实心方块<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: square;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:square !important;">  <li style="list-style-type:square !important;">白日依山尽</li>  <li style="list-style-type:square !important;">黄河入海流</li>  <li style="list-style-type:square !important;">欲穷千里目</li>  <li style="list-style-type:square !important;">更上一层楼</li></ul></li><li><code>decimal</code> 十进制阿拉伯数字<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: decimal;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:decimal !important;">  <li style="list-style-type:decimal !important;">白日依山尽</li>  <li style="list-style-type:decimal !important;">黄河入海流</li>  <li style="list-style-type:decimal !important;">欲穷千里目</li>  <li style="list-style-type:decimal !important;">更上一层楼</li></ul></li><li><code>cjk-decimal</code> 十进制数大写<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: cjk-decimal;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:cjk-decimal !important;">  <li style="list-style-type:cjk-decimal !important;">白日依山尽</li>  <li style="list-style-type:cjk-decimal !important;">黄河入海流</li>  <li style="list-style-type:cjk-decimal !important;">欲穷千里目</li>  <li style="list-style-type:cjk-decimal !important;">更上一层楼</li></ul></li><li><code>decimal-leading-zero</code> 十进制阿拉伯数字(个位数前面补零)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: decimal-leading-zero;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:decimal-leading-zero !important;">  <li style="list-style-type:decimal-leading-zero !important;">白日依山尽</li>  <li style="list-style-type:decimal-leading-zero !important;">黄河入海流</li>  <li style="list-style-type:decimal-leading-zero !important;">欲穷千里目</li>  <li style="list-style-type:decimal-leading-zero !important;">更上一层楼</li></ul></li><li><code>lower-roman</code> 小写的罗马数字<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: lower-roman;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:lower-roman !important;">  <li style="list-style-type:lower-roman !important;">白日依山尽</li>  <li style="list-style-type:lower-roman !important;">黄河入海流</li>  <li style="list-style-type:lower-roman !important;">欲穷千里目</li>  <li style="list-style-type:lower-roman !important;">更上一层楼</li></ul></li><li><code>upper-roman</code> 大写的罗马数字<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: upper-roman;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:upper-roman !important;">  <li style="list-style-type:upper-roman !important;">白日依山尽</li>  <li style="list-style-type:upper-roman !important;">黄河入海流</li>  <li style="list-style-type:upper-roman !important;">欲穷千里目</li>  <li style="list-style-type:upper-roman !important;">更上一层楼</li></ul></li><li>其他<ul><li>lower-greek 小写古典希腊文</li><li>lower-alpha, lower-latin 小写ASCII字母</li><li>upper-alpha, upper-latin 大写ASCII字母</li><li>其他非常用的属性值：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type#%E8%AF%AD%E6%B3%95">语法取值</a></li></ul></li></ul><h2 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h2><ul><li><p>取值为 <code>cjk-decimal</code>, <code>cjk-ideographic</code>, <code>japanese-informal</code>, <code>korean-hanja-informal</code>, <code>trad-chinese-informal</code>时，个位都是 一、二、三…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: cjk-decimal;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:cjk-decimal !important;">  <li style="list-style-type:cjk-decimal !important;">白日依山尽</li>  <li style="list-style-type:cjk-decimal !important;">黄河入海流</li>  <li style="list-style-type:cjk-decimal !important;">欲穷千里目</li>  <li style="list-style-type:cjk-decimal !important;">更上一层楼</li></ul></li><li><p>取值为 <code>korean-hanja-formal</code>, <code>simp-chinese-formal</code>, <code>trad-chinese-formal</code>时，个位都是 壹、贰、叁…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: simp-chinese-formal;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:simp-chinese-formal !important;">  <li style="list-style-type:simp-chinese-formal !important;">白日依山尽</li>  <li style="list-style-type:simp-chinese-formal !important;">黄河入海流</li>  <li style="list-style-type:simp-chinese-formal !important;">欲穷千里目</li>  <li style="list-style-type:simp-chinese-formal !important;">更上一层楼</li></ul></li><li><p><code>cjk-earthly-branch</code>：子、丑、寅…（地支序号）</p><ul><li>地支超过十二时会自动排序：子子、子丑、子寅…（天干同理）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: cjk-earthly-branch;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:cjk-earthly-branch !important;"><li style="list-style-type:cjk-earthly-branch !important;">白日依山尽</li><li style="list-style-type:cjk-earthly-branch !important;">黄河入海流</li><li style="list-style-type:cjk-earthly-branch !important;">欲穷千里目</li><li style="list-style-type:cjk-earthly-branch !important;">更上一层楼</li></ul></li></ul></li><li><p><code>cjk-heavenly-stem</code>：子、丑、寅…（天干序号）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul style=&quot;list-style-type: cjk-heavenly-stem;&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ul style="list-style-type:cjk-heavenly-stem !important;">  <li style="list-style-type:cjk-heavenly-stem !important;">白日依山尽</li>  <li style="list-style-type:cjk-heavenly-stem !important;">黄河入海流</li>  <li style="list-style-type:cjk-heavenly-stem !important;">欲穷千里目</li>  <li style="list-style-type:cjk-heavenly-stem !important;">更上一层楼</li></ul></li></ul><h2 id="自定义序号"><a href="#自定义序号" class="headerlink" title="自定义序号"></a>自定义序号</h2><h3 id="自定义数字"><a href="#自定义数字" class="headerlink" title="自定义数字"></a>自定义数字</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  @counter-style circled-simp-chinese-informal &#123;</span><br><span class="line">    system: additive;</span><br><span class="line">    suffix: &quot; &quot;;</span><br><span class="line">    additive-symbols: ㊉ 10, ㊈ 9, ㊇ 8, ㊆ 7, ㊅ 6, ㊄ 5, ㊃ 4, ㊂ 3, ㊁ 2, ㊀ 1;</span><br><span class="line">  &#125;</span><br><span class="line">  .origin &#123;</span><br><span class="line">    list-style: circled-simp-chinese-informal;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;ul class=&quot;origin&quot;&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;白日依山尽&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;黄河入海流&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;欲穷千里目&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;更上一层楼&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>  <style>    @counter-style circled-simp-chinese-informal {      system: additive;      suffix: " ";      additive-symbols: ㊉ 10, ㊈ 9, ㊇ 8, ㊆ 7, ㊅ 6, ㊄ 5, ㊃ 4, ㊂ 3, ㊁ 2, ㊀ 1;    }    .origin {      list-style: circled-simp-chinese-informal  !important;    }  </style>  <ul class="origin">    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>  </ul><h3 id="自定义表情"><a href="#自定义表情" class="headerlink" title="自定义表情"></a>自定义表情</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  @counter-style emoji-test &#123;</span><br><span class="line">    system: additive;</span><br><span class="line">    suffix: &quot; &quot;;</span><br><span class="line">    additive-symbols: 😍 10, 😜 9, 😂 8, 😅 7, 😁 6, 🙂 5, 😐 4, 🙁 3, 😨 2, 😭 1;</span><br><span class="line">  &#125;</span><br><span class="line">  .emoji &#123;</span><br><span class="line">    list-style: emoji-test;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;ul class=&quot;emoji&quot;&gt;</span><br><span class="line">  &lt;li&gt;君不见，黄河之水天上来，奔流到海不复回&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;君不见，高堂明镜悲白发，朝如青丝暮成雪&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;人生得意须尽欢，莫使金樽空对月&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;天生我材必有用，千金散尽还复来&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;烹羊宰牛且为乐，会须一饮三百杯&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;岑夫子，丹丘生，将进酒，杯莫停&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;与君歌一曲，请君为我倾耳听&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;钟鼓馔玉不足贵，但愿长醉不愿醒&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;古来圣贤皆寂寞，惟有饮者留其名&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;陈王昔时宴平乐，斗酒十千恣欢谑&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;主人何为言少钱，径须沽取对君酌&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;五花马，千金裘，呼儿将出换美酒，与尔同销万古愁&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>  <style>    @counter-style emoji-test {      system: additive;      suffix: " ";      additive-symbols: 😍 10, 😜 9, 😂 8, 😅 7, 😁 6, 🙂 5, 😐 4, 🙁 3, 😨 2, 😭 1;    }    .emoji {      list-style: emoji-test  !important;    }  </style>  <ul class="emoji">    <li class="emoji">君不见，黄河之水天上来，奔流到海不复回</li>    <li class="emoji">君不见，高堂明镜悲白发，朝如青丝暮成雪</li>    <li class="emoji">人生得意须尽欢，莫使金樽空对月</li>    <li class="emoji">天生我材必有用，千金散尽还复来</li>    <li class="emoji">烹羊宰牛且为乐，会须一饮三百杯</li>    <li class="emoji">岑夫子，丹丘生，将进酒，杯莫停</li>    <li class="emoji">与君歌一曲，请君为我倾耳听</li>    <li class="emoji">钟鼓馔玉不足贵，但愿长醉不愿醒</li>    <li class="emoji">古来圣贤皆寂寞，惟有饮者留其名</li>    <li class="emoji">陈王昔时宴平乐，斗酒十千恣欢谑</li>    <li class="emoji">主人何为言少钱，径须沽取对君酌</li>    <li class="emoji">五花马，千金裘，呼儿将出换美酒，与尔同销万古愁</li>  </ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome允许跨域</title>
      <link href="/2023/08/29/chrome%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/"/>
      <url>/2023/08/29/chrome%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-下"><a href="#Windows-下" class="headerlink" title="Windows 下"></a>Windows 下</h2><ul><li>复制一个 chrome 浏览器的快捷方式，在属性中找到打开路径，在 …chrome.exe 后面加上  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--args --disable-web-security --user-data-dir=<span class="string">&quot;C:/ChromeDevSession&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Mac-下"><a href="#Mac-下" class="headerlink" title="Mac 下"></a>Mac 下</h2><ul><li>在终端中执行命令  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a <span class="string">&#x27;Google Chrome&#x27;</span> --args --disable-web-security --user-data-dir=<span class="regexp">/tmp/</span>chrome_dev_test</span><br></pre></td></tr></table></figure></li></ul><h2 id="扩展程序的方式"><a href="#扩展程序的方式" class="headerlink" title="扩展程序的方式"></a>扩展程序的方式</h2><ul><li><p>Chrome: <a href="https://chrome.google.com/webstore/detail/cros-anywhere/gcagclbpmooihllccniifbdekfeneebm?hl=zh-CN">cros-anywhere</a></p></li><li><p>Firefox ：<a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/">cros-anywhere</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kodi相关</title>
      <link href="/2023/06/14/Kodi%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/06/14/Kodi%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="Kodi下载"><a href="#Kodi下载" class="headerlink" title="Kodi下载"></a>Kodi下载</h2><ul><li><a href="https://kodi.tv/download/">Kodi</a></li></ul><h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><details>  <summary>在智能电视上免费看万千影视，只需要在Kodi上安装这个The Crew插件</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%9C%A8%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8A%E5%85%8D%E8%B4%B9%E7%9C%8B%E4%B8%87%E5%8D%83%E5%BD%B1%E8%A7%86%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%9C%A8Kodi%E4%B8%8A%E5%AE%89%E8%A3%85%E8%BF%99%E4%B8%AAThe%20Crew%E6%8F%92%E4%BB%B61.png" alt="在智能电视上免费看万千影视，只需要在Kodi上安装这个The Crew插件"></p><p>  <a href="https://www.luckydesigner.space/smarttv-to-watch-everythings-movie-via-kodi/">转自：https://www.luckydesigner.space/smarttv-to-watch-everythings-movie-via-kodi/</a></p></details><details>  <summary>智能电视上kodi观影之如何安装支持中文字幕插件</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8Akodi%E8%A7%82%E5%BD%B1%E4%B9%8B%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95%E6%8F%92%E4%BB%B6.png" alt="智能电视上kodi观影之如何安装支持中文字幕插件"></p><p>  <a href="https://www.luckydesigner.space/how-to-install-chinese-subtitle-in-kodi/">转自：https://www.luckydesigner.space/how-to-install-chinese-subtitle-in-kodi/</a></p></details><details>  <summary>如何在电视上用kodi自定义看各国上万直播源</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%A6%82%E4%BD%95%E5%9C%A8%E7%94%B5%E8%A7%86%E4%B8%8A%E7%94%A8kodi%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9C%8B%E5%90%84%E5%9B%BD%E4%B8%8A%E4%B8%87%E7%9B%B4%E6%92%AD%E6%BA%90.png" alt="如何在电视上用kodi自定义看各国上万直播源"></p><p>  <a href="https://www.luckydesigner.space/kodi-software-to-watch-online-tv/">转自：https://www.luckydesigner.space/kodi-software-to-watch-online-tv/</a></p></details><details>  <summary>过年就该和家人玩游戏使用kodi在智能电视上玩万种电视游戏</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E8%BF%87%E5%B9%B4%E5%B0%B1%E8%AF%A5%E5%92%8C%E5%AE%B6%E4%BA%BA%E7%8E%A9%E6%B8%B8%E6%88%8F%E4%BD%BF%E7%94%A8kodi%E5%9C%A8%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8A%E7%8E%A9%E4%B8%87%E7%A7%8D%E7%94%B5%E8%A7%86%E6%B8%B8%E6%88%8F.png" alt="过年就该和家人玩游戏使用kodi在智能电视上玩万种电视游戏"></p><p>  <a href="https://www.luckydesigner.space/play-tv-game-online-with-kodi/">转自：https://www.luckydesigner.space/play-tv-game-online-with-kodi/</a></p></details><details>  <summary>在智能电视上如何看Youtube视频，使用Kodi你就能做到</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%9C%A8%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8A%E5%A6%82%E4%BD%95%E7%9C%8BYoutube%E8%A7%86%E9%A2%91%EF%BC%8C%E4%BD%BF%E7%94%A8Kodi%E4%BD%A0%E5%B0%B1%E8%83%BD%E5%81%9A%E5%88%B0.png" alt="在智能电视上如何看Youtube视频，使用Kodi你就能做到"></p><p>  <a href="https://www.luckydesigner.space/how-to-watch-youtube-on-tv-via-kodi/">转自：https://www.luckydesigner.space/how-to-watch-youtube-on-tv-via-kodi/</a></p></details>]]></content>
      
      
      <categories>
          
          <category> Kodi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac软件安装记录</title>
      <link href="/2023/05/23/Mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/05/23/Mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Office-2019-for-Mac-安装教程"><a href="#Office-2019-for-Mac-安装教程" class="headerlink" title="Office 2019 for Mac 安装教程"></a>Office 2019 for Mac 安装教程</h1><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ul><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Office%202019%20for%20Mac%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.docx">Office 2019 for Mac 安装教程</a></li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/SWDVD5_Office_Mac_Serializer_2019_MLF_X21-88135.ISO">SWDVD5_OfficeMac_Serializer_2019 MLFX21-88135.ISO</a></li><li>Office 2019 for Mac （文件太大，未上传）</li></ul><h2 id="激活软件安装"><a href="#激活软件安装" class="headerlink" title="激活软件安装"></a>激活软件安装</h2><ol><li>解压：<code>SWDVD5_OfficeMac_Serializer_2019 MLFX21-88135.ISO</code><ul><li>右键一打开方式一选择一个解压工具打开如果未下载解压工具，可从App Store下载如图的The Unarchiver</li></ul></li><li>打开解压后的文件夹，双击安装<code>Microsoft_Office_2019_VL_Serializer.pkg</code></li></ol><h2 id="office安装"><a href="#office安装" class="headerlink" title="office安装"></a>office安装</h2><ol><li>双击安装：<code>Microsoft Office 16.46.21021202 Installer.pkg</code></li><li>安装完成后必须点击更新，等待全部软件更新，不然会显示未激活</li></ol><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ol><li><p>安装完后打开Office组件后左下角不再有激活的选项，成为已激活状态。如果仍有激活选项，请再运行一次步骤2。</p></li><li><p>此前已注册的个人Microsoft账号仍可继续登录使用，如有问题可登陆官网更改资料或重设密码等。</p></li><li><p>仅支持macOS版本10.14.0或者更高版本。</p></li><li><p>如果显示Office打开错误可能是由于未完全卸载，仅删除了应用程序，仍然有遗留的支持文件和许可文件等，请完全卸载后重启电脑，再重新安装即可成功。</p></li></ol><h2 id="完全卸载Office"><a href="#完全卸载Office" class="headerlink" title="完全卸载Office"></a>完全卸载Office</h2><ol><li>删除 Office 2019 for Mac 应用程序</li></ol><ul><li>打开 Finder，然后单击“应用程序”</li><li>按住 Command 命令的同时单击以选择所有 Office 2019 for Mac 应用程序</li><li>按住 Ctrl 的同时单击或右键单击所选应用程序，然后单击“移到废纸等”</li></ul><ol start="2"><li>资源库中删除支持文件</li></ol><ul><li>打开 Finder，单击“前往”&gt;“电脑”找到“Macintosh HD”&gt;“资源库</li><li>在“资源库”文件夹，找到“LaunchDaemns”文件夹中，如果存在下面两个文件单击“移到废纸等”删除下面两个文件<ul><li>com.microsoft.office.licensingV2.helper.plist (如果存在)</li><li>com.microsoft.autoupdate.helper.plist (如果存在)</li></ul></li><li>在“资源库”&gt;“PrivilegedHelperTools”，如果存在下面两个文件单击“移到废纸等”删除下面两个文件<ul><li>com.microsoft.office.licensingV2.helper (如果存在)</li><li>com.microsoft.autoupdate.helper (如果存在)</li></ul></li></ul><ol start="3"><li>删除破解或无效许可文件</li></ol><ul><li>按照如何删除 Mac 上的 破解版Ofice 许可证文件”中的说明使用许可证删除工具。此工具可完全删除 Mac 上的许可证文件.</li><li>参考链接: <a href="https://support.microsoft.com/zh-cn/office/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4-mac-%E4%B8%8A%E7%9A%84-office-%E8%AE%B8%E5%8F%AF%E8%AF%81%E6%96%87%E4%BB%B6-b032c0f6-a431-4dad-83a9-6b727c03b193">删除Mac上的激活许可文件</a></li></ul><ol start="4"><li>从 DockQ 中删除 Office 2019 for Mac 图标</li></ol><ul><li>如果你已将 Ofice 图标添加到 Dock，在你卸载 Ofice 2019 for Mac 之后，它们可能会变为问号.</li><li>若要删除这些图标，请在按住 Control 的同时单击或右键单击图标，然后单击“选项”&gt;“从 Dock 中移除”.</li></ul><ol start="5"><li>清空废纸等，重新启动计算机</li></ol><ul><li>做完以上步骤之后，请右击“废纸等”清空“废纸等”并重新启动计算机</li></ul><h3 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h3><ul><li><a href="https://itc.shisu.edu.cn/78/6a/c10035a161898/page.htm">Office 2019 for Mac 安装激活教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MAC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在浏览器控制台安装npm包</title>
      <link href="/2023/05/05/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AE%89%E8%A3%85npm%E5%8C%85/"/>
      <url>/2023/05/05/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AE%89%E8%A3%85npm%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>通过 <code>&lt;script /&gt;</code>标签在HTML页面上引入CDN资源</li><li>通过CND连接搜索相应的资源，如：<a href="https://api.cdnjs.com/libraries?search=jquery">https://api.cdnjs.com/libraries?search=jquery</a></li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储原始传入的名称</span></span><br><span class="line"><span class="keyword">let</span> pkg_name_origin = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">npmInstall</span> = (<span class="params">originName</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> name = originName.<span class="title function_">trim</span>();</span><br><span class="line">  pkg_name_origin = name;</span><br><span class="line">  <span class="comment">// 三种引入方式</span></span><br><span class="line">  <span class="comment">// 如果是一个有效的URL，直接通过&lt;script /&gt;标签插入</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^https?:\/\//</span>.<span class="title function_">test</span>(name)) <span class="keyword">return</span> <span class="title function_">injectScript</span>(name);</span><br><span class="line">  <span class="comment">// 如果指定了版本，尝试使用unpkg加载</span></span><br><span class="line">  <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&#x27;@&#x27;</span>) !== -<span class="number">1</span>) <span class="keyword">return</span> <span class="title function_">unpkg</span>(name);</span><br><span class="line">  <span class="comment">// 否则，尝试使用cdnjs搜索</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">cdnjs</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在页面中插入&lt;script /&gt;标签</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">injectScript</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  script.<span class="property">src</span> = url;</span><br><span class="line">  script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pkg_name_origin, <span class="string">&#x27; 安装成功。&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pkg_name_origin, <span class="string">&#x27; 安装失败。&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  <span class="comment">// document.body.removeChild(script);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unpkg</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">injectScript</span>(<span class="string">`https://unpkg.com/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cdnjs</span> = <span class="keyword">async</span> (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> searchPromise = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">`https://api.cdnjs.com/libraries?search=<span class="subst">$&#123;name&#125;</span>`</span>,</span><br><span class="line">    <span class="comment">// 不显示referrer的任何信息在请求头中</span></span><br><span class="line">    &#123; <span class="attr">referrerPolicy</span>: <span class="string">&#x27;no-referrer&#x27;</span> &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> &#123; results, total &#125; = <span class="keyword">await</span> searchPromise.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">if</span> (total === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Sorry, &#x27;</span>, name, <span class="string">&#x27; not found, please try another keyword.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取结果中最相关的一条</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">name</span>: exactName, <span class="attr">latest</span>: url &#125; = results[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (name !== exactName) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, <span class="string">&#x27; not found, import &#x27;</span>, exactName, <span class="string">&#x27; instead.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过&lt;script /&gt;标签插入</span></span><br><span class="line">  <span class="title function_">injectScript</span>(url);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">npmInstall</span>(<span class="string">&#x27;moment&#x27;</span>); <span class="comment">// 直接引入</span></span><br><span class="line"><span class="title function_">npmInstall</span>(<span class="string">&#x27;moment@2.29.4&#x27;</span>); <span class="comment">// 指定版本</span></span><br><span class="line"><span class="title function_">npmInstall</span>(<span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js&#x27;</span>); <span class="comment">// 引入cdn地址</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器控制台 </tag>
            
            <tag> 安装npm包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法删除的水印方案</title>
      <link href="/2023/03/31/%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E7%9A%84%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2023/03/31/%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E7%9A%84%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WaterMark</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">text = <span class="string">&quot;&quot;</span>, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 默认样式</span></span><br><span class="line">    <span class="keyword">const</span> defaultStyles = &#123;</span><br><span class="line">      <span class="attr">transform</span>: <span class="string">&#x27;rotate(-15deg)&#x27;</span>,</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">      <span class="attr">overflow</span>: <span class="string">&#x27;hidden&#x27;</span>,</span><br><span class="line">      <span class="attr">zIndex</span>: <span class="number">9999999</span>,</span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">0.2</span>,</span><br><span class="line">      <span class="attr">fontFamily</span>: <span class="string">&#x27;微软雅黑&#x27;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">      <span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">      <span class="attr">padding</span>: <span class="string">&#x27;10px 10px&#x27;</span>,</span><br><span class="line">      <span class="attr">whiteSpace</span>: <span class="string">&#x27;nowrap&#x27;</span>,</span><br><span class="line">      <span class="attr">display</span>: <span class="string">&#x27;block&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 覆盖默认样式</span></span><br><span class="line">    <span class="keyword">let</span> &#123; left = <span class="number">220</span>, top = <span class="number">80</span>, fontSize = <span class="number">16</span>, id = <span class="string">&quot;&quot;</span>, styles = &#123;&#125; &#125; = options</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">styles</span> = &#123; ...defaultStyles, ...styles &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">text</span> = text;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="title class_">Number</span>(left);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="title class_">Number</span>(top);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fontSize</span> = <span class="title class_">Number</span>(fontSize)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createWatermark</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleResize</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createMaskDiv</span>(<span class="params">left, top</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> maskDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    maskDiv.<span class="property">id</span> = <span class="string">&#x27;water_mask_id_0&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> styles = &#123; ...<span class="variable language_">this</span>.<span class="property">styles</span>, <span class="attr">left</span>: <span class="string">`<span class="subst">$&#123;left&#125;</span>px`</span>, <span class="attr">top</span>: <span class="string">`<span class="subst">$&#123;top&#125;</span>px`</span>, <span class="attr">fontSize</span>: <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.fontSize&#125;</span>px`</span> &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> styles) &#123;</span><br><span class="line">      maskDiv.<span class="property">style</span>[key] = styles[key];</span><br><span class="line">    &#125;</span><br><span class="line">    maskDiv.<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="property">text</span>;</span><br><span class="line">    <span class="keyword">return</span> maskDiv;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createWatermark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maskDiv = <span class="variable language_">this</span>.<span class="title function_">createMaskDiv</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(maskDiv);</span><br><span class="line">    <span class="keyword">let</span> width = maskDiv.<span class="property">offsetWidth</span></span><br><span class="line">    <span class="keyword">let</span> height = maskDiv.<span class="property">offsetHeight</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(maskDiv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">id</span> = <span class="string">&#x27;eb-watermark&#x27;</span>;</span><br><span class="line">    div.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">`pointer-events: none !important; display: block !important; visibility: visible !important; position: fixed !important; top: 0 !important; left: 0 !important; opacity: 1 !important; z-index: 0 !important; transform: translateX(0) !important;`</span>;</span><br><span class="line">    <span class="keyword">const</span> shadowRoot = div.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = width + <span class="variable language_">this</span>.<span class="property">left</span></span><br><span class="line">    <span class="keyword">let</span> top = height + <span class="variable language_">this</span>.<span class="property">top</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">window</span>.<span class="property">innerWidth</span>; i += left) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>; j += top) &#123;</span><br><span class="line">        shadowRoot.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="title function_">createMaskDiv</span>(i, j));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> observerConfig = &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span>, <span class="attr">attributes</span>: <span class="literal">true</span>, <span class="attr">attributeFilter</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;style&#x27;</span>] &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听DOM改变</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="variable language_">this</span>.<span class="property">handleMutation</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, observerConfig);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置characterData监听元素的innerText改变</span></span><br><span class="line">    <span class="keyword">const</span> shadowRootObserver = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutations</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">handleShadowRootMutation</span>(mutations, shadowRoot).<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    shadowRootObserver.<span class="title function_">observe</span>(shadowRoot, &#123; ...observerConfig, <span class="attr">characterData</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleMutation</span>(<span class="params">mutations</span>) &#123;</span><br><span class="line">    mutations.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mutation</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> watermark = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;eb-watermark&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (mutation.<span class="property">removedNodes</span>.<span class="property">length</span> &gt; <span class="number">0</span> || mutation.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&#x27;eb-watermark&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!watermark) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">createWatermark</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (mutation.<span class="property">type</span> === <span class="string">&#x27;attributes&#x27;</span> &amp;&amp; (mutation.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&#x27;eb-watermark&#x27;</span> || mutation.<span class="property">attributeName</span> === <span class="string">&#x27;style&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (watermark) &#123;</span><br><span class="line">          watermark.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createWatermark</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> watermark = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#eb-watermark&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!watermark || watermark.<span class="property">parentElement</span> !== <span class="variable language_">document</span>.<span class="property">body</span> || !watermark.<span class="property">shadowRoot</span> || !watermark.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#water_mask_id_0&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (watermark) &#123;</span><br><span class="line">        watermark.<span class="title function_">remove</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createWatermark</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleShadowRootMutation</span>(<span class="params">mutations, shadowRoot</span>) &#123;</span><br><span class="line">    mutations.<span class="title function_">forEach</span>(<span class="function">(<span class="params">mutation</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (mutation.<span class="property">removedNodes</span>.<span class="property">length</span> &gt; <span class="number">0</span> || mutation.<span class="property">type</span> === <span class="string">&#x27;attributes&#x27;</span> || (mutation.<span class="property">type</span> === <span class="string">&#x27;characterData&#x27;</span> &amp;&amp; (mutation.<span class="property">target</span>.<span class="property">parentNode</span> === shadowRoot || mutation.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span> === shadowRoot))) &#123;</span><br><span class="line">        <span class="keyword">const</span> watermark = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;eb-watermark&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (watermark) &#123;</span><br><span class="line">          watermark.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createWatermark</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleResize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> watermark = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;eb-watermark&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (watermark) &#123;</span><br><span class="line">      watermark.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createWatermark</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WaterMark</span>;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">WaterMark</span> <span class="keyword">from</span> <span class="string">&#x27;./watermark&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">WaterMark</span>(<span class="string">&#x27;我是水印啊&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h2><ul><li>目前只支持插入到body的全屏水印，下一步优化支持指定id的div水印</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用css实现防止按钮重复点击</title>
      <link href="/2023/02/18/%E7%94%A8css%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/"/>
      <url>/2023/02/18/%E7%94%A8css%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>利用<code>pointer-events</code>属性设置元素是否对鼠标事件做出反应</li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><ul><li>可以延申加入自定义动画<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;save-button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;保存&#x27;)&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.save-button</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: buttonThrottle <span class="number">2s</span> step-end forwards;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.save-button</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> buttonThrottle &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ul><li>打开开发者模式，查看Console会发现每隔两秒钟之后才能触发Console打印</li></ul><p><button class="save-button" onclick="console.log('保存')">保存</button></p><style>.save-button {  animation: buttonThrottle 2s step-end forwards;}.save-button:active {  animation: none;}@keyframes buttonThrottle {  from {    color: red;    pointer-events: none;  }  to {    color: blue;    pointer-events: all;  }}</style>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布订阅模式和观察者模式</title>
      <link href="/2023/02/15/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/02/15/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h3><ul><li>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。</li><li>观察者模式有一个别名叫“发布-订阅模式”，或者说是“订阅-发布模式”，订阅者和订阅目标是联系在一起的，当订阅目标发生改变时，逐个通知订阅者</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>目标&lt;&#x3D;&gt;观察者</li><li>观察者观察目标（监听目标）-&gt; 目标发生变化-&gt; 目标主动通知观察者</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li>拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价，即“一对多”的依赖关系（一个拍卖师多个竞价者）</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>Vue数据双向绑定</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">update</span>(...args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建观察者ob1</span></span><br><span class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> <span class="title class_">Observer</span>();</span><br><span class="line"><span class="comment">// 创建观察者ob2</span></span><br><span class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> <span class="title class_">Observer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目标sub</span></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="comment">// 目标sub添加观察者ob1 （目标和观察者建立了依赖关系）</span></span><br><span class="line">sub.<span class="title function_">add</span>(ob1);</span><br><span class="line"><span class="comment">// 目标sub添加观察者ob2</span></span><br><span class="line">sub.<span class="title function_">add</span>(ob2);</span><br><span class="line"><span class="comment">// 目标sub触发SMS事件（目标主动通知观察者）</span></span><br><span class="line">sub.<span class="title function_">notify</span>(<span class="string">&#x27;I fired `SMS` event&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><h3 id="发布订阅模式（Pub-Sub-Pattern）"><a href="#发布订阅模式（Pub-Sub-Pattern）" class="headerlink" title="发布订阅模式（Pub-Sub Pattern）"></a>发布订阅模式（Pub-Sub Pattern）</h3><ul><li>发布订阅模式中，发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为调度中心或事件通道，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者</li><li>发布订阅模式是在观察者模式的基础上做的优化升级</li></ul><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><ul><li>发布者-&gt;事件中心&lt;&#x3D;&gt;订阅者</li><li>订阅者需要向事件中心订阅指定的事件 -&gt; 发布者向事件中心发布指定事件内容 -&gt; 事件中心通知订阅者 -&gt; 订阅者收到消息（可能是多个订阅者）</li></ul><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><ul><li>你在微博上关注了A，同时其他很多人也关注了A，那么当A发布动态的时候，微博就会为你们推送这条动态。A就是发布者，你是订阅者，微博就是调度中心，你和A是没有直接的消息往来的，全是通过微博来协调的（你的关注，A的发布动态）</li></ul><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><ul><li>vue中的事件总线，$emit和$on, $on用来订阅事件，$emit用来发布订阅的事件</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PubSub</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 事件中心/调度中心</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subscribers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">topic, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callbacks = <span class="variable language_">this</span>.<span class="property">subscribers</span>[topic];</span><br><span class="line">    <span class="keyword">if</span> (!callbacks) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subscribers</span>[topic] = [callback];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callbacks.<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 发布</span></span><br><span class="line">  <span class="title function_">publish</span>(<span class="params">topic, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callbacks = <span class="variable language_">this</span>.<span class="property">subscribers</span>[topic] || [];</span><br><span class="line">    callbacks.<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(...args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建事件调度中心，为订阅者和发布者提供调度服务</span></span><br><span class="line"><span class="keyword">let</span> pubSub = <span class="keyword">new</span> <span class="title class_">PubSub</span>();</span><br><span class="line"><span class="comment">// A订阅了SMS事件（A只关注SMS本身，而不关心谁发布这个事件）</span></span><br><span class="line">pubSub.<span class="title function_">subscribe</span>(<span class="string">&#x27;SMS&#x27;</span>, <span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// B订阅了SMS事件</span></span><br><span class="line">pubSub.<span class="title function_">subscribe</span>(<span class="string">&#x27;SMS&#x27;</span>, <span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// C发布了SMS事件（C只关注SMS本身，不关心谁订阅了这个事件）</span></span><br><span class="line">pubSub.<span class="title function_">publish</span>(<span class="string">&#x27;SMS&#x27;</span>, <span class="string">&#x27;I published `SMS` event&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>发布-订阅模式是面向调度中心编程的，而观察者模式则是面向目标和观察者编程的。前者用于解耦发布者和订阅者，后者用于耦合目标和观察者</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器禁止用户打开devtools</title>
      <link href="/2023/02/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A6%81%E6%AD%A2%E7%94%A8%E6%88%B7%E6%89%93%E5%BC%80devtools/"/>
      <url>/2023/02/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A6%81%E6%AD%A2%E7%94%A8%E6%88%B7%E6%89%93%E5%BC%80devtools/</url>
      
        <content type="html"><![CDATA[<h2 id="禁止键盘-F12"><a href="#禁止键盘-F12" class="headerlink" title="禁止键盘 F12"></a>禁止键盘 F12</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span> !== event.<span class="property">keyCode</span> || event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="禁止鼠标右键后选择检查元素"><a href="#禁止鼠标右键后选择检查元素" class="headerlink" title="禁止鼠标右键后选择检查元素"></a>禁止鼠标右键后选择检查元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="监听devtools的打开事件"><a href="#监听devtools的打开事件" class="headerlink" title="监听devtools的打开事件"></a>监听devtools的打开事件</h2><ul><li>通关检查浏览器可视区域和浏览器窗口的差值来判断用户是否打开了devtools</li><li>但是浏览器在新窗口打开devtools时，这个检测很容易被绕过<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">resize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> threshold = <span class="number">200</span>;</span><br><span class="line">  <span class="keyword">const</span> width = <span class="variable language_">window</span>.<span class="property">outerWidth</span> - <span class="variable language_">window</span>.<span class="property">innerWidth</span> &gt; threshold;</span><br><span class="line">  <span class="keyword">const</span> height = <span class="variable language_">window</span>.<span class="property">outerHeight</span> - <span class="variable language_">window</span>.<span class="property">innerHeight</span> &gt; threshold;</span><br><span class="line">  <span class="keyword">if</span> (width || height) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;控制台打开了！！！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">resize</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, resize);</span><br></pre></td></tr></table></figure></li></ul><h2 id="基于MutationObserver检测用户改变元素属性"><a href="#基于MutationObserver检测用户改变元素属性" class="headerlink" title="基于MutationObserver检测用户改变元素属性"></a>基于MutationObserver检测用户改变元素属性</h2><ul><li>MutationObserver 可以监测到 DOM 元素上任何属性的变化情况，如有需要，也可以监听其子元素的变化情况</li><li>MutationObserver监听的是元素的属性，即attributes，如：style、class、type、href等</li><li>禁止用户用开发者工具修改某些属性时使用，如：用户企图修改网站水印<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;h1 style=&quot;margin:100px;&quot;&gt;需要检测的元素&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">childList</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">attributes</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">subtree</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">attributesOldValue</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">characterDataOldValue</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params">expression = () =&gt; &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    observer.<span class="title function_">disconnect</span>();</span><br><span class="line">    <span class="comment">// 执行恢复方法</span></span><br><span class="line">    <span class="title function_">expression</span>();</span><br><span class="line">    observer.<span class="title function_">observe</span>(h1, options);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">records</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> record = records[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (record.<span class="property">type</span> === <span class="string">&#x27;attributes&#x27;</span> &amp;&amp; record.<span class="property">attributeName</span> === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">reset</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      h1.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;margin:100px;&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (record.<span class="property">type</span> === <span class="string">&#x27;characterData&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">reset</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      h1.<span class="property">textContent</span> = <span class="string">&#x27;需要检测的元素&#x27;</span>  </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(callback);</span><br><span class="line">observer.<span class="title function_">observe</span>(h1, options);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> devtools </tag>
            
            <tag> 开发者工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS几个必会的手写功能</title>
      <link href="/2023/02/07/JS%E5%87%A0%E4%B8%AA%E5%BF%85%E4%BC%9A%E7%9A%84%E6%89%8B%E5%86%99%E5%8A%9F%E8%83%BD/"/>
      <url>/2023/02/07/JS%E5%87%A0%E4%B8%AA%E5%BF%85%E4%BC%9A%E7%9A%84%E6%89%8B%E5%86%99%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Promise-all"><a href="#1、Promise-all" class="headerlink" title="1、Promise.all"></a>1、Promise.all</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">myAll</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// promises 可以不是数组，但必须要具有 Iterator 接口</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> promises[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;TypeError: promises is not iterable&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (promises.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>([])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = []</span><br><span class="line">      <span class="keyword">const</span> len = promises.<span class="property">length</span></span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// Promise.resolve 的作用是将普通值或 thenable 对象转为 promise，promise 则直接返回</span></span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promises[i])</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            res[i] = data</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (count === len) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">myAll</span>([<span class="title function_">p1</span>(), <span class="title function_">p2</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// [1, 2]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2、Promise-race"><a href="#2、Promise-race" class="headerlink" title="2、Promise.race"></a>2、Promise.race</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">myRace</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// promises 可以不是数组，但必须要具有 Iterator 接口</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> promises[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;TypeError: promises is not iterable&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> promises) &#123;</span><br><span class="line">      <span class="comment">// 先出来的结果会被 resolve 或 reject 出去, 一旦状态变化就不会再变</span></span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(item).<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">myRace</span>([<span class="title function_">p1</span>(), <span class="title function_">p2</span>()]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3、Promise-any"><a href="#3、Promise-any" class="headerlink" title="3、Promise.any"></a>3、Promise.any</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">myAny</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// promises 可以不是数组，但必须要具有 Iterator 接口</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> promises[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;TypeError: promises is not iterable&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> len = promises.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promises[i]).<span class="title function_">then</span>(resolve, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;所有 promise 都失败&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(reject, <span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">myAny</span>([<span class="title function_">p1</span>(), <span class="title function_">p2</span>()]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4、冒泡排序"><a href="#4、冒泡排序" class="headerlink" title="4、冒泡排序"></a>4、冒泡排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 从第一个元素开始，比较相邻的两个元素，前者大就交换位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 交换位置</span></span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次遍历结束，都能找到一个最大值，放在数组最后</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(arr)) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="5、选择排序"><a href="#5、选择排序" class="headerlink" title="5、选择排序"></a>5、选择排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 假设每次循环，最小值就是第一个</span></span><br><span class="line">    <span class="keyword">let</span> minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="comment">// 如果最小值大于其他的值，则修改索引，从而找到真正的最小值</span></span><br><span class="line">      <span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">        minIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最小值和第一个交换位置</span></span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(arr)) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="comment">// 每次取第一个元素作为基准值</span></span><br><span class="line">  <span class="keyword">const</span> pivot = arr.<span class="title function_">shift</span>()</span><br><span class="line">  <span class="keyword">const</span> left = []</span><br><span class="line">  <span class="keyword">const</span> right = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      <span class="comment">// 如果小于基准值，则把它放在左数组</span></span><br><span class="line">      left.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果大于等于基准值，则放在右数组</span></span><br><span class="line">      right.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 递归处理，并把左中右三个数组拼接起来</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([pivot], <span class="title function_">quickSort</span>(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(arr)) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="7、call"><a href="#7、call" class="headerlink" title="7、call"></a>7、call</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context = globalThis</span>) &#123;</span><br><span class="line">  <span class="comment">// 把方法添加到 context 上，这样使用context[key]调用的时候，内部的 this 就指向了 context</span></span><br><span class="line">  <span class="comment">// 使用 Symbol 防止 context 原有属性被覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">  context[key] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> res = context[key](...args)</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> myName = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [age, height] = <span class="variable language_">arguments</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, My age is <span class="subst">$&#123;age&#125;</span>, My height is <span class="subst">$&#123;height&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">say.<span class="title function_">myCall</span>(myName, <span class="number">16</span>, <span class="number">170</span>) <span class="comment">// My name is Jack, My age is 16, My height is 170</span></span><br></pre></td></tr></table></figure><h2 id="8、apply"><a href="#8、apply" class="headerlink" title="8、apply"></a>8、apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context = globalThis</span>) &#123;</span><br><span class="line">  <span class="comment">// 把方法添加到 context 上，这样使用context[key]调用的时候，内部的 this 就指向了 context</span></span><br><span class="line">  <span class="comment">// 使用 Symbol 防止 context 原有属性被覆盖</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">  context[key] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">let</span> res</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    res = context[key](...<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res = context[key]()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> myName = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [age, height] = <span class="variable language_">arguments</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, My age is <span class="subst">$&#123;age&#125;</span>, My height is <span class="subst">$&#123;height&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">say.<span class="title function_">myApply</span>(myName, [<span class="number">16</span>, <span class="number">170</span>]) <span class="comment">// My name is Jack, My age is 16, My height is 170</span></span><br></pre></td></tr></table></figure><h2 id="9、bind"><a href="#9、bind" class="headerlink" title="9、bind"></a>9、bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context = globalThis</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> newFunc = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFunc) &#123;</span><br><span class="line">      <span class="comment">// 通过 new 调用，this 为新创建的对象实例，将函数内部的 this 替换为这个新对象</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, newArgs)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 普通方式调用，将函数内部的 this 替换为 context</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 支持 new 调用</span></span><br><span class="line">  newFunc.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">return</span> newFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> myName = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [age, height] = <span class="variable language_">arguments</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, My age is <span class="subst">$&#123;age&#125;</span>, My height is <span class="subst">$&#123;height&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mySay = say.<span class="title function_">myBind</span>(myName, <span class="number">16</span>, <span class="number">170</span>)</span><br><span class="line"><span class="title function_">mySay</span>() <span class="comment">// My name is Jack, My age is 16, My height is 170</span></span><br></pre></td></tr></table></figure><h2 id="10、instanceof"><a href="#10、instanceof" class="headerlink" title="10、instanceof"></a>10、instanceof</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceOf</span>(<span class="params">obj, Fn</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断构造函数 Fn 是否出现在 obj 的原型链上</span></span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)</span><br><span class="line">  <span class="keyword">while</span> (proto) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proto)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myInstanceOf</span>(obj, <span class="title class_">Object</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="11、new"><a href="#11、new" class="headerlink" title="11、new"></a>11、new</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">Fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  obj.<span class="property">__proto__</span> = <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="comment">// 将构造函数内部的 this 替换为新对象，并执行构造函数方法</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">Fn</span>.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> &amp;&amp; res !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果构造函数有返回值，且类型为 object, 则把这个值返回</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> stu = <span class="title function_">myNew</span>(<span class="title class_">Student</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu) <span class="comment">// &#123; name: &#x27;Jack&#x27;, age: 16 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="12、统计页面中所有标签的种类和个数"><a href="#12、统计页面中所有标签的种类和个数" class="headerlink" title="12、统计页面中所有标签的种类和个数"></a>12、统计页面中所有标签的种类和个数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTagCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取页面上所有标签元素</span></span><br><span class="line">  <span class="keyword">const</span> tags = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> tagNames = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> tags) &#123;</span><br><span class="line">    <span class="comment">// 把所有标签名转为小写，添加到数组中</span></span><br><span class="line">    tagNames.<span class="title function_">push</span>(val.<span class="property">tagName</span>.<span class="title function_">toLocaleLowerCase</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> tagNames) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res[val]) &#123;</span><br><span class="line">      res[val] = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res[val]++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getTagCount</span>()) <span class="comment">// &#123; html: 1, head: 1, body: 1, div: 2, script: 1 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="13-类型判断"><a href="#13-类型判断" class="headerlink" title="13.类型判断"></a>13.类型判断</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myTypeOf</span> = (<span class="params">data</span>) =&gt; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(data).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>).<span class="title function_">toLowerCase</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(<span class="number">1</span>)) <span class="comment">//--&gt; number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(<span class="string">&#x27;1&#x27;</span>)) <span class="comment">//--&gt; string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(<span class="literal">true</span>)) <span class="comment">//--&gt; boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>([])) <span class="comment">//--&gt; array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(&#123;&#125;)) <span class="comment">//--&gt; object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(<span class="regexp">/^/</span>)) <span class="comment">//--&gt; regexp</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())) <span class="comment">//--&gt; date</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(<span class="title class_">Math</span>)) <span class="comment">//--&gt; math</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTypeOf</span>(<span class="function">() =&gt;</span> &#123;&#125;)) <span class="comment">//--&gt; function</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AJAX、Axios、Fetch</title>
      <link href="/2023/02/06/%E4%BD%BF%E7%94%A8AJAX%E3%80%81Axios%E3%80%81Fetch/"/>
      <url>/2023/02/06/%E4%BD%BF%E7%94%A8AJAX%E3%80%81Axios%E3%80%81Fetch/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ul><li>AJAX全称为“Asynchronous JavaScript and XML”（异步JavaScript和XML）</li><li>AJAX最主要的两个特性：在不重新加载页面的情况下发送请求给服务器；受并使用从服务器发来的数据</li></ul><h3 id="AJAX请求的五个步骤"><a href="#AJAX请求的五个步骤" class="headerlink" title="AJAX请求的五个步骤"></a>AJAX请求的五个步骤</h3><ul><li>1.建立XMLHttpRequest对象</li><li>2.设置回调函数</li><li>3.配置请求信息，(如open,get方法)，使用open方法与服务器建立链接</li><li>4.向服务器发送数据</li><li>5.在回调函数中针对不同的响应状态进行处理</li></ul><h3 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h3><ul><li>0 －（请求未初始化）还没有调用send()方法</li><li>1 －（正在加载）已调用send()方法，正在发送请求</li><li>2 －（加载成功）send()方法执行完成，已经接收到全部响应内容</li><li>3 －（交互）正在解析响应内容</li><li>4 －（完成）响应内容解析完成，可以在客户端调用了</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url, method=<span class="string">&quot;GET&quot;</span>, data=<span class="literal">null</span>, <span class="keyword">async</span>=<span class="literal">true</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 声明XMLHttpRequest </span></span><br><span class="line">    <span class="comment">// 在IE5和IE6中需要使用ActiveX对象 let XRH = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable constant_">XHR</span> = <span class="title class_">XMLHttpRequest</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建XMLHttqRequest</span></span><br><span class="line">    <span class="variable constant_">XHR</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化请求参数</span></span><br><span class="line">    <span class="variable constant_">XHR</span>.<span class="title function_">open</span>(method, url, <span class="keyword">async</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应的数据类型</span></span><br><span class="line">    <span class="variable constant_">XHR</span>.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求头(求头的设置必须在xhr open之后，并且在send之前)</span></span><br><span class="line">    <span class="variable constant_">XHR</span>.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;text/html&quot;</span>); <span class="comment">// applicationx-www-form-urlencoded  text/html  application/json multipart/form-data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求状态改变时执行的函数</span></span><br><span class="line">    <span class="variable constant_">XHR</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable constant_">XHR</span>.<span class="property">readyState</span> === <span class="number">4</span> ) <span class="keyword">return</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`响应状态:<span class="subst">$&#123;XHR.status&#125;</span>`</span>,<span class="string">&quot;FINISH&quot;</span>) </span><br><span class="line">      <span class="keyword">if</span>(<span class="variable constant_">XHR</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务器响应的数据，XHR.responseText为响应体</span></span><br><span class="line">        <span class="keyword">var</span> res = <span class="variable constant_">XHR</span>.<span class="property">responseText</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="comment">// 解析数据(数据为JSON数据时)</span></span><br><span class="line">        <span class="comment">// res = JSON.parse(res)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">    <span class="variable constant_">XHR</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Network request failed&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发起请求</span></span><br><span class="line">    <span class="variable constant_">XHR</span>.<span class="title function_">send</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 调用（百度首页的调试窗口中调用）</span></span><br><span class="line"><span class="title function_">ajax</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line"><span class="title function_">ajax</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;A=1&amp;B=2&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX#%E6%96%87%E6%A1%A3">https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX#%E6%96%87%E6%A1%A3</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started">https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started</a></li></ul><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><ul><li>Fetch是浏览器内置API，在浏览器环境中，可以通过顶层对象window获取</li><li>fetch()是XMLHttpRequest(ajax使用的就是XMLHttpRequest)的升级版，用于在JavaScript脚本里面发出HTTP请求</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="title function_">fetch</span>(url, [options])</span><br><span class="line"><span class="comment">// 完整options对象</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    method: &quot;GET&quot;, // HTTP 请求的方法，POST、DELETE、PUT等</span></span><br><span class="line"><span class="comment">    headers: &#123; // 请求头</span></span><br><span class="line"><span class="comment">      &quot;Content-Type&quot;: &quot;text/plain;charset=UTF-8&quot;</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    body: undefined, // POST 请求体</span></span><br><span class="line"><span class="comment">    referrer: &quot;about:client&quot;,</span></span><br><span class="line"><span class="comment">    referrerPolicy: &quot;no-referrer-when-downgrade&quot;, // 指定了 HTTP 头部 referer 字段的值</span></span><br><span class="line"><span class="comment">    mode: &quot;cors&quot;, // 请求的模式</span></span><br><span class="line"><span class="comment">    credentials: &quot;same-origin&quot;,</span></span><br><span class="line"><span class="comment">    cache: &quot;default&quot;, // 请求的 cache 模式</span></span><br><span class="line"><span class="comment">    redirect: &quot;follow&quot;, // 可用的 redirect 模式</span></span><br><span class="line"><span class="comment">    integrity: &quot;&quot;,</span></span><br><span class="line"><span class="comment">    keepalive: false,</span></span><br><span class="line"><span class="comment">    signal: undefined</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="variable constant_">URL</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request Failed&#x27;</span>, err)); </span><br></pre></td></tr></table></figure><h3 id="使用await语法"><a href="#使用await语法" class="headerlink" title="使用await语法"></a>使用await语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchText</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;foo=bar&amp;lorem=ipsum&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br></pre></td></tr></table></figure><h3 id="POST提交JSON数据"><a href="#POST提交JSON数据" class="headerlink" title="POST提交JSON数据"></a>POST提交JSON数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user =  &#123; <span class="attr">name</span>:  <span class="string">&#x27;John&#x27;</span>, <span class="attr">surname</span>:  <span class="string">&#x27;Smith&#x27;</span>  &#125;;</span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">   <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="POST提交表单数据"><a href="#POST提交表单数据" class="headerlink" title="POST提交表单数据"></a>POST提交表单数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">data.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, input.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">data.<span class="title function_">append</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="variable constant_">URL</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="上传二进制数据"><a href="#上传二进制数据" class="headerlink" title="上传二进制数据"></a>上传二进制数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blob = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>   </span><br><span class="line">  canvasElem.<span class="title function_">toBlob</span>(resolve,  <span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>:  <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: blob</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="取消fetch-请求"><a href="#取消fetch-请求" class="headerlink" title="取消fetch()请求"></a>取消fetch()请求</h3><ul><li>fetch()请求发送以后，如果中途想要取消，需要使用AbortController对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"><span class="keyword">let</span> signal = controller.<span class="property">signal</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">signal.<span class="title function_">addEventListener</span>(<span class="string">&#x27;abort&#x27;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abort!&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">controller.<span class="title function_">abort</span>(); <span class="comment">// 取消</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(signal.<span class="property">aborted</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="GET请求-1"><a href="#GET请求-1" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get请求携带参数</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=5422&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样写</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">5422</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 相应类型为流文件</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://www.xxx.com/test&#x27;</span>,</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;xxx.jpg&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="POST请求-1"><a href="#POST请求-1" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;三&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;张&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以配置参数</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user/001&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;三&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;张&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="并行请求"><a href="#并行请求" class="headerlink" title="并行请求"></a>并行请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">acct, perms</span>) &#123;</span><br><span class="line">    <span class="comment">// Both requests are now complete</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;custom header content&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局默认配置</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom instance defaults</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set config defaults when creating the instance</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alter defaults after instance has been created</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config order of precedence</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an instance using the config defaults provided by the library</span></span><br><span class="line"><span class="comment">// At this point the timeout config value is `0` as is the default for the library</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Override timeout default for the library</span></span><br><span class="line"><span class="comment">// Now all requests will wait 2.5 seconds before timing out</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Override timeout for this request as it&#x27;s known to take a long time</span></span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/longRequest&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Intercept request/responses</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Remove interceptor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myInterceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(myInterceptor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom instance interceptors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Catch error</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">      <span class="comment">// The request was made and the server responded with a status code</span></span><br><span class="line">      <span class="comment">// that falls out of the range of 2xx</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">data</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">status</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">headers</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) &#123;</span><br><span class="line">      <span class="comment">// The request was made but no response was received</span></span><br><span class="line">      <span class="comment">// `error.request` is an instance of XMLHttpRequest in the browser and an instance of</span></span><br><span class="line">      <span class="comment">// http.ClientRequest in node.js</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">request</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something happened in setting up the request that triggered an Error</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">config</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom HTTP status code error</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// Reject only if the status code is greater than or equal to 500</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cancel request with cancel token</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">var</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">thrown</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(thrown)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request canceled&#x27;</span>, thrown.<span class="property">message</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;new name&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel the request (the message parameter is optional)</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&#x27;Operation canceled by the user.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create cancel token</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">var</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="comment">// An executor function receives a cancel function as a parameter</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel the request</span></span><br><span class="line"><span class="title function_">cancel</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
            <tag> AJAX </tag>
            
            <tag> Fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的笛卡尔乘积</title>
      <link href="/2023/01/12/JS%E4%B8%AD%E7%9A%84%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/"/>
      <url>/2023/01/12/JS%E4%B8%AD%E7%9A%84%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="笛卡尔乘积定义"><a href="#笛卡尔乘积定义" class="headerlink" title="笛卡尔乘积定义"></a>笛卡尔乘积定义</h2><ul><li>笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尔积（Cartesian product），又称直积，表示为X×Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员。</li><li>假设集合A&#x3D;{a, b}，集合B&#x3D;{0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</li><li>摘自<a href="https://baike.baidu.com/item/%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/6323173">百度百科</a></li></ul><h2 id="js实现笛卡尔乘积"><a href="#js实现笛卡尔乘积" class="headerlink" title="js实现笛卡尔乘积"></a>js实现笛卡尔乘积</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  [<span class="string">&#x27;热&#x27;</span>, <span class="string">&#x27;冷&#x27;</span>, <span class="string">&#x27;冰&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;大&#x27;</span>, <span class="string">&#x27;中&#x27;</span>, <span class="string">&#x27;小&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;全糖&#x27;</span>, <span class="string">&#x27;半糖&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;现喝&#x27;</span>, <span class="string">&#x27;打包&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 list 计算所有组合结果</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  <span class="string">&#x27;热大全糖现喝&#x27;</span>, <span class="string">&#x27;热大全糖打包&#x27;</span>, <span class="string">&#x27;热大半糖现喝&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;热大半糖打包&#x27;</span>, <span class="string">&#x27;热中全糖现喝&#x27;</span>, <span class="string">&#x27;热中全糖打包&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;热中半糖现喝&#x27;</span>, <span class="string">&#x27;热中半糖打包&#x27;</span>, <span class="string">&#x27;热小全糖现喝&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;热小全糖打包&#x27;</span>, <span class="string">&#x27;热小半糖现喝&#x27;</span>, <span class="string">&#x27;热小半糖打包&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冷大全糖现喝&#x27;</span>, <span class="string">&#x27;冷大全糖打包&#x27;</span>, <span class="string">&#x27;冷大半糖现喝&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冷大半糖打包&#x27;</span>, <span class="string">&#x27;冷中全糖现喝&#x27;</span>, <span class="string">&#x27;冷中全糖打包&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冷中半糖现喝&#x27;</span>, <span class="string">&#x27;冷中半糖打包&#x27;</span>, <span class="string">&#x27;冷小全糖现喝&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冷小全糖打包&#x27;</span>, <span class="string">&#x27;冷小半糖现喝&#x27;</span>, <span class="string">&#x27;冷小半糖打包&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冰大全糖现喝&#x27;</span>, <span class="string">&#x27;冰大全糖打包&#x27;</span>, <span class="string">&#x27;冰大半糖现喝&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冰大半糖打包&#x27;</span>, <span class="string">&#x27;冰中全糖现喝&#x27;</span>, <span class="string">&#x27;冰中全糖打包&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冰中半糖现喝&#x27;</span>, <span class="string">&#x27;冰中半糖打包&#x27;</span>, <span class="string">&#x27;冰小全糖现喝&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;冰小全糖打包&#x27;</span>, <span class="string">&#x27;冰小半糖现喝&#x27;</span>, <span class="string">&#x27;冰小半糖打包&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>思路</p><ol><li>从原数组中取出前两项数组相互组合得到组合结果1</li><li>再利用组合结果1与原数组第三项数组相互组合得到结果2</li><li>依此类推，组合完原数组的所有数组项得到最终组合结果</li></ol></li><li><p>实现代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一</span></span><br><span class="line"><span class="keyword">const</span> result = list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> next = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> previousValue) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> b <span class="keyword">of</span> currentValue) &#123;</span><br><span class="line">      next.<span class="title function_">push</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> next;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result&#x27;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法二</span></span><br><span class="line"><span class="keyword">const</span> result2 = list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> previousValue.<span class="title function_">reduce</span>(<span class="function">(<span class="params">ret, a</span>) =&gt;</span> &#123;</span><br><span class="line">      ret.<span class="title function_">push</span>(...currentValue.<span class="title function_">map</span>(<span class="function"><span class="params">b</span> =&gt;</span> a + b));</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result2&#x27;</span>,result2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法三</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">combination</span> (<span class="params">list</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> result = []  </span><br><span class="line">  <span class="keyword">if</span> (!list.<span class="property">length</span>) <span class="keyword">return</span> result <span class="comment">// list长度为0时直接返回result</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> subList <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.<span class="property">length</span>) &#123;</span><br><span class="line">      result = subList.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> subResult = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> r <span class="keyword">of</span> result) &#123;</span><br><span class="line">        <span class="keyword">let</span> tailList = subList.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> r + item) <span class="comment">// [...r,item]</span></span><br><span class="line">        subResult.<span class="title function_">push</span>(...tailList)</span><br><span class="line">      &#125;</span><br><span class="line">      result = subResult</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;combination&quot;</span>,<span class="title function_">combination</span>(list))</span><br></pre></td></tr></table></figure></li></ul><h2 id="Tips：reduce-语法"><a href="#Tips：reduce-语法" class="headerlink" title="Tips：reduce()语法"></a>Tips：reduce()语法</h2><ul><li><p>reduce()语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(callback,[initialValue]) </span><br><span class="line"><span class="comment">// callback 回调函数</span></span><br><span class="line"><span class="comment">// initialValue 初始值</span></span><br></pre></td></tr></table></figure></li><li><p><code>callback</code>函数包含四个参数：</p><ul><li><code>previousValue</code>：上一次调用<code>callback</code>时的返回值。在第一次调用时，若指定了初始值<code>initialValue</code>，其值则为<code>initialValue</code>，否则为数组索引为0的元素<code>array[0]</code></li><li><code>currentValue</code>：数组中正在处理的元素。在第一次调用时，若指定了初始值<code>initialValue</code>，其值则为数组索引为0的元素·，否则为<code>array[1]</code></li><li><code>currentIndex</code>：数组中正在处理的元素的索引。若指定了初始值<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</li><li>array：用于遍历的数组</li></ul></li><li><p><code>initialValue</code>(可选)</p><ul><li>作为第一次调用<code>callback</code>函数时参数<code>previousValue</code>的值。若指定了初始值<code>initialValue</code>，则<code>currentValue</code>则将使用数组第一个元素；否则<code>previousValue</code>将使用数组第一个元素，而<code>currentValue</code>将使用数组第二个元素</li></ul></li><li><p>reduce返回值</p><ul><li>回调函数遍历整个数组后的结果</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笛卡尔乘积 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML拖拽API</title>
      <link href="/2023/01/11/HTML%E6%8B%96%E6%8B%BDAPI/"/>
      <url>/2023/01/11/HTML%E6%8B%96%E6%8B%BDAPI/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML拖拽API备忘清单"><a href="#HTML拖拽API备忘清单" class="headerlink" title="HTML拖拽API备忘清单"></a>HTML拖拽API备忘清单</h2><p>| 事件  |on事件处理程序 |触发时刻|<br>|:—-|:————–  |:—— |<br>|drag|ondrag|当拖拽元素或选中的文本时触发|<br>|dragend|ondragend|当拖拽操作结束时触发 (比如松开鼠标按键或敲“Esc”键)|<br>|dragenter|ondragenter|当拖拽元素或选中的文本到一个可释放目标时触发|<br>|dragexit|ondragexit|当元素变得不再是拖拽操作的选中目标时触发|<br>|dragleave|ondragleave|当拖拽元素或选中的文本离开一个可释放目标时触发|<br>|dragover|ondragover|当元素或选中的文本被拖到一个可释放目标上时触发（每100毫秒触发一次）|<br>|dragstart|ondragstart|当用户开始拖拽一个元素或选中的文本时触发|<br>|drop|ondrop|当元素或选中的文本在可释放目标上被释放时触发|</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>在拖拽过程中，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer">DataTransfer</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem">DataTransferItem</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItemList">和DataTransferItemList</a> 来传输与拖拽元素绑定的数据。</p></li><li><p>因此实现一个 HTML 元素的拖拽，一般需要以下几个步骤：</p><ol><li>给想要拖拽的元素设置 draggable 属性为 true</li><li>设置拖拽监听事件来完成自己的需求</li><li>若有需要，在监听事件中设置拖拽数据</li></ol></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;html-drag-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;html-drag-box-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;html-drag-box&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;html-drag-img-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;html-drag-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://dummyimage.com/600x400/ffd53b/fff.png&amp;text=photo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;html-drop-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reset-btn&quot;</span>&gt;</span>reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.html-drag-container</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">justify-items</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#html-drag-box-container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span>/ <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.html-drag-box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: tomato;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#html-drag-img-container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">3</span>/ <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.html-drag-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12vh</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.html-drop-box</span> &#123;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">2</span>/ <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">rgb</span>(<span class="number">20</span>, <span class="number">179</span>, <span class="number">241</span>) dashed <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">14vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">18vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.html-drop-box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;请拖放到此区域&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">160</span>, <span class="number">157</span>, <span class="number">157</span>);</span><br><span class="line">    <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.html-dropped</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">17</span>, <span class="number">241</span>, <span class="number">28</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.html-dropover</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">252</span>, <span class="number">83</span>, <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 用于限制从本地拖入图片时的大小 */</span></span><br><span class="line"><span class="selector-class">.html-drop-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12vh</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dragbox = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;html-drag-box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> dropbox = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;html-drop-box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> dragimg = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;html-drag-img&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> boxcontainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;html-drag-box-container&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> imgcontainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;html-drag-img-container&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> resetBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;reset-btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">dragbox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragstart&#x27;</span>, onDragStart);</span><br><span class="line">dragbox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragend&#x27;</span>, onDragEnd);</span><br><span class="line"></span><br><span class="line">dragimg.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragstart&#x27;</span>, onDragStart);</span><br><span class="line">dragimg.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragend&#x27;</span>, onDragEnd);</span><br><span class="line"></span><br><span class="line">dropbox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragover&#x27;</span>, onDragOver);</span><br><span class="line">dropbox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragleave&#x27;</span>, onDragLeave);</span><br><span class="line">dropbox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;drop&#x27;</span>, onDrop);</span><br><span class="line"></span><br><span class="line">resetBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, resetElement);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDragStart</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, e.<span class="property">target</span>.<span class="property">className</span>);</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="number">.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDragEnd</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDragOver</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 默认情况下是不允许放置拖拽元素的，因此需要取消默认设置</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    dropbox.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;html-dropover&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDragLeave</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    dropbox.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;html-dropover&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDrop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 阻止一些默认操作，如拖拽超链接会默认打开页面</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">resetElement</span>();</span><br><span class="line"></span><br><span class="line">    dropbox.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;html-dropover&#x27;</span>);</span><br><span class="line">    dropbox.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;html-dropped&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isFile = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若拖拽对象是文件</span></span><br><span class="line">    [...e.<span class="property">dataTransfer</span>.<span class="property">items</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">kind</span> === <span class="string">&quot;file&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> file = item.<span class="title function_">getAsFile</span>();</span><br><span class="line">            <span class="title function_">createPreview</span>(file);</span><br><span class="line">            isFile = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFile) <span class="keyword">return</span>;</span><br><span class="line">    dropbox.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(e.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&#x27;text/plain&#x27;</span>))[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPreview</span>(<span class="params">imageFile</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!imageFile.<span class="property">type</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;image/&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> image = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        image.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(imageFile);</span><br><span class="line">        image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(<span class="variable language_">this</span>.<span class="property">src</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    dropbox.<span class="title function_">appendChild</span>(image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dropbox.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;html-dropped&#x27;</span>)) &#123;</span><br><span class="line">        dropbox.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;html-dropped&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    boxcontainer.<span class="title function_">appendChild</span>(dragbox);</span><br><span class="line">    imgcontainer.<span class="title function_">appendChild</span>(dragimg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML拖拽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致富与杠杆</title>
      <link href="/2023/01/10/%E8%87%B4%E5%AF%8C%E4%B8%8E%E6%9D%A0%E6%9D%86/"/>
      <url>/2023/01/10/%E8%87%B4%E5%AF%8C%E4%B8%8E%E6%9D%A0%E6%9D%86/</url>
      
        <content type="html"><![CDATA[<h2 id="本文摘自一下文章"><a href="#本文摘自一下文章" class="headerlink" title="本文摘自一下文章"></a>本文摘自一下文章</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2020/05/weekly-issue-107.html">阮一峰的网络日志</a></li><li><a href="https://new.qq.com/rain/a/20200413A0U72C00">如何不靠运气致富</a></li></ul><h2 id="致富与杠杆"><a href="#致富与杠杆" class="headerlink" title="致富与杠杆"></a>致富与杠杆</h2><p>美国风险投资家 <a href="https://twitter.com/naval">Naval Ravikant</a> 有一个很有名的长推特，一共40条，题目叫做<a href="https://threadreaderapp.com/thread/1002103360646823936.html">《如何致富，不靠运气》</a>，谈了他的商业观。</p><p>和菜头翻译过<a href="https://new.qq.com/omn/20200413/20200413A0U72C00.html">中文版</a>。另外，Naval Ravikant 后来还有一篇<a href="https://nav.al/rich">长文</a>，详细解释这些观点。</p><p>他认为，致富其实只需要两步。</p><p>第一步：找到”个人-市场-产品”这三者交叉的那个定位。 你问问自己，你的竞争力在哪里？市场需要的哪一种产品，可以用到你的这种竞争力？这就是你的定位。</p><p>第二步：使用各种杠杆（leverage），使得你的产品可以服务尽可能大的市场。</p><p>只要做到上面这二步，就会赚到大钱。</p><p>我觉得，他总结得很精辟。赚大钱的奥秘就是定位和杠杆这两件事。当市场需要你的产品时，如果有办法”放大”产品，服务更多的人，你就成功了。</p><p>Naval Ravikant 说，传统的杠杆是劳动力和资本。通过雇佣更多的员工和借贷更多的钱，把业务放大。但是， 互联网时代，新的杠杆出现了，那就是软件和自媒体。</p><p>只要服务器开着，软件（包括网站和 App）就能帮你开展业务，服务更多的人。媒体杠杆更简单，只要写文章、拍视频、录播客，放到网上就可以了。只要别人看到这些内容，就等于帮你放大了业务。</p><p>这两种新杠杆，成本更低，限制条件更少（不需要大量雇人，也不需要跟银行打交道），因此是更好的杠杆。如果你把四种杠杆结合起来，就能发挥最大的威力。事实上，那些互联网巨头都是这四种杠杆的结合，难怪它们都赚到了大钱。</p><p>在我看来，这个周刊也是一种杠杆。一方面，我通过周刊，把自己的想法、看到的东西，传递出去，接触到更多的人；另一方面，周刊反过来督促我每周大量的阅读，去找到能帮到我的技术、创意、趋势和故事。</p><p>从某个角度看，人生的成就其实取决于你能影响到多少人。祝愿大家都能找到自己的人生杠杆。</p><h2 id="和菜头翻译的中文版"><a href="#和菜头翻译的中文版" class="headerlink" title="和菜头翻译的中文版"></a>和菜头翻译的中文版</h2><ol><li>Seek wealth, not money or status. Wealth is having assets that earn while you sleep. Money is how we transfer time and wealth. Status is your place in the social hierarchy.</li></ol><ul><li>去寻求财富，而非金钱或地位。财富就是你拥有资产，而资产在你睡觉的时候都还在为你赚钱；金钱是我们转换时间和财富的工具；身份是你在社会等级体系里所处的位置。</li></ul><ol start="2"><li>Understand that ethical wealth creation is possible. If you secretly despise wealth, it will elude you.</li></ol><ul><li>要明白一件事：一个人完全可以不靠坑蒙拐骗站着赚取财富。如果你在暗中鄙视财富，那么财富也会躲着你。</li></ul><ol start="3"><li>Ignore people playing status games. They gain status by attacking people playing wealth creation games.</li></ol><ul><li>别去理会那些热衷于玩身份游戏的人，他们通过攻击那些创造财富的人以获得自己的身份。</li></ul><ol start="4"><li>You’re not going to get rich renting out your time. You must own equity — a piece of a business — to gain your financial freedom.</li></ol><ul><li>你不会通过出租自己的时间而变得富有。你必须拥有产权，也就是生意的一部分，以此才能赢得个人财务自由。</li></ul><ol start="5"><li>You will get rich by giving society what it wants but do<br>es not yet know how to get. At scale.</li></ol><ul><li>提供社会大众想要但是他们还不知道如何获取的东西，你就会因此而致富。但有一点：你必须规模化地供应社会。</li></ul><ol start="6"><li>Pick an industry where you can play long term games with long term people.</li></ol><ul><li>选择一个你可以长期从事的产业，寻找一批可以一起长期共事的人。</li></ul><ol start="7"><li>The Internet has massively broadened the possible space of careers. Most people haven’t figured this out yet.</li></ol><ul><li>互联网极大拓展了一个人职业生涯的可能性。绝大多数人对此毫无认知。</li></ul><ol start="8"><li>Play iterated games. All the returns in life, whether in wealth, relationships, or knowledge, come from compound interest.</li></ol><ul><li>玩就玩复利游戏。无论是财富，人际关系或者是知识，所有你人生里获得的回报，都来自复利。</li></ul><ol start="9"><li>Pick business partners with high intelligence, energy, and, above all, integrity.</li></ol><ul><li>在选择商业合作伙伴的时候，选择那些高智商、精力旺盛的家伙，但在这一切之上，他应该是个正直诚实的人。</li></ul><ol start="10"><li>Don’t partner with cynics and pessimists. Their beliefs are self-fulfilling.</li></ol><ul><li>不要和愤世嫉俗者和悲观主义者合作，因为他们会任由坏事发生，以此证明他们的负面看法是正确的。</li></ul><ol start="11"><li>Learn to sell. Learn to build. If you can do both, you will be unstoppable.</li></ol><ul><li>学会如何销售，学会如何创建。如果你同时能做到这两件事，你的成功将无可阻挡。</li></ul><ol start="12"><li>Arm yourself with specific knowledge, accountability, and leverage.</li></ol><ul><li>用独到知识，责任感和杠杆武装自己。</li></ul><ol start="13"><li>Specific knowledge is knowledge that you cannot be trained for. If society can train you, it can train someone else, and replace you.</li></ol><ul><li>独到知识是那种不可以通过培训而获得的知识。这是因为，如果这种知识可以经由培训而得，那么其他人同样也可以，并且以此取代你。</li></ul><ol start="14"><li>Specific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now.</li></ol><ul><li>在真正的好奇心和热情驱使你前进的路上，你更有可能获得独到知识，而不是在追逐潮流热点的闻风起舞脚步里。</li></ul><ol start="15"><li>Building specific knowledge will feel like play to you but will look like work to others.</li></ol><ul><li>创建独到知识的过程对于你就像是在玩，而对于别人则像是工作。</li></ul><ol start="16"><li>When specific knowledge is taught, it’s through apprenticeships, not schools.</li></ol><ul><li>不能通过学校教育教会一个人独到知识，它只能通过学徒制口传身教。</li></ul><ol start="17"><li>Specific knowledge is often highly technical or creative. It cannot be outsourced or automated.</li></ol><ul><li>独到知识通常极富技术性和创造性，因此它不能被外包或自动实现。</li></ul><ol start="18"><li>Embrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage.</li></ol><ul><li>拥抱责任感，押上自己的声誉以承担商业风险。社会也会以责任，产权和杠杆作为回报。</li></ul><ol start="19"><li>The most accountable people have singular, public, and risky brands: Oprah, Trump, Kanye, Elon.</li></ol><ul><li>最具责任感的人都具有独一无二的、世人皆知的、敢于冒险的个性特征，如奥普拉、川普、坎耶、埃隆。</li></ul><ol start="20"><li>“Give me a lever long enough, and a place to stand, and I will move the earth.” — Archimedes</li></ol><ul><li>只要给我一根足够长的杠杆，一处可以立足的地方，我就能撬起地球。——阿基米德</li></ul><ol start="21"><li>Fortunes require leverage. Business leverage comes from capital, people, and products with no marginal cost of replication (code and media).</li></ol><ul><li>财富增长需要使用杠杆。商业杠杆有三个来源：1、资本；2、人力；3、复制起来边际成本为零的产品（如：代码和媒体）。</li></ul><ol start="22"><li>Capital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment.</li></ol><ul><li>资本的意思就是钱。想要融资，那就运用你的独到知识，配合你责任感，展示出你良好的判断力。</li></ul><ol start="23"><li>Labor means people working for you. It’s the oldest and most fought-over form of leverage. Labor leverage will impress your parents, but don’t waste your life chasing it.</li></ol><ul><li>人力指的就是为你干活的人，它是最古老也是争夺最激烈的杠杆。人力杠杆会让你父母因为你手下有许多人为你工作而感到骄傲，但你不要浪费生命去追求这一点。</li></ul><ol start="24"><li>Capital and labor are permissioned leverage. Everyone is chasing capital, but someone has to give it to you. Everyone is trying to lead, but someone has to follow you.</li></ol><ul><li>资本和劳动力是需要征得许可才能使用的杠杆。每个人都在追逐资本，但总得有个什么人给你才行；每个人都想要领导其它人，但总得有什么人愿意跟着你才行。</li></ul><ol start="25"><li>Code and media are permissionless leverage. They’re the leverage behind the newly rich. You can create software and media that works for you while you sleep.</li></ol><ul><li>代码和媒体是无需要许可即可使用的杠杆。它们是新贵人群背后的杠杆，你可以通过自己创建的软件和媒体，在睡觉时仍然为你干活。</li></ul><ol start="26"><li>An army of robots is freely available — it’s just packed in data centers for heat and space efficiency. Use it.</li></ol><ul><li>一支机器人军团已经集结待命，只是为了节约空间和热效能，它们被打包放进数据中心。去用吧。</li></ul><ol start="27"><li>If you can’t code, write books and blogs, record videos and podcasts.</li></ol><ul><li>如果你不会编程，那你还可以写书和博客，或者做视频或者音频节目。</li></ul><ol start="28"><li>Leverage is a force multiplier for your judgement.</li></ol><ul><li>杠杆能够成倍地放大你的判断力（所产生的效能）。</li></ul><ol start="29"><li>Judgement requires experience, but can be built faster by learning foundational skills.</li></ol><ul><li>判断力需要经验，但它可以通过学习基本技能的方法更快速地建立起来。</li></ul><ol start="30"><li>There is no skill called “business.” Avoid business magazines and business classes.</li></ol><ul><li>并不存在一种叫做“商业”的能力。尽量避开商业杂志和商业课程。</li></ul><ol start="31"><li>Study microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers.</li></ol><ul><li>去学习微观经济学、博弈论、心理学、说服术、伦理学、数学和计算机科学。</li></ul><ol start="32"><li>Reading is faster than listening. Doing is faster than watching.</li></ol><ul><li>读比听快，做比看快。</li></ul><ol start="33"><li>You should be too busy to “do coffee,” while still keeping an uncluttered calendar.</li></ol><ul><li>你应该忙得没有社交的时间才对，与此同时你应该始终保证日程安排井井有条。</li></ul><ol start="34"><li>Set and enforce an aspirational personal hourly rate. If fixing a problem will save less than your hourly rate, ignore it. If outsourcing a task will cost less than your hourly rate, outsource it.</li></ol><ul><li>你应该为自己设定一个有抱负的个人时薪数，并且坚持执行。如果解决一个问题所能节省下来的成本低于你的个人时薪，那就忽略这个问题好了；如果一项任务的外包成本低于你的个人时薪，就把它外包出去。</li></ul><ol start="35"><li>Work as hard as you can. Even though who you work with and what you work on are more important than how hard you work.</li></ol><ul><li>尽管你跟谁一起工作、做什么工作，要远比你的努力程度更加重要。但还是要倾尽全力去工作。</li></ul><ol start="36"><li>Become the best in the world at what you do. Keep redefining what you do until this is true.</li></ol><ul><li>你所做的事情，要努力做到世界最好。不断重新定义你在做什么，直到真的做到世界最好。</li></ul><ol start="37"><li>There are no get rich quick schemes. That’s just someone else getting rich off you.</li></ol><ul><li>这个世界上并没有快速赚钱致富的方法，如果你想要找寻这种方法，那它只会让别人从你身上赚钱致富。</li></ul><ol start="38"><li>Apply specific knowledge, with leverage, and eventually you will get what you deserve.</li></ol><ul><li>运用你的独到知识，配合上杠杆，最终你会得到你应该得到的东西。</li></ul><ol start="39"><li>When you’re finally wealthy, you’ll realize that it wasn’t what you were seeking in the first place. But that’s for another day.</li></ol><ul><li><p>终有一天当你变得富有，你会发现那一切并不是你最开始想要的东西。但是那就是另外一回事了。</p></li><li><p>注释：</p></li></ul><ol><li><p>财富就是你睡着觉，你的资产也在为你继续赚钱。这是一个越来越被广泛接受的定义。Naval Ravikant是硅谷狂热的数字货币支持者，所以，他的话另有所指。从前后文来看，他所谓的资产并不等于是传统意义上的房产、股票、收藏，而是偏向于他反复提及的：软件和媒体。</p></li><li><p>出租时间概念，许多人理解为打工，认为打工就是出租自己的时间以换取金钱。其实并非如此，Naval所指的出租时间概念，指的是一个人的财富增长，是否直接关系到他的时间。一个小卖部的老板，他并不为谁打工，但是他的财富增长需要他长时间守在店里，因此，他依然是出租时间换钱。但一个淘宝点卡店老板则不同，他的点卡销售是全自动的，不需要24小时守着，而且也不需要只做这一样生意。这就是Naval所谓互联网拓宽了个人职业生涯的一个例子。</p></li><li><p>equity我翻译为产权，不是一个很好的翻法。但是Naval前文提到assets，很明显，作为投资人他非常清楚地知道这两个字眼之间的区别。equity无论是翻译为股票、权益或者是资产，原文说“ You must own equity — a piece of a business — to gain your financial freedom.”，这是和出租时间概念做对应的。出租时间的人，在商业链条里作为生产资料出现，不拥有任何产权，也就无法通过商业行为获利，所以，我这里勉强翻译为产权。</p></li><li><p>specific knowledge我翻译为独到知识，没有翻译为特定知识、专业知识或者是特殊知识。原因是在我的理解中，specific knowledge不是书本知识，也不是学校教授的知识，更不可能在网上免费获取。一方面，它只能提供自己实践来获取；另一方面，它只能通过前人口耳相传。这种知识是做成一件事情的关键，属于知识体系中不共的那一部分。所以，我翻译为独到知识。</p></li><li><p>“Give me a lever long enough, and a place to stand, and I will move the earth.” — Archimedes 这话不像是阿基米德说的。更像是一次抬杠的结果：</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">“给我一个支点，我就能撬起地球！”</span><br><span class="line"></span><br><span class="line">“那么，您站在哪儿呢？”</span><br><span class="line"></span><br><span class="line">“好吧，给我一个支点，再给我一个站立的地方，我就能撬起地球。”</span><br><span class="line"></span><br><span class="line">“那么，您用空气就能撬起地球了？”</span><br><span class="line"></span><br><span class="line">“好吧，给我一根足够长的杠杆，一处可以立足的地方，我就可以翘起地球！”</span><br><span class="line"></span><br><span class="line">“那么，阿基米德先生，支点又不需要了吗？”</span><br><span class="line"></span><br><span class="line">“滚！”</span><br></pre></td></tr></table></figure></li><li><p>accountability我本想翻译为“靠谱程度”，想想还是算了。</p></li><li><p>号称是“四十条语录”，但是我就找见了39条。</p></li><li><p>结合上下文看，Leverage一词始终翻译为“杠杆”其实也不大对头。Naval一再强调代码、博客、播客、视频节目，我觉得Leverage在他那里，有些时候应该相当于是个人影响力的代名词，或者可以简单理解为放大器。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3备忘清单</title>
      <link href="/2022/12/29/Vue3%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2022/12/29/Vue3%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><code>Vue</code> 是一套用于构建用户界面的渐进式框架</li><li><a href="https://cn.vuejs.org/">Vue 3.x</a> 官方文档 (cn.vuejs.org)</li><li><a href="https://router.vuejs.org/zh/">Vue Router 4.x</a> 官方文档 (router.vuejs.org)</li><li><a href="https://v2.cn.vuejs.org/">Vue 2</a> 官方文档 (v2.cn.vuejs.org)</li><li>注意：Vue 3.x 版本对应 Vue Router 4.x 路由版本</li></ul><h2 id="通过-CDN-使用-Vue"><a href="#通过-CDN-使用-Vue" class="headerlink" title="通过 CDN 使用 Vue"></a>通过 CDN 使用 Vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> &#123; createApp, ref &#125; = <span class="title class_">Vue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        message</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="使用-ES-模块构建版本"><a href="#使用-ES-模块构建版本" class="headerlink" title="使用 ES 模块构建版本"></a>使用 ES 模块构建版本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&#123;&#123; message, ref &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        message</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><ul><li>已安装 16.0 或更高版本的 Node.js</li><li>以下指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm init vue@latest</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">✔ Project name: … &lt;your<span class="literal">-project-name</span>&gt;</span><br><span class="line">✔ Add TypeScript? … No/Yes</span><br><span class="line">✔ Add JSX Support? … No/Yes</span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … No/Yes</span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No/Yes</span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit testing? … No/Yes</span><br><span class="line">✔ Add Cypress <span class="keyword">for</span> both Unit and <span class="keyword">End</span><span class="literal">-to-End</span> testing? … No/Yes</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … No/Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No/Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> ./&lt;your<span class="literal">-project-name</span>&gt;...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure></li><li>安装依赖并启动开发服务器<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> &lt;your<span class="literal">-project-name</span>&gt;</span><br><span class="line"><span class="variable">$</span> npm install</span><br><span class="line"><span class="variable">$</span> npm run dev</span><br></pre></td></tr></table></figure></li><li>当你准备将应用发布到生产环境时，请运行：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm run build</span><br><span class="line"><span class="comment"># 此命令会在 ./dist 文件夹中为你的应用创建一个生产环境的构建版本</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>初始化应用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>挂载应用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用的是 Mustache 语法 (即双大括号)，每次 msg 属性更改时它也会同步 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 双大括号&#123;&#123;&#125;&#125;会将数据解释为纯文本，使用 v-html 指令，将插入 HTML --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="布尔型-Attribute"><a href="#布尔型-Attribute" class="headerlink" title="布尔型 Attribute"></a>布尔型 Attribute</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span></span><br><span class="line">  Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h2><ul><li>通过不带参数的 v-bind，你可以将它们绑定到单个元素上<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> comp <span class="keyword">from</span> <span class="string">&quot;./Comp.vue&quot;</span></span><br><span class="line">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> b = <span class="title function_">ref</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123;a, b&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>如果你是使用的 setup 语法糖。需要使用 defineprops 声名（可以直接使用a&#x2F;b）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? <span class="string">&#x27;YES&#x27;</span> : <span class="string">&#x27;NO&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;&#123; message.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div :id=<span class="string">&quot;`list-$&#123;id&#125;`&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="仅支持表达式-例子都是无效"><a href="#仅支持表达式-例子都是无效" class="headerlink" title="仅支持表达式(例子都是无效)"></a>仅支持表达式(例子都是无效)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个语句，而非表达式</span></span><br><span class="line">&#123;&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;&#125;</span><br><span class="line"><span class="comment">// 条件控制也不支持，请使用三元表达式</span></span><br><span class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="keyword">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;toTitleDate(date)&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; formatDate(date) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 Directives"></a>指令 Directives</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参数-Arguments"><a href="#参数-Arguments" class="headerlink" title="参数 Arguments"></a>参数 Arguments</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">这里的 attributeName 会作为一个 JS 表达式被动态执行</span><br></pre></td></tr></table></figure><h2 id="动态的事件名称"><a href="#动态的事件名称" class="headerlink" title="动态的事件名称"></a>动态的事件名称</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修饰符-Modifiers"><a href="#修饰符-Modifiers" class="headerlink" title="修饰符 Modifiers"></a>修饰符 Modifiers</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- .prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault() --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="attr">on</span>:submit.<span class="property">prevent</span>=<span class="string">&quot;onSubmit&quot;</span></span><br><span class="line">──┬─ ─┬──── ─┬─────  ─┬──────</span><br><span class="line">  ┆   ┆      ┆        ╰─ <span class="title class_">Value</span> 解释为<span class="variable constant_">JS</span>表达式</span><br><span class="line">  ┆   ┆      ╰─ <span class="title class_">Modifiers</span> 由前导点表示</span><br><span class="line">  ┆   ╰─ <span class="title class_">Argument</span> 跟随冒号或速记符号</span><br><span class="line">  ╰─ <span class="title class_">Name</span> 以 v- 开头使用速记时可以省略</span><br></pre></td></tr></table></figure><h1 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h1><h2 id="声明状态"><a href="#声明状态" class="headerlink" title="声明状态"></a>声明状态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; state.<span class="property">count</span> &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `defineComponent`用于IDE推导类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// setup 用于组合式 API 的特殊钩子函数</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露 state 到模板</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;increment&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; state.<span class="property">count</span> &#125;&#125;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不要忘记同时暴露 increment 函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">      increment</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="setup语法糖"><a href="#setup语法糖" class="headerlink" title="setup语法糖"></a>setup语法糖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">count</span>++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; state.count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="comment">// setup 语法糖用于简化代码，尤其是当需要暴露的状态和方法越来越多时</span></span><br></pre></td></tr></table></figure><h2 id="用-ref-定义响应式变量"><a href="#用-ref-定义响应式变量" class="headerlink" title="用 ref() 定义响应式变量"></a>用 ref() 定义响应式变量</h2><ul><li>reactive只能用于对象、数组和 Map、Set 这样的集合类型，对 string、number 和 boolean 这样的原始类型则需要使用ref<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// &#123; value: 0 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 0</span></span><br><span class="line">count.<span class="property">value</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> objectRef = <span class="title function_">ref</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是响应式的替换</span></span><br><span class="line">objectRef.<span class="property">value</span> = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="title function_">ref</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="attr">bar</span>: <span class="title function_">ref</span>(<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 该函数接收一个 ref</span></span><br><span class="line"><span class="comment">// 需要通过 .value 取值</span></span><br><span class="line"><span class="comment">// 但它会保持响应性</span></span><br><span class="line"><span class="title function_">callSomeFunction</span>(obj.<span class="property">foo</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仍然是响应式的</span></span><br><span class="line"><span class="keyword">const</span> &#123; foo, bar &#125; = obj;</span><br></pre></td></tr></table></figure></li><li>在 html 模板中不需要带 .value 就可以使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="有状态方法"><a href="#有状态方法" class="headerlink" title="有状态方法"></a>有状态方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, defineComponent, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 每个实例都有了自己的预置防抖的处理函数</span></span><br><span class="line">    <span class="keyword">const</span> debouncedClick = <span class="title function_">debounce</span>(click, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ... 对点击的响应 ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最好是在组件卸载时</span></span><br><span class="line">    <span class="comment">// 清除掉防抖计时器</span></span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      debouncedClick.<span class="title function_">cancel</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="响应式样式"><a href="#响应式样式" class="headerlink" title="响应式样式"></a>响应式样式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> open = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;open = !open&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">div</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">transition</span>: height <span class="number">0.1s</span> linear;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="built_in">v-bind</span>(open ? <span class="string">&#x27;30px&#x27;</span> : <span class="string">&#x27;0px&#x27;</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="响应式进阶-——-watch-和-computed"><a href="#响应式进阶-——-watch-和-computed" class="headerlink" title="响应式进阶 —— watch 和 computed"></a>响应式进阶 —— watch 和 computed</h1><h2 id="监听状态"><a href="#监听状态" class="headerlink" title="监听状态"></a>监听状态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> isEvent = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  state.<span class="property">count</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isEvent.<span class="property">value</span> = count.<span class="property">value</span> % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    is event: &#123;&#123; isEvent ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="立即监听状态"><a href="#立即监听状态" class="headerlink" title="立即监听状态"></a>立即监听状态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(count, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isEvent.<span class="property">value</span> = count.<span class="property">value</span> % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="comment">// 上例中的 watch 不会立即执行，导致 isEvent 状态的初始值不准确。</span></span><br><span class="line">  <span class="comment">// 配置立即执行，会在一开始的时候立即执行一次</span></span><br><span class="line">  <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="计算状态"><a href="#计算状态" class="headerlink" title="计算状态"></a>计算状态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">// computed 的回调函数里，会根据已有并用到的状态计算出新的状态</span></span><br><span class="line"><span class="keyword">const</span> capital = <span class="title function_">computed</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> text.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>to capital: &#123;&#123; capital &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><h2 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a>defineProps</h2><ul><li><p>子组件定义需要的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里可以将 `username` 解构出来，</span></span><br><span class="line"><span class="comment">// 但是一旦解构出来再使用，就不具备响应式能力</span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>username: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>父组件参入参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">children</span> <span class="attr">:username</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a>defineEmits</h2><ul><li>子组件定义支持 emit 的函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineEmits, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;search&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&#x27;search&#x27;</span>, keyword.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onSearch&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>父组件绑定子组件定义的事件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params">keyword</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(keyword)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">children</span> @<span class="attr">search</span>=<span class="string">&quot;onSearch&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h2><ul><li>子组件对父组件暴露方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineExpose, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(keyword.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123; onSearch &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>父组件调用子组件的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> childrenRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  childrenRef.<span class="property">value</span>.<span class="title function_">onSearch</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">children</span> <span class="attr">ref</span>=<span class="string">&#x27;childrenRef&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onSearch&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide &#x2F; Inject"></a>Provide &#x2F; Inject</h2><ul><li>在应用中使用 ProvideKey<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">InjectionKey</span>, <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ProvideKey</span> = <span class="title class_">Symbol</span>() <span class="keyword">as</span> <span class="title class_">InjectionKey</span>&lt;<span class="title class_">Ref</span>&lt;string&gt;&gt;</span><br></pre></td></tr></table></figure></li><li>父组件为后代组件提供数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProvideKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = ref&lt;string&gt;(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="title function_">provide</span>(<span class="title class_">ProvideKey</span>, text)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>后代组件注入父组件提供的数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProvideKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="title function_">inject</span>(<span class="title class_">ProvideKey</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Vue-中使用-TypeScript"><a href="#Vue-中使用-TypeScript" class="headerlink" title="Vue 中使用 TypeScript"></a>Vue 中使用 TypeScript</h1><h2 id="为组件的-props-标注类型"><a href="#为组件的-props-标注类型" class="headerlink" title="为组件的 props 标注类型"></a>为组件的 props 标注类型</h2><ul><li>当使用 &lt;script setup&gt; 时，defineProps() 宏函数支持从它的参数中推导类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">bar</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">props.<span class="property">foo</span> <span class="comment">// string</span></span><br><span class="line">props.<span class="property">bar</span> <span class="comment">// number | undefined</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>对同一个文件中的一个接口或对象类型字面量的引用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Props</span> &#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"></span><br><span class="line">defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br></pre></td></tr></table></figure></li><li>Props 解构默认值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export interface Props &#123;</span><br><span class="line">  msg?: string</span><br><span class="line">  labels?: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  msg: &#x27;hello&#x27;,</span><br><span class="line">  labels: () =&gt; [&#x27;one&#x27;, &#x27;two&#x27;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>使用目前为实验性的响应性语法糖<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">interface <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  count?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 defineProps() 的响应性解构</span></span><br><span class="line"><span class="comment">// 默认值会被编译为等价的运行时选项</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  name, count = <span class="number">100</span></span><br><span class="line">&#125; = defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="为组件的-emits-标注类型"><a href="#为组件的-emits-标注类型" class="headerlink" title="为组件的 emits 标注类型"></a>为组件的 emits 标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;update&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于类型</span></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: number): <span class="title function_">void</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: string): <span class="keyword">void</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="为-ref-标注类型"><a href="#为-ref-标注类型" class="headerlink" title="为 ref() 标注类型"></a>为 ref() 标注类型</h2><ul><li>ref 会根据初始化时的值推导其类型：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">year</span>: <span class="title class_">Ref</span>&lt;string | number&gt; = <span class="title function_">ref</span>(<span class="string">&#x27;2023&#x27;</span>)</span><br><span class="line"></span><br><span class="line">year.<span class="property">value</span> = <span class="number">2023</span> <span class="comment">// 成功！</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="为-reactive-标注类型"><a href="#为-reactive-标注类型" class="headerlink" title="为 reactive() 标注类型"></a>为 reactive() 标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: string</span><br><span class="line">  year?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">book</span>: <span class="title class_">Book</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Vue 3 指引&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="为-computed-标注类型"><a href="#为-computed-标注类型" class="headerlink" title="为 computed() 标注类型"></a>为 computed() 标注类型</h2><ul><li>你还可以通过泛型参数显式指定类型：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = computed&lt;number&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 若返回值不是 number 类型则会报错</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="为事件处理函数标注类型"><a href="#为事件处理函数标注类型" class="headerlink" title="为事件处理函数标注类型"></a>为事件处理函数标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// `event` 隐式地标注为 `any` 类型</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 显式地为事件处理函数的参数标注类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event: Event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为-provide-inject-标注类型"><a href="#为-provide-inject-标注类型" class="headerlink" title="为 provide &#x2F; inject 标注类型"></a>为 provide &#x2F; inject 标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">InjectionKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="title class_">Symbol</span>() <span class="keyword">as</span> <span class="title class_">InjectionKey</span>&lt;string&gt;</span><br><span class="line"><span class="comment">// 若提供的是非字符串值会导致错误</span></span><br><span class="line"><span class="title function_">provide</span>(key, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// foo 的类型：string | undefined</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">inject</span>(key)</span><br></pre></td></tr></table></figure><h2 id="为模板引用标注类型"><a href="#为模板引用标注类型" class="headerlink" title="为模板引用标注类型"></a>为模板引用标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> el = ref&lt;<span class="title class_">HTMLInputElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  el.<span class="property">value</span>?.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;el&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="为组件模板引用标注类型"><a href="#为组件模板引用标注类型" class="headerlink" title="为组件模板引用标注类型"></a>为组件模板引用标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyModal.vue</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isContentShown = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = </span><br><span class="line">      (<span class="params"></span>) =&gt; (isContentShown.<span class="property">value</span> = <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">  open</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>使用 TypeScript 内置的 InstanceType 工具类型来获取其实例类<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyModal</span> <span class="keyword">from</span> <span class="string">&#x27;./MyModal.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">type <span class="title class_">Modal</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">MyModal</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modal = ref&lt;<span class="title class_">Modal</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">openModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  modal.<span class="property">value</span>?.<span class="title function_">open</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="选项式-API-为组件的-props-标注类型"><a href="#选项式-API-为组件的-props-标注类型" class="headerlink" title="选项式 API 为组件的 props 标注类型"></a>选项式 API 为组件的 props 标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// 启用了类型推导</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">id</span>: [<span class="title class_">Number</span>, <span class="title class_">String</span>],</span><br><span class="line">    <span class="attr">msg</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">metadata</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 类型：string | undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    <span class="comment">// 类型：number|string|undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">    <span class="comment">// 类型：string</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span></span><br><span class="line">    <span class="comment">// 类型：any</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metadata</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用 PropType 这个工具类型来标记更复杂的 props 类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: string</span><br><span class="line">  <span class="attr">author</span>: string</span><br><span class="line">  <span class="attr">year</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">book</span>: &#123;</span><br><span class="line">      <span class="comment">// 提供相对 `Object` 更确定的类型</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">Book</span>&gt;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 也可以标记函数</span></span><br><span class="line">    <span class="attr">callback</span>: <span class="title class_">Function</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="function">(<span class="params">id: number</span>) =&gt;</span> <span class="keyword">void</span>&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">book</span>.<span class="property">title</span> <span class="comment">// string</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">book</span>.<span class="property">year</span> <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TS Error: argument of type &#x27;string&#x27; is not</span></span><br><span class="line">    <span class="comment">// assignable to parameter of type &#x27;number&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span>?.(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="选项式-API-为组件的-emits-标注类型"><a href="#选项式-API-为组件的-emits-标注类型" class="headerlink" title="选项式 API 为组件的 emits 标注类型"></a>选项式 API 为组件的 emits 标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">type <span class="title class_">Payload</span> = &#123; <span class="attr">bookName</span>: string &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="title function_">addBook</span>(<span class="params">payload: Payload</span>) &#123;</span><br><span class="line">      <span class="comment">// 执行运行时校验</span></span><br><span class="line">      <span class="keyword">return</span> payload.<span class="property">bookName</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;addBook&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">bookName</span>: <span class="number">123</span> <span class="comment">// 类型错误</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 类型错误</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;non-declared-event&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="选项式-API-为计算属性标记类型"><a href="#选项式-API-为计算属性标记类型" class="headerlink" title="选项式 API 为计算属性标记类型"></a>选项式 API 为计算属性标记类型</h2><ul><li>计算属性会自动根据其返回值来推导其类型：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span> + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> <span class="comment">// 类型：string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在某些场景中，你可能想要显式地标记出计算属性的类型以确保其实现是正确的：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 显式标注返回类型</span></span><br><span class="line">    <span class="title function_">greeting</span>(): string &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span> + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标注一个可写的计算属性</span></span><br><span class="line">    <span class="attr">greetingUppercased</span>: &#123;</span><br><span class="line">      <span class="title function_">get</span>(): string &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">greeting</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue: string</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = newValue.<span class="title function_">toUpperCase</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="选项式-API-为事件处理函数标注类型"><a href="#选项式-API-为事件处理函数标注类型" class="headerlink" title="选项式 API 为事件处理函数标注类型"></a>选项式 API 为事件处理函数标注类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params">event: Event</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>((event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>).<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="选项式-API-扩展全局属性"><a href="#选项式-API-扩展全局属性" class="headerlink" title="选项式 API 扩展全局属性"></a>选项式 API 扩展全局属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$http</span>: <span class="keyword">typeof</span> axios</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params">key: string</span>) =&gt;</span> string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型扩展的位置<ul><li>我们可以将这些类型扩展放在一个 .ts 文件，或是一个影响整个项目的 *.d.ts 文件中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不工作，将覆盖原始类型。</span></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params">key: string</span>) =&gt;</span> string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常工作。</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params">key: string</span>) =&gt;</span> string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="选项式-API-扩展自定义选项"><a href="#选项式-API-扩展自定义选项" class="headerlink" title="选项式 API 扩展自定义选项"></a>选项式 API 扩展自定义选项</h2><ul><li>某些插件，比如 vue-router，提供了一些自定义的组件选项，比如 beforeRouteEnter：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>如果没有确切的类型标注，这个钩子函数的参数会隐式地标注为 any 类型。我们可以为 ComponentCustomOptions 接口扩展自定义的选项来支持：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomOptions</span> &#123;</span><br><span class="line">    beforeRouteEnter?(</span><br><span class="line">      <span class="attr">to</span>: <span class="title class_">Route</span>,</span><br><span class="line">      <span class="attr">from</span>: <span class="title class_">Route</span>,</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">    ): <span class="keyword">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="API-参考"><a href="#API-参考" class="headerlink" title="API 参考"></a>API 参考</h1><h2 id="全局-API-应用实例"><a href="#全局-API-应用实例" class="headerlink" title="全局 API - 应用实例"></a>全局 API - 应用实例</h2><h3 id="createApp"><a href="#createApp" class="headerlink" title="createApp()"></a>createApp()</h3><ul><li>创建一个应用实例 #</li></ul><h3 id="createSSRApp"><a href="#createSSRApp" class="headerlink" title="createSSRApp()"></a>createSSRApp()</h3><ul><li>以 SSR 激活模式创建一个应用实例 #</li></ul><h3 id="app-mount"><a href="#app-mount" class="headerlink" title="app.mount()"></a>app.mount()</h3><ul><li>将应用实例挂载在一个容器元素中 #</li></ul><h3 id="app-unmount"><a href="#app-unmount" class="headerlink" title="app.unmount()"></a>app.unmount()</h3><ul><li>卸载一个已挂载的应用实例 #</li></ul><h3 id="app-provide"><a href="#app-provide" class="headerlink" title="app.provide()"></a>app.provide()</h3><ul><li>提供一个可以在应用中的所有后代组件中注入使用的值 #</li></ul><h3 id="app-component"><a href="#app-component" class="headerlink" title="app.component()"></a>app.component()</h3><ul><li>注册或获取全局组件 #</li></ul><h3 id="app-directive"><a href="#app-directive" class="headerlink" title="app.directive()"></a>app.directive()</h3><ul><li>注册或获取全局指令 #</li></ul><h3 id="app-use"><a href="#app-use" class="headerlink" title="app.use()"></a>app.use()</h3><ul><li>安装一个插件 #</li></ul><h3 id="app-mixin"><a href="#app-mixin" class="headerlink" title="app.mixin()"></a>app.mixin()</h3><ul><li>全局注册一个混入 #</li></ul><h3 id="app-version"><a href="#app-version" class="headerlink" title="app.version"></a>app.version</h3><ul><li>当前应用所使用的 Vue 版本号 #</li></ul><h3 id="app-config"><a href="#app-config" class="headerlink" title="app.config"></a>app.config</h3><ul><li>获得应用实例的配置设定 #</li></ul><h3 id="app-config-errorHandler"><a href="#app-config-errorHandler" class="headerlink" title="app.config.errorHandler"></a>app.config.errorHandler</h3><ul><li>为应用内抛出的未捕获错误指定一个全局处理函数 #</li></ul><h3 id="app-config-warnHandler"><a href="#app-config-warnHandler" class="headerlink" title="app.config.warnHandler"></a>app.config.warnHandler</h3><ul><li>为 Vue 的运行时警告指定一个自定义处理函数 #</li></ul><h3 id="app-config-performance"><a href="#app-config-performance" class="headerlink" title="app.config.performance"></a>app.config.performance</h3><ul><li>在浏览器开发工具中追踪性能表现 #</li></ul><h3 id="app-config-compilerOptions"><a href="#app-config-compilerOptions" class="headerlink" title="app.config.compilerOptions"></a>app.config.compilerOptions</h3><ul><li>配置运行时编译器的选项 #</li></ul><h3 id="app-config-globalProperties"><a href="#app-config-globalProperties" class="headerlink" title="app.config.globalProperties"></a>app.config.globalProperties</h3><ul><li>注册全局属性对象 #</li></ul><h3 id="app-config-optionMergeStrategies"><a href="#app-config-optionMergeStrategies" class="headerlink" title="app.config.optionMergeStrategies"></a>app.config.optionMergeStrategies</h3><ul><li>定义自定义组件选项的合并策略的对象 #</li></ul><h2 id="全局-API-通用"><a href="#全局-API-通用" class="headerlink" title="全局 API - 通用"></a>全局 API - 通用</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><ul><li>Vue 版本号 #</li></ul><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick()"></a>nextTick()</h3><ul><li>等待下一次 DOM 更新后执行回调 #</li></ul><h3 id="defineComponent"><a href="#defineComponent" class="headerlink" title="defineComponent()"></a>defineComponent()</h3><ul><li>在定义 Vue 组件时提供类型推导的辅助函数 #</li></ul><h3 id="defineAsyncComponent"><a href="#defineAsyncComponent" class="headerlink" title="defineAsyncComponent()"></a>defineAsyncComponent()</h3><ul><li>定义一个异步组件 #</li></ul><h3 id="defineCustomElement"><a href="#defineCustomElement" class="headerlink" title="defineCustomElement()"></a>defineCustomElement()</h3><ul><li>和 defineComponent 接受的参数相同，不同的是会返回一个原生自定义元素类的构造器 #</li></ul><h2 id="组合式-API-setup"><a href="#组合式-API-setup" class="headerlink" title="组合式 API - setup()"></a>组合式 API - setup()</h2><h2 id="组合式-API-响应式-核心"><a href="#组合式-API-响应式-核心" class="headerlink" title="组合式 API - 响应式: 核心"></a>组合式 API - 响应式: 核心</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h3><ul><li>返回一个 ref 对象 #</li></ul><h3 id="computed"><a href="#computed" class="headerlink" title="computed ()"></a>computed ()</h3><ul><li>定义一个计算属性 #</li></ul><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h3><ul><li>返回一个对象的响应式代理 #</li></ul><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly()"></a>readonly()</h3><ul><li>返回一个原值的只读代理 #</li></ul><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect()"></a>watchEffect()</h3><ul><li>立即运行一个函数，同时监听 #</li></ul><h3 id="watchPostEffect"><a href="#watchPostEffect" class="headerlink" title="watchPostEffect()"></a>watchPostEffect()</h3><ul><li>watchEffect() 使用 flush: ‘post’ 选项时的别名。 #</li></ul><h3 id="watchSyncEffect"><a href="#watchSyncEffect" class="headerlink" title="watchSyncEffect()"></a>watchSyncEffect()</h3><ul><li>watchEffect() 使用 flush: ‘sync’ 选项时的别名。 #</li></ul><h3 id="watch"><a href="#watch" class="headerlink" title="watch()"></a>watch()</h3><ul><li>侦听一个或多个响应式数据源 #</li></ul><h2 id="组合式-API-响应式-工具"><a href="#组合式-API-响应式-工具" class="headerlink" title="组合式 API - 响应式: 工具"></a>组合式 API - 响应式: 工具</h2><h3 id="isRef"><a href="#isRef" class="headerlink" title="isRef()"></a>isRef()</h3><ul><li>判断是否为 ref #</li></ul><h3 id="unref"><a href="#unref" class="headerlink" title="unref()"></a>unref()</h3><ul><li>是 ref，返回内部值，否则返回参数本身 #</li></ul><h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef()"></a>toRef()</h3><ul><li>创建一个属性对应的 ref #</li></ul><h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h3><ul><li>将对象上的每一个可枚举属性转换为 ref #</li></ul><h3 id="isProxy"><a href="#isProxy" class="headerlink" title="isProxy()"></a>isProxy()</h3><ul><li>检查一个对象是否是由 reactive()、readonly()、shallowReactive() 或 shallowReadonly() 创建的代理 #</li></ul><h3 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive()"></a>isReactive()</h3><ul><li>检查一个对象是否是由 reactive() 或 shallowReactive() 创建的代理。 #</li></ul><h3 id="isReadonly"><a href="#isReadonly" class="headerlink" title="isReadonly()"></a>isReadonly()</h3><ul><li>检查传入的值是否为只读对象 #</li></ul><h2 id="组合式-API-响应式-进阶"><a href="#组合式-API-响应式-进阶" class="headerlink" title="组合式 API - 响应式: 进阶"></a>组合式 API - 响应式: 进阶</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef()"></a>shallowRef()</h3><ul><li>ref() 的浅层作用形式。 #</li></ul><h3 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef()"></a>triggerRef()</h3><ul><li>强制触发依赖于一个浅层 ref 的副作用，这通常在对浅引用的内部值进行深度变更后使用。 #</li></ul><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef()"></a>customRef()</h3><ul><li>创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式。 #</li></ul><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive()"></a>shallowReactive()</h3><ul><li>reactive() 的浅层作用形式。 #</li></ul><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly()"></a>shallowReadonly()</h3><ul><li>readonly() 的浅层作用形式。 #</li></ul><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw()"></a>toRaw()</h3><ul><li>根据一个 Vue 创建的代理返回其原始对象。 #</li></ul><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw()"></a>markRaw()</h3><ul><li>将一个对象标记为不可被转为代理。返回该对象本身。 #</li></ul><h3 id="effectScope"><a href="#effectScope" class="headerlink" title="effectScope()"></a>effectScope()</h3><ul><li>创建一个 effect 作用域，可以捕获其中所创建的响应式副作用 (即计算属性和侦听器)，这样捕获到的副作用可以一起处理。 #</li></ul><h3 id="getCurrentScope"><a href="#getCurrentScope" class="headerlink" title="getCurrentScope()"></a>getCurrentScope()</h3><ul><li>如果有的话，返回当前活跃的 effect 作用域。 #</li></ul><h3 id="onScopeDispose"><a href="#onScopeDispose" class="headerlink" title="onScopeDispose()"></a>onScopeDispose()</h3><ul><li>在当前活跃的 effect 作用域上注册一个处理回调函数。当相关的 effect 作用域停止时会调用这个回调函数。 #</li></ul><h2 id="组合式-API-生命周期钩子"><a href="#组合式-API-生命周期钩子" class="headerlink" title="组合式 API - 生命周期钩子"></a>组合式 API - 生命周期钩子</h2><h3 id="onMounted"><a href="#onMounted" class="headerlink" title="onMounted()"></a>onMounted()</h3><ul><li>组件挂载完成后执行 #</li></ul><h3 id="onUpdated"><a href="#onUpdated" class="headerlink" title="onUpdated()"></a>onUpdated()</h3><ul><li>状态变更而更新其 DOM 树之后调用 #</li></ul><h3 id="onUnmounted"><a href="#onUnmounted" class="headerlink" title="onUnmounted()"></a>onUnmounted()</h3><ul><li>组件实例被卸载之后调用 #</li></ul><h3 id="onBeforeMount"><a href="#onBeforeMount" class="headerlink" title="onBeforeMount()"></a>onBeforeMount()</h3><ul><li>组件被挂载之前被调用 #</li></ul><h3 id="onBeforeUpdate"><a href="#onBeforeUpdate" class="headerlink" title="onBeforeUpdate()"></a>onBeforeUpdate()</h3><ul><li>状态变更而更新其 DOM 树之前调用 #</li></ul><h3 id="onBeforeUnmount"><a href="#onBeforeUnmount" class="headerlink" title="onBeforeUnmount()"></a>onBeforeUnmount()</h3><ul><li>组件实例被卸载之前调用 #</li></ul><h3 id="onErrorCaptured"><a href="#onErrorCaptured" class="headerlink" title="onErrorCaptured()"></a>onErrorCaptured()</h3><ul><li>捕获了后代组件传递的错误时调用 #</li></ul><h3 id="onRenderTracked"><a href="#onRenderTracked" class="headerlink" title="onRenderTracked()"></a>onRenderTracked()</h3><ul><li>组件渲染过程中追踪到响应式依赖时调用 #</li></ul><h3 id="onRenderTriggered"><a href="#onRenderTriggered" class="headerlink" title="onRenderTriggered()"></a>onRenderTriggered()</h3><ul><li>响应式依赖的变更触发了组件渲染时调用 #</li></ul><h3 id="onActivated"><a href="#onActivated" class="headerlink" title="onActivated()"></a>onActivated()</h3><ul><li>若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件被插入到 DOM 中时调用 #</li></ul><h3 id="onDeactivated"><a href="#onDeactivated" class="headerlink" title="onDeactivated()"></a>onDeactivated()</h3><ul><li>若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件从 DOM 中被移除时调用 #</li></ul><h3 id="onServerPrefetch"><a href="#onServerPrefetch" class="headerlink" title="onServerPrefetch()"></a>onServerPrefetch()</h3><ul><li>组件实例在服务器上被渲染之前调用 #</li></ul><h2 id="组合式-API-依赖注入"><a href="#组合式-API-依赖注入" class="headerlink" title="组合式 API - 依赖注入"></a>组合式 API - 依赖注入</h2><h3 id="provide"><a href="#provide" class="headerlink" title="provide()"></a>provide()</h3><ul><li>提供一个可以被后代组件中注入使用的值 #</li></ul><h3 id="inject"><a href="#inject" class="headerlink" title="inject()"></a>inject()</h3><ul><li>注入一个由祖先组件提供的值 #</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css碎片记忆</title>
      <link href="/2022/12/07/css%E7%A2%8E%E7%89%87%E8%AE%B0%E5%BF%86/"/>
      <url>/2022/12/07/css%E7%A2%8E%E7%89%87%E8%AE%B0%E5%BF%86/</url>
      
        <content type="html"><![CDATA[<ul><li><p>滚动条不占位 overlay属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: overlay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在CSS中将颜色定义为变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-color</span>:<span class="number">#06c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以在JavaScript &#x2F;客户端操作CSS变量 *&#x2F;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--main-color&#x27;</span>,<span class="string">&quot;#6c0&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>CSS文字渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffa54d</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,<span class="number">#ffa54d</span>,<span class="number">#f07bc5</span> <span class="number">50%</span>,<span class="number">#43aeff</span>);</span><br><span class="line">    -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">    -webkit-<span class="selector-tag">text</span>-<span class="attribute">fill</span>-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github向开源项目提交PR步骤</title>
      <link href="/2022/12/07/Github%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4PR%E6%AD%A5%E9%AA%A4/"/>
      <url>/2022/12/07/Github%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4PR%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="向开源项目提交PR步骤"><a href="#向开源项目提交PR步骤" class="headerlink" title="向开源项目提交PR步骤"></a>向开源项目提交PR步骤</h2><h3 id="Fork原项目到自己的仓库中"><a href="#Fork原项目到自己的仓库中" class="headerlink" title="Fork原项目到自己的仓库中"></a>Fork原项目到自己的仓库中</h3><ul><li><code>fork</code>是’分叉’、’复制’的意思，<code>fork</code>可以复制出一个仓库的新拷贝，包含了原有库中的所有提交记录</li><li><code>fork</code>后这个代码库是完全独立的，可以在自己的库中做任何修改，也可以向原来的库提交合并请求</li></ul><h3 id="clone自己仓库中的项目到本地"><a href="#clone自己仓库中的项目到本地" class="headerlink" title="clone自己仓库中的项目到本地"></a>clone自己仓库中的项目到本地</h3><pre><code><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git clone 自己仓库中fork过来的项目地址</span><br></pre></td></tr></table></figure></code></pre><h3 id="创建修改分支"><a href="#创建修改分支" class="headerlink" title="创建修改分支"></a>创建修改分支</h3><pre><code><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并切换到自己要修改的分支，一般修改分支名应为：bugfix/xxx</span></span><br><span class="line"><span class="variable">$</span> git checkout <span class="literal">-b</span> 分支名</span><br></pre></td></tr></table></figure></code></pre><h3 id="修改相应内容"><a href="#修改相应内容" class="headerlink" title="修改相应内容"></a>修改相应内容</h3><ul><li>修正错误内容</li></ul><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><pre><code><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git add .</span><br><span class="line"><span class="variable">$</span> git commit <span class="literal">-m</span> <span class="string">&quot;fix：xxx&quot;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h3><pre><code><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git push <span class="literal">-u</span> origin bugfix/xxx</span><br></pre></td></tr></table></figure></code></pre><h3 id="创建PR"><a href="#创建PR" class="headerlink" title="创建PR"></a>创建PR</h3><ul><li>GitHub仓库上方 <code>Compare &amp; pull request</code> 按钮，创建一个PR</li><li>打开pull request页面可以给该项目作者留言说明，然后点击<code>Create pull request</code>按钮</li><li>等作者同意并<code>Merge pull request</code>之后，就完成一个PR了</li></ul><h3 id="关于PR"><a href="#关于PR" class="headerlink" title="关于PR"></a>关于PR</h3><ul><li>怎么理解<code>Pull requests</code>？字面意思：拉取请求，合并请求</li><li>一个有趣知乎的回答说：我改了你们的代码，你们拉回去看看吧</li><li>大概 To request you to pull my code, is called <code>pull request</code>（求拉！）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Pull request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中常用的小工具</title>
      <link href="/2022/12/07/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/12/07/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="一个最简单的服务器框架（Node）"><a href="#一个最简单的服务器框架（Node）" class="headerlink" title="一个最简单的服务器框架（Node）"></a>一个最简单的服务器框架（Node）</h2><ul><li>通过 <code>node server.js</code> 进行启动服务器<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块 （yarn add express 或 npm i express 安装）</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 定义端口号</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当访问根路径时返回Hello World</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>));</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at  http://127.0.0.1:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转：86张脑图，一口气看完React</title>
      <link href="/2022/12/02/%E8%BD%AC%EF%BC%9A86%E5%BC%A0%E8%84%91%E5%9B%BE%EF%BC%8C%E4%B8%80%E5%8F%A3%E6%B0%94%E7%9C%8B%E5%AE%8CReact/"/>
      <url>/2022/12/02/%E8%BD%AC%EF%BC%9A86%E5%BC%A0%E8%84%91%E5%9B%BE%EF%BC%8C%E4%B8%80%E5%8F%A3%E6%B0%94%E7%9C%8B%E5%AE%8CReact/</url>
      
        <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><ul><li><a href="https://juejin.cn/post/7085145274200358949">https://juejin.cn/post/7085145274200358949</a></li><li><a href="https://aqingya.cn/articl/bf557b10.html">https://aqingya.cn/articl/bf557b10.html</a></li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><div id="post">  <article class="post-content" id="article-container">    <h2 id="1、安装">      <a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装    </h2>    <p>      <a href="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png"        data-thumb="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png">        <img src="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png">      </a>    </p>    <h2 id="2、核心概念">      <a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念    </h2>    <h3 id="2-1JSX-简介">      <a href="#2-1JSX-简介" class="headerlink" title="2.1JSX 简介"></a>2.1JSX 简介    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png"        data-thumb="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png">        <img src="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png">      </a>    </p>    <h3 id="2-2元素渲染">      <a href="#2-2元素渲染" class="headerlink" title="2.2元素渲染"></a>2.2 元素渲染    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png"        data-thumb="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png">        <img src="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png">      </a>    </p>    <h3 id="2-3组件-amp-Props">      <a href="#2-3组件-amp-Props" class="headerlink" title="2.3组件 &amp; Props"></a>2.3 组件 &amp;      Props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png"        data-thumb="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png">        <img src="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png">      </a>    </p>    <h3 id="2-4-1State-amp-生命周期">      <a href="#2-4-1State-amp-生命周期" class="headerlink" title="2.4.1State &amp; 生命周期"></a>2.4.1State &amp; 生命周期    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png"        data-thumb="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png">        <img src="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png">      </a>    </p>    <h3 id="2-4-2数据流和正确使用State">      <a href="#2-4-2数据流和正确使用State" class="headerlink" title="2.4.2数据流和正确使用State"></a>2.4.2      数据流和正确使用 State    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png"        data-thumb="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png">        <img src="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png">      </a>    </p>    <h3 id="2-5事件处理">      <a href="#2-5事件处理" class="headerlink" title="2.5事件处理"></a>2.5 事件处理    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png"        data-thumb="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png">        <img src="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png">      </a>    </p>    <h3 id="2-6条件渲染">      <a href="#2-6条件渲染" class="headerlink" title="2.6条件渲染"></a>2.6 条件渲染    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png"        data-thumb="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png">        <img src="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png">      </a>    </p>    <h3 id="2-7列表-amp-Key">      <a href="#2-7列表-amp-Key" class="headerlink" title="2.7列表 &amp; Key"></a>2.7 列表 &amp; Key    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png"        data-thumb="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png">        <img src="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png">      </a>    </p>    <h3 id="2-8表单">      <a href="#2-8表单" class="headerlink" title="2.8表单"></a>2.8 表单    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png"        data-thumb="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png">        <img src="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png">      </a>    </p>    <h3 id="2-9状态提升">      <a href="#2-9状态提升" class="headerlink" title="2.9状态提升"></a>2.9 状态提升    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png"        data-thumb="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png">        <img src="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png">      </a>    </p>    <h3 id="2-10组合-vs-继承">      <a href="#2-10组合-vs-继承" class="headerlink" title="2.10组合 vs 继承"></a>2.10      组合 vs 继承    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png"        data-thumb="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png">        <img src="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png">      </a>    </p>    <h3 id="2-11React-哲学">      <a href="#2-11React-哲学" class="headerlink" title="2.11React 哲学"></a>2.11React 哲学    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png"        data-thumb="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png">        <img src="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png">      </a>    </p>    <h2 id="3-高级指引">      <a href="#3-高级指引" class="headerlink" title="3. 高级指引"></a>3. 高级指引    </h2>    <h3 id="3-1无障碍辅助功能">      <a href="#3-1无障碍辅助功能" class="headerlink" title="3.1无障碍辅助功能"></a>3.1 无障碍辅助功能    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png"        data-thumb="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png">        <img src="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png">      </a>    </p>    <h3 id="3-2代码分割">      <a href="#3-2代码分割" class="headerlink" title="3.2代码分割"></a>3.2 代码分割    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png"        data-thumb="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png">        <img src="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png">      </a>    </p>    <h3 id="3-3-1Context">      <a href="#3-3-1Context" class="headerlink" title="3.3.1Context"></a>3.3.1Context    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png"        data-thumb="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png">        <img src="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png">      </a>    </p>    <h3 id="3-3-2Context-API">      <a href="#3-3-2Context-API" class="headerlink" title="3.3.2Context API"></a>3.3.2Context      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png"        data-thumb="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png">        <img src="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png">      </a>    </p>    <h3 id="3-4错误边界">      <a href="#3-4错误边界" class="headerlink" title="3.4错误边界"></a>3.4 错误边界    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png" data-caption="3.4错误边界"        data-thumb="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png">        <img src="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png" alt="3.4错误边界"></a>    <div class="img-alt is-center">3.4 错误边界</div>    </p>    <h3 id="3-5Refs-转发">      <a href="#3-5Refs-转发" class="headerlink" title="3.5Refs 转发"></a>3.5Refs 转发    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png"        data-thumb="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png">        <img src="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png">      </a>    </p>    <h3 id="3-6Fragments">      <a href="#3-6Fragments" class="headerlink" title="3.6Fragments"></a>3.6Fragments    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png"        data-thumb="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png">        <img src="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png">      </a>    </p>    <h3 id="3-7高阶组件">      <a href="#3-7高阶组件" class="headerlink" title="3.7高阶组件"></a>3.7 高阶组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png"        data-thumb="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png">        <img src="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png">      </a>    </p>    <h3 id="3-8-1集成带有-DOM-操作的插件">      <a href="#3-8-1集成带有-DOM-操作的插件" class="headerlink" title="3.8.1集成带有 DOM 操作的插件"></a>3.8.1 集成带有 DOM 操作的插件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png"        data-thumb="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png">        <img src="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png">      </a>    </p>    <h3 id="3-8-2与其他第三方库协同">      <a href="#3-8-2与其他第三方库协同" class="headerlink" title="3.8.2与其他第三方库协同"></a>3.8.2 与其他第三方库协同    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png"        data-thumb="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png">        <img src="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png">      </a>    </p>    <h3 id="3-9-1JSX-本质">      <a href="#3-9-1JSX-本质" class="headerlink" title="3.9.1JSX 本质"></a>3.9.1JSX      本质    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png"        data-thumb="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png">        <img src="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png">      </a>    </p>    <h3 id="3-9-2JSX-指定-React-元素类型">      <a href="#3-9-2JSX-指定-React-元素类型" class="headerlink" title="3.9.2JSX 指定 React 元素类型"></a>3.9.2JSX 指定 React 元素类型    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png"        data-thumb="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png">        <img src="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png">      </a>    </p>    <h3 id="3-9-3JSX-中指定-props">      <a href="#3-9-3JSX-中指定-props" class="headerlink" title="3.9.3JSX 中指定 props"></a>3.9.3JSX 中指定 props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png"        data-thumb="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png">        <img src="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png">      </a>    </p>    <h3 id="3-9-4JSX-中的子元素">      <a href="#3-9-4JSX-中的子元素" class="headerlink" title="3.9.4JSX 中的子元素"></a>3.9.4JSX 中的子元素    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png"        data-thumb="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png">        <img src="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png">      </a>    </p>    <h3 id="3-10-1性能优化之生产版本">      <a href="#3-10-1性能优化之生产版本" class="headerlink" title="3.10.1性能优化之生产版本"></a>3.10.1      性能优化之生产版本    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png"        data-thumb="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png">        <img src="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png">      </a>    </p>    <h3 id="3-10-2使用-Chrome-Performance-标签分析组件">      <a href="#3-10-2使用-Chrome-Performance-标签分析组件" class="headerlink"        title="3.10.2使用 Chrome Performance 标签分析组件"></a>3.10.2 使用 Chrome Performance 标签分析组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png"        data-thumb="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png">        <img src="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png">      </a>    </p>    <h3 id="3-10-3使用开发者工具中的分析器对组件进行分析">      <a href="#3-10-3使用开发者工具中的分析器对组件进行分析" class="headerlink" title="3.10.3使用开发者工具中的分析器对组件进行分析"></a>3.10.3      使用开发者工具中的分析器对组件进行分析    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png"        data-thumb="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png">        <img src="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png">      </a>    </p>    <h3 id="3-10-4其他优化">      <a href="#3-10-4其他优化" class="headerlink" title="3.10.4其他优化"></a>3.10.4 其他优化    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png"        data-thumb="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png">        <img src="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png">      </a>    </p>    <h3 id="3-11Portals">      <a href="#3-11Portals" class="headerlink" title="3.11Portals"></a>3.11Portals    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png"        data-thumb="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png">        <img src="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png">      </a>    </p>    <h3 id="3-12Profiler-API">      <a href="#3-12Profiler-API" class="headerlink" title="3.12Profiler API"></a>3.12Profiler      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png"        data-thumb="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png">        <img src="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png">      </a>    </p>    <h3 id="3-13不使用-ES6">      <a href="#3-13不使用-ES6" class="headerlink" title="3.13不使用 ES6"></a>3.13 不使用      ES6    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png"        data-thumb="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png">        <img src="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png">      </a>    </p>    <h3 id="3-14不使用-JSX">      <a href="#3-14不使用-JSX" class="headerlink" title="3.14不使用 JSX"></a>3.14 不使用      JSX    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png"        data-thumb="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png">        <img src="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png">      </a>    </p>    <h3 id="3-15协调">      <a href="#3-15协调" class="headerlink" title="3.15协调"></a>3.15 协调    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png"        data-thumb="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png">        <img src="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png">      </a>    </p>    <h3 id="3-16Refs-amp-DOM">      <a href="#3-16Refs-amp-DOM" class="headerlink" title="3.16Refs &amp; DOM"></a>3.16Refs      &amp; DOM    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png"        data-thumb="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png">        <img src="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png">      </a>    </p>    <h3 id="3-17Render-Props">      <a href="#3-17Render-Props" class="headerlink" title="3.17Render Props"></a>3.17Render      Props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png"        data-thumb="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png">        <img src="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png">      </a>    </p>    <h3 id="3-18-1静态类型检查之Flow">      <a href="#3-18-1静态类型检查之Flow" class="headerlink" title="3.18.1静态类型检查之Flow"></a>3.18.1      静态类型检查之 Flow    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png"        data-thumb="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png">        <img src="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png">      </a>    </p>    <h3 id="3-18-2静态类型检查之TypeScript">      <a href="#3-18-2静态类型检查之TypeScript" class="headerlink" title="3.18.2静态类型检查之TypeScript"></a>3.18.2 静态类型检查之      TypeScript    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png"        data-thumb="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png">        <img src="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png">      </a>    </p>    <h3 id="3-18-2静态类型检查之其他">      <a href="#3-18-2静态类型检查之其他" class="headerlink" title="3.18.2静态类型检查之其他"></a>3.18.2      静态类型检查之其他    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png"        data-thumb="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png">        <img src="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png">      </a>    </p>    <h3 id="3-19严格模式">      <a href="#3-19严格模式" class="headerlink" title="3.19严格模式"></a>3.19 严格模式    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png"        data-thumb="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png">        <img src="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png">      </a>    </p>    <h3 id="3-20使用-PropTypes-进行类型检查">      <a href="#3-20使用-PropTypes-进行类型检查" class="headerlink" title="3.20使用 PropTypes 进行类型检查"></a>3.20 使用 PropTypes      进行类型检查    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png"        data-thumb="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png">        <img src="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png">      </a>    </p>    <h3 id="3-21非受控组件">      <a href="#3-21非受控组件" class="headerlink" title="3.21非受控组件"></a>3.21 非受控组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png"        data-thumb="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png">        <img src="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png">      </a>    </p>    <h3 id="3-22Web-Components">      <a href="#3-22Web-Components" class="headerlink" title="3.22Web Components"></a>3.22Web Components    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png"        data-thumb="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png">        <img src="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png">      </a>    </p>    <h2 id="4-API-参考">      <a href="#4-API-参考" class="headerlink" title="4. API 参考"></a>4. API 参考    </h2>    <h3 id="4-1-1React-顶层-API之概览">      <a href="#4-1-1React-顶层-API之概览" class="headerlink" title="4.1.1React 顶层 API之概览"></a>4.1.1React 顶层 API 之概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png"        data-thumb="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png">        <img src="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png">      </a>    </p>    <h3 id="4-1-2React-顶层-API之参考">      <a href="#4-1-2React-顶层-API之参考" class="headerlink" title="4.1.2React 顶层 API之参考"></a>4.1.2React 顶层 API 之参考    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png"        data-thumb="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png">        <img src="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png">      </a>    </p>    <h3 id="4-1-3React-顶层-API之参考2">      <a href="#4-1-3React-顶层-API之参考2" class="headerlink" title="4.1.3React 顶层 API之参考2"></a>4.1.3React 顶层 API 之参考 2    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png"        data-thumb="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png">        <img src="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png">      </a>    </p>    <h3 id="4-2-1React-Component之概述">      <a href="#4-2-1React-Component之概述" class="headerlink" title="4.2.1React.Component之概述"></a>4.2.1React.Component      之概述    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png"        data-thumb="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png">        <img src="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png">      </a>    </p>    <h3 id="4-2-2常用的生命周期方法">      <a href="#4-2-2常用的生命周期方法" class="headerlink" title="4.2.2常用的生命周期方法"></a>4.2.2 常用的生命周期方法    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png"        data-thumb="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png">        <img src="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png">      </a>    </p>    <h3 id="4-2-3不常用的生命周期方法">      <a href="#4-2-3不常用的生命周期方法" class="headerlink" title="4.2.3不常用的生命周期方法"></a>4.2.3      不常用的生命周期方法    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png"        data-thumb="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png">        <img src="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png">      </a>    </p>    <h3 id="4-2-4其他-API">      <a href="#4-2-4其他-API" class="headerlink" title="4.2.4其他 API"></a>4.2.4 其他      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png"        data-thumb="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png">        <img src="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png">      </a>    </p>    <h3 id="4-2-5Class-属性和实例属性">      <a href="#4-2-5Class-属性和实例属性" class="headerlink" title="4.2.5Class 属性和实例属性"></a>4.2.5Class 属性和实例属性    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png"        data-thumb="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png">        <img src="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png">      </a>    </p>    <h3 id="4-3ReactDOM">      <a href="#4-3ReactDOM" class="headerlink" title="4.3ReactDOM"></a>4.3ReactDOM    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png"        data-thumb="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png">        <img src="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png">      </a>    </p>    <h3 id="4-4ReactDOMClient">      <a href="#4-4ReactDOMClient" class="headerlink" title="4.4ReactDOMClient"></a>4.4ReactDOMClient    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png"        data-thumb="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png">        <img src="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png">      </a>    </p>    <h3 id="4-5ReactDOMServer">      <a href="#4-5ReactDOMServer" class="headerlink" title="4.5ReactDOMServer"></a>4.5ReactDOMServer    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png"        data-thumb="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png">        <img src="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png">      </a>    </p>    <h3 id="4-6DOM-元素">      <a href="#4-6DOM-元素" class="headerlink" title="4.6DOM 元素"></a>4.6DOM 元素    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png"        data-thumb="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png">        <img src="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png">      </a>    </p>    <h3 id="4-7-1合成事件">      <a href="#4-7-1合成事件" class="headerlink" title="4.7.1合成事件"></a>4.7.1 合成事件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png"        data-thumb="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png">        <img src="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png">      </a>    </p>    <h3 id="4-7-2支持的事件">      <a href="#4-7-2支持的事件" class="headerlink" title="4.7.2支持的事件"></a>4.7.2 支持的事件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png"        data-thumb="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png">        <img src="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png">      </a>    </p>    <h3 id="4-7-3支持的事件2">      <a href="#4-7-3支持的事件2" class="headerlink" title="4.7.3支持的事件2"></a>4.7.3      支持的事件 2    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png"        data-thumb="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png">        <img src="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png">      </a>    </p>    <h3 id="4-7-4支持的事件3">      <a href="#4-7-4支持的事件3" class="headerlink" title="4.7.4支持的事件3"></a>4.7.4      支持的事件 3    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png"        data-thumb="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png">        <img src="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png">      </a>    </p>    <h3 id="4-8Test-Utilities">      <a href="#4-8Test-Utilities" class="headerlink" title="4.8Test Utilities"></a>4.8Test      Utilities    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png"        data-thumb="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png">        <img src="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png">      </a>    </p>    <h3 id="4-9Test-Renderer">      <a href="#4-9Test-Renderer" class="headerlink" title="4.9Test Renderer"></a>4.9Test      Renderer    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png"        data-thumb="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png">        <img src="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png">      </a>    </p>    <h3 id="4-10JS-环境要求">      <a href="#4-10JS-环境要求" class="headerlink" title="4.10JS 环境要求"></a>4.10JS      环境要求    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png"        data-thumb="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png">        <img src="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png">      </a>    </p>    <h3 id="4-11React-术语词">      <a href="#4-11React-术语词" class="headerlink" title="4.11React 术语词"></a>4.11React 术语词    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png"        data-thumb="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png">        <img src="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png">      </a>    </p>    <h2 id="5-Hook">      <a href="#5-Hook" class="headerlink" title="5. Hook"></a>5. Hook    </h2>    <h3 id="5-1Hook-简介">      <a href="#5-1Hook-简介" class="headerlink" title="5.1Hook 简介"></a>5.1Hook 简介    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png"        data-thumb="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png">        <img src="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png">      </a>    </p>    <h3 id="5-2Hook-概览">      <a href="#5-2Hook-概览" class="headerlink" title="5.2Hook 概览"></a>5.2Hook 概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png"        data-thumb="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png">        <img src="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png">      </a>    </p>    <h3 id="5-3使用-State-Hook">      <a href="#5-3使用-State-Hook" class="headerlink" title="5.3使用 State Hook"></a>5.3 使用 State      Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png"        data-thumb="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png">        <img src="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png">      </a>    </p>    <h3 id="5-4使用-Effect-Hook">      <a href="#5-4使用-Effect-Hook" class="headerlink" title="5.4使用 Effect Hook"></a>5.4 使用      Effect Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png"        data-thumb="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png">        <img src="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png">      </a>    </p>    <h3 id="5-5Hook-规则">      <a href="#5-5Hook-规则" class="headerlink" title="5.5Hook 规则"></a>5.5Hook 规则    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png"        data-thumb="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png">        <img src="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png">      </a>    </p>    <h3 id="5-6自定义">      <a href="#5-6自定义" class="headerlink" title="5.6自定义"></a>5.6 自定义    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png"        data-thumb="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png">        <img src="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png">      </a>    </p>    <h3 id="5-7Hook-API">      <a href="#5-7Hook-API" class="headerlink" title="5.7Hook API"></a>5.7Hook      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png"        data-thumb="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png">        <img src="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png">      </a>    </p>    <h3 id="5-8-1Hooks-FAQ之采纳策略">      <a href="#5-8-1Hooks-FAQ之采纳策略" class="headerlink" title="5.8.1Hooks FAQ之采纳策略"></a>5.8.1Hooks FAQ 之采纳策略    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png"        data-thumb="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png">        <img src="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png">      </a>    </p>    <h3 id="5-8-2Hooks-FAQ之从-Class-迁移到-Hook">      <a href="#5-8-2Hooks-FAQ之从-Class-迁移到-Hook" class="headerlink"        title="5.8.2Hooks FAQ之从 Class 迁移到 Hook"></a>5.8.2Hooks FAQ 之从 Class 迁移到 Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png"        data-thumb="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png">        <img src="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png">      </a>    </p>    <h3 id="5-8-3Hooks-FAQ之性能优化">      <a href="#5-8-3Hooks-FAQ之性能优化" class="headerlink" title="5.8.3Hooks FAQ之性能优化"></a>5.8.3Hooks FAQ 之性能优化    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png"        data-thumb="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png">        <img src="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png">      </a>    </p>    <h3 id="5-8-4Hooks-FAQ之底层原理">      <a href="#5-8-4Hooks-FAQ之底层原理" class="headerlink" title="5.8.4Hooks FAQ之底层原理"></a>5.8.4Hooks FAQ 之底层原理    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png"        data-thumb="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png">        <img src="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png">      </a>    </p>    <h2 id="6-测试">      <a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试    </h2>    <h3 id="6-1测试概览">      <a href="#6-1测试概览" class="headerlink" title="6.1测试概览"></a>6.1 测试概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png"        data-thumb="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png">        <img src="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png">      </a>    </p>    <h3 id="6-2测试技巧">      <a href="#6-2测试技巧" class="headerlink" title="6.2测试技巧"></a>6.2 测试技巧    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png"        data-thumb="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png">        <img src="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png">      </a>    </p>    <h3 id="6-3测试环境">      <a href="#6-3测试环境" class="headerlink" title="6.3测试环境"></a>6.3 测试环境    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png"        data-thumb="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png">        <img src="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png">      </a>    </p>    <h2 id="7-FAQ">      <a href="#7-FAQ" class="headerlink" title="7. FAQ"></a>7. FAQ    </h2>    <h3 id="7-1AJAX-及-APIs">      <a href="#7-1AJAX-及-APIs" class="headerlink" title="7.1AJAX 及 APIs"></a>7.1AJAX 及 APIs    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png"        data-thumb="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png">        <img src="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png">      </a>    </p>    <h3 id="7-2Babel，JSX-及构建过程">      <a href="#7-2Babel，JSX-及构建过程" class="headerlink" title="7.2Babel，JSX 及构建过程"></a>7.2Babel，JSX 及构建过程    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png"        data-thumb="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png">        <img src="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png">      </a>    </p>    <h3 id="7-3传递函数给组件">      <a href="#7-3传递函数给组件" class="headerlink" title="7.3传递函数给组件"></a>7.3 传递函数给组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png" data-caption="7.3传递函数给组件"        data-thumb="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png">        <img src="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png" alt="7.3传递函数给组件"></a>    <div class="img-alt is-center">7.3 传递函数给组件</div>    </p>    <h3 id="7-4组件状态">      <a href="#7-4组件状态" class="headerlink" title="7.4组件状态"></a>7.4 组件状态    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png"        data-thumb="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png">        <img src="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png">      </a>    </p>    <h3 id="7-5样式与-CSS">      <a href="#7-5样式与-CSS" class="headerlink" title="7.5样式与 CSS"></a>7.5 样式与 CSS    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png"        data-thumb="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png">        <img src="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png">      </a>    </p>    <h3 id="7-6项目文件结构">      <a href="#7-6项目文件结构" class="headerlink" title="7.6项目文件结构"></a>7.6 项目文件结构    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png" data-caption="7.6项目文件结构"        data-thumb="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png">        <img src="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png" alt="7.6项目文件结构"></a>    <div class="img-alt is-center">7.6 项目文件结构</div>    </p>    <h3 id="7-7Virtual-DOM-及内核">      <a href="#7-7Virtual-DOM-及内核" class="headerlink" title="7.7Virtual DOM 及内核"></a>7.7Virtual DOM 及内核    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png"        data-thumb="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png">        <img src="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png">      </a>    </p>  </article></div>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 转载与记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS跳出循环</title>
      <link href="/2022/12/02/JS%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF/"/>
      <url>/2022/12/02/JS%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="for循环-for-in循环"><a href="#for循环-for-in循环" class="headerlink" title="for循环&#x2F;for-in循环"></a>for循环&#x2F;for-in循环</h2><ul><li><code>for</code>&#x2F;<code>for-in</code> 循环可以使用 <code>break</code>&#x2F;<code>continue</code> 跳出循环</li><li><code>break</code> 是终止当前循环</li><li><code>continue</code> 是结束本次循环，后面的循环会继续执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i === <span class="number">2</span>) <span class="keyword">break</span>; <span class="comment">// break或continue</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// break 输出（）</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment">// continue 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;whh&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;24&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="keyword">if</span>(key === <span class="string">&#x27;age&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">name whh</span><br><span class="line">sex male</span><br></pre></td></tr></table></figure></li></ul><h2 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h2><ul><li><p>利用 <code>return</code> 在特定时机跳出当前循环，后面的循环会继续执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(item === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>利用 <code>try…catch</code> 在特定时机抛出异常达到跳出整个循环的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], key;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item === <span class="number">2</span>) &#123;</span><br><span class="line">      key = item; <span class="comment">// 记录跳出循环时机</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">  <span class="comment">// 跳出循环后要做的操作</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跳出循环时机：&#x27;</span> + key);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">跳出循环时机：<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p>|序号   |方法    |break    |continue   |return  |return true|return false|<br>|:—-|  ——-  |  ——-  |  ——-  |  ——-  |  ——-  |  ——-  |<br>|1|for循环  |成功  |跳出本次循环|不合法  |不合法  |不合法|<br>|2|Array.forEach()|不合法|不合法|跳出本次循环|跳出本次循环|跳出本次循环|<br>|3|for…in|成功|跳出本次循环|不合法|不合法|不合法|<br>|4|Array.map()|不合法|不合法|跳出本次循环|跳出本次循环|跳出本次循环|<br>|5|Array.some()|不合法|不合法|跳出本次循环|成功|跳出本次循环|<br>|6|Array.every()|不合法|不合法|成功|跳出本次循环|成功|<br>|7|Array.filter()|不合法|不合法|跳出本次循环|跳出本次循环|跳出本次循环|</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的二进制：File、Blob、FileReader、ArrayBuffer、Base64</title>
      <link href="/2022/11/03/JS%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%9AFile%E3%80%81Blob%E3%80%81FileReader%E3%80%81ArrayBuffer%E3%80%81Base64/"/>
      <url>/2022/11/03/JS%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%9AFile%E3%80%81Blob%E3%80%81FileReader%E3%80%81ArrayBuffer%E3%80%81Base64/</url>
      
        <content type="html"><![CDATA[<h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><ul><li>JavaScript 提供了一些 API 来处理文件或原始文件数据，例如：File、Blob、FileReader、ArrayBuffer、base64 等，他们之间的区别和联系如下：<br>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/029482d0-30b8-45d5-a87a-b293c2961dd6-1665453051934.png" alt="File、Blob、FileReader、ArrayBuffer、base64"></li></ul><h2 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h2><ul><li>Blob 全称为 binary large object ，即二进制大对象，它是 JavaScript 中的一个对象，表示原始的类似文件的数据。</li><li>实际上，Blob 对象是包含有只读原始数据的类文件对象。简单来说，Blob 对象就是一个不可修改的二进制文件。</li></ul><h3 id="Blob-创建"><a href="#Blob-创建" class="headerlink" title="Blob 创建"></a>Blob 创建</h3><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Blob</span>(array, options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建时需要传入两个参数：array, options</span></span><br><span class="line"><span class="comment">//    array：由 ArrayBuffer、ArrayBufferView、Blob、DOMString 等对象构成的</span></span><br><span class="line"><span class="comment">//    options：可选的 BlobPropertyBag 字典，它可能会指定如下两个属性</span></span><br><span class="line"><span class="comment">//        type：默认值为 &quot;&quot;，表示将会被放入到 blob 中的数组内容的 MIME 类型</span></span><br><span class="line"><span class="comment">//        endings：默认值为&quot;transparent&quot;，用于指定包含行结束符\n的字符串如何被写入，不常用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&quot;Hello World&quot;</span>], &#123;<span class="attr">type</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(blob); <span class="comment">// Blob &#123;size: 11, type: &#x27;text/plain&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 URL.createObjectURL() 方法将将其转化为一个 URL，如果是图片类型可以直接引用url，文本类型可以直接在iframe中加载</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>常见的MIME类型</p><p>  |MIME类型     |描述  |<br>  |:———     |  ——-  |<br>  |text&#x2F;plain     |纯文本文档|<br>  |text&#x2F;html       |HTML文档|<br>  |text&#x2F;javascript |JavaScript文件|<br>  |text&#x2F;css        |CSS文件|<br>  |application&#x2F;json|JSON文件|<br>  |application&#x2F;pdf |PDF文件|<br>  |application&#x2F;xml |XML文件|<br>  |image&#x2F;jpeg      |JPEG图像|<br>  |image&#x2F;png       |PNG图像|<br>  |image&#x2F;gif       |GIF图像|<br>  |image&#x2F;svg+xml   |SVG图像|<br>  |audio&#x2F;mpeg      |MP3文件|<br>  |video&#x2F;mpeg      |MP4文件|</p></li></ul><h3 id="Blob-分片"><a href="#Blob-分片" class="headerlink" title="Blob 分片"></a>Blob 分片</h3><ul><li>Blob 对象内置了 slice() 方法用来将 blob 对象分片<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> blob = instanceOfBlob.<span class="title function_">slice</span>([start [, end [, contentType]]]&#125;;</span><br><span class="line"><span class="comment">// start：设置切片的起点，即切片开始位置。默认值为 0</span></span><br><span class="line"><span class="comment">// end：设置切片的结束点，会对该位置之前的数据进行切片。默认值为blob.size</span></span><br><span class="line"><span class="comment">// contentType：设置新 blob 的 MIME 类型。如果省略 type，则默认为 blob 的原始值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&quot;Hello World&quot;</span>], &#123;<span class="attr">type</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> subBlob = blob.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">iframe.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(subBlob);</span><br><span class="line"><span class="comment">// 此时页面会显示&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><ul><li>文件（File）接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容。实际上，File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。Blob 的属性和方法都可以用于 File 对象</li><li>注意：File 对象中只存在于浏览器环境中，在 Node.js 环境中不存在</li><li>在 JavaScript 中，主要有两种方法来获取 File 对象<ul><li><code>&lt;input&gt;</code> 元素上选择文件后返回的 FileList 对象</li><li>文件拖放操作生成的 DataTransfer 对象</li></ul></li></ul><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fileInput&quot;</span>);</span><br><span class="line">fileInput.<span class="property">onchange</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">files</span>); <span class="comment">// 输出一个 FileList 数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个 File 对象都包含文件的一些属性，这些属性都继承自 Blob 对象：</span></span><br><span class="line"><span class="comment">//   lastModified：引用文件最后修改日期，为自1970年1月1日0:00以来的毫秒数</span></span><br><span class="line"><span class="comment">//   lastModifiedDate：引用文件的最后修改日期</span></span><br><span class="line"><span class="comment">//   name：引用文件的文件名</span></span><br><span class="line"><span class="comment">//   size：引用文件的文件大小</span></span><br><span class="line"><span class="comment">//   type：文件的媒体类型（MIME）</span></span><br><span class="line"><span class="comment">//   webkitRelativePath：文件的路径或 URL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="文件拖放"><a href="#文件拖放" class="headerlink" title="文件拖放"></a>文件拖放</h3><ul><li>这种获取 File 对象的方式就是通过 ondrop 和 ondragover 两个拖放 API 实现的<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义拖放区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;drop-zone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dropZone = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;drop-zone&quot;</span>);</span><br><span class="line">dropZone.<span class="property">ondragover</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认事件</span></span><br><span class="line">&#125;</span><br><span class="line">dropZone.<span class="property">ondrop</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认事件</span></span><br><span class="line">    <span class="keyword">const</span> files = e.<span class="property">dataTransfer</span>.<span class="property">files</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files); <span class="comment">// 输出FileList数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ul><li>FileReader 是一个异步 API，用于读取文件并提取其内容以供进一步使用。FileReader 可以将 Blob 读取为不同的格式</li><li>注意：FileReader 仅用于以安全的方式从用户（远程）系统读取文件内容，不能用于从文件系统中按路径名简单地读取文件</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"><span class="comment">// 对象常用属性：error(读取文件错误)、result(返回文件内容)、readyState(状态)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FileReader 对象提供了以下方法来加载文件：</span></span><br><span class="line"><span class="comment">//     reader.readAsArrayBuffer()：读取指定 Blob 中的内容，完成之后，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象</span></span><br><span class="line"><span class="comment">//     reader.readAsBinaryString()：读取指定 Blob 中的内容，完成之后，result 属性中将包含所读取文件的原始二进制数据</span></span><br><span class="line"><span class="comment">//     reader.readAsDataURL()：读取指定 Blob 中的内容，完成之后，result 属性中将包含一个data: URL 格式的 Base64 字符串以表示所读取文件的内容</span></span><br><span class="line"><span class="comment">//     reader.readAsText()：读取指定 Blob 中的内容，完成之后，result 属性中将包含一个字符串以表示所读取的文件内容</span></span><br></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>FileReader 对象常用的事件如下：<ul><li>abort：该事件在读取操作被中断时触发</li><li>error：该事件在读取操作发生错误时触发</li><li>load：该事件在读取操作完成时触发</li><li>progress：该事件在读取 Blob 时触发</li></ul></li><li>这些方法可以加上前置 on 后在HTML元素上使用，比如onload、onerror、onabort、onprogress</li><li>由于FileReader对象继承自EventTarget，因此还可以使用 addEventListener() 监听上述事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>读取文本文档（如.txt文件）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先创建了一个 FileReader 对象，当文件上传成功时，使用 readAsText() 方法读取 File 对象，当读取操作完成时打印读取结果</span></span><br><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fileInput&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">fileInput.<span class="property">onchange</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    reader.<span class="title function_">readAsText</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">reader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>); <span class="comment">// 打印文本内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>读取二进制文件（如图片、pdf）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fileInput&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">fileInput.<span class="property">onchange</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  reader.<span class="title function_">readAsDataURL</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">reader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>); <span class="comment">// 打印base64编码的 URL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>当上传大文件时，可以通过 progress 事件来监控文件的读取进度<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">reader.<span class="property">onprogress</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">loaded</span> &amp;&amp; e.<span class="property">total</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> percent = (event.<span class="property">loaded</span> / event.<span class="property">total</span>) * <span class="number">100</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`上传进度: <span class="subst">$&#123;<span class="built_in">Math</span>.round(percent)&#125;</span> %`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// progress 事件提供了两个属性：loaded（已读取量）和total（需读取总量）</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h2><ul><li><p>ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuffer 的内容不能直接操作，只能通过 DataView 对象或 TypedArrray 对象来访问。这些对象用于读取和写入缓冲区内容。</p><ul><li>TypedArray：用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图。</li><li>DataViews：用来生成内存的视图，可以自定义格式和字节序。</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/f57432a5-a7f8-4f84-a561-2fdd60f358f9-1665453060547.png" alt="ArrayBuffer"></p></li><li><p>TypedArray视图和 DataView视图的区别主要是字节序，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。</p></li><li><p>ArrayBuffer 与 Blob 有啥区别呢？根据 ArrayBuffer 和 Blob 的特性，Blob 作为一个整体文件，适合用于传输；当需要对二进制数据进行操作时（比如要修改某一段数据时），就可以使用 ArrayBuffer</p></li></ul><h3 id="ArrayBuffer的方法和属性"><a href="#ArrayBuffer的方法和属性" class="headerlink" title="ArrayBuffer的方法和属性"></a>ArrayBuffer的方法和属性</h3><ul><li>new ArrayBuffer()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(bytelength)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：它接受一个参数，即 bytelength，表示要创建数组缓冲区的大小（以字节为单位。）；</span></span><br><span class="line"><span class="comment">// 返回值：返回一个新的指定大小的ArrayBuffer对象，内容初始化为0。</span></span><br></pre></td></tr></table></figure></li><li>ArrayBuffer.isView()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayBuffer 上有一个 isView()方法，它的返回值是一个布尔值，如果参数是 ArrayBuffer 的视图实例则返回 true，例如类型数组对象或 DataView 对象；否则返回 false。简单来说，这个方法就是用来判断参数是否是 TypedArray 实例或者 DataView 实例</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(buffer)   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(buffer);</span><br><span class="line"><span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(view)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="TypedArray的属性和方法"><a href="#TypedArray的属性和方法" class="headerlink" title="TypedArray的属性和方法"></a>TypedArray的属性和方法</h3><ul><li>TypedArray 对象一共提供 9 种类型的视图，每一种视图都是一种构造函数，如上图</li><li>这些构造函数生成的对象统称为 TypedArray 对象。它们和正常的数组很类似，都有length 属性，都能用索引获取数组元素，所有数组的方法都可以在类型化数组上面使用</li><li>使用 new TypedArray() 方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Int8Array</span>(length);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Int8Array</span>(typedArray);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Int8Array</span>(object);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Int8Array</span>(buffer [, byteOffset [, length]]);</span><br></pre></td></tr></table></figure></li></ul><h3 id="DataView的属性和方法"><a href="#DataView的属性和方法" class="headerlink" title="DataView的属性和方法"></a>DataView的属性和方法</h3><ul><li>DataView 视图是一个可以从 二进制 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题</li><li>DataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的</li><li>new DataView()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">DataView</span>(buffer [, byteOffset [, byteLength]])  </span><br><span class="line"></span><br><span class="line"><span class="comment">// buffer：一个已经存在的 ArrayBuffer 对象，DataView 对象的数据源。</span></span><br><span class="line"><span class="comment">// byteOffset：可选，此 DataView 对象的第一个字节在 buffer 中的字节偏移。如果未指定，则默认从第一个字节开始。</span></span><br><span class="line"><span class="comment">// byteLength：可选，此 DataView 对象的字节长度。如果未指定，这个视图的长度将匹配 buffer 的长度。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Object-URL"><a href="#Object-URL" class="headerlink" title="Object URL"></a>Object URL</h2><ul><li><p>Object URL（MDN定义名称）又称Blob URL（W3C定义名称），是HTML5中的新标准。它是一个用来表示File Object 或Blob Object 的URL</p></li><li><p>其实 Blob URL&#x2F;Object URL 是一种伪协议，允许将 Blob 和 File 对象用作图像、二进制数据下载链接等的 URL 源。</p></li><li><p>对于 Blob&#x2F;File 对象，可以使用 URL构造函数的 createObjectURL() 方法创建将给出的对象的 URL。这个 URL 对象表示指定的 File 对象或 Blob 对象。我们可以在<code>&lt;img&gt;</code>、<code>&lt;script&gt; </code>标签中或者 <code>&lt;a&gt;</code> 和 <code>&lt;link&gt;</code> 标签的 href 属性中使用这个 URL</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;preview&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 URL.createObjectURL() 将File 对象转化为一个 URL</span></span><br><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fileInput&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> preview = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;preview&quot;</span>);</span><br><span class="line"></span><br><span class="line">fileInput.<span class="property">onchange</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  preview.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(preview.<span class="property">src</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用createObjectURL()方法创建一个data URL 时，就需要使用revokeObjectURL()方法从内存中清除它来释放内存</span></span><br><span class="line"><span class="comment">// 虽然浏览器会在文档卸载时自动释放 Data URL，但为了提高性能，我们应该使用revokeObjectURL()来手动释放它</span></span><br><span class="line"><span class="comment">// revokeObjectURL()方法接受一个Data URL 作为其参数，返回undefined</span></span><br><span class="line"><span class="keyword">const</span> objUrl = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">File</span>([<span class="string">&quot;&quot;</span>], <span class="string">&quot;filename&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objUrl);</span><br><span class="line"><span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(objUrl);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><ul><li>Base64 是一种基于64个可打印字符来表示二进制数据的表示方法。Base64 编码普遍应用于需要通过被设计为处理文本数据的媒介上储存和传输二进制数据而需要编码该二进制数据的场景。这样是为了保证数据的完整并且不用在传输过程中修改这些数据</li><li>在 JavaScript 中，有两个函数被分别用来处理解码和编码 base64 字符串：<ul><li>atob()：解码，解码一个 Base64 字符串</li><li>btoa()：编码，从一个字符串或者二进制数据编码一个 Base64 字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btoa</span>(<span class="string">&quot;JavaScript&quot;</span>)       <span class="comment">// &#x27;SmF2YVNjcmlwdA==&#x27;</span></span><br><span class="line"><span class="title function_">atob</span>(<span class="string">&#x27;SmF2YVNjcmlwdA==&#x27;</span>) <span class="comment">// &#x27;JavaScript&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用toDataURL()方法把 canvas 画布内容生成 base64 编码格式的图片</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dataUrl = canvas.<span class="title function_">toDataURL</span>();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;preview&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用readAsDataURL()方法把上传的文件转为base64格式的data URI，比如上传头像展示</span></span><br><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fileInput&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> preview = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;preview&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line">fileInput.<span class="property">onchange</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  reader.<span class="title function_">readAsDataURL</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">reader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  preview.<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>一些小的图片都可以使用 base64 格式进行展示，img标签和background的 url 属性都支持使用base64 格式的图片，这样做也可以减少 HTTP 请求</li></ul><h2 id="Base64转码-解码"><a href="#Base64转码-解码" class="headerlink" title="Base64转码&#x2F;解码"></a>Base64转码&#x2F;解码</h2><ul><li>Base64编码和解码可以通过内置的window.btoa()和window.atob()函数来实现</li><li>btoa()和atob()函数只能处理纯文本数据。如果字符串包含二进制数据，需要先将二进制数据转换为Base64字符串，然后再进行编码</li><li>对于非ASCII字符（如中文字符），btoa()和atob()函数可能无法正确处理，在这种情况下，需要先将字符串转换为UTF-8编码的二进制数据，然后再进行Base64编码和解码  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UTF-8 编码的字符串转换为 Base64</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">utf8ToBase64</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">btoa</span>(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64 转换为 UTF-8 编码的字符串</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64ToUtf8</span>(<span class="params">base64</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="title function_">atob</span>(base64)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">var</span> utf8String = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> base64Encoded = <span class="title function_">utf8ToBase64</span>(utf8String);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(base64Encoded); <span class="comment">// 输出: SGVsbG8=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> base64Decoded = <span class="title function_">base64ToUtf8</span>(base64Encoded);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(base64Decoded); <span class="comment">// 输出: Hello</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="格式转化"><a href="#格式转化" class="headerlink" title="格式转化"></a>格式转化</h2><ul><li><p>ArrayBuffer → blob</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer, byteOffset, length)]);</span><br></pre></td></tr></table></figure></li><li><p>ArrayBuffer → base64</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> base64 = <span class="title function_">btoa</span>(<span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer)));</span><br></pre></td></tr></table></figure></li><li><p>base64 → blob</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">base64toBlob</span> = (<span class="params">base64Data, contentType, sliceSize</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> byteCharacters = <span class="title function_">atob</span>(base64Data);</span><br><span class="line">  <span class="keyword">const</span> byteArrays = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> offset = <span class="number">0</span>; offset &lt; byteCharacters.<span class="property">length</span>; offset += sliceSize) &#123;</span><br><span class="line">    <span class="keyword">const</span> slice = byteCharacters.<span class="title function_">slice</span>(offset, offset + sliceSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> byteNumbers = <span class="keyword">new</span> <span class="title class_">Array</span>(slice.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; slice.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      byteNumbers[i] = slice.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> byteArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(byteNumbers);</span><br><span class="line">    byteArrays.<span class="title function_">push</span>(byteArray);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>(byteArrays, &#123;<span class="attr">type</span>: contentType&#125;);</span><br><span class="line">  <span class="keyword">return</span> blob;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>blob → ArrayBuffer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">blobToArrayBuffer</span>(<span class="params">blob</span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">      reader.<span class="property">onload</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(reader.<span class="property">result</span>);</span><br><span class="line">      reader.<span class="property">onerror</span> = <span class="function">() =&gt;</span> reject;</span><br><span class="line">      reader.<span class="title function_">readAsArrayBuffer</span>(blob);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>blob → base64</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">blobToBase64</span>(<span class="params">blob</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="property">onloadend</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(reader.<span class="property">result</span>);</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(blob);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>blob → Object URL</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectUrl = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> File </tag>
            
            <tag> Blob </tag>
            
            <tag> FileReader </tag>
            
            <tag> ArrayBuffer </tag>
            
            <tag> Base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS类型定义示例</title>
      <link href="/2022/10/26/TS%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%A4%BA%E4%BE%8B/"/>
      <url>/2022/10/26/TS%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="普通类型"><a href="#普通类型" class="headerlink" title="普通类型"></a>普通类型</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myFavoriteNumber</span>: string | number;</span><br><span class="line">myFavoriteNumber = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h3 id="接口（Interfaces）定义类型"><a href="#接口（Interfaces）定义类型" class="headerlink" title="接口（Interfaces）定义类型"></a>接口（Interfaces）定义类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="attr">age</span>:number;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>:<span class="title class_">Person</span>=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><ul><li>可选属性的含义是该属性可以不存在，但是仍然不允许添加未定义的属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    age?: number;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3><ul><li>使用 [propName: string] 定义了任意属性取 string 类型的值。</li><li>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  age?:number;</span><br><span class="line">  [<span class="attr">proppName</span>:string]:any;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>:<span class="title class_">Person</span> =&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>:<span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  readonly <span class="attr">id</span>: number;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  age?: number;</span><br><span class="line">  [<span class="attr">propName</span>: string]: any;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">89757</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DOM类型"><a href="#DOM类型" class="headerlink" title="DOM类型"></a>DOM类型</h2><h3 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById()"></a>document.getElementById()</h3><ul><li>document.getElementById 方法的返回类型为 HTMLElement | null 。 如果 DOM 中不存在具有提供的 id 的元素，则该方法返回 null 值。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;message&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span> | <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span> | <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box?.<span class="property">innerHTML</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLButtonElement</span> | <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (button != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(button.<span class="property">innerText</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><ul><li>定义入参类型、返回结果类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x: number,y: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: number | string</span>): number | string &#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数表达式-1"><a href="#函数表达式-1" class="headerlink" title="函数表达式"></a>函数表达式</h3><ul><li>定义入参类型、返回结果类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum = <span class="keyword">function</span> (<span class="params">x: number, y: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码只对等号右侧的匿名函数进行了类型定义</span></span><br><span class="line"><span class="comment">// 等号左边的 mySum，是通过赋值操作进行类型推论而推断出来的</span></span><br><span class="line"><span class="comment">// 如果需要我们手动给 mySum 添加类型，则应该是这样：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySum</span>: <span class="function">(<span class="params">x: number,y: number</span>) =&gt;</span> number=<span class="keyword">function</span> (<span class="params">x: number, y:number</span>): number&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意不要混淆了 TypeScript 中的 =&gt; 和 ES6 中的 =&gt;</span></span><br><span class="line"><span class="comment">// 在 TypeScript 的类型定义中，=&gt; 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="返回类型区别"><a href="#返回类型区别" class="headerlink" title="返回类型区别"></a>返回类型区别</h3><ul><li>注意返回结果 number[] 与 [number, number]的区别，number[]：[1,2,3…]，[number, number]：[1,2]<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动推断类型为number[]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTuple</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">10</span>, <span class="number">100</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型为[number, number]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTuple</span>(<span class="params"></span>): [number, number] &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">10</span>, <span class="number">100</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="用接口定义函数"><a href="#用接口定义函数" class="headerlink" title="用接口定义函数"></a>用接口定义函数</h3><ul><li>定义入参类型、返回结果类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>:string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>:<span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span> (<span class="params">source: string,subString: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">search</span>(subString) !==-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><ul><li>ES6 中，可以使用 …rest 的方式获取函数中的剩余参数（rest 参数）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">array,...items</span>) &#123;</span><br><span class="line">    items.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        array.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=[];</span><br><span class="line"><span class="title function_">push</span>(a,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 事实上，items 是一个数组。所以我们可以用数组的类型来定义它。</span></span><br><span class="line"><span class="comment">// 注意，rest 参数只能是最后一个参数。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数返回类型为元组（Tuple）类型"><a href="#函数返回类型为元组（Tuple）类型" class="headerlink" title="函数返回类型为元组（Tuple）类型"></a>函数返回类型为元组（Tuple）类型</h3><ul><li>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名函数返回元组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTuple</span>(<span class="params"></span>): [number, number] &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头函数返回元组</span></span><br><span class="line"><span class="keyword">const</span> getTuple2 = (): [string, string] =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTuple3 = (): [string, number] =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&#x27;hello world&#x27;</span>, <span class="number">12</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 type 关键字</span></span><br><span class="line">type <span class="title class_">Numbers</span> = [number, number];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTuple4</span>(<span class="params"></span>): <span class="title class_">Numbers</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">10</span>, <span class="number">10</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3使用highlight.js进行代码高亮</title>
      <link href="/2022/10/25/Vue3%E4%BD%BF%E7%94%A8highlight-js%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/"/>
      <url>/2022/10/25/Vue3%E4%BD%BF%E7%94%A8highlight-js%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>需要安装两个依赖highlight.js、@highlightjs&#x2F;vue-plugin</li></ul><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 基础依赖</span></span><br><span class="line">npm install <span class="literal">--save</span> highlight.js</span><br><span class="line"><span class="comment">## 支持vue3的依赖</span></span><br><span class="line">npm install <span class="literal">--save</span> @highlightjs/vue<span class="literal">-plugin</span></span><br></pre></td></tr></table></figure><h2 id="在main-js引入和注册highlight"><a href="#在main-js引入和注册highlight" class="headerlink" title="在main.js引入和注册highlight"></a>在main.js引入和注册highlight</h2><ul><li>引入需要引入：样式、依赖包、支持组件</li><li>在main主入口引入样式为全局统一都使用这个样式，也可以在单独的页面引入你想要的样式，样式效果参考官网：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a><br>更改 import ‘highlight.js&#x2F;styles&#x2F;atom-one-dark.css’, 把’atom-one-dark’改成官网提供的theme样式即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js </span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;highlight.js/styles/atom-one-dark.css&#x27;</span> <span class="comment">// 样式 </span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;highlight.js/lib/common&#x27;</span> <span class="comment">// 依赖包</span></span><br><span class="line"><span class="keyword">import</span> hljsVuePlugin <span class="keyword">from</span> <span class="string">&#x27;@highlightjs/vue-plugin&#x27;</span> <span class="comment">// 支持vue3的组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(hljsVuePlugin) <span class="comment">// 引入代码高亮，并进行全局注册</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="使用高亮插件"><a href="#使用高亮插件" class="headerlink" title="使用高亮插件"></a>使用高亮插件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把数据绑定到 `code` 属性</span></span><br><span class="line">&lt;highlightjs autodetect :code=<span class="string">&quot;highlightCode&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 或者直接将显示的代码写到 `code`中</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">highlightjs</span> <span class="attr">language</span>=<span class="string">&#x27;javascript&#x27;</span> <span class="attr">code</span>=<span class="string">&quot;console.log(&#x27;test&#x27;);&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特别注意：代码中存在&#x27;&lt;script&gt;&lt;/script&gt;&#x27;时，需用反斜杠转义：&#x27;&lt;script&gt;&lt;\/script&gt;&#x27;</span></span><br><span class="line"><span class="comment">// 使用language指定具体的语言，如javascript、xml，省略时highlightjs会自动识别对应的语言</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> highlight.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个有趣的css背景效果</title>
      <link href="/2022/10/13/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84css%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C/"/>
      <url>/2022/10/13/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84css%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一个背景镂空虚化的背景效果"><a href="#一个背景镂空虚化的背景效果" class="headerlink" title="一个背景镂空虚化的背景效果"></a>一个背景镂空虚化的背景效果</h2><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E9%95%82%E7%A9%BA%E8%99%9A%E5%8C%96%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C1.jpg" alt="镂空虚化背景效果1"><br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E9%95%82%E7%A9%BA%E8%99%9A%E5%8C%96%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C2.jpg" alt="镂空虚化背景效果2"></p><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>短文两篇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow-y</span>: scroll;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#dcdfe6</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.head</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#dcdfe6</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.06</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(transparent <span class="number">1px</span>, <span class="number">#fff</span> <span class="number">1px</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-size</span>: <span class="number">4px</span> <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">backdrop-filter</span>: <span class="built_in">saturate</span>(<span class="number">50%</span>) <span class="built_in">blur</span>(<span class="number">4px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">      《短文两篇》</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 50px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>1.渔夫买马<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        二渔夫居海滨久矣，欲上岸而从商。既从商，需马也。然二人不知马之贵贱优劣，请于乡间布衣，布衣言“困马之黑屋三日，断水粮，肆出，泥水干草饲之。”言已毕，布衣急远矣。二渔夫依之，然两马待出，一马立食之，一不食，再困三日，仍不食，非净水精粮不食之。二惑。一言“前食者，乃能屈能伸，耐劳吃苦可活于困境，从商路途艰险，此乃好马也”。一言“非净水精粮不食着，血统贵也，有原则而守，忠烈之性，从商路途艰险，此乃好马也”问何马可为良驹也？问于伯乐，伯乐曰“马如人也”，遂止。今世，能抉之者难也。</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 50px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2.10 of the most legendary rulers from ancient history<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>A lot of people can be rather dismissive of ancient history, even using the term to refer to past events so</span><br><span class="line">        remote as to be irrelevant. Nothing could be further from the truth, as the events and decisions made in</span><br><span class="line">        antiquity continue to influence us to this day. To explore this, we’ll look at 10 of the most legendary rulers</span><br><span class="line">        of ancient history, what they did, and why their decisions still matter.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>For our purposes, “legendary” means “awesome” rather than “potentially not real.” A few kings and queens of old</span><br><span class="line">        who may not have been real people, such as Gilgamesh, The Yellow Emperor, and the Queen of Sheba, are not</span><br><span class="line">        included.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Additionally, what passes for “ancient” varies based on what area you’re talking about, so while all of the</span><br><span class="line">        people on our list are long dead, a few of them were on the scene much more recently than others.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows与iPhone之间使用SMB服务共享文件</title>
      <link href="/2022/10/12/Windows%E4%B8%8EiPhone%E4%B9%8B%E9%97%B4%E4%BD%BF%E7%94%A8SMB%E6%9C%8D%E5%8A%A1%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
      <url>/2022/10/12/Windows%E4%B8%8EiPhone%E4%B9%8B%E9%97%B4%E4%BD%BF%E7%94%A8SMB%E6%9C%8D%E5%8A%A1%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SMB"><a href="#什么是SMB" class="headerlink" title="什么是SMB"></a>什么是SMB</h2><ul><li>SMB（Server Message Block）通信协议是微软（Microsoft）和英特尔(Intel)在1987年制定的协议，主要是作为Microsoft网络的通讯协议。SMB 是在会话层（session layer）和表示层（presentation layer）以及小部分应用层（application layer）的协议。</li><li>SMB使用了NetBIOS的应用程序接口 （Application Program Interface，简称API）。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有65个最上层的作业，而每个作业都超过120个函数，甚至Windows NT也没有全部支持到，最近微软又把 SMB 改名为 CIFS（Common Internet File System），并且加入了许多新的特色。</li></ul><h2 id="SMB作用"><a href="#SMB作用" class="headerlink" title="SMB作用"></a>SMB作用</h2><ul><li>Windows与其他设备（iPhone、Mac）进行文件共享</li></ul><h2 id="Windows如何打开SMB"><a href="#Windows如何打开SMB" class="headerlink" title="Windows如何打开SMB"></a>Windows如何打开SMB</h2><ul><li>打开“启用或关闭 Windows 功能” - 选择 SMB 1.0&#x2F;CIFS 文件共享支持’、‘SMB 直通’</li><li>选择指定文件夹 - 右键 - ‘属性’ - ‘共享’ - ‘共享(S)…’ - 下拉框下拉选择‘Everyone’ - 点击 ‘添加’ - 点击‘共享(H)’</li><li>选择指定文件夹 - 右键 - ‘属性’ - ‘共享’ - ‘高级共享(D)…’ - 勾选‘共享此文件夹(S)’ - 共享名为文件夹名字即可 - ‘确定’</li></ul><h2 id="iPhone如何连接SMB"><a href="#iPhone如何连接SMB" class="headerlink" title="iPhone如何连接SMB"></a>iPhone如何连接SMB</h2><ul><li>打开 ‘文件’ - 点击右上角选择‘连接服务器’ - 输入SMB服务地址：smb:&#x2F;&#x2F;+IP地址+&#x2F;+共享文件夹名字，例如：smb:&#x2F;&#x2F;192.168.1.100&#x2F;shareFiles - 点击‘连接’即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> SMB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java问题记录</title>
      <link href="/2022/10/10/java%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/10/10/java%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包括：数据库、redis、swagger...</span></span><br><span class="line"><span class="comment">// module/src/main/resources/application-xxx.yml</span></span><br></pre></td></tr></table></figure><h2 id="查找启动类"><a href="#查找启动类" class="headerlink" title="查找启动类"></a>查找启动类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/src/main/java/org.xxx/xxxSystemApplication</span></span><br></pre></td></tr></table></figure><h2 id="linux-java重启"><a href="#linux-java重启" class="headerlink" title="linux java重启"></a>linux java重启</h2><ul><li>进入jar包所在的目录下<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> usr/local/platform/java</span><br></pre></td></tr></table></figure></li><li>查看进程<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span>|grpe java</span><br></pre></td></tr></table></figure></li><li>杀死进程<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> <span class="literal">-9</span> <span class="number">31189</span></span><br><span class="line"><span class="comment"># 31189为进程号</span></span><br></pre></td></tr></table></figure></li><li>重启进程（在Java路径下，可用ls查看对应的启动shell文件，后缀名为.sh）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start.sh</span><br></pre></td></tr></table></figure></li><li>检查进程是否已重启成功<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span>|grpe java</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实用技巧</title>
      <link href="/2022/08/23/JS%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/08/23/JS%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="滚动到页面顶部"><a href="#滚动到页面顶部" class="headerlink" title="滚动到页面顶部"></a>滚动到页面顶部</h2><ul><li>使用 window.scrollTo() 平滑滚动到页面顶部<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">scrollToTop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="滚动到页面底部"><a href="#滚动到页面底部" class="headerlink" title="滚动到页面底部"></a>滚动到页面底部</h2><ul><li>知道页面的高度，也可以平滑滚动到页面底部<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">scrollToBottom</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">offsetHeight</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="滚动元素到可见区域"><a href="#滚动元素到可见区域" class="headerlink" title="滚动元素到可见区域"></a>滚动元素到可见区域</h2><ul><li>使用 scrollIntoView 将元素滚动到可见区域<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">smoothScroll</span> = (<span class="params">element</span>) =&gt; &#123;</span><br><span class="line">  element.<span class="title function_">scrollIntoView</span>(&#123;</span><br><span class="line">    <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全屏显示元素"><a href="#全屏显示元素" class="headerlink" title="全屏显示元素"></a>全屏显示元素</h2><ul><li>在浏览器中全屏打开某个元素，常用于视频全屏播放<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">goToFullScreen</span> = (<span class="params">element</span>) =&gt; &#123;</span><br><span class="line">  element = element || <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (element.<span class="property">requestFullscreen</span>) &#123;</span><br><span class="line">    element.<span class="title function_">requestFullscreen</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">mozRequestFullScreen</span>) &#123;</span><br><span class="line">    element.<span class="title function_">mozRequestFullScreen</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">msRequestFullscreen</span>) &#123;</span><br><span class="line">    element.<span class="title function_">msRequestFullscreen</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">webkitRequestFullscreen</span>) &#123;</span><br><span class="line">    element.<span class="title function_">webkitRequestFullScreen</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="退出浏览器全屏状态"><a href="#退出浏览器全屏状态" class="headerlink" title="退出浏览器全屏状态"></a>退出浏览器全屏状态</h2><ul><li>这个和全屏显示元素一起使用，退出浏览器全屏状态<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">goExitFullscreen</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">exitFullscreen</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">exitFullscreen</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">msExitFullscreen</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">msExitFullscreen</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">mozCancelFullScreen</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">mozCancelFullScreen</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">webkitExitFullscreen</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">webkitExitFullscreen</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取数据类型"><a href="#获取数据类型" class="headerlink" title="获取数据类型"></a>获取数据类型</h2><ul><li>获取变量的数据类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getType</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> match = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value).<span class="title function_">match</span>(<span class="regexp">/ (\w+)]/</span>)</span><br><span class="line">  <span class="keyword">return</span> match[<span class="number">1</span>].<span class="title function_">toLocaleLowerCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getType</span>() <span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">getType</span>(&#123;&#125;&#125;) <span class="comment">// object</span></span><br><span class="line"><span class="title function_">getType</span>([]) <span class="comment">// array</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="number">1</span>) <span class="comment">// number</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="string">&#x27;fatfish&#x27;</span>) <span class="comment">// string</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="literal">true</span>) <span class="comment">// boolean</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="regexp">/fatfish/</span>) <span class="comment">// regexp</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="停止冒泡事件"><a href="#停止冒泡事件" class="headerlink" title="停止冒泡事件"></a>停止冒泡事件</h2><ul><li>防止事件冒泡的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">stopPropagation</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">  event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">stopPropagation</span>) &#123;</span><br><span class="line">    event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="深拷贝一个对象"><a href="#深拷贝一个对象" class="headerlink" title="深拷贝一个对象"></a>深拷贝一个对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">deepCopy</span> = (<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> allDesc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj), allDesc);</span><br><span class="line">  hash.<span class="title function_">set</span>(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      cloneObj[key] = <span class="title function_">deepCopy</span>(obj[key], hash);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cloneObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="确定设备类型"><a href="#确定设备类型" class="headerlink" title="确定设备类型"></a>确定设备类型</h2><ul><li>通过识别浏览器的 userAgent 来确定设备类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isMobile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> !!navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(</span><br><span class="line">    <span class="regexp">/(iPhone|iPod|Android|ios|iOS|iPad|Backerry|WebOS|Symbian|Windows Phone|Phone)/i</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="判断设备是安卓还是IOS"><a href="#判断设备是安卓还是IOS" class="headerlink" title="判断设备是安卓还是IOS"></a>判断设备是安卓还是IOS</h2><ul><li>除了区分是移动端还是PC端，很多时候我们还需要区分当前设备是Android还是IOS<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isAndroid</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/android/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isIOS</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/iPhone|iPad|iPod|iOS|Macintosh/i</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取浏览器类型及其版本"><a href="#获取浏览器类型及其版本" class="headerlink" title="获取浏览器类型及其版本"></a>获取浏览器类型及其版本</h2><ul><li>获取浏览器的类型和版本<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getExplorerInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> t = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> &lt;= t.<span class="title function_">indexOf</span>(<span class="string">&quot;msie&quot;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="comment">//ie &lt; 11</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;IE&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="title class_">Number</span>(t.<span class="title function_">match</span>(<span class="regexp">/msie ([\d]+)/</span>)[<span class="number">1</span>]),</span><br><span class="line">      &#125;</span><br><span class="line">    : !!t.<span class="title function_">match</span>(<span class="regexp">/trident\/.+?rv:(([\d.]+))/</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="comment">// ie 11</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;IE&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="number">11</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.<span class="title function_">indexOf</span>(<span class="string">&quot;edge&quot;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Edge&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="title class_">Number</span>(t.<span class="title function_">match</span>(<span class="regexp">/edge\/([\d]+)/</span>)[<span class="number">1</span>]),</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.<span class="title function_">indexOf</span>(<span class="string">&quot;firefox&quot;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Firefox&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="title class_">Number</span>(t.<span class="title function_">match</span>(<span class="regexp">/firefox\/([\d]+)/</span>)[<span class="number">1</span>]),</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.<span class="title function_">indexOf</span>(<span class="string">&quot;chrome&quot;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Chrome&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="title class_">Number</span>(t.<span class="title function_">match</span>(<span class="regexp">/chrome\/([\d]+)/</span>)[<span class="number">1</span>]),</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.<span class="title function_">indexOf</span>(<span class="string">&quot;opera&quot;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Opera&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="title class_">Number</span>(t.<span class="title function_">match</span>(<span class="regexp">/opera.([\d]+)/</span>)[<span class="number">1</span>]),</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.<span class="title function_">indexOf</span>(<span class="string">&quot;Safari&quot;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Safari&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="title class_">Number</span>(t.<span class="title function_">match</span>(<span class="regexp">/version\/([\d]+)/</span>)[<span class="number">1</span>]),</span><br><span class="line">      &#125;</span><br><span class="line">    : &#123;</span><br><span class="line">        <span class="attr">type</span>: t,</span><br><span class="line">        <span class="attr">version</span>: -<span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="设置cookies"><a href="#设置cookies" class="headerlink" title="设置cookies"></a>设置cookies</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">setCookie</span> = (<span class="params">key, value, expire</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  d.<span class="title function_">setDate</span>(d.<span class="title function_">getDate</span>() + expire);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>;expires=<span class="subst">$&#123;d.toUTCString()&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="获取-cookie"><a href="#获取-cookie" class="headerlink" title="获取 cookie"></a>获取 cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getCookie</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cookieStr = <span class="built_in">unescape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line">  <span class="keyword">const</span> arr = cookieStr.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> cookieValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = arr[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (temp[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      cookieValue = temp[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除cookies"><a href="#删除cookies" class="headerlink" title="删除cookies"></a>删除cookies</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">delCookie</span> = (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(key)&#125;</span>=;expires=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">randomString</span> = (<span class="params">len</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> chars = <span class="string">&quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> strLen = chars.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> randomStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    randomStr += chars.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * strLen));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> randomStr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">randomString</span>(<span class="number">10</span>) <span class="comment">// pfkMfjEJ6x</span></span><br><span class="line"><span class="title function_">randomString</span>(<span class="number">20</span>) <span class="comment">// ce6tEx1km4idRNMtym2S</span></span><br></pre></td></tr></table></figure><h2 id="字符串首字母大写"><a href="#字符串首字母大写" class="headerlink" title="字符串首字母大写"></a>字符串首字母大写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fistLetterUpper</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fistLetterUpper</span>(<span class="string">&#x27;fatfish&#x27;</span>) <span class="comment">// Fatfish</span></span><br></pre></td></tr></table></figure><h2 id="生成指定范围内的随机数"><a href="#生成指定范围内的随机数" class="headerlink" title="生成指定范围内的随机数"></a>生成指定范围内的随机数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">randomNum</span> = (<span class="params">min, max</span>) =&gt; <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line"></span><br><span class="line"><span class="title function_">randomNum</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">randomNum</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h2 id="打乱数组的顺序"><a href="#打乱数组的顺序" class="headerlink" title="打乱数组的顺序"></a>打乱数组的顺序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shuffleArray</span> = (<span class="params">array</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [ <span class="number">1</span>, -<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span> ]</span><br><span class="line"></span><br><span class="line"><span class="title function_">shuffleArray</span>(arr) <span class="comment">// [5, -1, 10, 1]</span></span><br><span class="line"><span class="title function_">shuffleArray</span>(arr) <span class="comment">// [1, 10, -1, 5]</span></span><br></pre></td></tr></table></figure><h2 id="从数组中获取随机值"><a href="#从数组中获取随机值" class="headerlink" title="从数组中获取随机值"></a>从数组中获取随机值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getRandomValue</span> = array =&gt; array[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * array.<span class="property">length</span>)]; </span><br><span class="line"><span class="keyword">const</span> prizes = [  <span class="string">&#x27;$100&#x27;</span>, <span class="string">&#x27;🍫&#x27;</span>, <span class="string">&#x27;🍔&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="title function_">getRandomValue</span>(prizes) <span class="comment">// 🍫</span></span><br><span class="line"><span class="title function_">getRandomValue</span>(prizes) <span class="comment">// 🍔</span></span><br><span class="line"><span class="title function_">getRandomValue</span>(prizes) <span class="comment">// 🍫</span></span><br></pre></td></tr></table></figure><h2 id="格式化货币"><a href="#格式化货币" class="headerlink" title="格式化货币"></a>格式化货币</h2><ul><li>格式化货币的方式有很多，比如这两种方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">formatMoney</span> = (<span class="params">money</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> money.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`(?!^)(?=(\\d&#123;3&#125;)+<span class="subst">$&#123;money.includes(<span class="string">&#x27;.&#x27;</span>) ? <span class="string">&#x27;\\.&#x27;</span> : <span class="string">&#x27;$&#x27;</span>&#125;</span>)`</span>, <span class="string">&#x27;g&#x27;</span>), <span class="string">&#x27;,&#x27;</span>)  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">formatMoney</span>(<span class="string">&#x27;123456789&#x27;</span>) <span class="comment">// &#x27;123,456,789&#x27;</span></span><br><span class="line"><span class="title function_">formatMoney</span>(<span class="string">&#x27;123456789.123&#x27;</span>) <span class="comment">// &#x27;123,456,789.123&#x27;</span></span><br><span class="line"><span class="title function_">formatMoney</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="comment">// 正则表达式让我们很头疼，不是吗？所以我们需要找到一种更简单的方式来格式化货币。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">formatMoney</span> = (<span class="params">money</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> money.<span class="title function_">toLocaleString</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">formatMoney</span>(<span class="number">123456789</span>) <span class="comment">// &#x27;123,456,789&#x27;</span></span><br><span class="line"><span class="title function_">formatMoney</span>(<span class="number">123456789.123</span>) <span class="comment">// &#x27;123,456,789.123&#x27;</span></span><br><span class="line"><span class="title function_">formatMoney</span>(<span class="number">123</span>) <span class="comment">// &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="简易评星判断"><a href="#简易评星判断" class="headerlink" title="简易评星判断"></a>简易评星判断</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量rate取值为：1-5，1代表一星、5代表五星</span></span><br><span class="line"><span class="string">&quot;★★★★★☆☆☆☆☆&quot;</span>.<span class="title function_">slice</span>(<span class="number">5</span> - rate, <span class="number">10</span> - rate); </span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p><a href="https://javascript.plainenglish.io/20-simple-but-useful-javascript-coding-techniques-that-you-should-use-23f33bd45325">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 实用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中0.1+0.2</title>
      <link href="/2022/08/12/JS%E4%B8%AD0.1+0.2/"/>
      <url>/2022/08/12/JS%E4%B8%AD0.1+0.2/</url>
      
        <content type="html"><![CDATA[<h1 id="js中0-1-0-2的问题（作者：老司机）"><a href="#js中0-1-0-2的问题（作者：老司机）" class="headerlink" title="js中0.1+0.2的问题（作者：老司机）"></a>js中0.1+0.2的问题（作者：老司机）</h1><h2 id="一、前提："><a href="#一、前提：" class="headerlink" title="一、前提："></a>一、前提：</h2><ul><li><p>0.1或0.2等一些小数，转换为二进制格式时，是一个无限循环的小数，因此最终得到的结果是一个近似值（保留52位小数），在计算过程中，有可能会发生位数的变化，在进行舍取的过程中，导致精度丢失</p></li><li><p>js的浮点数在计算机底层的存储格式为：符号位（1） + 阶码（11）+ 尾数（52）</p></li><li><p>符号位：0表示正数，1表示负数</p></li><li><p>阶码：指数+1023（最后转为二进制格式，若不足11位，则在前面补0）</p></li><li><p>1023称为偏移量：2 ^ (位数-1) - 1，此处js浮点数的阶码位数为11，所以：2 ^ 10 - 1 &#x3D; 1023</p></li><li><p>以0.1为例：</p><ul><li>科学记数法格式（乘二取整，顺序排序）：1.1 00110011 00110011 00110011 00110011 00110011 00110011 010 x 2 ^ -4</li><li>二进制格式：0 01111111011 1001100110011001100110011001100110011001100110011010【省略了整数1，作为一个隐藏位】</li></ul></li></ul><h2 id="二、实现-0-1-0-2-0-3"><a href="#二、实现-0-1-0-2-0-3" class="headerlink" title="二、实现 0.1+0.2&#x3D;&#x3D;&#x3D;0.3"></a>二、实现 0.1+0.2&#x3D;&#x3D;&#x3D;0.3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binaryStrToNum</span>(<span class="params">str</span>) &#123; </span><br><span class="line">    <span class="comment">// 1、获取符号位</span></span><br><span class="line">    <span class="keyword">let</span> sign = str.<span class="title function_">charAt</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 2、获取阶码（1~11【包含11】）</span></span><br><span class="line">    <span class="keyword">let</span> exponent = str.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="comment">// 3、获取小数位</span></span><br><span class="line">    <span class="keyword">let</span> m = str.<span class="title function_">slice</span>(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：在尾数中，计算是从第一位开始的，一共有52位，其实还包含一个隐藏位（上面已经提了），这个隐藏位的计算结果始终是1（计算方式：1 * 2 ^ 0），这个也必须累加到计算结果中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;m.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = m.<span class="title function_">charAt</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            sum += <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, -(i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、计算结果，公式为：-1 ^ 符号 * 2 ^ (阶码-1023) * sum</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">pow</span>(-<span class="number">1</span>, +sign) * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="built_in">parseInt</span>(exponent, <span class="number">2</span>) - <span class="number">1023</span>) * (<span class="number">1</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 《0.1》</span></span><br><span class="line"><span class="comment">// const r1 = binaryStrToNum(&quot;0011111110111001100110011001100110011001100110011001100110011010&quot;);</span></span><br><span class="line"><span class="comment">// console.log(r1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 《0.2》</span></span><br><span class="line"><span class="comment">// 1.1 00110011 00110011 00110011 00110011 00110011 00110011 010 x 2 ^ -3 = 0 01111111100 1001100110011001100110011001100110011001100110011010</span></span><br><span class="line"><span class="comment">// const r2 = binaryStrToNum(&quot;0011111111001001100110011001100110011001100110011001100110011010&quot;);</span></span><br><span class="line"><span class="comment">// console.log(r2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *《0.1 + 0.2》</span></span><br><span class="line"><span class="comment"> * 先对其进行计算（保留52位，第53位为0时，舍弃；为1时，进1）：</span></span><br><span class="line"><span class="comment"> * 0.00011 00110011 00110011 00110011 00110011 00110011 00110011 010 + 0.00110 01100110 01100110 01100110 01100110 01100110 01100110 10</span></span><br><span class="line"><span class="comment"> * = 0.01001 10011001 10011001 10011001 10011001 10011001 10011001 110</span></span><br><span class="line"><span class="comment"> * = 1.001 10011001 10011001 10011001 10011001 10011001 10011001 110 x 2 ^ -2【在此次计算中，尾数变成了53位，因此要进行舍取】</span></span><br><span class="line"><span class="comment"> * = 1.001 10011001 10011001 10011001 10011001 10011001 10011010 0 x 2 ^ -2【取小数52位】</span></span><br><span class="line"><span class="comment"> * 转为二进制格式 =&gt;：0 01111111101 0011001100110011001100110011001100110011001100110100</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> r3 = <span class="title function_">binaryStrToNum</span>(<span class="string">&quot;0011111111010011001100110011001100110011001100110011001100110100&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3); <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r3 == (<span class="number">0.1</span> + <span class="number">0.2</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3组合式API使用示例</title>
      <link href="/2022/08/08/Vue3%E7%BB%84%E5%90%88%E5%BC%8FAPI%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
      <url>/2022/08/08/Vue3%E7%BB%84%E5%90%88%E5%BC%8FAPI%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="API一览"><a href="#API一览" class="headerlink" title="API一览"></a>API一览</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><h3 id="响应式-核心"><a href="#响应式-核心" class="headerlink" title="响应式: 核心"></a>响应式: 核心</h3><ul><li>ref() - 接受一个内部值，返回一个响应式的、可更改的 ref 对象</li><li>computed () - 接受一个 getter 函数，返回一个只读的响应式 ref 对象(计算属性)</li><li>reactive() - 返回一个对象的响应式代理</li><li>readonly() - 接受一个对象 (不论是响应式还是普通的) 或是一个 ref，返回一个原值的只读代理</li><li>watchEffect() - 立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行</li><li>watchPostEffect() - watchEffect() 使用 flush: ‘post’ 选项时的别名</li><li>watchSyncEffect() - watchEffect() 使用 flush: ‘sync’ 选项时的别名</li><li>watch() - 侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数</li></ul><h3 id="响应式-工具"><a href="#响应式-工具" class="headerlink" title="响应式: 工具"></a>响应式: 工具</h3><ul><li>isRef() - 检查某个值是否为 ref</li><li>unref() - 如果参数是 ref，则返回内部值，否则返回参数本身</li><li>toRef() - 基于响应式对象上的一个属性，创建一个对应的 ref</li><li>toRefs() - 将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的 ref</li><li>isProxy() - 检查一个对象是否是由 reactive()、readonly()、shallowReactive() 或 shallowReadonly() 创建的代理</li><li>isReactive() - 检查一个对象是否是由 reactive() 或 shallowReactive() 创建的代理</li><li>isReadonly() - 检查一个对象是否是由 readonly() 或 shallowReadonly() 创建的代理</li></ul><h3 id="响应式-进阶"><a href="#响应式-进阶" class="headerlink" title="响应式: 进阶"></a>响应式: 进阶</h3><ul><li>shallowRef() - ref() 的浅层作用形式</li><li>triggerRef() - 强制触发依赖于一个浅层 ref 的副作用，这通常在对浅引用的内部值进行深度变更后使用</li><li>customRef() - 创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式</li><li>shallowReactive() - reactive() 的浅层作用形式</li><li>shallowReadonly() - readonly() 的浅层作用形式</li><li>toRaw() - 根据一个 Vue 创建的代理返回其原始对象</li><li>markRaw() - 将一个对象标记为不可被转为代理。返回该对象本身</li><li>effectScope() - 创建一个 effect 作用域，可以捕获其中所创建的响应式副作用 (即计算属性和侦听器)，这样捕获到的副作用可以一起处理</li><li>getCurrentScope() - 如果有的话，返回当前活跃的 effect 作用域</li><li>onScopeDispose() - 在当前活跃的 effect 作用域上注册一个处理回调函数</li></ul><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><ul><li>onMounted() - 组件挂载完成后执行</li><li>onUpdated() - 更新 DOM 树之后调用</li><li>onUnmounted() - 组件实例被卸载之后调用</li><li>onBeforeMount() - 组件被挂载之前被调用</li><li>onBeforeUpdate() - 更新 DOM 树之前调用</li><li>onBeforeUnmount() - 组件实例被卸载之前调用</li><li>onErrorCaptured() - 捕获了后代组件传递的错误时调用</li><li>onRenderTracked() - 组件渲染过程中追踪到响应式依赖时调用</li><li>onRenderTriggered() - 响应式依赖的变更触发了组件渲染时调用</li><li>onActivated() - 若组件实例是 <KeepAlive> 缓存树的一部分，当组件被插入到 DOM 中时调用</li><li>onDeactivated() - 若组件实例是 <KeepAlive> 缓存树的一部分，当组件从 DOM 中被移除时调用</li><li>onServerPrefetch() - 组件实例在服务器上被渲染之前调用</li></ul><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul><li>provide() - 提供一个值，可以被后代组件注入</li><li>inject() - 注入一个由祖先组件或整个应用 (通过 app.provide()) 提供的值</li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123; ref, Ref, reactive, isRef, unref, toRef, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">  const msg = ref(&quot;Hello World&quot;);</span><br><span class="line">  const initial = ref(10);</span><br><span class="line">  const count = ref(0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 更新 ref</span><br><span class="line">  function update(value) &#123;</span><br><span class="line">    count.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 检查`count`是否为一个 ref 对象</span><br><span class="line">  console.log(isRef(count) ? &#x27;是ref对象&#x27; : &#x27;非ref对象&#x27;);</span><br><span class="line"></span><br><span class="line">  // 如果参数是一个ref，则返回内部值，否则返回参数本身</span><br><span class="line">  function initialCount(value: number | Ref&lt;number&gt;) &#123;</span><br><span class="line">    console.log(unref(value) === 10); // 打印true</span><br><span class="line">  &#125;</span><br><span class="line">  initialCount(initial);</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 为源响应式对象上的某个 `property` 新创建一个 `ref`。</span><br><span class="line">   * 然后,`ref` 可以被传递，它会保持对其源`property`的响应式连接。</span><br><span class="line">   * 确保以下输出为true</span><br><span class="line">   */</span><br><span class="line">  const state = reactive(&#123;</span><br><span class="line">    foo: 1,</span><br><span class="line">    bar: 2,</span><br><span class="line">  &#125;);</span><br><span class="line">  const fooRef = toRef(state, &#x27;foo&#x27;);</span><br><span class="line">  // 修改引用将更新原引用</span><br><span class="line">  fooRef.value++;</span><br><span class="line">  console.log(state.foo === 2); // 打印true</span><br><span class="line">  // 修改原引用也会更新`ref`</span><br><span class="line">  state.foo++;</span><br><span class="line">  console.log(fooRef.value === 3); // 打印true</span><br><span class="line"></span><br><span class="line">  //computed 接受一个具有 get 和 set 函数的对象，用来创建可写的 ref 对象。</span><br><span class="line">  const plusOne = computed(&#123;</span><br><span class="line">    get: ()=&gt;&#123;</span><br><span class="line">    return count.value + 1;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: val=&gt;&#123; </span><br><span class="line">    count.value ++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  plusOne.value++;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &lt;span @click=&quot;update(count - 1)&quot;&gt;-&lt;/span&gt;</span><br><span class="line">      &#123;&#123; count &#125;&#125;</span><br><span class="line">      &lt;span @click=&quot;update(count + 1)&quot;&gt;+&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      count：&#123;&#123; count &#125;&#125;，plusOne：&#123;&#123; plusOne &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史蒂夫·乔布斯在斯坦福大学的演讲</title>
      <link href="/2022/07/25/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%BC%94%E8%AE%B2/"/>
      <url>/2022/07/25/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%BC%94%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="史蒂夫·乔布斯在斯坦福大学的演讲"><a href="#史蒂夫·乔布斯在斯坦福大学的演讲" class="headerlink" title="史蒂夫·乔布斯在斯坦福大学的演讲"></a>史蒂夫·乔布斯在斯坦福大学的演讲</h2><p>Stanford Report, June 14, 2005</p><p>‘You’ve got to find what you love,’ Jobs says</p><p>This is the text of the Commencement address by Steve Jobs, CEO of Apple Computer and of Pixar Animation Studios, delivered on June 12, 2005.</p><p>  【演讲词】</p><p>I am honored to be with you today at your commencement from one of the finest universities in the world. Truth be told, I never graduated from college, and this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><p>　　我今天很荣幸能和你们一起参加毕业典礼，斯坦福大学是世界上最好的大学之一。我从来没有从大学中毕业。说实话,今天也许是在我的生命中离大学毕业最近的一天了。今天我想向你们讲述我生活中的三个故事。不是什么大不了的事情,只是三个故事而已。</p><p>The first story is about connecting the dots.</p><p>　　第一个故事是关于如何把生命中的点点滴滴串连起来。</p><p>I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out？</p><p>　　我在Reed大学读了六个月之后就退学了,但是在十八个月以后——我真正的作出退学决定之前,我还经常去学校。我为什么要退学呢？</p><p>It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl.</p><p>　　故事从我出生的时候讲起。我的亲生母亲是一个年轻的,没有结婚的大学毕业生。她决定让别人收养我, 她十分想让我被大学毕业生收养。所以在我出生的时候，她已经做好了一切的准备工作，能使得我被一个律师和他的妻子所收养。但是她没有料到,当我出生之后, 律师夫妇突然决定他们想要一个女孩。</p><p>So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him？” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.</p><p>　　所以我的生养父母(他们还在我亲生父母的观察名单上)突然在半夜接到了一个电话:“我们现在这儿有一个不小心生出来的男婴,你们想要他吗？”他们回答道:“当然!”但是我亲生母亲随后发现，我的养母从来没有上过大学,我的父亲甚至从没有读过高中。她拒绝签这个收养合同。只是在几个月以后,我的父母答应她一定要让我上大学,那个时候她才同意。</p><p>And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out.</p><p>　　在十七岁那年,我真的上了大学。但是我很愚蠢的选择了一个几乎和你们斯坦福大学一样贵的学校, 我父母还处于蓝领阶层，他们几乎把所有积蓄都花在了我的学费上面。在六个月后, 我已经看不到其中的价值所在。我不知道我想要在生命中做什么,我也不知道大学能帮助我找到怎样的答案。</p><p>And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting.</p><p>　　但是在这里，我几乎花光了我父母这一辈子的所有积蓄。所以我决定要退学,我觉得这是个正确的决定。不能否认,我当时确实非常的害怕, 但是现在回头看看,那的确是我这一生中最棒的一个决定。在我做出退学决定的那一刻, 我终于可以不必去读那些令我提不起丝毫兴趣的课程了。然后我还可以去修那些看起来有点意思的课程。</p><p>It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><p>　　但是这并不是那么罗曼蒂克。我失去了我的宿舍,所以我只能在朋友房间的地板上面睡觉,我去捡5美分的可乐瓶子，仅仅为了填饱肚子, 在星期天的晚上,我需要走七英里的路程，穿过这个城市到Hare Krishna寺庙(注：位于纽约Brooklyn下城),只是为了能吃上饭——这个星期唯一一顿好一点的饭。但是我喜欢这样。我跟着我的直觉和好奇心走, 遇到的很多东西,此后被证明是无价之宝。让我给你们举一个例子吧：</p><p>Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this.</p><p>Reed大学在那时提供也许是全美最好的美术字课程。在这个大学里面的每个海报, 每个抽屉的标签上面全都是漂亮的美术字。因为我退学了, 没有受到正规的训练, 所以我决定去参加这个课程，去学学怎样写出漂亮的美术字。</p><p>I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><p>　　我学到了san serif 和serif字体, 我学会了怎么样在不同的字母组合之中改变空格的长度, 还有怎么样才能作出最棒的印刷式样。那是一种科学永远不能捕捉到的、美丽的、真实的艺术精妙, 我发现那实在是太美妙了。</p><p>None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts.</p><p>　　当时看起来这些东西在我的生命中，好像都没有什么实际应用的可能。但是十年之后,当我们在设计第一台Macintosh电脑的时候,就不是那样了。我把当时我学的那些家伙全都设计进了Mac。那是第一台使用了漂亮的印刷字体的电脑。</p><p>And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><p>　　如果我当时没有退学, 就不会有机会去参加这个我感兴趣的美术字课程, Mac就不会有这么多丰富的字体，以及赏心悦目的字体间距。那么现在个人电脑就不会有现在这么美妙的字型了。当然我在大学的时候，还不可能把从前的点点滴 滴串连起来,但是当我十年后回顾这一切的时候,真的豁然开朗了。</p><p>Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><p>再次强调，没人可以未卜先知，事与事间的因和果，往往只在回首时显现。你得相信，因和果会在未来生活中联系起来。人总要有些信仰才行，直觉也好，命运也罢，因果轮回，不管什么，去相信因与果的联系，会给你信心去跟从自己的意愿，哪怕离经叛道，也绝不止步，只有这样，才能有所成就。</p><p>My second story is about love and loss.</p><p>　　我的第二个故事是关于爱和损失的。</p><p>I was lucky – I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30.</p><p>　　我非常幸运, 因为我在很早的时候就找到了我钟爱的东西。Woz和我在二十岁的时候就在父母的车库里面开创了苹果公司。我们工作得很努力, 十年之后, 这个公司从那两个车库中的穷光蛋发展到了超过四千名的雇员、价值超过二十亿的大公司。在公司成立的第九年,我们刚刚发布了最好的产品,那就是 Macintosh。我也快要到三十岁了。</p><p>And then I got fired. How can you get fired from a company you started？ Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><p>　　在那一年, 我被炒了鱿鱼。你怎么可能被你自己创立的公司炒了鱿鱼呢？ 嗯,在苹果快速成长的时候，我们雇用了一个很有天分的家伙和我一起管理这个公司, 在最初的几年,公司运转的很好。但是后来我们对未来的看法发生了分歧, 最终我们吵了起来。当争吵不可开交的时候, 董事会站在了他的那一边。所以在三十岁的时候, 我被炒了。在这么多人的眼皮下我被炒了。在而立之年，我生命的全部支柱离自己远去, 这真是毁灭性的打击。</p><p>I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly.</p><p>　　在最初的几个月里，我真是不知道该做些什么。我把从前的创业激情给丢了, 我觉得自己让与我一同创业的人都很沮丧。我和David Pack和Bob Boyce见面，并试图向他们道歉。</p><p>I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><p>　　我把事情弄得糟糕透顶了。但是我渐渐发现了曙光, 我仍然喜爱我从事的这些东西。苹果公司发生的这些事情丝毫的没有改变这些, 一点也没有。我被驱逐了,但是我仍然钟爱它。所以我决定从头再来。</p><p>I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><p>　　我当时没有觉察, 但是事后证明, 从苹果公司被炒是我这辈子发生的最棒的事情。因为，作为一个成功者的沉重感觉被作为一个创业者的轻松感觉所重新代替: 对任何事情都不那么特别看重。这让我觉得如此自由, 进入了我生命中最有创造力的一个阶段。</p><p>During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world.</p><p>　　在接下来的五年里, 我创立了一个名叫NeXT的公司, 还有一个叫Pixar的公司, 然后和一个后来成为我妻子的优雅女人相识。Pixar 制作了世界上第一个用电脑制作的动画电影——“玩具总动员”,Pixar现在也是世界上最成功的电脑制作工作室。</p><p>In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><p>　　在后来的一系列运转中,Apple收购了NeXT, 然后我又回到了Apple公司。我们在NeXT发展的技术在Apple的复兴之中发挥了关键的作用。我还和Laurence 一起建立了一个幸福的家庭。</p><p>I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><p>　　我可以非常肯定,如果我不被Apple开除的话, 这其中一件事情也不会发生的。这个良药的味道实在是太苦了,但是我想病人需要这个药。有时候生活会给你迎头一击，不要灰心丧气。我坚信，唯一可以让我坚持下去的，就是我对自己事业的热爱。你必须去寻找自己所爱，无论是工作还是爱情，都是如此。工作是生活中很主要的部分，真正获得满足感，就必须做你相信是有价值的工作。要做有价值的事业，你就必须热爱你做的事业，如果你还没找到，千万不要放弃，要继续寻找，只要倾听你的心声，当你真的发现时你就会感到，就像任何伟大的感情关系一样，岁月的更迭只会让这份情愈发深刻，所以千万不要放弃，要继续寻找。</p><p>My third story is about death.</p><p>　　我的第三个故事是关于死亡的。</p><p>When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today？” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><p>　　当我十七岁的时候, 我读到了一句话:“如果你把每一天都当作生命中最后一天去生活的话,那么有一天你会发现你是正确的。”这句话给我留下了深刻的印象。从那时开始,过了33 年,我在每天早晨都会对着镜子问自己:“如果今天是我生命中的最后一天, 你会不会完成你今天想做的事情呢？”当答案连续很多次被给予“不是”的时候, 我知道自己需要改变某些事情了。</p><p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><p>　　提醒自己人的生命有限，令我一生都受益非常，令我能在人生重大问题上做出抉择。因为一切的一切，一切追求，一切荣耀，一切惶恐，一些挫折，在死亡面前都会显得微不足道 ，剩下的才是最重要的事情。记住自己总会死去是避免自己被种种担心所羁绊的最好方法，既然将一无所有，还有什么理由不追随自己的内心。</p><p>About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><p>　　大概一年以前, 我被诊断出癌症。我在早晨七点半做了一个检查, 检查清楚的显示在我的胰腺有一个肿瘤。我当时都不知道胰腺是什么东西。医生告诉我那很可能是一种无法治愈的癌症, 我还有三到六个月的时间活在这个世界上。我的医生叫我回家, 然后整理好我的一切, 那就是医生准备死亡的程序。那意味着你将要把未来十年对你小孩说的话在几个月里面说完.;那意味着把每件事情都搞定, 让你的家人会尽可能轻松的生活;那意味着你要说“再见了”。</p><p>I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><p>　　我整天和那个诊断书一起生活。后来有一天早上我作了一个活切片检查，医生将一个内窥镜从我的喉咙伸进去,通过我的胃, 然后进入我的肠子, 用一根针在我的胰腺上的肿瘤上取了几个细胞。我当时很镇静,因为我被注射了镇定剂。但是我的妻子在那里, 后来告诉我，当医生在显微镜地下观察这些细胞的时候他们开始尖叫, 因为这些细胞最后竟然是一种非常罕见的可以用手术治愈的胰腺癌症。我做了这个手术, 现在我痊愈了。</p><p>This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:</p><p>　　那是我最接近死亡的时候, 我还希望这也是以后的几十年最接近的一次。从死亡线上又活了过来, 死亡对我来说，只是一个有用但是纯粹是知识上的概念的时候，我可以更肯定一点地对你们说：</p><p>No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><p>　　没有人愿意死, 即使人们想上天堂, 人们也不会为了去那里而死。但是死亡是我们每个人共同的终点。从来没有人能够逃脱它。也应该如此。 因为死亡就是生命中最好的一个发明。它将旧的清除以便给新的让路。你们现在是新的, 但是从现在开始不久以后, 你们将会逐渐的变成旧的然后被清除。我很抱歉这很戏剧性, 但是这十分的真实。</p><p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><p>　　人生有限，所以不要把时间浪费在重复其他人的生活上;不要被教条束缚，那只是根据别人的思维结果而生活，不要让他人的喧嚣纷繁，淹没了自己内心的声音。最重要的是，你要有勇气去跟随你的直觉和心灵，因为它们在某种程度上已经知道你想要成为什么样子，所有其他的事情都是次要的。</p><p>When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.</p><p>　　在我年轻的时候，有本很棒的叫全球目录的杂志。被我们那代人奉为经典。它是由斯图尔特·布兰德在这附近的Menlo公园创办的。他把自己的文艺气质融汇其中。那是六十年代后期。那时还没有个人电脑。全用打字机，剪刀和宝丽来照相机。它就好比是三十五年前的简装版的谷歌。充满理想主义色彩。该书简洁实用，见解独到。</p><p>Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><p>Stay Hungry. Stay Foolish.</p><p>Thank you all very much.</p><p>　　斯图尔特团队出版了几期的全球目录。当它后来要停刊的时候，他们出来最后一版。那是七十年代中期，我就像你们这么大。杂志最后一期的封底上，是一幅清晨乡村公路的照片。是那种搭车旅行玩冒险时会遇到的村路，照片下面有这样一段话：求知若渴，虚心若愚。这是他们停刊的告别语。求知若渴，虚心若愚。我一直以此激励自己。在你们即将毕业开始崭新旅程的时刻，我希望你们也能做到：</p><p>求知若渴，虚心若愚。</p><p>谢谢大家！</p>]]></content>
      
      
      <categories>
          
          <category> 文摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 史蒂夫·乔布斯 </tag>
            
            <tag> Steve Jobs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS内置工具类型使用</title>
      <link href="/2022/06/24/TS%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/24/TS%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h1><ul><li>[√] <code>Partial&lt;Type&gt;</code></li><li>[√] <code>Required&lt;Type&gt;</code></li><li>[√] <code>Readonly&lt;Type&gt;</code></li><li>[√] <code>Record&lt;Keys, Type&gt;</code></li><li>[√] <code>Pick&lt;Type, Keys&gt;</code></li><li>[√] <code>Omit&lt;Type, Keys&gt;</code></li><li>[√] <code>Exclude&lt;UnionType, ExcludedMembers&gt;</code></li><li>[√] <code>Extract&lt;Type, Union&gt;</code></li><li>[√] <code>NonNullable&lt;Type&gt;</code></li><li>[√] <code>Parameters&lt;Type&gt;</code></li><li>[√] <code>ConstructorParameters&lt;Type&gt;</code></li><li>[√] <code>ReturnType&lt;Type&gt;</code></li><li>[√] <code>InstanceType&lt;Type&gt;</code></li><li>[√] <code>ThisParameterType&lt;Type&gt;</code></li><li>[√] <code>OmitThisParameter&lt;Type&gt;</code></li><li>[√] <code>ThisType&lt;Type&gt;</code></li><li>[√] <code>Uppercase&lt;StringType&gt;</code></li><li>[√] <code>Lowercase&lt;StringType&gt;</code></li><li>[√] <code>Capitalize&lt;StringType&gt;</code></li><li>[√] <code>Uncapitalize&lt;StringType&gt;</code></li></ul><h1 id="Utility-Types"><a href="#Utility-Types" class="headerlink" title="Utility Types"></a>Utility Types</h1><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial&lt;Type&gt;"></a><code>Partial&lt;Type&gt;</code></h2><ul><li>将接口类型中定义的属性变成可选的(Optional)</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]?: T[P] | <span class="literal">undefined</span>; &#125;</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params"><span class="attr">todo</span>: <span class="title class_">Todo</span>, <span class="attr">fieldsToUpdate</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Todo</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;organize desk&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;clear clutter&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo2 = <span class="title function_">updateTodo</span>(todo1, &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;throw out trash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Required"><a href="#Required" class="headerlink" title="Required&lt;Type&gt;"></a><code>Required&lt;Type&gt;</code></h2><ul><li>将接口类型中定义的属性变成必选项，与<code>Partial&lt;Type&gt;</code>相反</li><li>即使在之前先将它们设为可选的，Required也会使所有符合条件的属性成为必需的，如果省略掉属性的话TypeScript将会引发错误</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]-?: T[P]; &#125;</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">a</span>?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj2</span>: <span class="title class_">Required</span>&lt;<span class="title class_">Props</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="comment">// Property &#x27;b&#x27; is missing in type &#x27;&#123; a: number; &#125;&#x27; but required in type &#x27;Required&lt;Props&gt;&#x27;.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly&lt;Type&gt;"></a><code>Readonly&lt;Type&gt;</code></h2><ul><li>所有属性设置为只读的类型，不能给类型的属性重新赋值</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123; <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P]; &#125;</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="comment">// Cannot assign to &#x27;title&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Record"><a href="#Record" class="headerlink" title="Record&lt;Keys, Type&gt;"></a><code>Record&lt;Keys, Type&gt;</code></h2><ul><li><p>用于生成以联合类型为键名（Keys），键值类型为Type的新接口，即把Keys的每个键值拿出来，类型规定为Type</p></li><li><p>接收两个泛型参数，构造一个对象类型，键为keys，值为type，用于将一个类型的属性映射到另一个类型</p></li><li><p>源码实现</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">symbol</span>, T&gt; = &#123; [P <span class="keyword">in</span> K]: T; &#125;</span><br></pre></td></tr></table></figure></li><li><p>例子</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CatInfo</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CatName</span> = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cats</span>: <span class="title class_">Record</span>&lt;<span class="title class_">CatName</span>, <span class="title class_">CatInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cats.<span class="property">boris</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick&lt;Type, Keys&gt;"></a><code>Pick&lt;Type, Keys&gt;</code></h2><ul><li>选择一组属性Keys来构造类型Type，即从对象中挑选部分</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123; [P <span class="keyword">in</span> K]: T[P]; &#125;</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Omit"><a href="#Omit" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a><code>Omit&lt;Type, Keys&gt;</code></h2><ul><li>Omit与Pick相反，它从类型Type中删除属性Keys，即是排除部分</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Omit</span>&lt;T, K <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">symbol</span>&gt; = &#123; [P <span class="keyword">in</span> <span class="title class_">Exclude</span>&lt;keyof T, K&gt;]: T[P]; &#125;</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;description&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="number">1615544252770</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoInfo</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;completed&quot;</span> | <span class="string">&quot;createdAt&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todoInfo</span>: <span class="title class_">TodoInfo</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Pick up kids&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;Kindergarten closes at 5pm&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude&lt;UnionType, ExcludedMembers&gt;"></a><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code></h2><ul><li>从UnionType(待筛选列表)中剔除ExcludedMembers(筛选条件)的所有属性</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// type T0 = &quot;b&quot; | &quot;c&quot;  </span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// type T1 = &quot;c&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;;</span><br><span class="line"><span class="comment">// type T2 = string | number</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Extract"><a href="#Extract" class="headerlink" title="Extract&lt;Type, Union&gt;"></a><code>Extract&lt;Type, Union&gt;</code></h2><ul><li>Extract与Exclude相反，从Type(待筛选列表)中保留Union(筛选条件)的所有属性，Union不存在的属性全部剔除</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span></span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Extract</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// type T0 = &quot;a&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;; </span><br><span class="line"><span class="comment">// type T1 = () =&gt; void</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable&lt;Type&gt;"></a><code>NonNullable&lt;Type&gt;</code></h2><ul><li>从Type中排除null和undefined</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonNullable</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? <span class="built_in">never</span> : T</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line"><span class="comment">// type T0 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>[] | <span class="literal">null</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters&lt;Type&gt;"></a><code>Parameters&lt;Type&gt;</code></h2><ul><li>以元组的方式获得函数的入参Type的类型</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Parameters</span>&lt;T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="title function_">extends</span> (...<span class="attr">args</span>: infer P) =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span></span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"><span class="attr">arg</span>: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">string</span> &#125;</span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Parameters</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// type T0 = []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params"><span class="attr">s</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"><span class="comment">// type T1 = [s: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Parameters</span>&lt;&lt;T&gt;<span class="function">(<span class="params"><span class="attr">arg</span>: T</span>) =&gt;</span> T&gt;;</span><br><span class="line"><span class="comment">// type T2 = [arg: unknown]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"><span class="comment">// type T3 = [arg: &#123;</span></span><br><span class="line"><span class="comment">//     a: number;</span></span><br><span class="line"><span class="comment">//     b: string;</span></span><br><span class="line"><span class="comment">// &#125;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"><span class="comment">// type T4 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"><span class="comment">// type T5 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// type T6 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">Parameters</span>&lt;<span class="title class_">Function</span>&gt;;</span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;(...args: any): any&#x27;.</span></span><br><span class="line"><span class="comment">// type T7 = never</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ConstructorParameters"><a href="#ConstructorParameters" class="headerlink" title="ConstructorParameters&lt;Type&gt;"></a><code>ConstructorParameters&lt;Type&gt;</code></h2><ul><li>以元组的方式获得构造函数的入参Type的类型</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConstructorParameters</span>&lt;T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="title function_">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="title function_">new</span> (...<span class="attr">args</span>: infer P) =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span></span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">ErrorConstructor</span>&gt;;</span><br><span class="line"><span class="comment">// type T0 = [message?: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">FunctionConstructor</span>&gt;;</span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">RegExpConstructor</span>&gt;;</span><br><span class="line"><span class="comment">// type T2 = [pattern: string | RegExp, flags?: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"><span class="comment">// type T3 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">Function</span>&gt;;</span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;new (...args: any): any&#x27;.</span></span><br><span class="line"><span class="comment">// type T4 = never</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType&lt;Type&gt;"></a><code>ReturnType&lt;Type&gt;</code></h2><ul><li>用于获取函数的返回类型</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReturnType</span>&lt;T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span></span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>): &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// type T0 = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">(<span class="params"><span class="attr">s</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"><span class="comment">// type T1 = void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"><span class="comment">// type T2 = unknown</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ReturnType</span>&lt;&lt;T <span class="keyword">extends</span> U, U <span class="keyword">extends</span> <span class="built_in">number</span>[]&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"><span class="comment">// type T3 = number[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"><span class="comment">// type T4 = &#123;</span></span><br><span class="line"><span class="comment">//     a: number;</span></span><br><span class="line"><span class="comment">//     b: string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"><span class="comment">// type T5 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"><span class="comment">// type T6 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// type T7 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T8</span> = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;(...args: any): any&#x27;.</span></span><br><span class="line"><span class="comment">// type T8 = any</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="InstanceType"><a href="#InstanceType" class="headerlink" title="InstanceType&lt;Type&gt;"></a><code>InstanceType&lt;Type&gt;</code></h2><ul><li>推断&#x2F;获得构造函数返回值的类型</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">InstanceType</span>&lt;T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="title function_">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="title function_">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span></span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> C&gt;;</span><br><span class="line"><span class="comment">// type T0 = C</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"><span class="comment">// type T1 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"><span class="comment">// type T2 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// type T3 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">InstanceType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;new (...args: any): any&#x27;.</span></span><br><span class="line"><span class="comment">// type T4 = any</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ThisParameterType"><a href="#ThisParameterType" class="headerlink" title="ThisParameterType&lt;Type&gt;"></a><code>ThisParameterType&lt;Type&gt;</code></h2><ul><li>提取函数Type的this参数生成一个新的Type，若函数类型并没有此参数，则提取为unknown类型。</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ThisParameterType</span>&lt;T&gt; = T <span class="title function_">extends</span> (<span class="attr">this</span>: infer U, ...<span class="attr">args</span>: <span class="built_in">never</span>) =&gt; <span class="built_in">any</span> ? U : <span class="built_in">unknown</span></span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="attr">this</span>: <span class="title class_">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">numberToString</span>(<span class="params"><span class="attr">n</span>: <span class="title class_">ThisParameterType</span>&lt;<span class="keyword">typeof</span> toHex&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> toHex.<span class="title function_">apply</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="OmitThisParameter"><a href="#OmitThisParameter" class="headerlink" title="OmitThisParameter&lt;Type&gt;"></a><code>OmitThisParameter&lt;Type&gt;</code></h2><ul><li>创建一个OmitThisParameter类型，从函数类型Type中移除this参数，即忽略函数Type的this参数，生成一个新的函数Type</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OmitThisParameter</span>&lt;T&gt; = <span class="built_in">unknown</span> <span class="keyword">extends</span> <span class="title class_">ThisParameterType</span>&lt;T&gt; ? T : T <span class="title function_">extends</span> (...<span class="attr">args</span>: infer A) =&gt; infer R ? <span class="function">(<span class="params">...<span class="attr">args</span>: A</span>) =&gt;</span> R : T</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="attr">this</span>: <span class="title class_">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">fiveToHex</span>: <span class="title class_">OmitThisParameter</span>&lt;<span class="keyword">typeof</span> toHex&gt; = toHex.<span class="title function_">bind</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fiveToHex</span>());</span><br></pre></td></tr></table></figure></li></ul><h2 id="ThisType"><a href="#ThisType" class="headerlink" title="ThisType&lt;Type&gt;"></a><code>ThisType&lt;Type&gt;</code></h2><ul><li>ThisType不返回转换后的类型，只是给对象标记this接口。注意，要使用ThisType，必须启用noImplicitThis</li><li>源码实现  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ThisType</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li><li>例子  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt; = &#123;</span><br><span class="line">  <span class="attr">data</span>?: D;</span><br><span class="line">  <span class="attr">methods</span>?: M &amp; <span class="title class_">ThisType</span>&lt;D &amp; M&gt;; <span class="comment">// Type of &#x27;this&#x27; in methods is D &amp; M</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> makeObject&lt;D, M&gt;(<span class="attr">desc</span>: <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt;): D &amp; M &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">data</span>: <span class="built_in">object</span> = desc.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">methods</span>: <span class="built_in">object</span> = desc.<span class="property">methods</span> || &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...data, ...methods &#125; <span class="keyword">as</span> D &amp; M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">makeObject</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">moveBy</span>(<span class="params"><span class="attr">dx</span>: <span class="built_in">number</span>, <span class="attr">dy</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> += dx; <span class="comment">// Strongly typed this</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> += dy; <span class="comment">// Strongly typed this</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">10</span>;</span><br><span class="line">obj.<span class="property">y</span> = <span class="number">20</span>;</span><br><span class="line">obj.<span class="title function_">moveBy</span>(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="Intrinsic-String-Manipulation-Types"><a href="#Intrinsic-String-Manipulation-Types" class="headerlink" title="Intrinsic String Manipulation Types"></a><code>Intrinsic String Manipulation Types</code></h1><ul><li><p>TypeScript的一些类型可以用于字符操作，这些类型处于性能的考虑被内置在编译器中，你不能在.d.ts文件里找到它们。如：<code>Uppercase&lt;StringType&gt;</code>、<code>Lowercase&lt;StringType&gt;</code>、<code>Capitalize&lt;StringType&gt;</code>、<code>Uncapitalize&lt;StringType&gt;</code>、</p><h2 id="Uppercase"><a href="#Uppercase" class="headerlink" title="Uppercase&lt;StringType&gt;"></a><code>Uppercase&lt;StringType&gt;</code></h2><ul><li>把每个字符转为大写形式</li><li>源码实现<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Uppercase</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&quot;Hello, world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ShoutyGreeting</span> = <span class="title class_">Uppercase</span>&lt;<span class="title class_">Greeting</span>&gt;</span><br><span class="line"><span class="comment">// type ShoutyGreeting = &quot;HELLO, WORLD&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`ID-<span class="subst">$&#123;Uppercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&quot;my_app&quot;</span>&gt;</span><br><span class="line"><span class="comment">// type MainID = &quot;ID-MY_APP&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Lowercase"><a href="#Lowercase" class="headerlink" title="Lowercase&lt;StringType&gt;"></a><code>Lowercase&lt;StringType&gt;</code></h2><ul><li>把每个字符转为小写形式</li><li>源码实现<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Lowercase</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&quot;Hello, world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">QuietGreeting</span> = <span class="title class_">Lowercase</span>&lt;<span class="title class_">Greeting</span>&gt;</span><br><span class="line"><span class="comment">// type QuietGreeting = &quot;hello, world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`id-<span class="subst">$&#123;Lowercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&quot;MY_APP&quot;</span>&gt;</span><br><span class="line"><span class="comment">// type MainID = &quot;id-my_app&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize&lt;StringType&gt;"></a><code>Capitalize&lt;StringType&gt;</code></h2><ul><li>把字符串的第一个字符转为大写形式</li><li>源码实现<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Capitalize</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LowercaseGreeting</span> = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="title class_">Capitalize</span>&lt;<span class="title class_">LowercaseGreeting</span>&gt;;</span><br><span class="line"><span class="comment">// type Greeting = &quot;Hello, world&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Uncapitalize"><a href="#Uncapitalize" class="headerlink" title="Uncapitalize&lt;StringType&gt;"></a><code>Uncapitalize&lt;StringType&gt;</code></h2><ul><li>把字符串的第一个字符转换为小写形式</li><li>源码实现<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Uncapitalize</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic</span><br></pre></td></tr></table></figure></li><li>例子<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UppercaseGreeting</span> = <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UncomfortableGreeting</span> = <span class="title class_">Uncapitalize</span>&lt;<span class="title class_">UppercaseGreeting</span>&gt;;</span><br><span class="line"><span class="comment">// type UncomfortableGreeting = &quot;hELLO WORLD&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="工具分类一览"><a href="#工具分类一览" class="headerlink" title="工具分类一览"></a>工具分类一览</h1><ul><li>全量修饰接口：<code>Partial</code> <code>Readonly(Immutable)</code> <code>Mutable</code> <code>Required</code></li><li>裁剪接口：<code>Pick</code> <code>Omit</code> <code>PickByValueType</code> <code>OmitByValueType</code></li><li>基于 infer：<code>ReturnType`` ParamType</code> <code>PromiseType</code></li><li>获取指定条件字段：<code>FunctionKeys</code> <code>OptionalKeys</code> <code>RequiredKeys</code> </li><li>内置字符操作类型：<code>Uppercase&lt;StringType&gt;</code> <code>Lowercase&lt;StringType&gt;</code> <code>Capitalize&lt;StringType&gt;</code> <code>Uncapitalize&lt;StringType&gt;</code></li></ul><h1 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h1><ul><li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">https://www.typescriptlang.org/docs/handbook/utility-types.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程已经删除的分支本地环境仍能看到远程分支</title>
      <link href="/2022/06/11/git%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E4%BB%8D%E8%83%BD%E7%9C%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
      <url>/2022/06/11/git%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E4%BB%8D%E8%83%BD%E7%9C%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="git远程已经删除的分支，在本地环境仍能看到远程分支"><a href="#git远程已经删除的分支，在本地环境仍能看到远程分支" class="headerlink" title="git远程已经删除的分支，在本地环境仍能看到远程分支"></a>git远程已经删除的分支，在本地环境仍能看到远程分支</h2><ol><li><p>使用命令查看本地分支及远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git bransh -a</span><br></pre></td></tr></table></figure></li><li><p>查看remote远程分支，还有本地分支与之对应的关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br></pre></td></tr></table></figure></li></ol><ul><li>远程不存在的分支会提示：<code> stale (use &#39;git remote prune&#39; to remove)</code></li></ul><ol start="3"><li>在本地删除远程不存在的分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote prune origin</span><br></pre></td></tr></table></figure>or<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote prune origin &lt;name&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 版本控制工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现打字效果</title>
      <link href="/2022/06/09/css%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/"/>
      <url>/2022/06/09/css%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="css实现打字效果"><a href="#css实现打字效果" class="headerlink" title="css实现打字效果"></a>css实现打字效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.typing-cn</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">15.1em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation</span>: typing <span class="number">3.0s</span> <span class="built_in">steps</span>(<span class="number">15</span>, end), blink-caret .<span class="number">75s</span> step-end infinite;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 打印效果 */</span></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> typing &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">to</span> &#123; <span class="attribute">width</span>: <span class="number">15.1em</span>; &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 光标 */</span></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> blink-caret &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">from</span>, <span class="selector-tag">to</span> &#123; <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> transparent; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123; <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;typing-cn&quot;</span>&gt;</span>简易中文打字效果，简易打字效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 英文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.typing-en</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">22ch</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-right</span>: <span class="number">3px</span> solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: monospace;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation</span>: typing <span class="number">2s</span> <span class="built_in">steps</span>(<span class="number">22</span>) infinite, effect .<span class="number">5s</span> step-end infinite alternate;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> typing &#123;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> effect &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123; <span class="attribute">border-color</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;typing-en&quot;</span>&gt;</span>Typing effect for text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><style type="text/css">  .typing-cn {    width: 15.1em;    white-space: nowrap;    border-right: 2px solid transparent;    animation: typing 3.5s steps(15, end), blink-caret .75s step-end infinite;    overflow: hidden;  }  /* 打印效果 */  @keyframes typing {    from { width: 0; }    to { width: 15.1em; }  }  /* 光标 */  @keyframes blink-caret {    from, to { box-shadow: 1px 0 0 0 transparent; }    50% { box-shadow: 1px 0 0 0; }  }</style><div class="typing-cn">简易中文打字效果，简易打字效果</div><style type="text/css">  .typing-en {    width: 23ch;    white-space: nowrap;    overflow: hidden;    border-right: 3px solid;    font-family: monospace;    font-size: 2em;    animation: typing1 2s steps(23) infinite, effect .5s step-end infinite alternate;  }  @keyframes typing1 {    from { width: 0; }  }  @keyframes effect {    50% { border-color: transparent; }  }</style><div class="typing-en">Typing effect for text </div>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青龙面板搭建</title>
      <link href="/2022/04/27/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/04/27/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="青龙"><a href="#青龙" class="headerlink" title="青龙"></a>青龙</h2><ul><li>支持python3、javaScript、shell、typescript 的定时任务管理面板（A timed task management panel that supports typescript, javaScript, python3, and shell）</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://github.com/whyour/qinglong">青龙Github</a></li></ul><h2 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h2><ul><li>青龙正版docker镜像: <code>whyour/qinglong:latest</code></li></ul><ol><li>docker 安装<ul><li>确保docker已经安装，详细安装docker看<a href="https://damao2250.github.io/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/">docker的简易使用</a></li></ul></li><li>拉取并启动容器 <figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-dit</span> \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/config:/ql/config \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/log:/ql/log \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/db:/ql/db \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">5700</span>:<span class="number">5700</span> \</span><br><span class="line">  <span class="literal">--name</span> qinglong \</span><br><span class="line">  <span class="literal">--hostname</span> qinglong \</span><br><span class="line">  <span class="literal">--restart</span> always \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure></li></ol><h2 id="项目指南"><a href="#项目指南" class="headerlink" title="项目指南"></a>项目指南</h2><ol><li>拉取镜像&#x2F;更新镜像  <figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull whyour/qinglong:latest</span><br></pre></td></tr></table></figure></li><li>删除镜像  <figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi whyour/qinglong:latest</span><br></pre></td></tr></table></figure></li><li>启动容器</li></ol><ul><li>普通服务器<ul><li>-v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config   &#x2F;ql 文件夹名称</li><li>-p 5700:5700 映射的端口</li><li>–name qinglong  –hostname qinglong 容器名字<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-dit</span> \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/config:/ql/config \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/log:/ql/log \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/db:/ql/db \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/repo:/ql/repo \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/raw:/ql/raw \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/scripts:/ql/scripts \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/jbot:/ql/jbot \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/deps:/ql/deps \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/ninja:/ql/ninja \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">5700</span>:<span class="number">5700</span> \</span><br><span class="line">  <span class="literal">--name</span> qinglong \</span><br><span class="line">  <span class="literal">--hostname</span> qinglong \</span><br><span class="line">  <span class="literal">--restart</span> unless<span class="literal">-stopped</span> \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure></li></ul></li><li>n1等路由器<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-dit</span> \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/config:/ql/config \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/log:/ql/log \</span><br><span class="line">  <span class="literal">-v</span> <span class="variable">$PWD</span>/ql/db:/ql/db \</span><br><span class="line">  <span class="literal">--net</span> host \</span><br><span class="line">  <span class="literal">--name</span> qinglong \</span><br><span class="line">  <span class="literal">--hostname</span> qinglong \</span><br><span class="line">  <span class="literal">--restart</span> always \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>删除容器 <figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> qinglong</span><br></pre></td></tr></table></figure></li><li>初次登陆(网页访问)</li></ol><ul><li>初次访问 http:&#x2F;&#x2F;&lt;自己ip&gt;:5700</li><li>使用 admin&#x2F;adminadmin 登陆，提示已初始化密码</li><li>去自己映射目录config下找 auth.json，查看里面的 password<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong <span class="built_in">cat</span> /ql/config/auth.json</span><br></pre></td></tr></table></figure></li></ul><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 京东脚本参考&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><ul><li>第五步初始密码后<ul><li>在面板选择 定时任务-新建任务-填写如下（命令可自行github查找）</li><li>名称：自定义填写    命令：ql repo <a href="https://ghproxy.com/https://github.com/shufflewzc/faker2.git">https://ghproxy.com/https://github.com/shufflewzc/faker2.git</a> “jd_|jx_|getJDCookie” “activity|backUp” “^jd[^_]|USER|ZooFaker_Necklace”      定时规则：可填写0    </li><li>填写完后点击“运行”，运行完后刷新就可以看到所有的任务列表</li></ul></li><li>获取京东cookie<ul><li>网页打开京东手机版：m.jd.com，打开F12，切换手机模式，使用验证码登录京东账号</li><li>在Application出找到Cookie，找到pt_key和pt_pin，复制相应的值，然后手动拼接如下：pt_key&#x3D;xxxx;pt_pin&#x3D;xxxx;  (xxxx为对应的值)</li></ul></li><li>回到青龙面板<ul><li>环境变量-新建环境变量</li><li>名称：JD_COOKIE    （注意名称不能变）   自动拆分：否    值：pt_key&#x3D;xxxx;pt_pin&#x3D;xxxx;</li><li>定时任务-勾选任务执行测试是否成功</li></ul></li></ul><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 只做京东的一下可不理会 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><ol start="6"><li>Cookie管理</li></ol><ul><li>登陆成功进入Cookie管理页面，右上角新增Cookie(最新版已加Cookie格式验证)</li><li>添加成功，可在Cookie列表更新Cookie，删除Cookie</li></ul><ol start="7"><li>基本命令</li></ol><ul><li>(容器内执行或者新建定时任务时忽略docker exec -it qinglong)</li><li>更新青龙<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong ql update</span><br></pre></td></tr></table></figure></li><li>更新青龙并编译<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong ql restart</span><br></pre></td></tr></table></figure></li><li>拉取自定义仓库<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="literal">--</span> 示例 <span class="literal">--</span>&gt;</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql repo https://ghproxy.com/https://github.com/whyour/hundun.git <span class="string">&quot;quanx&quot;</span> <span class="string">&quot;tokens|caiyun|didi|donate|fold|Env&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="literal">--</span> 可用 <span class="literal">--</span>&gt;</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql repo https://github.com/<span class="number">6</span>dylan6/jdpro.git <span class="string">&quot;jd_|jx_|jddj_&quot;</span> <span class="string">&quot;backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|JD|function|sendNotify&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>拉取单个脚本<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong ql raw https://ghproxy.com/https://raw.githubusercontent.com/moposmall/Script/main/Me/jx_cfd.js</span><br></pre></td></tr></table></figure></li><li>删除7天前的所有日志<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong ql rmlog <span class="number">7</span></span><br></pre></td></tr></table></figure></li><li>启动bot<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong ql bot</span><br></pre></td></tr></table></figure></li><li>导出互助码<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong ql code</span><br></pre></td></tr></table></figure></li><li>通知测试<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong notify test test</span><br></pre></td></tr></table></figure></li><li>立即执行脚本<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong task test.js now</span><br></pre></td></tr></table></figure></li><li>并行执行脚本<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> qinglong task test.js conc</span><br></pre></td></tr></table></figure></li></ul><p>利用谷歌浏览器获取京东Cookie抓取，cookie值千万不能泄露，设置环境变量，环境变量—&gt;添加变量</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.查看容器名</span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span></span><br><span class="line"><span class="number">2</span>.重启青龙容器</span><br><span class="line">docker restart 你的容器名</span><br><span class="line"><span class="number">3</span>.更新青龙（或者直接面板更新）</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql update</span><br><span class="line"><span class="number">4</span>.更新青龙并编译</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql restart</span><br><span class="line"><span class="number">5</span>.拉取自定义仓库，已Faker仓库为例</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git <span class="string">&quot;jd_|jx_|gua_|jddj_|getJDCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|ZooFaker_Necklace.js|JDJRValidator_Pure|sign_graphics_validate&quot;</span></span><br><span class="line"><span class="number">6</span>.拉取单个脚本，以Faker库的资产变更通知为例</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql raw https://github.com/shufflewzc/faker2/blob/main/jd_bean_change_new.js</span><br><span class="line"><span class="number">7</span>.导出互助码</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql code</span><br><span class="line"><span class="number">8</span>.通知测试</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong notify test test</span><br><span class="line"><span class="number">9</span>.立即执行脚本，以资产变更通知为例</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong task jd_bean_change_new.js now</span><br><span class="line"><span class="number">10</span>.并行执行脚本</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong task jd_bean_change_new.js conc</span><br><span class="line"><span class="number">11</span>.查看青龙密码 注意你的容器及文件夹名称</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong <span class="built_in">cat</span> /ql/config/auth.json</span><br><span class="line"><span class="number">12</span>.删除<span class="number">7</span>天前的所有日志</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql rmlog <span class="number">7</span></span><br><span class="line"><span class="number">13</span>.启动青龙bot 前提你已配置好青龙BOT</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong ql bot</span><br><span class="line"><span class="number">14</span>.进入青龙</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong bash</span><br><span class="line"><span class="number">15</span>.升级pip版本</span><br><span class="line">python3 <span class="literal">-m</span> pip install <span class="literal">--upgrade</span> pip</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、解决登录青龙面板时提示的服务异常，请手动执行ql check检查服务状态</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong /bin/bash ql check</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、安装脚本的时候出现：reason: connect ETIMEDOUT xxxxx:<span class="number">443</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy false</span><br><span class="line">npm cache clean</span><br><span class="line">或者</span><br><span class="line">pnpm config <span class="built_in">set</span> proxy false</span><br><span class="line">pnpm cache clean</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、通过命令安装node依赖</span><br><span class="line">① 进入青龙面板</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong bash</span><br><span class="line">② xxx 安装依赖名称</span><br><span class="line">pnpm install xxx</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、Python依赖安装失败解决办法</span><br><span class="line">① 进入青龙面板</span><br><span class="line">docker exec <span class="literal">-it</span> qinglong bash</span><br><span class="line">② xxx 安装依赖名称</span><br><span class="line">pip install <span class="literal">-i</span> https://pypi.douban.com/simple/ xxxxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="tg机器人获取通知"><a href="#tg机器人获取通知" class="headerlink" title="tg机器人获取通知"></a>tg机器人获取通知</h1><h2 id="生成tg机器人"><a href="#生成tg机器人" class="headerlink" title="生成tg机器人"></a>生成tg机器人</h2><ul><li>搜索<code>@BotFather</code>，进入对话框输入<code>/newbot</code>，输入机器人呢称，输入机器人username（以bot结尾）</li><li>生成机器人成功后会发送 user token ，类似：539****961:AAgVexxxxxxxxxqfa</li><li>在搜索栏搜索<code>@userinfobot</code>,点击 Start,第二行Id即为您的UserID（telegramBotUserId）</li></ul><h1 id="傻瓜式安装青龙面板"><a href="#傻瓜式安装青龙面板" class="headerlink" title="傻瓜式安装青龙面板"></a>傻瓜式安装青龙面板</h1><ul><li>linux环境的终端面板，输入如下命令即可完成安装</li><li>命令执行完毕后，docker和面板全部一步安装到位，通过http:&#x2F;&#x2F;你的IP:5700，就可以打开青龙面板<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> <span class="literal">-q</span> https://raw.githubusercontents.com/Oreomeow/VIP/main/Scripts/sh/ql.sh <span class="literal">-O</span> ql.sh &amp;&amp; bash ql.sh</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青龙面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的简易使用</title>
      <link href="/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="在CentOS上使用Docker"><a href="#在CentOS上使用Docker" class="headerlink" title="在CentOS上使用Docker"></a>在CentOS上使用Docker</h1><h2 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h2><ul><li>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</li><li>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo yum install <span class="literal">-y</span> yum<span class="literal">-utils</span> \</span><br><span class="line">  device<span class="literal">-mapper-persistent-data</span> \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></li><li>设置完之后，根据需求指定稳定的仓库地址（建议使用国内源）<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源地址</span></span><br><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line">    <span class="literal">--add-repo</span> \</span><br><span class="line">    https://download.docker.com/linux/centos/docker<span class="literal">-ce</span>.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内源地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云</span></span><br><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line">    <span class="literal">--add-repo</span> \</span><br><span class="line">    http://mirrors.aliyun.com/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 清华大学源</span></span><br><span class="line"><span class="variable">$</span> sudo yum<span class="literal">-config-manager</span> \</span><br><span class="line">    <span class="literal">--add-repo</span> \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按安装最新版docker</span></span><br><span class="line"><span class="variable">$</span> sudo yum install docker<span class="literal">-ce</span> docker<span class="literal">-ce-cli</span> containerd.io</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 Docker (启动守护进程)</span></span><br><span class="line"><span class="variable">$</span> sudo systemctl <span class="built_in">start</span> docker</span><br></pre></td></tr></table></figure><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker <span class="built_in">ps</span></span><br><span class="line"><span class="comment"># or 查看所有</span></span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">ps</span> <span class="literal">-a</span></span><br></pre></td></tr></table></figure><h2 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker <span class="built_in">start</span> &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h2 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker stop &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h2 id="重启一个容器"><a href="#重启一个容器" class="headerlink" title="重启一个容器"></a>重启一个容器</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker restart &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出时容器停止</span></span><br><span class="line"><span class="variable">$</span> docker attach &lt;CONTAINER ID&gt;</span><br><span class="line"><span class="comment"># 退出时容器不停止（推荐）</span></span><br><span class="line"><span class="variable">$</span> docker exec &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h2 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h2><ul><li>删除安装包<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> yum remove docker<span class="literal">-ce</span></span><br></pre></td></tr></table></figure></li><li>删除镜像、容器、配置文件等内容<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-rf</span> /var/lib/docker</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用docker安装nginx"><a href="#使用docker安装nginx" class="headerlink" title="使用docker安装nginx"></a>使用docker安装nginx</h2><ul><li><p>获取nginx镜像列表</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker search nginx</span><br></pre></td></tr></table></figure></li><li><p>拉取nginx镜像到本地，使用第一个默认的’nginx’</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker pull nginx</span><br></pre></td></tr></table></figure></li><li><p>查看拉取到本地的nginx镜像</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker images nginx</span><br></pre></td></tr></table></figure></li><li><p>创建并启动nginx容器</p><ul><li>-d 指定容器以守护进程方式在后台运行</li><li>–name 指定容器名称，此处我指定的是docker_nginx</li><li>-p 指定主机与容器内部的端口号映射关系，格式 -p</li><li><code>[宿主机端口号]:[容器内部端口]</code>，此处使用主机80端口，映射容器80端口</li><li>1276 是nginx的镜像IMAGE ID前4位<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker run <span class="literal">-d</span> <span class="literal">--name</span> docker_nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> <span class="number">1276</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看到正在运行的容器</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> docker <span class="built_in">ps</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="修改nginx的配置文件"><a href="#修改nginx的配置文件" class="headerlink" title="修改nginx的配置文件"></a>修改nginx的配置文件</h3><ul><li>1、每次都进入到nginx容器内部修改<ul><li>执行 <code>docker exec -it xxxx /bin/bash</code> 进入到nginx容器内部<ul><li>exec 命令代表附着到运行着的容器内部</li><li>-it 是 -i 与 -t两个参数合并写法，-i -t 标志着为我们指定的容器创建了TTY并捕捉了STDIN</li><li>xxxx 是我们要进入的容器Id的前4位</li><li>&#x2F;bin&#x2F;bash 指定了执行命令的shell</li></ul></li><li>进入到nginx容器内部后，我们可以cd &#x2F;etc&#x2F;nginx，可以看到相关的nginx配置文件都在&#x2F;etc&#x2F;nginx目录下</li><li>而nginx容器内的默认首页html文件目录为&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</li><li>日志文件位于&#x2F;var&#x2F;log&#x2F;nginx</li><li>nginx容器内默认没有vim编辑器<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> apt<span class="literal">-get</span> update</span><br><span class="line"><span class="variable">$</span> apt<span class="literal">-get</span> install vim</span><br></pre></td></tr></table></figure></li><li>容器内编辑nginx.conf配置文件</li><li>执行exit命令我们可以从容器内部退出</li></ul></li><li>2、将nginx容器内部配置文件挂载到主机<ul><li>有这个需求说明频繁改动，可直接安装到服务器</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用软件列表</title>
      <link href="/2022/03/30/Windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/"/>
      <url>/2022/03/30/Windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows常用软件列表"><a href="#Windows常用软件列表" class="headerlink" title="Windows常用软件列表"></a>Windows常用软件列表</h1><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ul><li><a href="http://www.7-zip.org/">7-Zip</a> - 支持 7z、ZIP、GZIP、BZIP2 和 TAR 格式，其他格式可以解压。开源软件 免费软件（👍）<ul><li>使用技巧：选择<code>添加到压缩包</code>-压缩格式选择<code>7z</code>-压缩等级选<code>最大压缩</code>-压缩后即可得到最小体积的压缩包</li></ul></li><li><a href="https://www.bandisoft.com/bandizip/">Bandizip</a> - 轻量级、快速且免费的多合一 Zip 存档器。免费软件</li><li><a href="http://www.rarlab.com/">WinRAR</a> - 一个强大的存档管理器。它可以备份您的数据并减少电子邮件附件的大小，解压缩 RAR、ZIP 和其他文件</li></ul><h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><ul><li><a href="http://www.telerik.com/fiddler">Fiddler</a> - 抓包工具</li><li><a href="https://filezilla-project.org/">FileZilla</a> - FTP、FTPS 和 SFTP 客户端。开源软件 免费软件</li><li><a href="https://git-scm.com/downloads">Git</a> - Git是一个开源的分布式版本控制系统。开源软件 免费软件</li><li><a href="https://mremoteng.org/">mRemoteNG</a> - mRemoteNG是一款用于Windows开源、多协议的远程连接管理器（<a href="https://github.com/mRemoteNG/mRemoteNG">github地址</a>）。开源软件 免费软件（👍）</li><li><a href="https://www.sourcetreeapp.com/">Sourcetree</a> - 一个免费、简单、强大的 git GUI客户端</li><li><a href="https://github.com/wanghongenpin/network_proxy_flutter/releases">ProxyPin</a> - 开源免费抓包工具，支持Windows、Mac、Android、IOS、Linux 全平台系统（👍）</li></ul><h2 id="办公套件"><a href="#办公套件" class="headerlink" title="办公套件"></a>办公套件</h2><ul><li><a href="https://www.freeoffice.com/zh/">FreeOffice</a> - FreeOffice 是一个完整的办公套件，带有文字处理器、电子表格应用程序和演示程序——所有这些都与 Microsoft Office 中的同类产品兼容。免费软件（一般，胜在免费）</li><li><a href="http://www.office.com/">Microsoft Office</a> - 微软的办公生产力套件。收费（👍）</li><li><a href="http://www.sumatrapdfreader.org/free-pdf-reader.html">Sumatra PDF</a> - PDF、ePub、MOBI、CHM、XPS、DjVu、CBZ、CBR 阅读器。开源软件 免费软件</li></ul><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><ul><li><a href="https://atom.io/">Atom</a> - Atom 是 Github 专门为程序员推出的一个跨平台文本编辑器。开源软件 免费软件</li><li><a href="http://brackets.io/">Brackets</a> - 一个现代的、开源的文本编辑器，可以理解网页设计。开源软件 免费软件</li><li><a href="http://www.vim.org/download.php#pc">GVim</a> - (G)Vim 是一个高度可配置的文本编辑器，旨在实现高效的文本编辑。开源软件 免费软件</li><li><a href="http://lighttable.com/">Light Table</a> - 一个可定制的编辑器，具有即时反馈并显示数据值在您的代码中流动。开源软件 免费软件</li><li><a href="https://neovim.io/">Neovim</a> - 从字面上看是 vim 的未来开源软件 免费软件</li><li><a href="https://notepad-plus-plus.org/">Notepad++</a> - 支持多种编程语言的源代码编辑器。开源软件 免费软件</li><li><a href="http://www.flos-freeware.ch/notepad2.html">Notepad2</a> - 具有许多有用功能的小巧快速的记事本替换。开源软件 免费软件</li><li><a href="http://onivim.io/">Oni</a> - 现代模态编辑 - 由 Neovim 提供支持开源软件 免费软件</li><li><a href="https://spacevim.org/">SpaceVim</a> - 社区驱动的 vim 发行版开源软件 免费软件</li><li><a href="http://www.sublimetext.com/3">Sublime Text 3</a> - 是一款跨平台代码编辑器软件</li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a> - 构建和调试现代 Web 和云应用程序。开源软件 免费软件（👍）</li></ul><h2 id="生产率"><a href="#生产率" class="headerlink" title="生产率"></a>生产率</h2><ul><li><a href="http://ditto-cp.sourceforge.net/">Ditto</a> - 剪贴板管理器。（👍）</li><li><a href="http://www.voidtools.com/">Everything</a> - 按名称最快的文件&#x2F;文件夹搜索工具。</li></ul><h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><ul><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Clash</a> - Clash 是一款使用 Go 语言编写的代理工具，支持规则分流。 免费软件（👍）</li><li><a href="https://github.com/2dust/v2rayN/releases">v2rayN</a> - v2rayN是基于v2ray核心的简洁好用、功能强大的v2ray客户端,支持Vmess、Shadowsocks、Socks5等多种协议,也支持服务器订阅</li><li><a href="https://potplayer.daum.net/?lang=zh_CN">PotPlayer</a> - 功能强大的多媒体播放器，内置解码器（👍）</li><li><a href="https://www.disktool.cn/recovery/winfr.html">WinFR</a> - 傲梅科技开发的WinFR是Windows文件恢复（微软命令行程序）的免费图形界面，帮助用户快速从Windows 10&#x2F;11中恢复已删除的文件</li><li><a href="https://github.com/microsoft/PowerToys/releases">PowerToys</a> - PowerToys 是微软出品的工具合集软件，支持的功能包括：始终置顶、颜色选择器、图像大小调整器、文本提取器、屏幕标尺、鼠标实用工具、键盘管理器、文件资源管理器加载项、快捷键指南、窗口管理器 、应用搜索启动 、批量重命名</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/FTPServer.exe">FTPServer</a> - FTPServer 是一个FTP文件传输协议的工具，支持上传、下载功能</li><li><a href="https://molunerfinn.com/PicGo">PicGo</a> - PicGo 是一个用于快速上传图片并获取图片URL链接的图床上传工具</li><li><a href="https://www.disktool.cn/download.html">傲梅分区助手</a> - 傲梅分区助手是一个简单易用且免费的无损分区软件，是一个强大的分区工具（<a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/PAGreen.7z">绿色版</a>）（👍）</li><li><a href="https://iknow.lenovo.com.cn/detail/dc_178562.html">联想 Lenovo Quick Fix</a> - 一键关闭或开启 Win10 系统的自动更新（根据链接的导航向上一级可以查找到更多工具）</li><li><a href="https://github.com/zhongyang219/TrafficMonitor/releases/">网速监控悬浮窗 TrafficMonitor</a> - 一个用于显示当前网速、CPU及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤</li><li><a href="https://www.hibitsoft.ir/Uninstaller.html">卸载神器 HiBit Uninstaller</a> - 支持强制卸载、批量卸载，安全的清理注册表和垃圾文件，快捷方式修复，空文件夹删除，系统更新补丁管理等功能</li><li><a href="https://github.com/blackboxo/CleanMyWechat/releases">CleanMyWechat</a> - 微信清理工具，自动删除 PC 端微信缓存数据，包括从所有聊天中自动下载的大量文件、视频、图片等数据内容，解放你的空间</li><li><a href="https://github.com/huiyadanli/RevokeMsgPatcher/releases">防撤回补丁</a> - PC版微信&#x2F;QQ&#x2F;TIM防撤回补丁，支持微信多开</li><li><a href="https://github.com/flydoos/DingTalkRevokeMsgPatcher/releases">钉钉消息防撤回补丁PC版</a> - 钉钉消息防撤回插件</li><li><a href="https://getquicker.net/">Quicker</a> - 您的指尖工具箱，操作更少，收获更多！（强大的工具集合）</li><li><a href="https://github.com/tailscale/tailscale/releases">Tailscale</a> - 强大的内网组网工具（👍）</li><li><a href="https://www.52pojie.cn/thread-1683418-1-1.html">批量共享</a> - 一键共享Windows SMB 文件夹，<a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%89%B9%E9%87%8F%E5%85%B1%E4%BA%AB%E5%8D%95%E6%96%87%E4%BB%B6v1.2.7z">直接下载</a></li><li><a href="https://diskanalyzer.com/">WizTree</a> - 快速磁盘分析工具，<a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/wizTree-1.zip">我使用的版本</a>，Mac可用Lemon： <a href="https://lemon.qq.com/">https://lemon.qq.com/</a></li></ul><h2 id="图片工具"><a href="#图片工具" class="headerlink" title="图片工具"></a>图片工具</h2><ul><li><a href="https://github.com/NickeManarin/ScreenToGif/releases">GIF 录制神器 ScreenToGif</a> - 支持屏幕、摄像头、画板录制，可对 Gif 进行压缩、裁剪、涂鸦、模糊、添加字幕、添加水印、添加进度条等操作</li><li><a href="https://zh.snipaste.com/download.html">Snipaste</a> - Snipaste 是一个简单但强大的截图工具</li><li><a href="https://pixpinapp.com/">PixPin</a> - 截图&#x2F;贴图&#x2F;长截图&#x2F;文字识别&#x2F;标注，功能强大使用简单的截图&#x2F;贴图工具，帮助你提高效率（👍）</li><li><a href="https://www.bandisoft.com/honeyview/">Honeyview</a> - Honeyview 是一款快速的图片查看器，可以显示包括 GPS 信息在内的 JPEG 格式的 EXIF 信息，支持显示 GIF 和 WebP 动图</li><li><a href="http://kankan.meitu.com/">美图看看</a> - 一个经典的看图软件（安装界面安装的时候注意取消勾选其他软件安装）</li></ul><h2 id="绿色软件"><a href="#绿色软件" class="headerlink" title="绿色软件"></a>绿色软件</h2><ul><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/pdfelement_58150.zip">Wondershare PDFelement</a> - Wondershare PDFelementv7.6.0.4878免安装版，是一款非常受欢迎的PDF编辑工具。该软件主要为用户提供了强大的编辑功能，也支持强大的OCR光学识别引擎，是最好用的专业pdf编辑软件之一</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/navicat_premium.zip">Navicat Premium</a> - Navicat premium是一款数据库管理工具,是一个可多重连线资料库的管理工具，它可以让你以单一程式同时连线到 MySQL、SQLite、Oracle 及 PostgreSQL 资料库，让管理不同类型的资料库更加的方便</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/debut.zip">Debut Video Capture Software</a> - Debut Video Capture Software是一款简单易用的屏幕录制软件，可以捕捉你的屏幕和摄像头</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/ii3-Setup.zip">iRead</a> - iRead是一款阅读器、电子书制作工具和读书平台，支持txt、pdf、epub、ib3等多种文件格式（<a href="http://www.ireadhome.com/">iRead官方</a>不再提供在线服务，可以继续离线功能）</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/CCleaner%20Professional%206.06.10144%20(x64)%20Multilingual.zip">CCleaner</a> - CCleaner是一款小型，快速，专业的系统清理和隐私保护工具</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/IDM%E7%BB%BF%E8%89%B2%E7%89%886.41.zip">Internet Download Manager (IDM) </a> - Internet Download Manager简称IDM，是一款Windows系统专业下载加速工具,IDM下载器支持多种类型文件下载,并能完美恢复各种中断的下载任务</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/WizTree.zip">WizTree </a> - WizTree是一款免费的磁盘空间分析软件，它可以快速扫描整个硬盘并显示所有文件和文件夹的大小</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/czkawka%206.1.0.zip">czkawka 6.1.0</a> czkawka-一个重复文件、空文件夹查找的软件</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Victoria5.23-tool.zip">Victoria5.23 硬盘测试工具</a> - 硬盘测试工具，<a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Victoria5.23%20test%20tool.pdf">使用文档</a></li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li><a href="https://dl.google.com/tag/s/installdataindex/update2/installers/ChromeStandaloneSetup64.exe">Google Chrome 64位</a> - Google Chrome是由Google打造的浏览器，如果你想拥有一个浏览快速、更新频繁的网络体验，选它没错。(<a href="https://dl.google.com/tag/s/installdataindex/update2/installers/ChromeStandaloneSetup.exe">Google Chrome 32位</a>)<ul><li>Chrome各版本官方下载地址：<a href="https://www.google.com/intl/zh-CN/chrome/thank-you.html?installdataindex=empty&standalone=1&statcb=0&defaultbrowser=0">https://www.google.com/intl/zh-CN/chrome/thank-you.html?installdataindex=empty&amp;standalone=1&amp;statcb=0&amp;defaultbrowser=0</a> (已失效。跳到chrome官网)</li><li>参数说明：<ul><li>platform&#x3D;win ：适用平台为 Windows（包括 win 32位和 win64 64位版）</li><li>installdataindex&#x3D;defaultbrowser ：安装后设 Chrome 为默认浏览器</li><li>extra&#x3D;stablechannel ：指定版本为稳定版（版本有 stablechannel、betachannel、devchannel、canarychannel ）</li></ul></li></ul></li><li><a href="https://dl.google.com/tag/s/appguid=%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D&iid=%7BE3751212-181B-0E06-8D37-4EC9E8CE331E%7D&lang=en&browser=4&usagestats=0&appname=Google%20Chrome&needsadmin=prefers&ap=x64-stable-statsdef_1&installdataindex=defaultbrowser/chrome/install/ChromeStandaloneSetup64.exe">最新 Chrome 64位 下载地址</a></li><li><a href="https://dl.google.com/tag/s/appguid=%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D&iid=%7BE3751212-181B-0E06-8D37-4EC9E8CE331E%7D&lang=en&browser=4&usagestats=0&appname=Google%20Chrome&needsadmin=prefers&ap=x64-stable-statsdef_1&installdataindex=defaultbrowser/chrome/install/ChromeStandaloneSetup64.exe">最新 Chrome 64位 下载地址</a></li><li><a href="https://c2rsetup.officeapps.live.com/c2r/downloadEdge.aspx?platform=Default&source=EdgeStablePage&Channel=Stable&language=zh-cn&brand=M100">Microsoft Edge</a> - Microsoft Edge 是一款快速而安全的浏览器</li></ul><h2 id="Mac-软件下载常见站点（未甄别）"><a href="#Mac-软件下载常见站点（未甄别）" class="headerlink" title="Mac 软件下载常见站点（未甄别）"></a>Mac 软件下载常见站点（未甄别）</h2><ul><li>Xclient  <a href="https://xclient.info/">https://xclient.info/</a> （推荐）</li><li>MacApp分享频道  <a href="https://macapp.org.cn/">https://macapp.org.cn/</a></li><li>Digit77  <a href="https://www.digit77.com/">https://www.digit77.com</a></li><li>Mac玩儿法  <a href="https://www.waerfa.com/">https://www.waerfa.com/</a></li><li>马可菠萝  <a href="https://www.macbl.com/">https://www.macbl.com/</a></li><li>MacPedia  <a href="https://macpedia.xyz/">https://macpedia.xyz/</a></li><li>未来Mac下载  <a href="https://mac.orsoon.com/">https://mac.orsoon.com/</a></li><li>玩机手册  <a href="https://www.rjsos.com/mac">https://www.rjsos.com/mac</a></li><li>麦氪派  <a href="https://www.waitsun.com/topics/os">https://www.waitsun.com/topics/os</a></li><li>潘多拉盒子  <a href="https://www.inpandora.com/">https://www.inpandora.com/</a></li></ul><h2 id="支持-iOS-App-Store-的-iTunes-12-6-3"><a href="#支持-iOS-App-Store-的-iTunes-12-6-3" class="headerlink" title="支持 iOS App Store 的 iTunes 12.6.3"></a>支持 iOS App Store 的 iTunes 12.6.3</h2><ul><li>从此处的 Apple 支持下载适用于 Mac 或 Windows 的 iTunes 12.6.3，更高版本不支持 iOS App Store<ul><li>直接下载：<a href="https://secure-appldnld.apple.com/itunes12/091-33628-20170922-EF8F0FE4-9FEF-11E7-B113-91CF9A97A551/iTunes12.6.3.dmg">获取适用于 Mac 的 iTunes 12.6.3 DMG</a></li><li>直接下载：<a href="https://secure-appldnld.apple.com/itunes12/091-33627-20170922-EF8CB708-9FEF-11E7-8504-92CF9A97A551/iTunesSetup.exe">适用于 Windows 的 iTunes 12.6.3，32 位</a></li><li>直接下载：<a href="https://secure-appldnld.apple.com/itunes12/091-33626-20170922-F51D3530-A003-11E7-8324-03D19A97A551/iTunes64Setup.exe">适用于 Windows PC 的 iTunes 12.6.3，64 位</a></li></ul></li></ul><h2 id="一些m3u8源"><a href="#一些m3u8源" class="headerlink" title="一些m3u8源"></a>一些m3u8源</h2><ul><li>IPTV(IPV6专用) - <a href="https://live.fanmingming.com/tv/m3u/ipv6.m3u">https://live.fanmingming.com/tv/m3u/ipv6.m3u</a></li><li>Global直播源 - <a href="https://live.fanmingming.com/tv/m3u/ipv6.m3u">https://live.fanmingming.com/tv/m3u/global.m3u</a></li></ul><h2 id="常见软件指南"><a href="#常见软件指南" class="headerlink" title="常见软件指南"></a>常见软件指南</h2><h3 id="Office卸载工具"><a href="#Office卸载工具" class="headerlink" title="Office卸载工具"></a>Office卸载工具</h3><ul><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Office%20Tool_2.7z">Office Tool Plus</a></li><li>解压后运行<code>Office Tool Plus.exe</code>，使用修复工具移除Office</li><li>几分钟后出现“移除Office结束”表明卸载完成</li></ul><h2 id="激活-不一定可用"><a href="#激活-不一定可用" class="headerlink" title="激活(不一定可用)"></a>激活(不一定可用)</h2><ul><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/jetbra-goland.zip">jetbra-goland</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Microsoft官网下载Windows镜像</title>
      <link href="/2022/03/30/%E5%A6%82%E4%BD%95%E5%9C%A8Microsoft%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDWindows%E9%95%9C%E5%83%8F/"/>
      <url>/2022/03/30/%E5%A6%82%E4%BD%95%E5%9C%A8Microsoft%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDWindows%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在Microsoft官网下载Windows镜像"><a href="#如何在Microsoft官网下载Windows镜像" class="headerlink" title="如何在Microsoft官网下载Windows镜像"></a>如何在Microsoft官网下载Windows镜像</h1><h2 id="1-直接打开链接，选择指定的版本下载"><a href="#1-直接打开链接，选择指定的版本下载" class="headerlink" title="1. 直接打开链接，选择指定的版本下载"></a>1. 直接打开链接，选择指定的版本下载</h2><ul><li><a href="https://support.microsoft.com/zh-cn/windows/%E5%88%9B%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E-windows-%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%8B%E8%B4%A8-99a58364-8c02-206f-aa6f-40c3b507420d">https://support.microsoft.com/zh-cn/windows/%E5%88%9B%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E-windows-%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%8B%E8%B4%A8-99a58364-8c02-206f-aa6f-40c3b507420d</a></li></ul><h2 id="2-在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载"><a href="#2-在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载" class="headerlink" title="2. 在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载"></a>2. 在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载</h2>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下载 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我喜欢你，一如心念心</title>
      <link href="/2022/03/16/%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0%EF%BC%8C%E4%B8%80%E5%A6%82%E5%BF%83%E5%BF%B5%E5%BF%83/"/>
      <url>/2022/03/16/%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0%EF%BC%8C%E4%B8%80%E5%A6%82%E5%BF%83%E5%BF%B5%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="我喜欢你，一如心念心"><a href="#我喜欢你，一如心念心" class="headerlink" title="我喜欢你，一如心念心"></a>我喜欢你，一如心念心</h1><p>“生活啥子时候给过我十八岁</p><p>我奋力以赴的终点，还不如你的起点</p><p>喜欢一个人的时候，哪个又不是烂命一条</p><p>河里的虾和海里的虾能生活在一起吗</p><p>我喜欢你！！是同学之间的喜欢，是同桌之间的喜欢，也是十七十八岁的时候真心实意的喜欢！！我喜欢你，那你呢？”</p><p>看到<a href="https://foamzou.com/2020/11/29/%e9%a3%8e%e7%8a%ac%e5%b0%91%e5%b9%b4%e7%9a%84%e5%a4%a9%e7%a9%ba-%e5%96%9c%e6%ac%a2%e7%9a%84%e8%af%ad%e5%bd%95/">这篇文章</a>的开头突然有点感慨</p><p>喜欢是什么？总不能是乍见之欢，在我的经历里，喜欢是一座城市通往另一座城市的公交车，是那一段漫长但又觉得短暂的路程上美好的设想及路上景色，是两杯星巴克以及一个因为矜持而没有吃完的小cake，是一张留下瞬间回忆并时不时拿出来回味的照片，是三言两语的闲聊，是场喜欢的电影…</p><p>在大多数人的认知里，十八岁应该是青春最美好的时刻，小的时候一直幻想自己的十八岁，但记忆里已全然不记得自己幻想的模样了。但此时，自己的十八已经远离自己好些个年头了，印象中那年还在奋力准备高考吧，是一个奋斗的时刻，但后来结果也不尽人意，虽然淡然面对，心里却也是有一丝丝愧意。</p><p>其实二十岁开头那几年，可能才是青春该有的样子，前无忧后无虑，去走走向往的地方，去看看喜欢的人，去学想学的东西，去做想做的事情；也喜欢漫无目的地走，去看喜欢的书，去温习看了无数遍的电影，体验过早出晚归却很充实的日子。匆匆而过的日子，像是刻画在小册子上的漫画，不经意间翻动，竟发现许多感动自己的情节。</p><p>在往后的那些日子与喜欢的你同在，生活的每一刻，都在感动着我们，在奋力前行，期许不辜负日子</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Chrome开发者工具进行网页长截图</title>
      <link href="/2022/03/10/%E5%88%A9%E7%94%A8Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/"/>
      <url>/2022/03/10/%E5%88%A9%E7%94%A8Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Chrome开发者工具进行网页长截图"><a href="#利用Chrome开发者工具进行网页长截图" class="headerlink" title="利用Chrome开发者工具进行网页长截图"></a>利用Chrome开发者工具进行网页长截图</h1><h2 id="打开开发者工具（F12）"><a href="#打开开发者工具（F12）" class="headerlink" title="打开开发者工具（F12）"></a>打开开发者工具（F12）</h2><h2 id="按下-Ctrl-Shift-P"><a href="#按下-Ctrl-Shift-P" class="headerlink" title="按下 Ctrl + Shift + P"></a>按下 Ctrl + Shift + P</h2><ul><li><p>输入命令：Capture full size screenshot</p></li><li><p>敲下回车，Chrome就会自动截取整个网页内容并保存至本地（网页过长的时候需要等一会儿）</p></li><li><p>输入命令：Capture area screenshot</p></li><li><p>敲下回车，可以框选想截屏的区域</p></li><li><p>输入命令：Capture后，会提示更多截屏的方式，可根据需要进行选择</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> 截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-年终总结</title>
      <link href="/2021/12/31/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2021/12/31/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么写？"><a href="#为什么写？" class="headerlink" title="为什么写？"></a>为什么写？</h2><ul><li>History does not repeat itself, but it does often rhyme.</li><li>这句话不知道该怎么翻译才好，看了很多翻译，总觉得get不到那个点，我觉得倒不如翻译成这样：不重来的旅程，却有着重样的境遇。境遇好与坏，岂敢断言？如果不回顾旅程，细数好坏，那明天是否也会走同样的路？好的一样好，坏的同样再继续。其实人真正的成长，可能就在一瞬间，在那么一个你不经意的瞬间，“嗖”的一下，就成长了，可能你还没察觉，可能你也不知道。但所谓的“成长”，没有什么严明的界定，大概是你懂得了某件事情，也大概是你潜意识里多了一个念想。但是当你没有回顾自己的过去时，你不知道过去的好与坏，更不知道其实成长就在不经意的瞬间。2021年，是一个欢与悲共存的得一年，人生百态，尽显其中，所以趁着这个2021的最后几天，总结一下2021的得与失，总结经验之余，同样盼望未来的路会走得更加顺畅。（其实写的时候心情很复杂，时而沉重，时而欢快，如果您觉得看起来比较困难，那您大可以看到这儿就结束了，虽然我知道没人看，但是还是要温馨提示一下，haha…）</li><li>老实说，决定提笔前也是想了很多，思绪万千，情绪也是很纠结，该不该写？该怎么写？写给谁看？写了自己就能得到什么吗？其实大概率是并没有！只是情感刚好到达了某个点，就想写点东西慰藉自己，以至于不让自己觉得一整天都在浑浑噩噩地过日子，一整天都在想些已经发生却又不尽人意的事情，一整天都在无心向上的样子。所以，所谓的“总结”不一定是总结，可能在某种程度上来说是一种倾诉，从未奢望“总结”能给自己带来意外的收获，但是希望能让自己“倾诉”出来，让更多的思绪趋向于积极向上。</li></ul><h2 id="回顾预告（2021-12-23，微信朋友圈）"><a href="#回顾预告（2021-12-23，微信朋友圈）" class="headerlink" title="回顾预告（2021-12-23，微信朋友圈）"></a>回顾预告（2021-12-23，微信朋友圈）</h2><ul><li>夫风生于地，起于青蘋之末。着实慵懒了，抓住2021的尾巴来个年度总结吧！读《掌控习惯》时，作者James Clear提到他的年终总结是回答了三个问题：1.今年什么事做得比较好； 2.今年哪些事做得不太好； 3.我学到了什么。那就来个预告吧，12月31日damao2250.github.io见！</li></ul><h2 id="总结正文"><a href="#总结正文" class="headerlink" title="总结正文"></a>总结正文</h2><ul><li><p>似乎这一整年的话题都离不开COVID-19，不知不觉“抗疫运动”已经持续了两年，还记得最初的记忆是2019年香港出现暴乱，随后2019年末就出现疫情，所有药店口罩被“疯抢”，库存清零。曾经很反感带口罩的我，也渐渐习惯了出门就带口罩，健康码、行程码在生活中也担起重要角色，核酸检测更是少不了。可能对很多人来说，这一场疫情是机遇和挑战，但同样对大部分人来说，是一场生死存亡的竞速。但对于我来说，可能好坏比较均衡，因为这一整个过程还算是比较均衡，没有什么突出亮点，也没有什么“恨铁不成钢”，趋向于平稳，不过似乎时间跑赢了一点点。为什么这么说？其实没有什么具体事项，而是自我的整体感觉：一样的成绩，花费了更多的时间。</p><h3 id="先说两件能让我喜上眉梢的两件事"><a href="#先说两件能让我喜上眉梢的两件事" class="headerlink" title="先说两件能让我喜上眉梢的两件事"></a>先说两件能让我喜上眉梢的两件事</h3><ul><li>第一件就是2021年初（印象中应该是年初五了）我家和女朋友家两个家庭的人首次相聚，其实我想都没想过要这么快就到来了，感觉什么准备都没有就要父母相见了，甚至激动得有点睡不着。于是开始着手准备些礼物，毕竟大过年的，而且是第一次举家去女朋友家里。烟酒茶这些自然是少不了的了，让我印象最深的是买烟的事，为了图个吉利，那会儿就是要买“红双喜”牌的烟，但是恰逢过年，镇上所有的商店、批发部基本都卖完了，要么就只剩下散装，眼看着第二天就要去女朋友家了，所有礼品都准备好了，就还差烟。各种打电话、发微信，但凡认识跟烟有关的人都问了一遍，还是没有着落，忙活了一下午。无奈之下只能去区里看看了，心想着镇上没有，区里总该有了吧。于是我爸带着我往区里赶，先问几个大超市，再问几个批发部，得到的结果都是没有，那时天已经渐渐变暗了，还有些落日的余晖，似乎在暗示着“还有希望”，正好此时我爸想去一条小巷子里买个红包皮，然后顺便就问了下，结果居然有一条红双喜的烟，远远看到他脸上的笑容，他正向我招了一下手，我就知道有希望了。看到他拿了一个大红色得塑料袋装着烟健步走来，那种喜出望外的感觉，别提心里有多开心。他很笑着说：“我在那边买了一条烟”，然后又沉重的补了一句：“但是还差一条啊”。于是我俩“兵分两路”，穿梭在大街小巷里，逢店必问。最后我在大路边的一个小批发部找到了希望，顺利买到了第二条烟。此时天已经黑了，但是掩盖不住我们脸上的喜悦，买完后就赶紧往家的方向飞驰回去了。第二天早上，我早早就醒来了，看了下时间凌晨五点多，但是我已经睡不着了，起来收拾点自己的东西，因为我是打算去女朋友家住几天，然后跟她一起去广州的。但是爸妈他们此时还在睡梦中，此时的我已经在蹑手蹑脚的收拾自己的东西了，不敢发出太大动静，生怕这么早就吵醒他们。但没想到的是，没过多久他们也都起床了，他们也希望能出发早一点，于是天微亮，我们就已经出发了。至于女朋友那边，看得出来他们也是一大早的，忙前忙后的为我们的到来做了很多准备，每个人都很热情。那种其乐融融的氛围，可能是我这辈子也无法忘掉的一番景象。本来我还预想着会不会有那种尬聊的场景，但是看到他们茶前饭后的交谈，就大可不必担心了。两个家庭短短小半天的相聚，却汇聚了无数的情感跟欢乐，每次回想起来当时的情景，都是满满的幸福感。</li></ul><br /><ul><li>第二件就是五一的阳江之旅，说来其实算是四个家庭的户外活动了，我一家、我女朋友一家、我妹她男朋友一家、我哥他们一家，虽说这可能是我妹跟她男朋友的主场，但是一整个旅行下来，大家都还算玩得虽然没有比较尽兴的，但也还算勉强能过得去，除了路途有些遥远跟有些堵车外。其实这一次除了玩之外，我觉得最重要的一点就是大家这么多人能有机会聚在一起，特别是在疫情还存在的情况下，非常难得。期间最快乐的应该就是要返程那天的下午了，因为三天的路程中有大半时间是浪费在路上的，还有小部分时间是下雨天，而回程的那天下午天气还算是可以的，然后我们的目的地是海边。一开始的时候大家还很矜持，没有下海去玩，但后来逐渐放开之后，大家就开始一起慢慢“海上冲浪”了，玩得可起劲了。让我感觉开心的还有件事，就是带上了李思祈，这个小不点，欢乐也是挺多的，让我提前体检了“做家长”的感觉。</li></ul><h3 id="再说两件让我透骨酸心的事"><a href="#再说两件让我透骨酸心的事" class="headerlink" title="再说两件让我透骨酸心的事"></a>再说两件让我透骨酸心的事</h3><ul><li>2021-07-15，也就是六月初六的傍晚，一个让我久久不能接受的现实，奶奶与世长辞了。在这的前几天，看得出来每个人的心里都做着准备了，可是怎么办，多希望能帮奶奶分担点痛苦，每次看到她苍老的容颜，以前跟她聊天的种种场景浮现在眼前，以前还小的时候她对我的叮嘱，似乎有回响在耳旁。记得刚从广州赶回来的那晚，回到已是晚上十一点多，伯伯们怕我们饿，已经提前为我们热好饭菜，可是哪儿来的心思呀，一下车飞奔到奶奶那间熟悉的屋子，怎么就这样了，前几天看到她在视频里还帮我哥带着小孩呢，怎么一摔倒说起不来就起不来了呢！我轻轻的在她身旁叫了声奶奶，看着她用尽了全力回应了一生：“嗯”，很快又松了一口气，顿时眼角就湿润了，握着她皮包骨的双手，陪伴了她一会儿，她稍微安静了下来，没有反反复复的翻身，然后我才出去整理了下容装。此时最好的方式可能就剩下陪伴了，默默的坐在她床边，不知道做什么，也不能做点什么。持续到凌晨一点多，这是爸妈才赶回来到，看到他们焦脆的样子，估计心里也是很担心的了，回来从我妈的嘴里得知，我爸一路从广东开车赶回来，连休息都不舍得休息，有好几次自己边开车还边落着泪，我妈看不下去了，就找各种其他话题跟他聊，心里的牵挂在拉扯着他的心。那一晚，直到凌晨四点多我才回去眯了一会儿，一大早六点，天刚微亮，又起来了，只想着能多陪陪奶奶。可最后那一天还是来了，刚好六月初六，是我们那里重要的节日，每年的这一天都会宴请好多亲朋好友来家里做客，可今年我们做了个决定，取消宴请客人。可是这天依然来了很多人，但是他们都不是来做客的，都是看看望奶奶的。但大家都看得出来此时的奶奶已经没有什么意识了，翻来覆去，看着她很是痛苦的样子，感觉到很心酸。大家依然会说“没事的，会好转的，不用太担心”。持续到旁晚，客人也都走了，恢复了冷清清的。我在大门口坐着，思绪很凌乱，还没持续多久，突然大家都往奶奶的房间里跑，我也赶忙的转身跑进去，但此时已经绷不住了，我在人群外看到宁静而又慈祥的面孔，渐渐泪水迷糊了双眼，用上所有的劲咬住自己的嘴唇，没敢哭出声，久久没能平静。愿您在另一个世界里一起都安好！</li></ul><br /><ul><li>时间定格在十二月份（2021-12-14），事发前其实也是有些预感的，但可能只是巧合，因为我从来没有试过回到家还没看到她就感到很着急很着急，着急到要打电话那种。其实这个世界上，再怎么经久不衰的爱情，都离不开物质基础的支撑，但每个人的满足欲都不一样，所以会看到有些在我们眼里看来不怎好的，但是他们也是过得其乐融融。在我身上也终归逃不过这一劫。现在的情形就是，想要结婚就必须先买房，其中的原因这里就不再阐述。可是谈及买房，若是老家还好说，可是老家的房子我们完全派不上用场啊，但是广州的房子，一时间就要买，又谈何容易呢。财富都是慢慢积累的，出身贫寒家庭也不是我所能决定的，陷入了有心无力的情景。理想与现实的执拗，现实太骨感，就算你深爱着她，她也不得不面临着这样的抉择，毕竟谁不希望自己的未来能更好。我们两个未来的路如何，没人敢去拽测，但我已经为最坏的打算做好了准备。但我更希望的是我们未来的路越走越好，也希望我是那个能陪伴你走到最后的那个人。我虽然不够好，但我会努力给你更好。</li></ul></li></ul><br ><ul><li><p>说了这么多，其实无谓“总结”，权且当作是记录吧，记录自己“两进两出”之情绪变迁，世事无常，谁会意料到明天会发生什么事，回到最初的意愿，那就像《掌控习惯》作者所说的那样，回答三个问题吧。</p><h3 id="1-今年什么事做得比较好；"><a href="#1-今年什么事做得比较好；" class="headerlink" title="1. 今年什么事做得比较好；"></a>1. 今年什么事做得比较好；</h3><ul><li>几经波折，终于把自己的户口转移到广州了，定居广州的信念也更加增强了</li><li>成功地更换了新的工作，虽然新的工作也不咋地，但是相比原来的工作，还是稍稍有些提升的</li><li>坚持更新博客，今年总共坚持写27篇博文包含一些学习心得，相比去年的16篇提升了30%，平均每个月两篇多一点</li><li>更换了自己感觉比较好的租房，之前的住房虽然也不算太差，但不是自己租的，总觉得住得不够肆意</li></ul><h3 id="2-今年哪些事做得不太好；"><a href="#2-今年哪些事做得不太好；" class="headerlink" title="2. 今年哪些事做得不太好；"></a>2. 今年哪些事做得不太好；</h3><ul><li>曾经有一份很高的工作排在我面前，但是最后是关于履历时间不一致的谎话，擦肩而过</li><li>没有很认真的看及复习，英语的等级考试没过，还差几分</li><li>关于自己的性格没有完全的认识，也没有改进（软弱？没有主见？得过且过？遇事总是沉默？）</li><li>把go跟flutter都荒废了，都是刚学了一半，没有去写真实的项目，也没有坚持练习巩固</li></ul><h3 id="3-我学到了什么；"><a href="#3-我学到了什么；" class="headerlink" title="3. 我学到了什么；"></a>3. 我学到了什么；</h3><ul><li>学习了TypeScript，并在项目中实践了，总体的感觉还是比较好的，严谨，就是有些繁琐了</li><li>备份博文，说多了都是泪，意外的把电脑重装系统了，本来只是想格式化C盘的，结果连D盘也干没了，自然之前写好的博文只剩hexo打包过后的格式了，md格式没有了，一把心酸一把泪地把博文又重新复制一遍，重要的事说三遍：记得多备份！记得多备份！记得多备份！（包括自己大多数的重要数据）</li><li>重新认识了git版本控制工具，现在算是可以走一个比较完整的版本控制流程了</li><li>学习了自动化部署的一些相关知识，及docker的一些命令</li><li>把Nginx相关的知识点及反向代理原理理解了</li></ul></li></ul><h2 id="Best-buy"><a href="#Best-buy" class="headerlink" title="Best buy"></a>Best buy</h2><ul><li>买了一本书：《原则》</li><li>买了一台手机：iPhone 13</li><li>买了一个手表：Apple Watch Series 7</li></ul><h2 id="新的一年想做的（flag）"><a href="#新的一年想做的（flag）" class="headerlink" title="新的一年想做的（flag）"></a>新的一年想做的（flag）</h2><ul><li>来一次登山之旅</li><li>读《原则》</li><li>过英语等级考试</li><li>至少办一件大事（…）</li></ul><h2 id="分享一些东西"><a href="#分享一些东西" class="headerlink" title="分享一些东西"></a>分享一些东西</h2><ul><li><p>关于认知的50种偏差</p></li><li><p>马斯克说：“Should be taught to all at a young age”。这张图还是有点意思的，但是是翻译版本，有些翻译可能不太准确，但不影响理解，喜欢的话可以去看马克思的推文—&gt;<a href="https://twitter.com/elonmusk/status/1472647410568642564">https://twitter.com/elonmusk/status/1472647410568642564</a></p></li><li><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%85%B3%E4%BA%8E%E8%AE%A4%E7%9F%A5%E5%BE%9750%E7%A7%8D%E5%81%8F%E5%B7%AE.jpg" alt="关于认知的50种偏差(翻译版)"></p></li><li><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/FG_lAyfXIAIduQo.jfif" alt="关于认知的50种偏差(英文版)"></p></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>冰冻三尺非一日之寒，继续努力，加油Damao(ง •_•)ง</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于js宏任务和微任务的理解</title>
      <link href="/2021/12/30/%E5%85%B3%E4%BA%8Ejs%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/12/30/%E5%85%B3%E4%BA%8Ejs%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="js的宏任务和微任务（作者：老司机）"><a href="#js的宏任务和微任务（作者：老司机）" class="headerlink" title="js的宏任务和微任务（作者：老司机）"></a>js的宏任务和微任务（作者：老司机）</h1><h2 id="一、前提（随便过一下）"><a href="#一、前提（随便过一下）" class="headerlink" title="一、前提（随便过一下）"></a>一、前提（随便过一下）</h2><ol><li>同步与异步</li></ol><ul><li>异步代码，如通过事件注册的回调，调用时，特点是调用后立即返回，到没有得到结果（后续通过回调函数获取）</li><li>同步代码，逐行执行的代码，特点是调用后，要等待该调用执行完毕，否则不会往下执行（调用返回后，结果也拿到了），如全局代码、非回调函数</li></ul><ol start="2"><li>事件循环：js是单线程语言（单线程执行代码），通过该机制高效执行代码</li><li>调用栈：当调用函数时，就会开辟内存空间（压栈），调用完毕后就会释放内存</li><li>队列：当某个事件有结果后，该事件所注册的回调函数被推入队列中，等待读入主线程执行（主线程空闲后就会执行该步骤）</li></ol><h2 id="二、宏任务"><a href="#二、宏任务" class="headerlink" title="二、宏任务"></a>二、宏任务</h2><ul><li>在调用栈中直接执行的代码，如：全局代码、定时器（setInterval）、延迟器（setTimeout）、promise、function（一般的函数）等，其中一个函数可认为是一个宏任务</li></ul><h2 id="三、微任务"><a href="#三、微任务" class="headerlink" title="三、微任务"></a>三、微任务</h2><ul><li>微任务是在执行某些宏任务时产生的，它们会在执行下一个宏任务之前执行，如：Promise.then等</li></ul><h2 id="四、示例代码"><a href="#四、示例代码" class="headerlink" title="四、示例代码"></a>四、示例代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 事件循环第一轮：执行宏任务1【testPromise()、setTimeout()、console.log(123)】</span></span><br><span class="line"><span class="comment"> * 其中，testPromise().then()生成了一个微任务，两个setTimeout()注册了两个回调函数，执行完毕后，开始执行本轮事件循环产生的微任务then()</span></span><br><span class="line"><span class="comment"> * - 事件循环第二轮：（假如已经在某一刻将回调函数推入队列）读取一个延迟器注册的函数到主线程执行，该轮事件循环没有微任务</span></span><br><span class="line"><span class="comment"> * - 事件循环第三轮：读取一个延迟器注册的回调到主线程执行...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;----&gt; Promise&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testPromise</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">r</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-----&gt; setTimeout 1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-----&gt; setTimeout 2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 宏任务 </tag>
            
            <tag> 微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过canvas生成水印方案</title>
      <link href="/2021/12/27/%E9%80%9A%E8%BF%87canvas%E7%94%9F%E6%88%90%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2021/12/27/%E9%80%9A%E8%BF%87canvas%E7%94%9F%E6%88%90%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="通过自定义指令生成canvas水印原理"><a href="#通过自定义指令生成canvas水印原理" class="headerlink" title="通过自定义指令生成canvas水印原理"></a>通过自定义指令生成canvas水印原理</h2><ul><li>水印（watermark）是一种容易识别、被夹于纸内，能够透过光线穿过从而显现出各种不同阴影的技术。<br>实现</li><li>前端实现的水印基本都是不安全的，可被破解的</li><li>使用canvas生成base64格式的图片文件，并将其设置为对应元素的背景图片，从而产生水印效果</li><li>通过绑定vue自定义指令，可以快速实现页面或组件局部水印效果</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>创建<code>directives.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加水印</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;watermark&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addWaterMarker</span>(<span class="params">str, parentNode, font, textColor</span>) &#123;<span class="comment">// 水印文字，父元素，字体，文字颜色</span></span><br><span class="line">    <span class="keyword">var</span> can = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    parentNode.<span class="title function_">appendChild</span>(can);</span><br><span class="line">    can.<span class="property">width</span> = <span class="number">300</span>;</span><br><span class="line">    can.<span class="property">height</span> = <span class="number">200</span>;</span><br><span class="line">    can.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> cans = can.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    cans.<span class="title function_">rotate</span>(-<span class="number">20</span> * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>);</span><br><span class="line">    cans.<span class="property">font</span> = font || <span class="string">&quot;16px PingFang SC&quot;</span>;</span><br><span class="line">    cans.<span class="property">fillStyle</span> = textColor || <span class="string">&quot;rgba(180, 180, 180, 0.3)&quot;</span>;</span><br><span class="line">    cans.<span class="property">textAlign</span> = <span class="string">&#x27;left&#x27;</span>;</span><br><span class="line">    cans.<span class="property">textBaseline</span> = <span class="string">&#x27;Middle&#x27;</span>;</span><br><span class="line">    cans.<span class="title function_">fillText</span>(str, can.<span class="property">width</span> / <span class="number">3</span>, can.<span class="property">height</span> / <span class="number">2</span>);</span><br><span class="line">    parentNode.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&quot;url(&quot;</span> + can.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addWaterMarker</span>(binding.<span class="property">value</span>.<span class="property">text</span>, el, binding.<span class="property">value</span>.<span class="property">font</span>, binding.<span class="property">value</span>.<span class="property">textColor</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>main.js 引入directives.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="string">&#x27;@/utils/directives&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-watermark</span>=<span class="string">&quot;&#123;text:&#x27;水印&#x27;,textColor:&#x27;rgba(180, 180, 180, 0.3)&#x27;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    这里是内容区域！</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 水印 </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的递归示例</title>
      <link href="/2021/11/24/JS%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%A4%BA%E4%BE%8B/"/>
      <url>/2021/11/24/JS%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [</span><br><span class="line">  <span class="comment">// 一级</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&#x27;root00&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;总区域&#x27;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&#x27;-1&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 二级</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&#x27;A-01&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;A区域-01&#x27;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&#x27;root00&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&#x27;B-01&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;B区域-01&#x27;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&#x27;root00&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 三级</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&#x27;A-01-01&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;A区域-01-01&#x27;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&#x27;A-01&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&#x27;A-01-02&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;A区域-01-02&#x27;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&#x27;A-01&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 四级</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&#x27;A-01-01-01&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;A区域-01-01-01&#x27;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&#x27;A-01-01&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createTree</span>(<span class="params">arr, parentIndex</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> treeData = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parentIndex == item.<span class="property">parentIndexCode</span>) &#123;</span><br><span class="line">      item.<span class="property">children</span> = <span class="title function_">createTree</span>(arr, item.<span class="property">indexCode</span>);</span><br><span class="line">      treeData.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> treeData;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="递归结果"><a href="#递归结果" class="headerlink" title="递归结果"></a>递归结果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="title function_">createTree</span>(res, <span class="string">&#x27;root00&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&quot;A-01&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;A区域-01&quot;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&quot;root00&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">indexCode</span>: <span class="string">&quot;A-01-01&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;A区域-01-01&quot;</span>,</span><br><span class="line">        <span class="attr">parentIndexCode</span>: <span class="string">&quot;A-01&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">indexCode</span>: <span class="string">&quot;A-01-01-01&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;A区域-01-01-01&quot;</span>,</span><br><span class="line">            <span class="attr">parentIndexCode</span>: <span class="string">&quot;A-01-01&quot;</span>,</span><br><span class="line">            <span class="attr">children</span>: []</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">indexCode</span>: <span class="string">&quot;A-01-02&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;A区域-01-02&quot;</span>,</span><br><span class="line">        <span class="attr">parentIndexCode</span>: <span class="string">&quot;A-01&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">indexCode</span>: <span class="string">&quot;B-01&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;B区域-01&quot;</span>,</span><br><span class="line">    <span class="attr">parentIndexCode</span>: <span class="string">&quot;root00&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx编译安装配置</title>
      <link href="/2021/11/19/Nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/11/19/Nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-编译安装配置"><a href="#Nginx-编译安装配置" class="headerlink" title="Nginx 编译安装配置"></a>Nginx 编译安装配置</h1><h2 id="一、安装编译需要的软件依赖"><a href="#一、安装编译需要的软件依赖" class="headerlink" title="一、安装编译需要的软件依赖"></a>一、安装编译需要的软件依赖</h2><ul><li>gcc和gcc-c++<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> gcc gcc<span class="literal">-c</span>++</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、安装Nginx依赖"><a href="#二、安装Nginx依赖" class="headerlink" title="二、安装Nginx依赖"></a>二、安装Nginx依赖</h2><ul><li>pcre-devel、openssl-devel、zlib-devel<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> pcre pcre<span class="literal">-devel</span> openssl openssl<span class="literal">-devel</span> zlib zlib<span class="literal">-devel</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、创建Nginx用户"><a href="#三、创建Nginx用户" class="headerlink" title="三、创建Nginx用户"></a>三、创建Nginx用户</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd <span class="literal">-s</span> /bin/false <span class="literal">-M</span> nginx</span><br></pre></td></tr></table></figure><h2 id="四、下载Nginx源码"><a href="#四、下载Nginx源码" class="headerlink" title="四、下载Nginx源码"></a>四、下载Nginx源码</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> http://nginx.org/download/nginx<span class="literal">-1</span>.<span class="number">12.0</span>.tar.gz</span><br><span class="line">tar <span class="literal">-zxf</span> nginx<span class="literal">-1</span>.<span class="number">12.0</span>.tar.gz</span><br></pre></td></tr></table></figure><h2 id="五、Nginx编译安装"><a href="#五、Nginx编译安装" class="headerlink" title="五、Nginx编译安装"></a>五、Nginx编译安装</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 生成make文件</span></span><br><span class="line">./configure <span class="literal">--user</span>=nginx <span class="literal">--group</span>=nginx <span class="literal">--prefix</span>=/etc/nginx<span class="literal">-1</span>.<span class="number">12.0</span> <span class="literal">--with-http_v2_module</span> <span class="literal">--with</span> http_ssl_module <span class="literal">--with-http_sub_module</span> <span class="literal">--with-http_stub_status_module</span> <span class="literal">--with</span> http_gzip_static_module <span class="literal">--with-pcre</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加软连接</span></span><br><span class="line">ln <span class="literal">-s</span> /etc/nginx<span class="literal">-1</span>.<span class="number">12.0</span>/ /etc/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加环境变量</span></span><br><span class="line">ln <span class="literal">-s</span> /etc/nginx/sbin/* /usr/local/sbin/</span><br></pre></td></tr></table></figure><h2 id="六、Nginx目录介绍"><a href="#六、Nginx目录介绍" class="headerlink" title="六、Nginx目录介绍"></a>六、Nginx目录介绍</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">├── conf <span class="comment">#配置文件目录</span></span><br><span class="line">│ ├── fastcgi.conf</span><br><span class="line">│ ├── fastcgi.conf.default</span><br><span class="line">│ ├── fastcgi_params</span><br><span class="line">│ ├── fastcgi_params.default <span class="comment">#fastcgi *配合php</span></span><br><span class="line">│ ├── koi<span class="literal">-utf</span></span><br><span class="line">│ ├── koi<span class="literal">-win</span></span><br><span class="line">│ ├── mime.types <span class="comment">#mime 媒体类型</span></span><br><span class="line">│ ├── mime.types.default</span><br><span class="line">│ ├── nginx.conf <span class="comment">#nginx主配置文件</span></span><br><span class="line">│ ├── nginx.conf.default</span><br><span class="line">│ ├── scgi_params</span><br><span class="line">│ ├── scgi_params.default</span><br><span class="line">│ ├── uwsgi_params</span><br><span class="line">│ ├── uwsgi_params.default</span><br><span class="line">│ └── win<span class="literal">-utf</span></span><br><span class="line">├── html <span class="comment">#默认站点目录</span></span><br><span class="line">│ ├── <span class="number">50</span>x.html</span><br><span class="line">│ └── index.html</span><br><span class="line">├── logs <span class="comment">#访问日志、错误日志、pid文件目录</span></span><br><span class="line">│ ├── access.log <span class="comment">#访问日志</span></span><br><span class="line">│ ├── error.log <span class="comment">#错误日志</span></span><br><span class="line">│ └── nginx.pid <span class="comment">#pid文件</span></span><br><span class="line">└── sbin <span class="comment">#命令目录</span></span><br><span class="line">└── nginx <span class="comment">#nginx命令文件</span></span><br></pre></td></tr></table></figure><h2 id="七、Nginx-配置文件详解"><a href="#七、Nginx-配置文件详解" class="headerlink" title="七、Nginx 配置文件详解"></a>七、Nginx 配置文件详解</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class="line">worker_processes <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件</span></span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="comment">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line">worker_rlimit_nofile <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class="line">    <span class="comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">    <span class="comment">#补充说明：</span></span><br><span class="line">    <span class="comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line">    <span class="comment">#A）标准事件模型</span></span><br><span class="line">    <span class="comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line">    <span class="comment">#B）高效事件模型</span></span><br><span class="line">    <span class="comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line">    <span class="comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line">    <span class="comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line">    <span class="comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">    <span class="comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span></span><br><span class="line">    worker_connections <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive超时时间。</span></span><br><span class="line">    keepalive_timeout <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line">    <span class="comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line">    <span class="comment">#4096</span></span><br><span class="line">    <span class="comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line">    client_header_buffer_size <span class="number">4</span>k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    open_file_cache max=<span class="number">65535</span> inactive=<span class="number">60</span>s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server,location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line">    open_file_cache_valid <span class="number">80</span>s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line">    open_file_cache_min_uses <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server,location 这个指令指定是否在搜索一个文件是记录cache错误.</span></span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认文件类型</span></span><br><span class="line">    default_type application/octet<span class="literal">-stream</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认编码</span></span><br><span class="line">    <span class="comment">#charset utf-8;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line">    server_names_hash_bucket_size <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">    client_header_buffer_size <span class="number">32</span>k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    large_client_header_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设定通过nginx上传文件的大小</span></span><br><span class="line">    client_max_body_size <span class="number">8</span>m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class="line">    tcp_nopush on;</span><br><span class="line"></span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    keepalive_timeout <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line">    fastcgi_connect_timeout <span class="number">300</span>;</span><br><span class="line">    fastcgi_send_timeout <span class="number">300</span>;</span><br><span class="line">    fastcgi_read_timeout <span class="number">300</span>;</span><br><span class="line">    fastcgi_buffer_size <span class="number">64</span>k;</span><br><span class="line">    fastcgi_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">    fastcgi_busy_buffers_size <span class="number">128</span>k;</span><br><span class="line">    fastcgi_temp_file_write_size <span class="number">128</span>k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip模块设置</span></span><br><span class="line">    gzip on; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line">    gzip_min_length <span class="number">1</span>k; <span class="comment">#最小压缩文件大小</span></span><br><span class="line">    gzip_buffers <span class="number">4</span> <span class="number">16</span>k; <span class="comment">#压缩缓冲区</span></span><br><span class="line">    gzip_http_version <span class="number">1.0</span>; <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">    gzip_comp_level <span class="number">2</span>; <span class="comment">#压缩等级</span></span><br><span class="line">    gzip_types text/plain application/x<span class="literal">-javascript</span> text/css application/xml; <span class="comment">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line">    <span class="comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#负载均衡配置</span></span><br><span class="line">    upstream xxxxxx.com &#123;</span><br><span class="line">        <span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">        server <span class="number">192.168</span>.<span class="number">13.43</span>:<span class="number">8080</span> weight=<span class="number">3</span>;</span><br><span class="line">        server <span class="number">192.168</span>.<span class="number">13.44</span>:<span class="number">8080</span> weight=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">        <span class="comment">#1、轮询（默认）</span></span><br><span class="line">        <span class="comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">        <span class="comment">#2、weight</span></span><br><span class="line">        <span class="comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment"># server 192.168.0.14 weight=10;</span></span><br><span class="line">        <span class="comment"># server 192.168.0.15 weight=10;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#2、ip_hash</span></span><br><span class="line">        <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment"># ip_hash;</span></span><br><span class="line">        <span class="comment"># server 192.168.0.14:88;</span></span><br><span class="line">        <span class="comment"># server 192.168.0.15:80;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#3、fair（第三方）</span></span><br><span class="line">        <span class="comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment"># server server1;</span></span><br><span class="line">        <span class="comment"># server server2;</span></span><br><span class="line">        <span class="comment"># fair;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#4、url_hash（第三方）</span></span><br><span class="line">        <span class="comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">        <span class="comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment"># server squid1:3128;</span></span><br><span class="line">        <span class="comment"># server squid2:3128;</span></span><br><span class="line">        <span class="comment"># hash $request_uri;</span></span><br><span class="line">        <span class="comment"># hash_method crc32;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#tips:</span></span><br><span class="line">        <span class="comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">        <span class="comment"># ip_hash;</span></span><br><span class="line">        <span class="comment"># server 127.0.0.1:9090 down;</span></span><br><span class="line">        <span class="comment"># server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">        <span class="comment"># server 127.0.0.1:6060;</span></span><br><span class="line">        <span class="comment"># server 127.0.0.1:7070 backup;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个设备的状态设置为:</span></span><br><span class="line">        <span class="comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">        <span class="comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">        <span class="comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">        <span class="comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">        <span class="comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">        <span class="comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">        <span class="comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">        <span class="comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#虚拟主机的配置</span></span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        server_name www.xxxxxx.com xxxxxx.com;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /<span class="keyword">data</span>/www;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对******进行负载均衡</span></span><br><span class="line">        location ~ .*.(php|php5)?<span class="variable">$</span></span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#图片缓存时间设置</span></span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)<span class="variable">$</span></span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">10</span>d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">        location ~ .*.(js|css)?<span class="variable">$</span></span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">1</span><span class="built_in">h</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#日志格式设定</span></span><br><span class="line">        <span class="comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">        <span class="comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">        <span class="comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">        <span class="comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">        <span class="comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">        <span class="comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">        <span class="comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">        <span class="comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">        <span class="comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">        log_format access <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">        access_log /usr/local/nginx/logs/host.access.log main;</span><br><span class="line">        access_log /usr/local/nginx/logs/host.access.<span class="number">404</span>.log log404;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对 &quot;/&quot; 启用反向代理</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">88</span>;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X<span class="literal">-Real-IP</span> <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            proxy_set_header X<span class="literal">-Forwarded-For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            client_max_body_size <span class="number">10</span>m;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">            <span class="comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">            <span class="comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class="line">            client_body_buffer_size <span class="number">128</span>k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">            <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            proxy_connect_timeout <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">            proxy_send_timeout <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            <span class="comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">            proxy_read_timeout <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            <span class="comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">            proxy_buffer_size <span class="number">4</span>k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">            <span class="comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">            proxy_buffers <span class="number">4</span> <span class="number">32</span>k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            proxy_busy_buffers_size <span class="number">64</span>k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">            <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">            proxy_temp_file_write_size <span class="number">64</span>k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic <span class="string">&quot;NginxStatus&quot;</span>;</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            <span class="comment">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">        <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">        location ~ .(jsp|jspx|<span class="keyword">do</span>)?<span class="variable">$</span> &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X<span class="literal">-Real-IP</span> <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X<span class="literal">-Forwarded-For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_pass http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)<span class="variable">$</span></span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">15</span>d;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .*.(js|css)?</span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">1</span><span class="built_in">h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="location匹配模式以及顺序"><a href="#location匹配模式以及顺序" class="headerlink" title="location匹配模式以及顺序"></a>location匹配模式以及顺序</h3><ul><li>location &#x3D; &#x2F;uri  &#x3D;开头表示精确匹配，只有完全匹配上才能生效</li><li>location ^~ &#x2F;uri  ^~ 开头对URL路径进行前缀匹配，并且在正则之前</li><li>location ~ pattern  ~开头表示区分大小写的正则匹配</li><li>location ~* pattern  ~*开头表示不区分大小写的正则匹配</li><li>location &#x2F;uri  不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</li><li>location &#x2F;  通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default</li></ul><h2 id="八、Nginx常用命令"><a href="#八、Nginx常用命令" class="headerlink" title="八、Nginx常用命令"></a>八、Nginx常用命令</h2><h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx <span class="literal">-t</span></span><br></pre></td></tr></table></figure><h3 id="指定其他配置文件启动nginx"><a href="#指定其他配置文件启动nginx" class="headerlink" title="指定其他配置文件启动nginx"></a>指定其他配置文件启动nginx</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx <span class="literal">-c</span> file</span><br></pre></td></tr></table></figure><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><h3 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 快速停止nginx</span></span><br><span class="line">nginx <span class="literal">-s</span> stop</span><br><span class="line"></span><br><span class="line"><span class="comment">## 平滑停止nginx</span></span><br><span class="line">nginx <span class="literal">-s</span> quit</span><br></pre></td></tr></table></figure><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 平滑重载所有配置</span></span><br><span class="line">nginx <span class="literal">-s</span> reload</span><br></pre></td></tr></table></figure><h2 id="九、配置示例"><a href="#九、配置示例" class="headerlink" title="九、配置示例"></a>九、配置示例</h2><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user nobody;</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="comment">#worker_cpu_affinity auto;</span></span><br><span class="line">worker_rlimit_nofile <span class="number">655350</span>;</span><br><span class="line"><span class="comment">#pid logs/nginx.pid;</span></span><br><span class="line">error_log /<span class="keyword">data</span>/logs/nginx/error.log error;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections <span class="number">655350</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet<span class="literal">-stream</span>;</span><br><span class="line">    charset utf<span class="literal">-8</span>;</span><br><span class="line">    log_format main <span class="string">&#x27;$remote_addr $server_addr $remote_user [$time_local] $host &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">                    access_log /<span class="keyword">data</span>/logs/nginx/access.log main;</span><br><span class="line">    </span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout <span class="number">90000</span>;</span><br><span class="line">    server_names_hash_max_size <span class="number">1024</span>;</span><br><span class="line">    server_names_hash_bucket_size <span class="number">512</span>;</span><br><span class="line">    client_header_buffer_size <span class="number">16</span>k;</span><br><span class="line">    large_client_header_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">    client_header_timeout <span class="number">300</span>m;</span><br><span class="line">    client_body_timeout <span class="number">300</span>m;</span><br><span class="line">    send_timeout <span class="number">300</span>m;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    client_max_body_size <span class="number">100</span>M;</span><br><span class="line">    client_body_buffer_size <span class="number">50</span>m;</span><br><span class="line">    proxy_connect_timeout <span class="number">5</span>;</span><br><span class="line">    proxy_send_timeout <span class="number">15</span>;</span><br><span class="line">    proxy_read_timeout <span class="number">15</span>;</span><br><span class="line">    proxy_buffer_size <span class="number">256</span>k;</span><br><span class="line">    proxy_buffers <span class="number">8</span> <span class="number">256</span>k;</span><br><span class="line">    proxy_busy_buffers_size <span class="number">256</span>k;</span><br><span class="line">    proxy_temp_file_write_size <span class="number">256</span>k;</span><br><span class="line">    proxy_intercept_errors on;</span><br><span class="line">    proxy_headers_hash_max_size <span class="number">512</span>;</span><br><span class="line">    proxy_headers_hash_bucket_size <span class="number">256</span>;</span><br><span class="line">    variables_hash_max_size <span class="number">512</span>;</span><br><span class="line">    variables_hash_bucket_size <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length <span class="number">1100</span>;</span><br><span class="line">    gzip_buffers <span class="number">4</span> <span class="number">8</span>k;</span><br><span class="line">    gzip_comp_level <span class="number">3</span>;</span><br><span class="line">    gzip_http_version <span class="number">1.0</span>;</span><br><span class="line">    gzip_types text/plain application/x<span class="literal">-javascript</span> application/json application/javascript</span><br><span class="line">    text/css application/xml text/javascript application/x<span class="literal">-httpd-php</span> image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line">    output_buffers <span class="number">1</span> <span class="number">32</span>k;</span><br><span class="line">    postpone_output <span class="number">1460</span>;</span><br><span class="line"></span><br><span class="line">    gzip_vary on;</span><br><span class="line">    map_hash_max_size <span class="number">102400</span>;</span><br><span class="line">    map_hash_bucket_size <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name xxxxxx.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /<span class="keyword">data</span>/www;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log /<span class="keyword">data</span>/logs/nginx/access.log;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user nobody;</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="comment">#worker_cpu_affinity auto;</span></span><br><span class="line">worker_rlimit_nofile <span class="number">655350</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#pid logs/nginx.pid;</span></span><br><span class="line">error_log /<span class="keyword">data</span>/logs/nginx/error.log error;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections <span class="number">655350</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet<span class="literal">-stream</span>;</span><br><span class="line">    charset utf<span class="literal">-8</span>;</span><br><span class="line">    log_format main <span class="string">&#x27;$remote_addr $server_addr $remote_user [$time_local] $host &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">                    access_log /<span class="keyword">data</span>/logs/nginx/access.log main;</span><br><span class="line">    </span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout <span class="number">90000</span>;</span><br><span class="line">    server_names_hash_max_size <span class="number">1024</span>;</span><br><span class="line">    server_names_hash_bucket_size <span class="number">512</span>;</span><br><span class="line">    client_header_buffer_size <span class="number">16</span>k;</span><br><span class="line">    large_client_header_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">    client_header_timeout <span class="number">300</span>m;</span><br><span class="line">    client_body_timeout <span class="number">300</span>m;</span><br><span class="line">    send_timeout <span class="number">300</span>m;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    client_max_body_size <span class="number">100</span>M;</span><br><span class="line">    client_body_buffer_size <span class="number">50</span>m;</span><br><span class="line">    proxy_connect_timeout <span class="number">5</span>;</span><br><span class="line">    proxy_send_timeout <span class="number">15</span>;</span><br><span class="line">    proxy_read_timeout <span class="number">15</span>;</span><br><span class="line">    proxy_buffer_size <span class="number">256</span>k;</span><br><span class="line">    proxy_buffers <span class="number">8</span> <span class="number">256</span>k;</span><br><span class="line">    proxy_busy_buffers_size <span class="number">256</span>k;</span><br><span class="line">    proxy_temp_file_write_size <span class="number">256</span>k;</span><br><span class="line">    proxy_intercept_errors on;</span><br><span class="line">    proxy_headers_hash_max_size <span class="number">512</span>;</span><br><span class="line">    proxy_headers_hash_bucket_size <span class="number">256</span>;</span><br><span class="line">    variables_hash_max_size <span class="number">512</span>;</span><br><span class="line">    variables_hash_bucket_size <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length <span class="number">1100</span>;</span><br><span class="line">    gzip_buffers <span class="number">4</span> <span class="number">8</span>k;</span><br><span class="line">    gzip_comp_level <span class="number">3</span>;</span><br><span class="line">    gzip_http_version <span class="number">1.0</span>;</span><br><span class="line">    gzip_types text/plain application/x<span class="literal">-javascript</span> application/json application/javascript</span><br><span class="line">    text/css application/xml text/javascript application/x<span class="literal">-httpd-php</span> image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line">    output_buffers <span class="number">1</span> <span class="number">32</span>k;</span><br><span class="line">    postpone_output <span class="number">1460</span>;</span><br><span class="line"></span><br><span class="line">    gzip_vary on;</span><br><span class="line">    map_hash_max_size <span class="number">102400</span>;</span><br><span class="line">    map_hash_bucket_size <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">    upstream xxxxxx.com&#123;</span><br><span class="line">        server <span class="number">192.168</span>.<span class="number">13.43</span>:<span class="number">8080</span>;</span><br><span class="line">        server <span class="number">192.168</span>.<span class="number">13.44</span>:<span class="number">8080</span>;</span><br><span class="line">        check interval=<span class="number">3000</span> rise=<span class="number">2</span> fall=<span class="number">3</span> timeout=<span class="number">3000</span> <span class="built_in">type</span>=http;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name xxxxxx.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://xxxxxx.com;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X<span class="literal">-Real-IP</span> <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X<span class="literal">-Forwarded-For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_connect_timeout <span class="number">60</span>;</span><br><span class="line">            proxy_read_timeout <span class="number">600</span>;</span><br><span class="line">            proxy_send_timeout <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log /<span class="keyword">data</span>/logs/nginx/access.log;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user nobody;</span></span><br><span class="line">worker_processes auto;</span><br><span class="line"><span class="comment">#worker_cpu_affinity auto;</span></span><br><span class="line">worker_rlimit_nofile <span class="number">655350</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#pid logs/nginx.pid;</span></span><br><span class="line">error_log /<span class="keyword">data</span>/logs/nginx/error.log error;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections <span class="number">655350</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet<span class="literal">-stream</span>;</span><br><span class="line">    charset utf<span class="literal">-8</span>;</span><br><span class="line">    log_format main <span class="string">&#x27;$remote_addr $server_addr $remote_user [$time_local] $host &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">                    access_log /<span class="keyword">data</span>/logs/nginx/access.log main;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout <span class="number">90000</span>;</span><br><span class="line">    server_names_hash_max_size <span class="number">1024</span>;</span><br><span class="line">    server_names_hash_bucket_size <span class="number">512</span>;</span><br><span class="line">    client_header_buffer_size <span class="number">16</span>k;</span><br><span class="line">    large_client_header_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">    client_header_timeout <span class="number">300</span>m;</span><br><span class="line">    client_body_timeout <span class="number">300</span>m;</span><br><span class="line">    send_timeout <span class="number">300</span>m;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    client_max_body_size <span class="number">100</span>M;</span><br><span class="line">    client_body_buffer_size <span class="number">50</span>m;</span><br><span class="line">    proxy_connect_timeout <span class="number">5</span>;</span><br><span class="line">    proxy_send_timeout <span class="number">15</span>;</span><br><span class="line">    proxy_read_timeout <span class="number">15</span>;</span><br><span class="line">    proxy_buffer_size <span class="number">256</span>k;</span><br><span class="line">    proxy_buffers <span class="number">8</span> <span class="number">256</span>k;</span><br><span class="line">    proxy_busy_buffers_size <span class="number">256</span>k;</span><br><span class="line">    proxy_temp_file_write_size <span class="number">256</span>k;</span><br><span class="line">    proxy_intercept_errors on;</span><br><span class="line">    proxy_headers_hash_max_size <span class="number">512</span>;</span><br><span class="line">    proxy_headers_hash_bucket_size <span class="number">256</span>;</span><br><span class="line">    variables_hash_max_size <span class="number">512</span>;</span><br><span class="line">    variables_hash_bucket_size <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length <span class="number">1100</span>;</span><br><span class="line">    gzip_buffers <span class="number">4</span> <span class="number">8</span>k;</span><br><span class="line">    gzip_comp_level <span class="number">3</span>;</span><br><span class="line">    gzip_http_version <span class="number">1.0</span>;</span><br><span class="line">    gzip_types text/plain application/x<span class="literal">-javascript</span> application/json application/javascript</span><br><span class="line">    text/css application/xml text/javascript application/x<span class="literal">-httpd-php</span> image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line">    output_buffers <span class="number">1</span> <span class="number">32</span>k;</span><br><span class="line">    postpone_output <span class="number">1460</span>;</span><br><span class="line"></span><br><span class="line">    gzip_vary on;</span><br><span class="line">    map_hash_max_size <span class="number">102400</span>;</span><br><span class="line">    map_hash_bucket_size <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    upstream xxxxxx.com&#123;</span><br><span class="line">        server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">10179</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name xxxxxx.com;</span><br><span class="line">        location /api &#123;</span><br><span class="line">            proxy_pass http://xxxxxx.com;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X<span class="literal">-Real-IP</span> <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X<span class="literal">-Forwarded-For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_connect_timeout <span class="number">60</span>;</span><br><span class="line">            proxy_read_timeout <span class="number">600</span>;</span><br><span class="line">            proxy_send_timeout <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .(jsp|jspx|<span class="keyword">do</span>)?<span class="variable">$</span> &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X<span class="literal">-Real-IP</span> <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X<span class="literal">-Forwarded-For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_pass http://xxxxxx.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)<span class="variable">$</span></span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">15</span>d;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location ~ .*.(js|css)?<span class="variable">$</span></span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">1</span><span class="built_in">h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log /<span class="keyword">data</span>/logs/nginx/access.log;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css画梯形</title>
      <link href="/2021/11/10/css%E7%94%BB%E6%A2%AF%E5%BD%A2/"/>
      <url>/2021/11/10/css%E7%94%BB%E6%A2%AF%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="使用html-css画出梯形"><a href="#使用html-css画出梯形" class="headerlink" title="使用html+css画出梯形"></a>使用html+css画出梯形</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a1</span>,<span class="selector-class">.a2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#ccff66</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a3</span>,<span class="selector-class">.a4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#ccff66</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">14px</span>) <span class="built_in">rotateY</span>(<span class="number">25deg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">14px</span>) <span class="built_in">rotateY</span>(-<span class="number">25deg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">65px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">14px</span>) <span class="built_in">rotateX</span>(-<span class="number">25deg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: -<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.a4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">14px</span>) <span class="built_in">rotateX</span>(<span class="number">25deg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50px</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;a4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><style type="text/css">    .box {        position: relative;        margin: 50px;        height: 100px;    }    .a1,.a2 {        width: 15px;        height: 50px;        position: absolute;        background: #ccff66;        display: inline-block;    }    .a3,.a4 {        width: 50px;        height: 15px;        position: absolute;        background: #ccff66;        display: inline-block;    }    .a1 {        transform: perspective(14px) rotateY(25deg);        left: 0;        top: 0;    }    .a2 {        transform: perspective(14px) rotateY(-25deg);        left: 65px;        top: 0;    }    .a3 {        transform: perspective(14px) rotateX(-25deg);        left: 15px;        top: -15px;    }    .a4 {        transform: perspective(14px) rotateX(25deg);        left: 15px;        top: 50px    }</style><div class="box">    <a class="a1"></a>    <a class="a2"></a>    <a class="a3"></a>    <a class="a4"></a></div>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue自定义组件的v-model例子</title>
      <link href="/2021/11/08/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84v-model%E4%BE%8B%E5%AD%90/"/>
      <url>/2021/11/08/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84v-model%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<ul><li>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框或者其他自定义组件等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>父元素的formData.msg--- &#123;&#123; formData.msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>父元素的formData.msg+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">son</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> son <span class="keyword">from</span> <span class="string">&quot;./son.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; son &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">formData</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">msg</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素的msg--- &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>子元素的msg-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;son&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">sonMsg</span>: <span class="variable language_">this</span>.<span class="property">msg</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">model</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">prop</span>: <span class="string">&quot;msg&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">event</span>: <span class="string">&quot;change&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 注意不能直接修改父元素的props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">sonMsg</span>--;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;change&quot;</span>, <span class="variable language_">this</span>.<span class="property">sonMsg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v-model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步函数</title>
      <link href="/2021/10/18/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/"/>
      <url>/2021/10/18/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><ul><li>async 变体 (async(异步) 函数总是返回 Promises )<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步函数声明</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 异步函数表达式</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// 异步函数定义</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="keyword">async</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125; &#125;</span><br><span class="line"><span class="comment">// 异步箭头函数 </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async(异步) 函数的 Promise 完成状态</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncFunc</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// async(异步) 函数的 Promise 拒绝状态</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Problem!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncFunc</span>()</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)); <span class="comment">// Error: Problem!</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">testAwait</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;helloAsync&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//await后面可以是Promise对象么 也可以是字符串，布尔值，数值以及普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">testAwait</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;helloAsync&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// await针对所跟的表达式不同，有两种处理方式：</span></span><br><span class="line"><span class="comment">// 1、对于Promise对象，await会阻塞主函数的执行，等待 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果，然后继续执行主函数接下来的代码。</span></span><br><span class="line"><span class="comment">// 2、对于非Promise对象，await等待函数或者直接量的返回，而不是等待其执行结果。</span></span><br></pre></td></tr></table></figure><h2 id="async-await并行-串行触发"><a href="#async-await并行-串行触发" class="headerlink" title="async&#x2F;await并行&#x2F;串行触发"></a>async&#x2F;await并行&#x2F;串行触发</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait1&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait2</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait2&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;testTime&quot;</span>)</span><br><span class="line">  <span class="keyword">let</span> pramiseFn1 = <span class="title function_">testAwait1</span>();</span><br><span class="line">  <span class="keyword">let</span> pramiseFn2 = <span class="title function_">testAwait2</span>();</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="keyword">await</span> pramiseFn1;</span><br><span class="line">  <span class="keyword">let</span> res2 = <span class="keyword">await</span> pramiseFn2;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;两个promise并行执行，done&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;testTime&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;test1Time&quot;</span>)</span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="keyword">await</span> <span class="title function_">testAwait1</span>();</span><br><span class="line">  <span class="keyword">let</span> res2 = <span class="keyword">await</span> <span class="title function_">testAwait2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;两个promise串行执行，done&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;test1Time&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-await在for循环中使用"><a href="#async-await在for循环中使用" class="headerlink" title="async&#x2F;await在for循环中使用"></a>async&#x2F;await在for循环中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait</span>(<span class="params">id</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait&quot;</span>+id);</span><br><span class="line">      <span class="title function_">resolve</span>(id);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">List</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  <span class="keyword">let</span> promises = <span class="title class_">List</span>.<span class="title function_">map</span>(<span class="function"><span class="params">id</span>=&gt;</span><span class="title function_">testAwait</span>(id))</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> promise <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> promise</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise结果：&quot;</span>,res)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;for循环promise，done&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><h2 id="async-await捕获异常"><a href="#async-await捕获异常" class="headerlink" title="async&#x2F;await捕获异常"></a>async&#x2F;await捕获异常</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testPromise</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">testAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">testPromise</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-await与Generator"><a href="#async-await与Generator" class="headerlink" title="async&#x2F;await与Generator"></a>async&#x2F;await与Generator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generator函数，可以多次返回</span></span><br><span class="line"><span class="comment">// yield暂停执行，next恢复执行</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;11111111&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;22222222&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;33333333&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = <span class="title function_">generatorFn</span>();</span><br><span class="line">test.<span class="title function_">next</span>(); <span class="comment">// &#123;value: &#x27;11111111&#x27;, done: false&#125;</span></span><br><span class="line">test.<span class="title function_">next</span>(); <span class="comment">// &#123;value: &#x27;22222222&#x27;, done: false&#125;</span></span><br><span class="line">test.<span class="title function_">next</span>(); <span class="comment">// &#123;value: &#x27;33333333&#x27;, done: true&#125;</span></span><br><span class="line">test.<span class="title function_">next</span>(); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="comment">// async是Generator函数的语法糖</span></span><br><span class="line"><span class="comment">// async函数就是将Generator函数的星号(*)替换成async，将yield替换成await</span></span><br><span class="line"><span class="comment">// async函数自带执行器，而Generator函数需要每次都调用next()来执行</span></span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(a)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value++)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value++)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
            <tag> promise </tag>
            
            <tag> Generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易的发布订阅模式</title>
      <link href="/2021/10/09/%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/10/09/%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>购买者订阅是否有库存商品<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> storeObj = &#123;&#125;; <span class="comment">// 定义发布者</span></span><br><span class="line">storeObj.<span class="property">list</span> = []; <span class="comment">// 缓存列表，存放订阅的回调函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加订阅者</span></span><br><span class="line">storeObj.<span class="property">listen</span> = <span class="keyword">function</span>(<span class="params">key, fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 此时this指向storeObj</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">list</span>[key])&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span>[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>[key].<span class="title function_">push</span>(fn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line">storeObj.<span class="property">trigger</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// arguments为类数组</span></span><br><span class="line">    <span class="comment">// shift() 方法用于把数组的第一个元素从其中删除,并返回第一个元素的值</span></span><br><span class="line">    <span class="keyword">let</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="variable language_">this</span>.<span class="property">list</span>[key]</span><br><span class="line">    <span class="keyword">if</span>(!fns || fns.<span class="property">length</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, fn; fn= fns[i++];)&#123;</span><br><span class="line">        <span class="comment">// fn.apply(this, arguments)</span></span><br><span class="line">        <span class="title function_">fn</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">storeObj.<span class="title function_">listen</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="keyword">function</span>(<span class="params">size</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`您订阅的尺码：<span class="subst">$&#123;size&#125;</span>，有库存了`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">storeObj.<span class="title function_">listen</span>(<span class="string">&#x27;小张&#x27;</span>,<span class="keyword">function</span>(<span class="params">name,size</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`您订阅的尺码：<span class="subst">$&#123;size&#125;</span>，有库存了`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">storeObj.<span class="property">remove</span> = <span class="keyword">function</span>(<span class="params">key,fn</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="variable language_">this</span>.<span class="property">list</span>[key];</span><br><span class="line">    <span class="keyword">if</span>(!fns)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fn)&#123;</span><br><span class="line">        fn &amp;&amp; (fns.<span class="property">length</span> = <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = fns.<span class="property">length</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">            <span class="keyword">if</span>(_fn == fn)&#123;</span><br><span class="line">                fns.<span class="title function_">splice</span>(i,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">storeObj.<span class="title function_">trigger</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">34</span>)</span><br><span class="line">storeObj.<span class="title function_">trigger</span>(<span class="string">&quot;小张&quot;</span>,<span class="number">28</span>)</span><br></pre></td></tr></table></figure></li><li>封装<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Event</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> list = &#123;&#125;,</span><br><span class="line">        listen,</span><br><span class="line">        trigger,</span><br><span class="line">        remove;</span><br><span class="line">    listen = <span class="keyword">function</span>(<span class="params">key, fn</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!list[key])&#123;</span><br><span class="line">            list[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        list[key].<span class="title function_">push</span>(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    trigger = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">        <span class="keyword">let</span> fns = list[key]</span><br><span class="line">        <span class="keyword">if</span>(!fns || fns.<span class="property">length</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, fn; fn= fns[i++];)&#123;</span><br><span class="line">            <span class="comment">// fn.apply(this, arguments)</span></span><br><span class="line">            <span class="title function_">fn</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    remove = <span class="keyword">function</span>(<span class="params">key,fn</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> fns = list[key];</span><br><span class="line">        <span class="keyword">if</span>(!fns)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fn)&#123;</span><br><span class="line">            fn &amp;&amp; (fns.<span class="property">length</span> = <span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = fns.<span class="property">length</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">                <span class="keyword">if</span>(_fn == fn)&#123;</span><br><span class="line">                    fns.<span class="title function_">splice</span>(i,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 发布订阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目中应用TypeScript</title>
      <link href="/2021/10/08/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript/"/>
      <url>/2021/10/08/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>在VUE项目中应用typescript，我们需要引入一个库<code>vue-property-decorator</code>，</li><li><code>vue-property-decorator</code>是基于<code>vue-class-component</code>库而来，这个库vue官方推出的一个支持使用class方式来开发vue单文件组件的库</li><li>主要的功能如下：<ul><li>methods 可以直接声明为类的成员方法</li><li>计算属性可以被声明为类的属性访问器</li><li>初始化的 data 可以被声明为类属性</li><li>data、render 以及所有的 Vue 生命周期钩子可以直接作为类的成员方法</li><li>所有其他属性，需要放在装饰器中</li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><code>vue-property-decorator</code> 主要提供了以下装饰器<ul><li>@Prop</li><li>@PropSync</li><li>@Model</li><li>@Watch</li><li>@Provide</li><li>@Inject</li><li>@ProvideReactive</li><li>@InjectReactive</li><li>@Emit</li><li>@Ref</li><li>@Component (由 <code>vue-class-component</code> 提供)</li><li>Mixins (由 <code>vue-class-component</code> 提供)</li></ul></li></ul><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><ul><li>Component装饰器它注明了此类为一个Vue组件，因此即使没有设置选项也不能省略</li><li>如果需要定义比如 name、components、filters、directives以及自定义属性，就可以在Component装饰器中定义，如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>,<span class="title class_">Vue</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;componentA,componentB&#125; <span class="keyword">from</span> <span class="string">&#x27;@/components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> @<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        componentA,</span><br><span class="line">        componentB,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">directives</span>: &#123;</span><br><span class="line">        <span class="attr">focus</span>: &#123;</span><br><span class="line">            <span class="comment">// 指令的定义</span></span><br><span class="line">            <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">                el.<span class="title function_">focus</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">YourCompoent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="computed、data、methods"><a href="#computed、data、methods" class="headerlink" title="computed、data、methods"></a>computed、data、methods</h3><ul><li>这里取消了组件的data和methods属性，以往data返回对象中的属性、methods中的方法需要直接定义在Class中，当做类的属性和方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title class_">Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HelloDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: number = <span class="number">123</span> <span class="comment">// 类属性相当于以前的 data</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(): number &#123; <span class="comment">// 类方法就是以前的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取计算属性</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">total</span>(): number &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置计算属性</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">total</span>(<span class="params">param:number</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = param</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="props"><a href="#props" class="headerlink" title="@props"></a>@props</h3><ul><li>组件接收属性的装饰器，如下使用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>,<span class="title class_">Vue</span>,<span class="title class_">Prop</span>&#125; <span class="keyword">from</span> vue-property-decorator;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">YourComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span><br><span class="line">    @<span class="title class_">Prop</span>(<span class="title class_">String</span>)</span><br><span class="line">    <span class="attr">propA</span>:string;</span><br><span class="line">    </span><br><span class="line">    @<span class="title class_">Prop</span>([<span class="title class_">String</span>,<span class="title class_">Number</span>])</span><br><span class="line">    <span class="attr">propB</span>:string|number;</span><br><span class="line">    </span><br><span class="line">    @<span class="title class_">Prop</span>(&#123;</span><br><span class="line">     <span class="attr">type</span>: <span class="title class_">String</span>, <span class="comment">// type: [String , Number]</span></span><br><span class="line">     <span class="attr">default</span>: <span class="string">&#x27;default value&#x27;</span>, <span class="comment">// 一般为String或Number</span></span><br><span class="line">      <span class="comment">//如果是对象或数组的话。默认值从一个工厂函数中返回</span></span><br><span class="line">      <span class="comment">// defatult: () =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//     return [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">     <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">validator</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">          <span class="string">&#x27;InProcess&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Settled&#x27;</span></span><br><span class="line">        ].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="attr">propC</span>:string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="watch"><a href="#watch" class="headerlink" title="@watch"></a>@watch</h3><ul><li>实际就是Vue中的监听器，如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Vue</span>, <span class="title class_">Component</span>, <span class="title class_">Watch</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">YourComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span><br><span class="line">  @<span class="title class_">Watch</span>(<span class="string">&#x27;child&#x27;</span>)</span><br><span class="line">  <span class="title function_">onChildChanged</span>(<span class="params">val: string, oldVal: string</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">Watch</span>(<span class="string">&#x27;person&#x27;</span>, &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="title function_">onPersonChanged1</span>(<span class="params">val: Person, oldVal: Person</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @<span class="title class_">Watch</span>(<span class="string">&#x27;person&#x27;</span>)</span><br><span class="line">  <span class="title function_">onPersonChanged2</span>(<span class="params">val: Person, oldVal: Person</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="emit"><a href="#emit" class="headerlink" title="@emit"></a>@emit</h3><ul><li>vue-property-decorator 提供的 @Emit 装饰器就是代替Vue中的事件的触发$emit，如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Vue</span>, <span class="title class_">Component</span>, <span class="title class_">Emit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span>;</span><br><span class="line">    @<span class="title class_">Component</span>(&#123;&#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Some</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span>&#123;</span><br><span class="line">        <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.$on(<span class="string">&#x27;emit-todo&#x27;</span>, <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">emitTodo</span>(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="title class_">Emit</span>()</span><br><span class="line">        <span class="title function_">emitTodo</span>(<span class="params">n: string</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的this</title>
      <link href="/2021/10/07/js%E4%B8%AD%E7%9A%84this/"/>
      <url>/2021/10/07/js%E4%B8%AD%E7%9A%84this/</url>
      
        <content type="html"><![CDATA[<h1 id="如何区别JavaScript中的this指向"><a href="#如何区别JavaScript中的this指向" class="headerlink" title="如何区别JavaScript中的this指向"></a>如何区别JavaScript中的this指向</h1><h2 id="类型一：在函数中直接调用的"><a href="#类型一：在函数中直接调用的" class="headerlink" title="类型一：在函数中直接调用的"></a>类型一：在函数中直接调用的</h2><ul><li>直接调用的函数this指向window<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// hello</span></span><br><span class="line">greet.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="string">&quot;Hello&quot;</span>); <span class="comment">// hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="类型二：函数作为对象的方法被调用的"><a href="#类型二：函数作为对象的方法被调用的" class="headerlink" title="类型二：函数作为对象的方法被调用的"></a>类型二：函数作为对象的方法被调用的</h2><ul><li>谁调用函数，函数的this就指向谁<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params">text</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>笑着向你说：<span class="subst">$&#123;text&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayHello</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 张三笑着向你说：Hello</span></span><br><span class="line">person.<span class="property">sayHello</span>.<span class="title function_">call</span>(person, <span class="string">&quot;Hello&quot;</span>); <span class="comment">// 张三笑着向你说：Hello</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><ul><li>打印结果是什么？<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">222</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span>;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line">a.<span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">        <span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>);</span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>;</span><br><span class="line">b.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure></li><li>打印结果<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要使用let</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="number">222</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span>;</span><br><span class="line"><span class="title function_">fun</span>(); <span class="comment">// 222  -&gt; fun.call(window)</span></span><br><span class="line">a.<span class="title function_">say</span>(); <span class="comment">// 111 a.say.call(a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">        <span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>); <span class="comment">// 222  -&gt; fn.call(window)    此处传参a.say给fn()并执行，等价于  (a.say)()  也就是fn.call(window)</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>;</span><br><span class="line">b.<span class="title function_">say</span>(); <span class="comment">// 333  -&gt; b.say.call(b)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h2><ul><li>箭头函数内部没有绑定this机制，即箭头函数没有this，导致箭头函数的this指向外层代码块的this<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>(); <span class="comment">// 11    -&gt; this指向外层的window</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">33</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>(); <span class="comment">// 22    -&gt; this指向外层的obj</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tsconfig.json配置项详解</title>
      <link href="/2021/10/06/tsconfig-json%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/10/06/tsconfig-json%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;allowUnreachableCode&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不报告执行不到的代码错误</span></span><br><span class="line">    <span class="string">&quot;allowUnusedLabels&quot;</span>: <span class="literal">false</span>, <span class="comment">// 不报告未使用的标签错误</span></span><br><span class="line">    <span class="string">&quot;alwaysStrict&quot;</span>: <span class="literal">false</span>, <span class="comment">// 以严格模式解析并为每个源文件生成 &quot;use strict&quot;语句</span></span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>, <span class="comment">// 工作根目录</span></span><br><span class="line">    <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>, <span class="comment">// 启用实验性的ES装饰器</span></span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>, <span class="comment">// 在 .tsx文件里支持JSX</span></span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 是否生成map文件</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>, <span class="comment">// 指定生成哪个模块系统代码</span></span><br><span class="line">    <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否默认禁用 any</span></span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>, <span class="comment">// 是否移除注释</span></span><br><span class="line">    <span class="string">&quot;types&quot;</span>: [ <span class="comment">//指定引入的类型声明文件，默认是自动引入所有声明文件，一旦指定该选项，则会禁用自动引入，改为只引入指定的类型声明文件，如果指定空数组[]则不引用任何文件</span></span><br><span class="line">      <span class="string">&quot;node&quot;</span>, <span class="comment">// 引入 node 的类型声明</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123; <span class="comment">// 指定模块的路径，和baseUrl有关联，和webpack中resolve.alias配置一样</span></span><br><span class="line">      <span class="string">&quot;src&quot;</span>: [ <span class="comment">//指定后可以在文件之直接 import * from &#x27;src&#x27;;</span></span><br><span class="line">        <span class="string">&quot;./src&quot;</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ESNext&quot;</span>, <span class="comment">// 编译的目标是什么版本的</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>, <span class="comment">// 输出目录</span></span><br><span class="line">    <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 是否自动创建类型声明文件</span></span><br><span class="line">    <span class="string">&quot;declarationDir&quot;</span>: <span class="string">&quot;./lib&quot;</span>, <span class="comment">// 类型声明文件的输出目录</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许编译javascript文件。</span></span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [ <span class="comment">// 编译过程中需要引入的库文件的列表</span></span><br><span class="line">      <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">      <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">      <span class="string">&quot;es2016&quot;</span>,</span><br><span class="line">      <span class="string">&quot;es2017&quot;</span>,</span><br><span class="line">      <span class="string">&quot;es2018&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 指定一个排除列表（include的反向操作）</span></span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
            <tag> tsconfig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git之多SSH-key配置</title>
      <link href="/2021/09/13/git%E4%B9%8B%E5%A4%9ASSH-key%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/09/13/git%E4%B9%8B%E5%A4%9ASSH-key%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-生成SSH-Key"><a href="#1-生成SSH-Key" class="headerlink" title="1. 生成SSH-Key"></a>1. 生成SSH-Key</h2><ul><li>Windows系统请使用Git bash操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成第一个SSH-Key</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱” -f ~/.ssh/id_rsa_one</span></span><br><span class="line"><span class="string"># 生成第二个SSH-Key</span></span><br><span class="line"><span class="string">$ ssh-keygen -t rsa -C &quot;</span><span class="string">&quot;你的邮箱”” -f ~/.ssh/id_rsa_two</span></span><br></pre></td></tr></table></figure></li><li>创建完成之后 我们在.ssh的根目录下可以看到文件<ul><li>C:\Users\Administrator.ssh 或者 C:\Users\电脑用户名.ssh</li></ul></li></ul><h2 id="2-添加私钥"><a href="#2-添加私钥" class="headerlink" title="2. 添加私钥"></a>2. 添加私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端中执行</span></span><br><span class="line"></span><br><span class="line">$ ssh-add ~/.ssh/id_rsa_gitlab</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果执行ssh-add时提示 Could not open a connection to your authentication agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以先执行命令:</span></span><br><span class="line">$ ssh-agent bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后再重新运行ssh-add命令即可</span></span><br><span class="line"><span class="comment"># 添加成功会出现提示：</span></span><br><span class="line"><span class="comment"># Identity added 等字样</span></span><br></pre></td></tr></table></figure><h2 id="3-查看私钥列表是否存在"><a href="#3-查看私钥列表是否存在" class="headerlink" title="3. 查看私钥列表是否存在"></a>3. 查看私钥列表是否存在</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们可以看到2条私钥的时候就证明安装成功了</span></span><br></pre></td></tr></table></figure><h2 id="4-修改配置文件config"><a href="#4-修改配置文件config" class="headerlink" title="4. 修改配置文件config"></a>4. 修改配置文件config</h2><ul><li>若.ssh目录(就是私钥所在的文件夹)下无config文件，那就需要自己创建config文件（可用vs code创建）</li><li>创建后添加一下内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitlab</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">HostName gitlab.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-在gitlab、github网站中设置SSH-keys"><a href="#5-在gitlab、github网站中设置SSH-keys" class="headerlink" title="5. 在gitlab、github网站中设置SSH keys"></a>5. 在gitlab、github网站中设置SSH keys</h2><ul><li>在gitlab、github网站中找到用户设置，找到SSH keys</li><li>在.ssh的根目录中找到对应网站的.pub结尾的文件，用记事本打开，然后复制内容到对应网站保存即可</li></ul><h2 id="6-用ssh命令测试验证"><a href="#6-用ssh命令测试验证" class="headerlink" title="6. 用ssh命令测试验证"></a>6. 用ssh命令测试验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@gitlab.com</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现 Are you sure you want to continue connecting? </span></span><br><span class="line"><span class="comment"># 直接输入 yes</span></span><br><span class="line"><span class="comment"># 然后重复上面的命令</span></span><br><span class="line"><span class="comment"># 验证通过会有类似“Welconme”或者“Hi”的欢迎字样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现 ssh: connect to host github.com port 22: Connection timed out</span></span><br><span class="line"><span class="comment"># 请确认第四步是否完成：修改配置文件config</span></span><br><span class="line"><span class="comment"># 完成后重新执行：用ssh命令测试验证</span></span><br><span class="line"><span class="comment"># 出现：Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></span><br><span class="line"><span class="comment"># 只输入yes，在重新&#x27;用ssh命令测试验&#x27;证即可</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-清空私钥列表"><a href="#7-清空私钥列表" class="headerlink" title="7. 清空私钥列表"></a>7. 清空私钥列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 版本控制工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2021/08/31/docker%E8%B5%B7%E6%AD%A5%E6%95%99%E7%A8%8B/"/>
      <url>/2021/08/31/docker%E8%B5%B7%E6%AD%A5%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">yum install docker -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h1 id="自动部署时需要的Dockerfile"><a href="#自动部署时需要的Dockerfile" class="headerlink" title="自动部署时需要的Dockerfile"></a>自动部署时需要的Dockerfile</h1><ul><li>编写Dockerfile时文件名就为Dockerfile，不需要要任何后缀，编写完后放到项目根目录下</li><li>版本1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> docker.<span class="property">dm</span>-ai.<span class="property">cn</span>/public/<span class="attr">node</span>:<span class="number">10</span>-frontend-<span class="number">0.01</span></span><br><span class="line"><span class="variable constant_">WORKDIR</span> /app</span><br><span class="line"><span class="variable constant_">ADD</span> . .</span><br><span class="line"><span class="variable constant_">RUN</span> npm config set registry <span class="attr">https</span>:<span class="comment">//npm.dm-ai.cn/repository/npm &amp;&amp; npm i &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">FROM</span> docker.<span class="property">dm</span>-ai.<span class="property">cn</span>/public/<span class="attr">nginx</span>:<span class="number">1.17</span></span><br><span class="line"><span class="variable constant_">ENV</span> <span class="variable constant_">TZ</span>=<span class="title class_">Asia</span>/<span class="title class_">Shanghai</span></span><br><span class="line"><span class="variable constant_">WORKDIR</span> /www</span><br><span class="line"><span class="variable constant_">COPY</span> –<span class="keyword">from</span>=<span class="number">0</span> /app/dist /www</span><br><span class="line"><span class="variable constant_">COPY</span> –<span class="keyword">from</span>=<span class="number">0</span> /app/nginx.<span class="property">conf</span> /etc/nginx/conf.<span class="property">d</span>/<span class="keyword">default</span>.<span class="property">conf</span></span><br><span class="line"><span class="variable constant_">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li>版本2（嘉熙版本）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">FROM</span> docker.<span class="property">dm</span>-ai.<span class="property">cn</span>/public/<span class="attr">node</span>:<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">WORKDIR</span> /app</span><br><span class="line"><span class="variable constant_">COPY</span> . .</span><br><span class="line"><span class="variable constant_">RUN</span> npm config set registry <span class="attr">https</span>:<span class="comment">//npm.dm-ai.cn/repository/npm/ \</span></span><br><span class="line">  &amp;&amp; npm config set sass_binary_site <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/node-sass/ \</span></span><br><span class="line">  &amp;&amp; npm i &amp;&amp; npm run build</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">FROM</span> docker.<span class="property">dm</span>-ai.<span class="property">cn</span>/public/<span class="attr">nginx</span>:<span class="number">1.17</span></span><br><span class="line"><span class="variable constant_">ENV</span> <span class="variable constant_">TZ</span>=<span class="title class_">Asia</span>/<span class="title class_">Shanghai</span></span><br><span class="line"><span class="variable constant_">COPY</span> --<span class="keyword">from</span>=<span class="number">0</span> /app/dist /usr/share/nginx/html</span><br><span class="line"><span class="variable constant_">COPY</span> --<span class="keyword">from</span>=<span class="number">0</span> /app/nginx.<span class="property">conf</span> /etc/nginx/conf.<span class="property">d</span>/<span class="keyword">default</span>.<span class="property">conf</span></span><br><span class="line"><span class="variable constant_">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="variable constant_">CMD</span> nginx -g <span class="string">&quot;daemon off;&quot;</span></span><br></pre></td></tr></table></figure></li><li>npm config set registry <a href="https://xxx/">https://xxx</a> —&gt; 设置镜像源地址</li><li>COPY –from&#x3D;0 &lt;源路径&gt; &lt;目标路径&gt; —&gt; 从指定目录复制文件到指定路径</li><li>EXPOSE —&gt; 声明端口</li><li>使用nginx -g “daemon off;”启动nginx容器的原因<ul><li>背景：Docker 容器启动时，默认会把容器内部第一个进程，也就是pid&#x3D;1的程序，作为docker容器是否正在运行的依据，如果 docker 容器pid&#x3D;1的进程挂了，那么docker容器便会直接退出。</li><li>原因：nginx默认是以后台模式启动的，Docker未执行自定义的CMD之前，nginx的pid是1，执行到CMD之后，nginx就在后台运行，bash或sh脚本的pid变成了1。所以一旦执行完自定义CMD，nginx容器也就退出了。为了保持nginx的容器不退出，应该关闭nginx后台运行</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分支建立及提交规范</title>
      <link href="/2021/08/20/Git%E5%88%86%E6%94%AF%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
      <url>/2021/08/20/Git%E5%88%86%E6%94%AF%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="分支建立规范"><a href="#分支建立规范" class="headerlink" title="分支建立规范"></a>分支建立规范</h2><h3 id="Git主要分支说明："><a href="#Git主要分支说明：" class="headerlink" title="Git主要分支说明："></a>Git主要分支说明：</h3><ul><li>Master<ul><li>主分支，维护发布产品的代码，存储了正式发布的历史版本</li></ul></li><li>Develop<ul><li>开发分支，作为功能的集成分支，维护开发中的代码，代码最终要合入Master分支</li></ul></li><li>Feature<ul><li>开自Develop分支，主要用于开发新功能，开发者根据自己负责模块自行维护，模块开发完成并自测通过后，代码合入Develop分支，新功能提交应该从不直接与master分支交互</li><li>命名规范为：feature&#x2F;#…，每一个功能都应对应一个issue，…即为issue号</li><li>开发中的合并代码采用rebase方法（可以使分支的提交历史看上去更简洁，详细可见rebase与merge的对比），具体方法如下：<ul><li>新建feature分支：git checkout develop， git branch feature&#x2F;#…， git checkout feature&#x2F;#…</li><li>feature分支开发一段功能后：git add.， git commit -m “…”， git checkout develop， git pull origin develop， git checkout feature&#x2F;#…， git rebase develop（代码依次为提交本次代码，添加提交信息，切换到develop分支并拉取最新分支，切换回feature分支，rebase develop分支）</li><li>在rebase develop分支时，可能会产生conflict，此时仍在rebase过程中，这时需要手动修改代码解决冲突，然后解决完该次冲突（rebase会对比每次未合入develop分支的提交，可能每次提交都会有冲突）后，再执行git add.，git rebase –continue命令，rebase完成后，即可push代码。</li><li>多个分支同时开发时，应当频繁地将测试后可运行的feature分支更新到dev分支，每次更新dev分支时通知其他开发人员，拉取最新的dev分支，将自己正在开发的分支rebase dev分支。这样可以避免较长时间没有进行rebase而导致的冲突较多问题。</li></ul></li></ul></li><li>Bugfix<ul><li>开自Develop分支或者Release分支，主要用于修复当前开发中的功能的已知bug；每一个已发现的bug都应该在gitlab中记录issue，并定期更新当前解决进展，如有有价值的思考或独特的解决方法，可以在issue中评论并在wiki的技术知识库或个人空间博文中进行记录。</li><li>命名规范为：bugfix&#x2F;#…</li></ul></li><li>Hotfix<ul><li>开自Master分支，主要用于修复当前已发布版本的已知bug；解决bug时注意事项参考Bugfix。这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。为Bug修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把它想成是一个直接在master分支上处理的临时发布。</li><li>命名规范为：hotfix&#x2F;#…</li></ul></li><li>Release<ul><li>开自Develop分支，主要用于发布版本，一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做Bug修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，执行以下三个操作：</li><li>合并Release分支到Master；</li><li>给Master打上对应版本的标签tag；</li><li>Release回归，这些从新建发布分支以来的做的修改要合并回develop分支。</li><li>命名规范为：release&#x2F;…，…即为版本号</li></ul></li></ul><h2 id="代码提交规范-常用"><a href="#代码提交规范-常用" class="headerlink" title="代码提交规范(常用)"></a>代码提交规范(常用)</h2><ul><li>建议经常用命令git status查看当前所在分支并用git log查看当前分支记录，每次提交前与checkout分支时都先查看当前分支再进行下一步操作</li><li>提交信息的说明，禁止无意义的日志语言，如modify，修改xxx文件等，任何修改都应该简要说明</li><li>Commit message格式 <code>&lt;type&gt;: &lt;subject&gt;</code> 注意冒号后面有空格</li><li>type 用于说明 commit 的类别，使用下列之一<ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></li><li>subject<ul><li>subject是 commit 目的的简短描述，不超过50个字符，且结尾不加句号（.）。</li><li>提交分支合并请求之前的基础原则，如本地编译通过、手工或者自动化验收的测试通过</li></ul></li></ul><h2 id="也可使用约定式提交规范-更详细提交记录"><a href="#也可使用约定式提交规范-更详细提交记录" class="headerlink" title="也可使用约定式提交规范(更详细提交记录)"></a>也可使用约定式提交规范(更详细提交记录)</h2><ul><li>使用约定式提交规范（Conventional Commits），它受到了 Angular 提交准则的启发，并在很大程度上以其为依据。约定式提交规范是一种基于提交消息的轻量级约定。 它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。这个约定与 SemVer 相吻合，在提交信息中描述新特性、bug 修复和破坏性变更。它的 message 格式如下:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure></li><li>type<ul><li>type 用于说明 commit 的类别，使用下列之一<ul><li>feat：新功能（feature）</li><li>fix：修补 bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>revert：回滚到上一个版本</li><li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li><li>perf：性能优化</li><li>ci：持续集成</li></ul></li></ul></li><li>scope<ul><li>scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层、配置文件等等。如果 commit 影响的范围比较小，可以不写 scope。如果 commit 影响的范围比较大，可以写成*</li></ul></li><li>subject<ul><li>subject 是 commit 目的的简短描述，不超过 50 个字符，结尾不加句号</li></ul></li><li>body<ul><li>body 是对本次 commit 的详细描述，可以分成多行</li></ul></li><li>footer<ul><li>footer 用于不兼容变动或关闭 issue。不兼容变动是指在当前代码库中存在用户代码与之前版本不兼容时，footer 部分以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动理由和迁移方法</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 版本控制工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现杨辉三角</title>
      <link href="/2021/07/26/JS%E5%AE%9E%E7%8E%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>/2021/07/26/JS%E5%AE%9E%E7%8E%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h1 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h1><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92.png" alt="杨辉三角"></p><h2 id="给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的第n行"><a href="#给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的第n行" class="headerlink" title="给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的第n行"></a>给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的第n行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">triangle</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr1 = []</span><br><span class="line">  <span class="keyword">let</span> arr2 = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">        arr2[j] = <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;arr1&#x27;,arr1);</span></span><br><span class="line">        arr2[j] = arr1[j - <span class="number">1</span>] + arr1[j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;arr2&#x27;, arr2);</span></span><br><span class="line">    arr1 = [...arr2]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">triangle</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的前n行"><a href="#给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的前n行" class="headerlink" title="给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的前n行"></a>给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的前n行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">triangle</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(`数组共有$&#123;n&#125;行：`);</span></span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    arr[i] = [];</span><br><span class="line">    <span class="comment">//按照杨辉三角的特性，将数填入二维数字中。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((j == <span class="number">0</span>) || (j == i)) &#123;</span><br><span class="line">        arr[i][j] = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(arr);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(arr[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">triangle</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杨辉三角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Taro与uni-app对比</title>
      <link href="/2021/07/25/Taro%E4%B8%8Euni-app%E5%AF%B9%E6%AF%94/"/>
      <url>/2021/07/25/Taro%E4%B8%8Euni-app%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h1 id="Taro和uni-app的介绍"><a href="#Taro和uni-app的介绍" class="headerlink" title="Taro和uni-app的介绍"></a>Taro和uni-app的介绍</h1><h2 id="Taro的介绍"><a href="#Taro的介绍" class="headerlink" title="Taro的介绍"></a>Taro的介绍</h2><ul><li>Taro 是一个开放式跨端跨框架解决方案，支持使用 React&#x2F;Vue&#x2F;Nerv 等框架来开发 微信 &#x2F; 京东 &#x2F; 百度 &#x2F; 支付宝 &#x2F; 字节跳动 &#x2F; QQ 小程序 &#x2F; H5 &#x2F; RN 等应用。</li><li>官方文档：<a href="https://nervjs.github.io/taro">https://nervjs.github.io/taro</a></li><li>Github地址：<a href="https://github.com/nervjs/taro">https://github.com/nervjs/taro</a></li></ul><h2 id="uni-app的介绍"><a href="#uni-app的介绍" class="headerlink" title="uni-app的介绍"></a>uni-app的介绍</h2><ul><li>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;QQ&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台。</li><li>官方文档：<a href="https://uniapp.dcloud.io/">https://uniapp.dcloud.io</a></li><li>Github地址：<a href="https://github.com/dcloudio/uni-app">https://github.com/dcloudio/uni-app</a></li></ul><h1 id="两者的对比"><a href="#两者的对比" class="headerlink" title="两者的对比"></a>两者的对比</h1><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><ul><li>两者都是用主流框架开发的</li><li>都能支持微信、百度、支付宝、今日头条等小程序，H5，以及iOS和Android的App</li><li>均支持使用npm&#x2F;yarn安装管理第三方依赖</li><li>均支持使用ES6甚至更新的ES规范</li><li>均支持使用less&#x2F;scss&#x2F;ts等预编译器</li><li>均支持进行应用状态管理，taro支持Redux，uni-app支持vuex</li></ul><h2 id="差异点"><a href="#差异点" class="headerlink" title="差异点"></a>差异点</h2><table><thead><tr><th align="left"></th><th align="left">Taro</th><th align="left">uni-app</th></tr></thead><tbody><tr><td align="left">开发技术栈</td><td align="left">React框架开发</td><td align="left">Vue框架开发</td></tr><tr><td align="left">开发工具</td><td align="left">官方未特别推荐IDE</td><td align="left">官方推荐HBuilderX,开发工具可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs</td></tr><tr><td align="left">跨端程度</td><td align="left">微信 &#x2F; 京东 &#x2F; 百度 &#x2F; 支付宝 &#x2F; 字节跳动 &#x2F; QQ 小程序 &#x2F; H5 &#x2F; RN</td><td align="left">微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;QQ&#x2F;钉钉&#x2F;淘宝小程序、快应用、iOS、Android、Web（响应式）</td></tr><tr><td align="left">版本升级差异</td><td align="left">1.X与2.X之间没有做平滑升级，版本差异太大，升级版本会导致各种不兼容的bug；3.X则属于开放式架构的改动，采用了重运行时的架构</td><td align="left">无版本升级影响</td></tr><tr><td align="left">物料市场</td><td align="left">NutUI、Taro UI；物料市场活跃度低，更新速度慢</td><td align="left">uni-ui、uView UI、mui；插件市场活跃度高，插件数量多，更新速度快</td></tr><tr><td align="left">社区活跃度</td><td align="left">GitHub Issuse、Discussions</td><td align="left">GitHub Issuse、官网社区问答</td></tr><tr><td align="left">学习维护成本</td><td align="left">高</td><td align="left">低</td></tr><tr><td align="left">云开发支持</td><td align="left">无</td><td align="left">uniCloud</td></tr></tbody></table><h2 id="Taro-DCloud-uni-app-微信小程序诞生节点"><a href="#Taro-DCloud-uni-app-微信小程序诞生节点" class="headerlink" title="Taro &amp;&amp; DCloud &amp;&amp; uni-app &amp;&amp; 微信小程序诞生节点"></a>Taro &amp;&amp; DCloud &amp;&amp; uni-app &amp;&amp; 微信小程序诞生节点</h2><ul><li>Taro 2018年4月8日发布0.0.1版本<ul><li><a href="https://github.com/NervJS/taro/releases?after=v0.0.5">https://github.com/NervJS/taro/releases?after=v0.0.5</a></li></ul></li><li>DCloud于2012年开始研发小程序技术，优化webview的功能和性能，并加入W3C和HTML5中国产业联盟，推出了HBuilder开发工具，为后续产业化做准备<ul><li><a href="https://uniapp.dcloud.io/history">https://uniapp.dcloud.io/history</a></li></ul></li><li>uni-app 2019年1月11日发布1.4.0.20181227 版本<ul><li><a href="https://github.com/dcloudio/uni-app/releases?after=1.8.0.20190330">https://github.com/dcloudio/uni-app/releases?after=1.8.0.20190330</a></li></ul></li><li>微信团队于2016年初决定上线小程序业务，但其没有接入联盟标准，而是订制了自己的标准。2017年1月9日，张小龙在2017微信公开课Pro上发布的微信小程序正式上线<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/e1fd563ba0301f44e923d9b9ae67b59.png" alt="微信小程序上线"></li></ul><h1 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h1><h2 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 @tarojs/cli</span></span><br><span class="line"><span class="variable">$</span> npm install <span class="literal">-g</span> @tarojs/<span class="built_in">cli</span></span><br><span class="line"><span class="comment"># 创建 taro 项目</span></span><br><span class="line"><span class="variable">$</span> taro init myApp</span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> myApp</span><br><span class="line"><span class="comment"># 运行到微信小程序，调试模式</span></span><br><span class="line"><span class="variable">$</span> npm run dev:weapp</span><br><span class="line"><span class="comment"># 发行到微信小程序</span></span><br><span class="line"><span class="variable">$</span> npm run build:weapp</span><br></pre></td></tr></table></figure><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line"><span class="variable">$</span> npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"><span class="comment"># 创建uni-app项目</span></span><br><span class="line"><span class="variable">$</span> vue create <span class="literal">-p</span> dcloudio/uni<span class="literal">-preset-vue</span> my<span class="literal">-project</span></span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> my<span class="literal">-project</span></span><br><span class="line"><span class="comment"># 运行到微信小程序，调试模式</span></span><br><span class="line"><span class="variable">$</span> npm run dev:<span class="built_in">mp</span><span class="literal">-weixin</span></span><br><span class="line"><span class="comment"># 发行到微信小程序</span></span><br><span class="line"><span class="variable">$</span> npm run build:<span class="built_in">mp</span><span class="literal">-weixin</span></span><br></pre></td></tr></table></figure><ul><li>或者直接通过HBuilderX可视化界面</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Taro </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的call()、apply()、bind()的用法</title>
      <link href="/2021/07/09/JS%E4%B8%AD%E7%9A%84call()%E3%80%81apply()%E3%80%81bind()%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2021/07/09/JS%E4%B8%AD%E7%9A%84call()%E3%80%81apply()%E3%80%81bind()%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="少罗嗦，直接看代码"><a href="#少罗嗦，直接看代码" class="headerlink" title="少罗嗦，直接看代码"></a>少罗嗦，直接看代码</h1><ul><li><p>其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！</p></li><li><p>先看明白下面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="comment">// 注意是var不是let  如果使用let的话，obj.objAge 为undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小王&#x27;</span>, age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小张&#x27;</span>,</span><br><span class="line">  <span class="attr">objAge</span>: <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">  <span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>年龄<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">objAge</span>); <span class="comment">//17</span></span><br><span class="line">obj.<span class="title function_">myFun</span>(); <span class="comment">//小张年龄undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="keyword">var</span> fav = <span class="string">&#x27;盲僧&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shows</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">fav</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">shows</span>(); <span class="comment">//盲僧　</span></span><br></pre></td></tr></table></figure></li><li><p>比较一下这两者this 的差别，第一个打印里面的this 指向obj，第二个全局声明的shows()函数 this 是window</p></li></ul><h3 id="1-call-、apply-、bind-都是用来重定义-this-这个对象的！"><a href="#1-call-、apply-、bind-都是用来重定义-this-这个对象的！" class="headerlink" title="1. call()、apply()、bind()都是用来重定义 this 这个对象的！"></a>1. call()、apply()、bind()都是用来重定义 this 这个对象的！</h3><p>  如：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小王&#x27;</span>, age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小张&#x27;</span>,</span><br><span class="line"><span class="attr">objAge</span>: <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line"><span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>年龄<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> db = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;玛丽&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">call</span>(db);　　　　<span class="comment">//玛丽年龄18</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">apply</span>(db);　　　 <span class="comment">//玛丽年龄18</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">bind</span>(db)();　　　<span class="comment">//玛丽年龄18</span></span><br></pre></td></tr></table></figure></p><ul><li>以上出了bind 方法后面多了个()外 ，结果返回都一致</li><li>由此得出结论，bind返回的是一个新的函数，你必须调用它才会被执行</li></ul><h3 id="2-对比call、bind、apply传参情况下"><a href="#2-对比call、bind、apply传参情况下" class="headerlink" title="2. 对比call、bind、apply传参情况下"></a>2. 对比call、bind、apply传参情况下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小王&#x27;</span>, age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小张&#x27;</span>,</span><br><span class="line"><span class="attr">objAge</span>: <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line"><span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params">k,v</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>年龄<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> -&gt; 来自<span class="subst">$&#123;k&#125;</span>去往<span class="subst">$&#123;v&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> db = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;玛丽&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">call</span>(db,<span class="string">&#x27;广州&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>);　　　　      <span class="comment">// 玛丽年龄18 -&gt; 来自广州去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">apply</span>(db,[<span class="string">&#x27;广州&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>]);          <span class="comment">// 玛丽年龄18 -&gt; 来自广州去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">bind</span>(db,<span class="string">&#x27;广州&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>)();           <span class="comment">// 玛丽年龄18 -&gt; 来自广州去往上海</span></span><br><span class="line">obj.<span class="property">myFun</span>.<span class="title function_">bind</span>(db,[<span class="string">&#x27;广州&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>])();　　     <span class="comment">// 玛丽年龄18 -&gt; 来自广州,上海去往undefined</span></span><br></pre></td></tr></table></figure><h3 id="微妙的差距"><a href="#微妙的差距" class="headerlink" title="微妙的差距"></a>微妙的差距</h3><ul><li><p>从上面四个结果不难看出 call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：</p><ul><li>call的参数是直接放进去的，第二第三第n个参数全都用逗号分隔，直接放到后面obj.myFun.call(db,’成都’, … ,’string’);</li><li>apply的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,[‘成都’, …, ‘string’ ]);</li><li>bind除了返回是函数以外，它 的参数和call 一样</li></ul></li><li><p>当然，三者的参数不限定是string类型，允许是各种类型，包括函数、object等等</p></li></ul><h3 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h3><ul><li>在 JavaScript 中，call、apply 和 bind 是 Function 对象自带的三个方法，这三个方法的主要作用是改变函数中的 this 指向</li><li>共同点：<ul><li>apply 、 call 、bind 三者都是用来改变函数的 this 对象指向</li><li>apply 、 call 、bind 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文。（函数的每次调用都会拥有一个特殊值——本次调用的上下文（context），这就是 this 关键字的值）</li><li>apply 、 call 、bind 三者都可以利用后续参数传参</li></ul></li><li>区别：<ul><li>bind 是返回对应函数，便于稍后调用</li><li>apply 、call 则是立即调用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> call </tag>
            
            <tag> apply </tag>
            
            <tag> bind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于React三千问</title>
      <link href="/2021/07/08/%E5%85%B3%E4%BA%8EReact%E4%B8%89%E5%8D%83%E9%97%AE/"/>
      <url>/2021/07/08/%E5%85%B3%E4%BA%8EReact%E4%B8%89%E5%8D%83%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="如何理解React？有哪些新特性？"><a href="#如何理解React？有哪些新特性？" class="headerlink" title="如何理解React？有哪些新特性？"></a>如何理解React？有哪些新特性？</h1><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><ul><li><p>React，用于构建用户界面的 JavaScript 库，提供了 UI 层面的解决方案</p></li><li><p>遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效</p></li><li><p>使用虚拟DOM来有效地操作真实DOM，遵循从高阶组件到低阶组件的单向数据流</p></li><li><p>帮助我们将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面</p></li><li><p>React 类组件使用一个名为 render() 的方法或者函数组件return，接收输入的数据并返回需要展示的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloMessage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Hello &#123;this.props.name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">&quot;Taylor&quot;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hello-example&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h2><p>React特性有很多，如：</p><ul><li>JSX语法</li><li>单向数据绑定</li><li>虚拟DOM</li><li>声明式编程</li><li>Component</li></ul><p>着重介绍下声明式编程及Component</p><h3 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h3><ul><li><p>声明式编程是一种编程范式，它关注的是你要做什么，而不是如何做</p></li><li><p>它表达逻辑而不显式地定义步骤。这意味着我们需要根据逻辑的计算来声明要显示的组件</p></li><li><p>如实现一个标记的地图：</p></li><li><p>通过命令式创建地图、创建标记、以及在地图上添加的标记的步骤如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建地图</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>.<span class="title function_">map</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;map&#x27;</span>), &#123;</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">center</span>: &#123;lat,lng&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建标记</span></span><br><span class="line"><span class="keyword">const</span> marker = <span class="keyword">new</span> <span class="title class_">Map</span>.<span class="title function_">marker</span>(&#123;</span><br><span class="line">    <span class="attr">position</span>: &#123;lat, lng&#125;,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Hello Marker&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地图上添加标记</span></span><br><span class="line">marker.<span class="title function_">setMap</span>(map);</span><br></pre></td></tr></table></figure><p>而用React实现上述功能则如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Map</span> zoom=&#123;<span class="number">4</span>&#125; center=&#123;lat, lng&#125;&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Marker</span> <span class="attr">position</span>=<span class="string">&#123;lat,</span> <span class="attr">lng</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">Hello</span> <span class="attr">Marker</span>&#x27;&#125;/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Map</span>&gt;</span><br></pre></td></tr></table></figure><p>声明式编程方式使得React组件很容易使用，最终的代码简单易于维护</p></li></ul><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><ul><li><p>在React 中，一切皆为组件。通常将应用程序的整个逻辑分解为小的单个部分。我们将每个单独的部分称为组件</p></li><li><p>组件可以是一个函数或者是一个类，接受数据输入，处理它并返回在UI中呈现的React元素</p></li><li><p>函数式组件（无状态组件）如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Jumbotron</span> <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundColor:</span>&#x27;<span class="attr">orange</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>TODO App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Jumbotron</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类组件（有状态组件）如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dashboard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dashboard&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ToDoForm</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ToDolist</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个组件该有的特点如下：</p></li><li><p>可组合：个组件易于和其它组件一起使用，或者嵌套在另一个组件内部</p></li><li><p>可重用：每个组件都是具有独立功能的，它可以被使用在多个UI场景</p></li><li><p>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</p></li></ul><h2 id="三、优势"><a href="#三、优势" class="headerlink" title="三、优势"></a>三、优势</h2><ul><li>通过上面的初步了解，可以感受到React存在的优势：<ul><li>高效灵活</li><li>声明式的设计，简单使用</li><li>组件式开发，提高代码复用率</li><li>单向响应的数据流会比双向绑定的更安全，速度更快</li></ul></li></ul><h1 id="Real-DOM-与-Virtual-DOM-的区别？有何优缺点？"><a href="#Real-DOM-与-Virtual-DOM-的区别？有何优缺点？" class="headerlink" title="Real DOM 与 Virtual DOM 的区别？有何优缺点？"></a>Real DOM 与 Virtual DOM 的区别？有何优缺点？</h1><h2 id="一、是什么-1"><a href="#一、是什么-1" class="headerlink" title="一、是什么"></a>一、是什么</h2><ul><li><p>Real DOM，真实DOM， 意思为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>Virtual Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述</p></li><li><p>创建虚拟DOM目的就是为了更好将虚拟的节点渲染到页面视图中，虚拟DOM对象的节点与真实DOM的属性一一照应</p></li><li><p>在React中，JSX是其一大特性，可以让你在JS中通过使用XML的方式去直接声明界面的DOM结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vDom = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">// 创建h1标签，右边千万不能加引号</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>) <span class="comment">// 找到&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;节点</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vDom, root) <span class="comment">// 把创建的h1标签渲染到root节点上</span></span><br></pre></td></tr></table></figure></li><li><p>上述中，ReactDOM.render()用于将你创建好的虚拟DOM节点插入到某个真实节点上，并渲染到页面上</p></li><li><p>JSX实际是一种语法糖，在使用过程中会被babel进行编译转化成JS代码，上述VDOM转化为如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vDom = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>， </span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">&#x27;hClass&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;hId&#x27;</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>可以看到，JSX就是为了简化直接调用React.createElement() 方法：</p></li><li><p>第一个参数是标签名，例如h1、span、table…</p></li><li><p>第二个参数是个对象，里面存着标签的一些属性，例如id、class等</p></li><li><p>第三个参数是节点中的文本</p></li><li><p>通过console.log(VDOM)，则能够得到虚拟VDOM消息</p></li><li><p>所以可以得到，JSX通过babel的方式转化成React.createElement执行，返回值是一个对象，也就是虚拟DOM</p></li></ul><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><ul><li><p>两者的区别如下：</p><ul><li>虚拟DOM不会进行排版与重绘操作，而真实DOM会频繁重排与重绘</li><li>虚拟DOM的总损耗是“虚拟DOM增删改 + 真实DOM差异增删改+排版与重绘”，真实DOM的总损耗是“真实DOM完全增删改+排版与重绘”</li></ul></li><li><p>传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程</p></li><li><p>当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程</p></li><li><p>而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算</p></li></ul><h2 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h2><ul><li>真实DOM的优势：<ul><li>易用</li></ul></li><li>缺点：<ul><li>效率低，解析速度慢，内存占用量过高</li><li>性能差：频繁操作真实DOM，易于导致重绘与回流</li></ul></li><li>使用虚拟DOM的优势如下：<ul><li>简单方便：如果使用手动操作真实DOM来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难</li><li>性能方面：使用Virtual DOM，能够有效避免真实DOM数频繁更新，减少多次引起重绘与回流，提高性能</li><li>跨平台：React借助虚拟DOM， 带来了跨平台的能力，一套代码多端运行</li></ul></li><li>缺点：<ul><li>在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化</li><li>首次渲染大量DOM时，由于多了一层虚拟DOM的计算，速度比正常稍慢</li></ul></li></ul><h1 id="React生命周期有哪些不同的阶段？每个阶段对应的方法是？"><a href="#React生命周期有哪些不同的阶段？每个阶段对应的方法是？" class="headerlink" title="React生命周期有哪些不同的阶段？每个阶段对应的方法是？"></a>React生命周期有哪些不同的阶段？每个阶段对应的方法是？</h1><h1 id="对State-和-Porps的理解？有何区别？"><a href="#对State-和-Porps的理解？有何区别？" class="headerlink" title="对State 和 Porps的理解？有何区别？"></a>对State 和 Porps的理解？有何区别？</h1><h1 id="super-和-super-props-有何区别？"><a href="#super-和-super-props-有何区别？" class="headerlink" title="super() 和 super(props) 有何区别？"></a>super() 和 super(props) 有何区别？</h1><h1 id="React中的setState执行机制？"><a href="#React中的setState执行机制？" class="headerlink" title="React中的setState执行机制？"></a>React中的setState执行机制？</h1><h1 id="对React的执行机制如何理解？"><a href="#对React的执行机制如何理解？" class="headerlink" title="对React的执行机制如何理解？"></a>对React的执行机制如何理解？</h1><h1 id="React事件绑定方式有哪些？有何区别？"><a href="#React事件绑定方式有哪些？有何区别？" class="headerlink" title="React事件绑定方式有哪些？有何区别？"></a>React事件绑定方式有哪些？有何区别？</h1><h1 id="React构建组件的方式有哪些？有何区别？"><a href="#React构建组件的方式有哪些？有何区别？" class="headerlink" title="React构建组件的方式有哪些？有何区别？"></a>React构建组件的方式有哪些？有何区别？</h1><h1 id="React中组件通信方式有哪些？"><a href="#React中组件通信方式有哪些？" class="headerlink" title="React中组件通信方式有哪些？"></a>React中组件通信方式有哪些？</h1><h1 id="React中的key有什么作用？"><a href="#React中的key有什么作用？" class="headerlink" title="React中的key有什么作用？"></a>React中的key有什么作用？</h1><h1 id="对React-refs的理解？有何应用场景？"><a href="#对React-refs的理解？有何应用场景？" class="headerlink" title="对React refs的理解？有何应用场景？"></a>对React refs的理解？有何应用场景？</h1><h1 id="对React中类组件和函数组件的理解？有何区别？"><a href="#对React中类组件和函数组件的理解？有何区别？" class="headerlink" title="对React中类组件和函数组件的理解？有何区别？"></a>对React中类组件和函数组件的理解？有何区别？</h1><p><a href="#">来源：JS每日一题</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6的两个特性：Class类和类的继承extens</title>
      <link href="/2021/06/25/ES6%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%B9%E6%80%A7%EF%BC%9AClass%E7%B1%BB%E5%92%8C%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BFextens/"/>
      <url>/2021/06/25/ES6%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%B9%E6%80%A7%EF%BC%9AClass%E7%B1%BB%E5%92%8C%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BFextens/</url>
      
        <content type="html"><![CDATA[<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><ul><li><p>ES6引入Class(类)的概念，让类的写法更接近传统语言的写法，ES6的类可以看作是语法糖，它的绝大部分功能，ES5都可以做得到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法</p></li><li><p>对比ES5和ES6创建class的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ================= ES5 start =================</span></span><br><span class="line"><span class="comment">// ES5 -&gt; 构造函数、原型方法、静态属性</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">info</span> = <span class="string">&quot;Person的静态属性&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Damao&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()); <span class="comment">// Damao</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>); <span class="comment">// Person的静态属性</span></span><br><span class="line"><span class="comment">// ================= ES5 end =================</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ================= ES6 start =================</span></span><br><span class="line"><span class="comment">// ES6 -&gt; 构造函数、原型方法、静态属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123; <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123; <span class="comment">// 原型方法（无需加function）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">info</span> = <span class="string">&quot;Person的静态属性&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Damao&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()); <span class="comment">// Damao</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>); <span class="comment">// Person的静态属性</span></span><br><span class="line"><span class="comment">// ================= ES6 end =================</span></span><br></pre></td></tr></table></figure></li><li><p>ES6 class中，用static修饰即为类的静态方法（可以直接用类名访问），即在这个类（构造函数）对象本身上的方法，加上static表示该方法不会被实例继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;this is static method&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">classMethod</span>()); <span class="comment">// this is static method</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 静态方法不可以通过实例来即成，即不能通过实例调用，如</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">classMethod</span>()); <span class="comment">// TypeError: person.classMethod is not a function</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="类的继承extends"><a href="#类的继承extends" class="headerlink" title="类的继承extends"></a>类的继承extends</h1><ul><li>Class可以通过extends关键字来实现继承，而ES5则需要通过修改原型链来实现继承</li><li>对比ES5和ES6继承的写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ================= ES5 start =================</span></span><br><span class="line"><span class="comment">// ES5 -&gt; 利用原型让一个引用类型继承另一个引用类型的属性和方法，即让原型对象等于另一个类型的实例</span></span><br><span class="line"><span class="comment">// 原型继承缺点：父类公有和私有属性方法都为子类公有</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Damao&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">superName</span> = <span class="string">&quot;Damao2250&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承 Person</span></span><br><span class="line"><span class="title class_">SuperPerson</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">SuperPerson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SuperPerson</span>;</span><br><span class="line"><span class="title class_">SuperPerson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">superName</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> superPerson = <span class="keyword">new</span> <span class="title class_">SuperPerson</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(superPerson.<span class="title function_">getName</span>()); <span class="comment">// Damao</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(superPerson.<span class="title function_">getSuperName</span>()); <span class="comment">// Damao2250</span></span><br><span class="line"><span class="comment">// ================= ES5 end =================</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ================= ES6 start =================</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123; <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>) &#123; <span class="comment">// 原型方法（无需加function）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperPerson</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age, superName</span>) &#123;</span><br><span class="line">  <span class="comment">// 在继承的构造函数中，必须调用一次super方法，它表示构造函数的继承；必须在this前调用</span></span><br><span class="line">  <span class="comment">// super()是将父类中的this对象继承给子类</span></span><br><span class="line">  <span class="variable language_">super</span>(name,age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">superName</span> = superName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">superGetName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// super 直接调用父级的原型方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">getName</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">superName</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">SuperPerson</span>(<span class="string">&quot;Damao&quot;</span>, <span class="number">18</span>, <span class="string">&quot;Damao2250&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()); <span class="comment">// Damao</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">superGetName</span>()); <span class="comment">// Damao  Damao2250</span></span><br><span class="line"><span class="comment">// ================= ES6 end =================</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道基础Vue生命周期的面试题</title>
      <link href="/2021/05/11/%E4%B8%80%E9%81%93%E5%9F%BA%E7%A1%80Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/05/11/%E4%B8%80%E9%81%93%E5%9F%BA%E7%A1%80Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="根据Vue的生命周期说出console打印出来的值"><a href="#根据Vue的生命周期说出console打印出来的值" class="headerlink" title="根据Vue的生命周期说出console打印出来的值"></a>根据Vue的生命周期说出console打印出来的值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">num1</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">num2</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num1</span> + <span class="variable language_">this</span>.<span class="property">num2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeCreated&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>);  <span class="comment">// undefined    (页面载入触发)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;created&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>);  <span class="comment">// 3     (页面载入触发)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeMount&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>); <span class="comment">// 3     (页面载入触发)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>); <span class="comment">// 3     (页面载入触发)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeUpdate&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>); <span class="comment">// 3     (有数据更新时才会触发)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updated&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>); <span class="comment">// 3     (有数据更新时才会触发)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeDestroy&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>); <span class="comment">// 3     (离开组件时才会触发)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;destroyed&quot;</span>, <span class="variable language_">this</span>.<span class="property">sum</span>); <span class="comment">// 3    (离开组件时才会触发)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ul><li>父子组件生命周期如何执行<ul><li>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt;</li><li>子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt;</li><li>父mounted -&gt;</li><li>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated -&gt;</li><li>父beforeDestroy-&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的一些操作技巧</title>
      <link href="/2021/05/08/%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/05/08/%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="判断数组是否包含某个值"><a href="#判断数组是否包含某个值" class="headerlink" title="判断数组是否包含某个值"></a>判断数组是否包含某个值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="string">&#x27;d&#x27;</span>));</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>延申：判断字符串是否包含其他字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;判断字符串是否包含其他字符串&#x27;</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;判断&quot;</span>)         <span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;666&quot;</span>)           <span class="comment">// false</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;是否&quot;</span>)       <span class="comment">// true</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;复制&quot;</span>)       <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="快速复制数组"><a href="#快速复制数组" class="headerlink" title="快速复制数组"></a>快速复制数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> sameArr = [...arr];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr: &quot;</span>, arr, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;sameArr: &quot;</span>, sameArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr:[1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// sameArr:[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="快速合并数组"><a href="#快速合并数组" class="headerlink" title="快速合并数组"></a>快速合并数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> mergedArr = [...arr1, ...arr2, ...arr3];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mergedArr: &quot;</span>, mergedArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mergedArr:[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h2 id="new-Set-数组合并去重"><a href="#new-Set-数组合并去重" class="headerlink" title="new Set 数组合并去重"></a>new Set 数组合并去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> mergedArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([...arr1, ...arr2, ...arr3]))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mergedArr: &quot;</span>, mergedArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mergedArr:[1, 2, 3, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h2 id="new-Set-数组对象去重"><a href="#new-Set-数组对象去重" class="headerlink" title="new Set 数组对象去重"></a>new Set 数组对象去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">address</span>: <span class="string">&quot;北京&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">address</span>: <span class="string">&quot;天津&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">address</span>: <span class="string">&quot;北京&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> stringsArr1 = arr1.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item)) <span class="comment">// 1、转化成string类型</span></span><br><span class="line"><span class="keyword">const</span> removeDupList = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(stringsArr1))  <span class="comment">// 2、转化为真正的数组</span></span><br><span class="line"><span class="keyword">const</span> mergedArr = removeDupList.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item)) <span class="comment">// 3、字符串类型转化为对象类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mergedArr: &quot;</span>, mergedArr);</span><br><span class="line"><span class="comment">// mergedArr: [&#123; name: &quot;张三&quot;, age: 18, address: &quot;北京&quot; &#125;,&#123; name: &quot;李四&quot;, age: 20, address: &quot;天津&quot; &#125;]</span></span><br></pre></td></tr></table></figure><h2 id="快速过滤掉相同元素"><a href="#快速过滤掉相同元素" class="headerlink" title="快速过滤掉相同元素"></a>快速过滤掉相同元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;uniqueArr: &quot;</span>, uniqueArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// uniqueArr: [1, 2, 3, 4, 5, 8, 9, 6]</span></span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li><p>ES6 之 new Set()</p><ul><li>Set 是 es6 新增的数据结构，似于数组，但它的一大特性就是所有元素都是唯一的，没有重复的值，我们一般称为集合。<ul><li>Set 对象方法</li><li>add 添加某个值，返回 Set 对象本身</li><li>clear 删除所有的键&#x2F;值对，没有返回值</li><li>delete 删除某个键，返回 true，如果删除失败，返回 false</li><li>forEach 对每个元素执行指定操作</li><li>has 返回一个布尔值，表示某个键是否在当前 Set 对象之中</li></ul></li></ul></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array 转 Set</span></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;value1&quot;</span>, <span class="string">&quot;value2&quot;</span>, <span class="string">&quot;value3&quot;</span>]);</span><br><span class="line"><span class="comment">// 用...操作符，将 Set 转 Array</span></span><br><span class="line"><span class="keyword">var</span> myArray = [...mySet];</span><br><span class="line"><span class="comment">// String 转 Set</span></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// Set(4) &#123;&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;o&quot;&#125;</span></span><br><span class="line"><span class="comment">// 注：Set 中 toString 方法是不能将 Set 转换成 String</span></span><br><span class="line"><span class="title class_">Set</span> 对象作用</span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...mySet]; <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]); <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> intersect = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> b.<span class="title function_">has</span>(x))); <span class="comment">// &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">var</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !b.<span class="title function_">has</span>(x))); <span class="comment">// &#123;1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="过滤符合条件的数组项"><a href="#过滤符合条件的数组项" class="headerlink" title="过滤符合条件的数组项"></a>过滤符合条件的数组项</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">  <span class="string">&quot;banana&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pear&quot;</span>,</span><br><span class="line">  <span class="string">&quot;watermelon&quot;</span>,</span><br><span class="line">  <span class="string">&quot;strawberry&quot;</span>,</span><br><span class="line">  <span class="string">&quot;arbutus&quot;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> hFruits = fruits.<span class="title function_">filter</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> fruit.<span class="title function_">startsWith</span>(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hFruits: &quot;</span>, hFruits);</span><br><span class="line"></span><br><span class="line"><span class="comment">// hFruits: [&quot;apple&quot;, &quot;arbutus&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="检查数组中的某些项目是否匹配条件"><a href="#检查数组中的某些项目是否匹配条件" class="headerlink" title="检查数组中的某些项目是否匹配条件"></a>检查数组中的某些项目是否匹配条件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (num % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">every</span>(isEven)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">every</span>(isEven)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="数组的交集"><a href="#数组的交集" class="headerlink" title="数组的交集"></a>数组的交集</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> intersection = arr1.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> arr2.<span class="title function_">includes</span>(num));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intersection); <span class="comment">// [4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="筛选数组的差异部分"><a href="#筛选数组的差异部分" class="headerlink" title="筛选数组的差异部分"></a>筛选数组的差异部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 法一</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> difference = arr1.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> !arr2.<span class="title function_">includes</span>(num));</span><br><span class="line"><span class="keyword">const</span> allDifference = [</span><br><span class="line">  ...arr1.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> !arr2.<span class="title function_">includes</span>(num)),</span><br><span class="line">  ...arr2.<span class="title function_">filter</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> !arr1.<span class="title function_">includes</span>(num)),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(difference); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allDifference); <span class="comment">// [1, 2, 3, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 法二</span></span><br><span class="line"><span class="comment">// 比较两个数组，然后返回一个新数组，该数组为两个数组的差异部分，与allDifference同理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diff</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)); <span class="comment">// 去重</span></span><br><span class="line">  arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2)); <span class="comment">// 去重</span></span><br><span class="line">  newArr =arr1.<span class="title function_">concat</span>(arr2);</span><br><span class="line">  <span class="keyword">return</span> newArr.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span>=&gt;</span>!(arr1.<span class="title function_">includes</span>(x) &amp;&amp; arr2.<span class="title function_">includes</span>(x)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">diff</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// [4]</span></span><br></pre></td></tr></table></figure><h2 id="对数组中的项目进行排序"><a href="#对数组中的项目进行排序" class="headerlink" title="对数组中的项目进行排序"></a>对数组中的项目进行排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">52</span>, <span class="number">9</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">99</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="keyword">const</span> asc = [...numbers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(asc); <span class="comment">// [9, 16, 20, 23, 52, 99]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="keyword">const</span> desc = [...numbers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(desc); <span class="comment">// [99, 52, 23, 20, 16, 9]</span></span><br></pre></td></tr></table></figure><h3 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><ul><li>实现原理<ul><li>数组中有 n 个数，比较每相邻两个数，如果前者大于后者，就把两个数交换位置；这样一来，第一轮就可以选出一个最大的数放在最后面；那么经过 n-1（数组的 length - 1） 轮，就完成了所有数的排序。<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/sort%E6%8E%92%E5%BA%8F.gif" alt="sort排序"></li></ul></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> max = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; max; j++) &#123;</span><br><span class="line">    <span class="comment">// 声明一个变量，作为标志位</span></span><br><span class="line">    <span class="keyword">var</span> done = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max - j; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">        arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">        done = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (done) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bubbleSort</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、外层 for 循环控制循环次数</span></span><br><span class="line"><span class="comment">// 2、内层 for 循环进行两数交换，找每次的最大数，排到最后</span></span><br><span class="line"><span class="comment">// 3、设置一个标志位，减少不必要的循环</span></span><br></pre></td></tr></table></figure><h2 id="数组对象树结构的筛选"><a href="#数组对象树结构的筛选" class="headerlink" title="数组对象树结构的筛选"></a>数组对象树结构的筛选</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">filterTree</span>(<span class="params">nodes, query</span>) &#123;</span><br><span class="line">  <span class="comment">// 条件就是节点的title过滤关键字</span></span><br><span class="line">  <span class="keyword">let</span> predicate = <span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">title</span>.<span class="title function_">includes</span>(query)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 结束递归的条件</span></span><br><span class="line">  <span class="keyword">if</span> (!(nodes &amp;&amp; nodes.<span class="property">length</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> newChildren = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> nodes) &#123;</span><br><span class="line">    <span class="comment">// 一、带父节点     以下两个条件任何一个成立，当前节点都应该加入到新子节点集中</span></span><br><span class="line">    <span class="comment">//  1. 子孙节点中存在符合条件的，即 subs 数组中有值</span></span><br><span class="line">    <span class="comment">//  2. 自己本身符合条件</span></span><br><span class="line">    <span class="keyword">let</span> subs = <span class="variable language_">this</span>.<span class="title function_">filterTree</span>(node.<span class="property">children</span>, query);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">predicate</span>(node)) &#123;</span><br><span class="line">      newChildren.<span class="title function_">push</span>(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subs &amp;&amp; subs.<span class="property">length</span>) &#123;</span><br><span class="line">      node.<span class="property">children</span> = subs;</span><br><span class="line">      newChildren.<span class="title function_">push</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 二、不带父节点     以下只需要考虑自身的节点满足条件即可,不用带上父节点</span></span><br><span class="line">    <span class="comment">// if (predicate(node)) &#123;</span></span><br><span class="line">    <span class="comment">//   newChildren.push(node);</span></span><br><span class="line">    <span class="comment">//   node.children = this.filterTree(node.children, query);</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//   newChildren.push(...this.filterTree(node.children, query));</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newChildren.<span class="property">length</span> ? newChildren : [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的柯里化函数示例</title>
      <link href="/2021/04/19/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B/"/>
      <url>/2021/04/19/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是柯里化"><a href="#什么是柯里化" class="headerlink" title="什么是柯里化"></a>什么是柯里化</h1><ul><li>柯里化就是把一个多参数的函数转换为一系列只带单个参数的函数</li></ul><h2 id="未柯里化前的函数"><a href="#未柯里化前的函数" class="headerlink" title="未柯里化前的函数"></a>未柯里化前的函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b * c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">multiply</span>(<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="柯里化后的函数"><a href="#柯里化后的函数" class="headerlink" title="柯里化后的函数"></a>柯里化后的函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a * b * c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">multiply</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="柯里化过程"><a href="#柯里化过程" class="headerlink" title="柯里化过程"></a>柯里化过程</h2><ul><li>将 <code>multiply(1，2，3)</code> 函数调用转换为 <code>multiply(1)(2)(3)</code> 调用</li><li>拆分<code>multiply(1)(2)(3)</code>便于理解<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiply1 = <span class="title function_">multiplytiply</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> multiply2 = <span class="title function_">multiply1</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> multiply3 = <span class="title function_">multiply2</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(multiply3); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令速查表</title>
      <link href="/2021/04/15/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
      <url>/2021/04/15/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>|Tips|        |<br>|:—-|  ——-  |<br>|master： |默认开发分支|Head：默认开发分支的指针（快照）|<br>|origin： |默认远程版本库|Head^：Head的父提交|</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>|创建版本库|        |<br>|:—-|  ——-  |<br>|$ git clone <url>|#克隆远程版本库|<br>|$ git init|#初始化本地版本库|</p><h2 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h2><p>|修改和提交|        |<br>|:—-|  ——-  |<br>|$ git status|#查看当前修改状况|<br>|$ git diff|#查看变更的内容|<br>|$ git add .|#把所有修改的文件添加到缓存（跟踪文件）|<br>|$ git add <file>|#把指定的文件添加到缓存|<br>|$ git mv <old_file> <new_file>|#修改文件名|<br>|$ git rm <file>|#删除文件|<br>|$ git rm –cached <file>|#停止跟踪文件但不删除|<br>|$ git commit -m “message”|#提交所有更新过的文件|<br>|$ git commit –amend|#修改最后一次提交|</p><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p>|查看提交历史|        |<br>|:—-|  ——-  |<br>|$ git log|#查看提交历史|<br>|$ git log -p <file>|#查看指定文件提交历史|<br>|$ git blame <file>|#以列表的方式查看指定文件提交历史|</p><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p>|撤销|        |<br>|:—-|  ——-  |<br>|$ git reset –hard HEAD|#撤销工作目录中所有未提交文件的修改内容|<br>|$ git checkout HEAD <file>|#撤销指定未提交文件的修改内容|<br>|$ git revert <commit>|#撤销指定的提交|</p><h2 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h2><p>|分支与标签|        |<br>|:—-|  ——-  |<br>|$ git branch|#显示所有本地分支|<br>|$ git branch -r|#显示所有远程分支|<br>|$ git branch -a|#显示所有本地和远程分支|<br>|$ git checkout &lt;branch&#x2F;tag&gt;|#切换到指定分支或标签|<br>|$ git branch <new_branch>|#创建新分支|<br>|$ git checkout -b <new_branch>|#创建并切换到新分支|<br>|$ git branch -d <branch>|#删除本地分支|<br>|$ git tag|#显示所有本地标签<br>|$ git tag <tagname>|#基于最新提交创建标签|<br>|$ git tag -d <tagname>|#删除标签|</p><h2 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h2><p>|合并与衍合|        |<br>|:—-|  ——-  |<br>|$ git merge <branch>|#合并指定分支到当前分支|<br>|$ git rebase <branch>|#衍合指定分支到当前分支|</p><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><p>|远程操作|        |<br>|:—-|  ——-  |<br>|$ git remote -v|#查看远程版本库信息|<br>|$ git remote show <remote>|#查看指定远程版本库信息|<br>|$ git remote add <remote> <url>|#添加远程版本库|<br>|$ git fetch <remote>|#从远程库获取代码|<br>|$ git pull <remote> <branch>|#从远程库拉去代码并快速合并|<br>|$ git push <remote> <branch>|#上传代码到远程库并快速合并|<br>|$ git push <remote> -d &lt;branch&#x2F;tag&gt;|#删除远程分支或标签|<br>|$ git push –tags|#上传所有标签|</p><h2 id="同步远程已删除的分支"><a href="#同步远程已删除的分支" class="headerlink" title="同步远程已删除的分支"></a>同步远程已删除的分支</h2><p>|同步远程已删除的分支|        |<br>|:—-|  ——-  |<br>|$ git branch -a|#查看本地分支和远程所有分支|<br>|$ git remote show origin|#查看本地分支和追踪情况|<br>|$ git remote prune origin|#同步远程已删除分支|</p><h2 id="常见指令参数说明"><a href="#常见指令参数说明" class="headerlink" title="常见指令参数说明"></a>常见指令参数说明</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地的分支版本上传到远程仓库</span></span><br><span class="line"><span class="comment"># 其中参数 -u 创建了一个上游跟踪连接</span></span><br><span class="line"><span class="comment"># 第一次推送某个新分支到远程仓库时，它用来将本地新分支同步到线上</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> git push <span class="literal">-u</span> origin master</span><br></pre></td></tr></table></figure><h2 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h2><ul><li>git合并特定commits到另一个分支<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git checkout &lt;branch&gt;</span><br><span class="line"><span class="variable">$</span> git cherry<span class="literal">-pick</span> &lt;commit&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 版本控制工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Element-Ui封装一个滑动组件</title>
      <link href="/2021/04/08/%E7%94%A8Element-Ui%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E7%BB%84%E4%BB%B6/"/>
      <url>/2021/04/08/%E7%94%A8Element-Ui%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件"><a href="#基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件" class="headerlink" title="基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件"></a>基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件</h2><ul><li>主要用于登录验证</li><li>纯前端验证（滑着过瘾）目前无法与后端进行校验</li><li>封装还可以优化</li><li>直接看代码吧</li></ul><h3 id="slider组件"><a href="#slider组件" class="headerlink" title="slider组件"></a>slider组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slider/index.vue&#x27;</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-slider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;slider&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&quot;slider&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:show-tooltip</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">change</span>=<span class="string">&quot;sliderChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:disabled</span>=<span class="string">&quot;sliderDisabled&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">el-slider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-text-before&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;barText&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;noReset?&#x27;run run-no-slider&#x27;:&#x27;run&#x27;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!isSuccess&quot;</span>&gt;</span>拖动滑块验证<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;color:#fff;&quot;</span>&gt;</span>验证通过<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;slider&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">reset</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">noReset</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">value</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isSuccess</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">sliderDisabled</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (val) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">sliderReset</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">noReset</span>(<span class="params">val</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span>(val)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">bar</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;no-slider&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">bar</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;no-slider&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">value</span>(<span class="params">val</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;value&quot;</span>,val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">slider</span>.<span class="property">$refs</span>.<span class="property">button1</span>.<span class="property">$refs</span>.<span class="property">button</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// this.$refs.slider.$refs.button1.$refs.button.style = &quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">slider</span>.<span class="property">$refs</span>.<span class="property">button1</span>.<span class="property">$refs</span>.<span class="property">button</span>.<span class="property">lastChild</span>.<span class="property">innerHTML</span> =</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&quot;&lt;i class=&#x27;el-icon-d-arrow-right icon-arrow-right&#x27;&gt;&lt;/i&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sliderChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (val === <span class="number">100</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">sliderSucceed</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">sliderReset</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sliderSucceed</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isSuccess</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">slider</span>.<span class="property">$refs</span>.<span class="property">button1</span>.<span class="property">$refs</span>.<span class="property">button</span>.<span class="property">lastChild</span>.<span class="property">innerHTML</span> =</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;&lt;i class=&#x27;el-icon-success icon-success&#x27;&gt;&lt;/i&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">sliderDisabled</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sliderReset</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isSuccess</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">value</span> = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">sliderDisabled</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:reset&quot;</span>, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">slider</span>.<span class="property">$refs</span>.<span class="property">button1</span>.<span class="property">$refs</span>.<span class="property">button</span>.<span class="property">lastChild</span>.<span class="property">innerHTML</span> =</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;&lt;i class=&#x27;el-icon-d-arrow-right icon-arrow-right&#x27;&gt;&lt;/i&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">$color: #67c23a;</span></span><br><span class="line"><span class="language-xml">// $color: #409EFF;</span></span><br><span class="line"><span class="language-xml">$slider_button_width: 60px;</span></span><br><span class="line"><span class="language-xml">$slider_button_height: 40px;</span></span><br><span class="line"><span class="language-xml">.bar &#123;</span></span><br><span class="line"><span class="language-xml">  position: relative;</span></span><br><span class="line"><span class="language-xml">  width: 100%;</span></span><br><span class="line"><span class="language-xml">  background-color: #e4e7ed;</span></span><br><span class="line"><span class="language-xml">  border-radius: 3px;</span></span><br><span class="line"><span class="language-xml">  .slider-text-before &#123;</span></span><br><span class="line"><span class="language-xml">    position: absolute;</span></span><br><span class="line"><span class="language-xml">    left: 50%;</span></span><br><span class="line"><span class="language-xml">    top: 50%;</span></span><br><span class="line"><span class="language-xml">    transform: translate(-50%, -50%);</span></span><br><span class="line"><span class="language-xml">    font-size: 16px;</span></span><br><span class="line"><span class="language-xml">    letter-spacing: 2px;</span></span><br><span class="line"><span class="language-xml">    user-select: none;</span></span><br><span class="line"><span class="language-xml">    .run &#123;</span></span><br><span class="line"><span class="language-xml">      padding: 0 30px;</span></span><br><span class="line"><span class="language-xml">      color: transparent;</span></span><br><span class="line"><span class="language-xml">      -moz-user-select: none;</span></span><br><span class="line"><span class="language-xml">      -webkit-user-select: none;</span></span><br><span class="line"><span class="language-xml">      user-select: none;</span></span><br><span class="line"><span class="language-xml">      -o-user-select: none;</span></span><br><span class="line"><span class="language-xml">      -ms-user-select: none;</span></span><br><span class="line"><span class="language-xml">      background: -webkit-gradient(</span></span><br><span class="line"><span class="language-xml">        linear,</span></span><br><span class="line"><span class="language-xml">        left top,</span></span><br><span class="line"><span class="language-xml">        right top,</span></span><br><span class="line"><span class="language-xml">        color-stop(0, #333),</span></span><br><span class="line"><span class="language-xml">        color-stop(0.3, #333),</span></span><br><span class="line"><span class="language-xml">        color-stop(0.5, #fff),</span></span><br><span class="line"><span class="language-xml">        color-stop(0.7, #333),</span></span><br><span class="line"><span class="language-xml">        color-stop(1, #333)</span></span><br><span class="line"><span class="language-xml">      );</span></span><br><span class="line"><span class="language-xml">      -webkit-background-clip: text;</span></span><br><span class="line"><span class="language-xml">      -webkit-text-fill-color: transparent;</span></span><br><span class="line"><span class="language-xml">      -webkit-text-size-adjust: none;</span></span><br><span class="line"><span class="language-xml">      -webkit-animation: slidetounlock 3s infinite;</span></span><br><span class="line"><span class="language-xml">      animation: slidetounlock 3s infinite;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    .run-no-slider&#123;</span></span><br><span class="line"><span class="language-xml">      background: -webkit-gradient(</span></span><br><span class="line"><span class="language-xml">        linear,</span></span><br><span class="line"><span class="language-xml">        left top,</span></span><br><span class="line"><span class="language-xml">        right top,</span></span><br><span class="line"><span class="language-xml">        color-stop(0, #F56C6C),</span></span><br><span class="line"><span class="language-xml">        color-stop(0.3, #F56C6C),</span></span><br><span class="line"><span class="language-xml">        color-stop(0.5, #fff),</span></span><br><span class="line"><span class="language-xml">        color-stop(0.7, #F56C6C),</span></span><br><span class="line"><span class="language-xml">        color-stop(1, #F56C6C)</span></span><br><span class="line"><span class="language-xml">      );</span></span><br><span class="line"><span class="language-xml">      -webkit-background-clip: text;</span></span><br><span class="line"><span class="language-xml">      -webkit-text-fill-color: transparent;</span></span><br><span class="line"><span class="language-xml">      -webkit-text-size-adjust: none;</span></span><br><span class="line"><span class="language-xml">      -webkit-animation: slidetounlock 3s infinite;</span></span><br><span class="line"><span class="language-xml">      animation: slidetounlock 3s infinite;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">  .slider-text-after &#123;</span></span><br><span class="line"><span class="language-xml">    position: absolute;</span></span><br><span class="line"><span class="language-xml">    left: 50%;</span></span><br><span class="line"><span class="language-xml">    top: 50%;</span></span><br><span class="line"><span class="language-xml">    transform: translate(-50%, -50%);</span></span><br><span class="line"><span class="language-xml">    z-index: 10;</span></span><br><span class="line"><span class="language-xml">    color: #fff;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">  .slider &#123;</span></span><br><span class="line"><span class="language-xml">    width: calc(100% - #&#123;$slider_button_width&#125;);</span></span><br><span class="line"><span class="language-xml">    /deep/.el-slider__runway &#123;</span></span><br><span class="line"><span class="language-xml">      margin: 0;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.el-slider__bar &#123;</span></span><br><span class="line"><span class="language-xml">      height: 40px;</span></span><br><span class="line"><span class="language-xml">      background-color: $color;</span></span><br><span class="line"><span class="language-xml">      border-top-left-radius: 0px;</span></span><br><span class="line"><span class="language-xml">      border-bottom-left-radius: 0px;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.el-slider__runway &#123;</span></span><br><span class="line"><span class="language-xml">      height: 40px;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.el-slider__button-wrapper &#123;</span></span><br><span class="line"><span class="language-xml">      top: 0;</span></span><br><span class="line"><span class="language-xml">      width: $slider_button_width;</span></span><br><span class="line"><span class="language-xml">      height: 40px;</span></span><br><span class="line"><span class="language-xml">      margin-left: ($slider_button_width/2);</span></span><br><span class="line"><span class="language-xml">      :hover &#123;</span></span><br><span class="line"><span class="language-xml">        transform: none;</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.el-slider__button &#123;</span></span><br><span class="line"><span class="language-xml">      width: $slider_button_width;</span></span><br><span class="line"><span class="language-xml">      height: 40px;</span></span><br><span class="line"><span class="language-xml">      border-radius: 0;</span></span><br><span class="line"><span class="language-xml">      border-color: #dcdfe6;</span></span><br><span class="line"><span class="language-xml">      :hover &#123;</span></span><br><span class="line"><span class="language-xml">        transform: none;</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.el-slider__button.dragging,</span></span><br><span class="line"><span class="language-xml">    .el-slider__button.hover,</span></span><br><span class="line"><span class="language-xml">    .el-slider__button:hover &#123;</span></span><br><span class="line"><span class="language-xml">      -webkit-transform: none !important;</span></span><br><span class="line"><span class="language-xml">      transform: none !important;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.el-slider__runway.disabled .el-slider__button:hover &#123;</span></span><br><span class="line"><span class="language-xml">      cursor: grab !important;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.icon-arrow-right &#123;</span></span><br><span class="line"><span class="language-xml">      line-height: ($slider_button_height - 4px);</span></span><br><span class="line"><span class="language-xml">      font-size: 18px;</span></span><br><span class="line"><span class="language-xml">      color: #4c4c4c;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    /deep/.icon-success &#123;</span></span><br><span class="line"><span class="language-xml">      line-height: ($slider_button_height - 4px);</span></span><br><span class="line"><span class="language-xml">      font-size: 20px;</span></span><br><span class="line"><span class="language-xml">      color: $color;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">@-webkit-keyframes slidetounlock &#123;</span></span><br><span class="line"><span class="language-xml">  from &#123;</span></span><br><span class="line"><span class="language-xml">    background-position: -70px 100%;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">  to &#123;</span></span><br><span class="line"><span class="language-xml">    background-position: 80px 0;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">.no-slider&#123;</span></span><br><span class="line"><span class="language-xml">  animation: shake 800ms ease-in-out;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">@keyframes shake &#123;</span></span><br><span class="line"><span class="language-xml">    10%, 90% &#123; transform: translate3d(-1px, 0, 0); &#125;</span></span><br><span class="line"><span class="language-xml">    20%, 80% &#123; transform: translate3d(+2px, 0, 0); &#125;</span></span><br><span class="line"><span class="language-xml">    30%, 70% &#123; transform: translate3d(-4px, 0, 0); &#125;</span></span><br><span class="line"><span class="language-xml">    40%, 60% &#123; transform: translate3d(+4px, 0, 0); &#125;</span></span><br><span class="line"><span class="language-xml">    50% &#123; transform: translate3d(-4px, 0, 0); &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> slider <span class="keyword">from</span> <span class="string">&#x27;./slider&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"> &lt;slider v-<span class="attr">bind</span>:reset.<span class="property">sync</span>=<span class="string">&quot;isResetSlider&quot;</span> :noReset=<span class="string">&quot;isNoReset&quot;</span> @value=<span class="string">&quot;sliderValue&quot;</span> @success=<span class="string">&quot;sliderSuccess&quot;</span>&gt;&lt;/slider&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">  slider</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isResetSlider</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isSeccess</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">sliderVal</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">isNoReset</span>: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 滑动验证</span></span><br><span class="line">  <span class="title function_">sliderSuccess</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isSeccess</span> = val</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">sliderValue</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sliderVal</span> = val</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sliderVal</span> == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isNoReset</span> = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isNoReset</span> = <span class="literal">false</span></span><br><span class="line">      &#125;, <span class="number">900</span>);</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isSeccess</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;submit&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isResetSlider</span> = <span class="literal">true</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isSeccess</span> = <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请滑动滑块验证&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果截图</p><ul><li>滑动验证-未滑动</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-%E6%9C%AA%E6%BB%91%E5%8A%A8.jpg" alt="滑动验证-未滑动"><br>滑动验证-未滑动</p><ul><li>滑动验证-滑动中</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-%E6%BB%91%E5%8A%A8%E4%B8%AD.jpg" alt="滑动验证-滑动中"><br>滑动验证-滑动中</p><ul><li>滑动验证-滑动成功</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-%E6%BB%91%E5%8A%A8%E6%88%90%E5%8A%9F.jpg" alt="滑动验证-滑动成功"><br>滑动验证-滑动成功</p><ul><li>滑动验证GIF</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-DIF.gif" alt="滑动验证GIF"><br>滑动验证GIF</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端1px问题</title>
      <link href="/2021/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/"/>
      <url>/2021/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么会出现？"><a href="#为什么会出现？" class="headerlink" title="为什么会出现？"></a>为什么会出现？</h1><ul><li>首先了解两个像素：设备的 物理像素[设备像素] &amp; 虚拟像素[CSS像素] &amp; 逻辑像素[设备独立像素]<ul><li>物理像素：移动设备出厂时，不同设备的屏幕自带的不同屏幕像素，也称硬件像素；</li><li>虚拟像素：即css中记录的像素</li><li>逻辑像素：计算机坐标系统中的一个点，是由程序使用的虚拟像素(比如: CSS 像素)，这个点没有固定大小，越小越清晰，可由相关系统转换为物理像素</li></ul></li><li>devicePixelRatio（DPR）：反应css中的像素与设备的像素比<ul><li>DPR为设备像素（物理像素）和设备独立像素（逻辑像素）的比例</li><li>DPR &#x3D; 物理像素 &#x2F; 独立设备像素</li></ul></li><li>1px变粗的原因：<ul><li>viewport的设置和屏幕物理分辨率是按比例而不是相同的. 移动端window对象有个devicePixelRatio属性,它表示设备物理像素和css像素的比例, 在retina屏的iphone手机上, 这个值为2或3,css里写的1px长度映射到物理像素上就有2px或3px那么长</li></ul></li></ul><h1 id="如何解决（最佳解决方案）？"><a href="#如何解决（最佳解决方案）？" class="headerlink" title="如何解决（最佳解决方案）？"></a>如何解决（最佳解决方案）？</h1><ul><li><p>transform: scale(0.5) 方案</p><ul><li>设置height: 1px，根据媒体查询结合transform缩放为相应尺寸  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#000</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">    -webkit-<span class="attribute">transform-origin</span>:<span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>用::after和::befor,设置border-bottom：1px solid #000,然后在缩放-webkit-transform: scaleY(0.5);可以实现两根边线的需求  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>用::after设置border：1px solid #000; width:200%; height:200%,然后再缩放scaleY(0.5); 优点可以实现圆角，京东就是这么实现的，缺点是按钮添加active比较麻烦  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bfbfbf</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br><span class="line">    -webkit-<span class="attribute">transform-origin</span>: top left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>媒体查询 + transfrom  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 2倍屏 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2.0</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-bottom</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3倍屏 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3.0</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-bottom</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.33</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.33</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端1px </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速给类、函数和变量命名</title>
      <link href="/2021/03/26/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%BB%99%E7%B1%BB%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D/"/>
      <url>/2021/03/26/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%BB%99%E7%B1%BB%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="A-HC-LC-命名法-——-P-A-HC-LC是什么"><a href="#A-HC-LC-命名法-——-P-A-HC-LC是什么" class="headerlink" title="A&#x2F;HC&#x2F;LC 命名法 —— (P)A&#x2F;HC&#x2F;LC是什么"></a>A&#x2F;HC&#x2F;LC 命名法 —— (P)A&#x2F;HC&#x2F;LC是什么</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prefix? (P) + <span class="title function_">action</span> (A) + high <span class="title function_">context</span> (<span class="variable constant_">HC</span>) + low context? (<span class="variable constant_">LC</span>)</span><br><span class="line"><span class="comment">// 前缀 + 动作 + 高语境 + 低语境</span></span><br></pre></td></tr></table></figure><h2 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h2><ul><li>prefix（前缀）增加函数的可读性</li></ul><h3 id="is-是什么"><a href="#is-是什么" class="headerlink" title="- is (是什么)"></a>- is (是什么)</h3><ul><li>描述当前上下文（语境）的特征或状态,通常为布尔值。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isBlue = ( color === <span class="string">&#x27;blue&#x27;</span> ) <span class="comment">// 特征</span></span><br><span class="line"><span class="keyword">const</span> isPresent = <span class="literal">true</span> <span class="comment">// 状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isBlue &amp;&amp; isPresent) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(‘<span class="title class_">Blue</span> is present’)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="has-有什么"><a href="#has-有什么" class="headerlink" title="- has (有什么)"></a>- has (有什么)</h3><ul><li>描述当前上下文（语境）是否具有某个特定的值或状态，通常为布尔值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">const</span> isProductsExist = (productsCount &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> areProductsPresent = (productsCount &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="keyword">const</span> hasProducts = (productsCount &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="should-应该做什么"><a href="#should-应该做什么" class="headerlink" title="- should (应该做什么)"></a>- should (应该做什么)</h3><ul><li>映射具有明确动作的条件语句，通常为布尔值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shouldUpdateUrl</span>(<span class="params">url, expectedUrl</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (url !== expectedUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的核心是-Actions"><a href="#函数的核心是-Actions" class="headerlink" title="函数的核心是 Actions"></a>函数的核心是 <code>Actions</code></h2><ul><li>Actions（动作），是函数名的动词部分，描述这个函数要做什么</li></ul><h3 id="get-获取数据"><a href="#get-获取数据" class="headerlink" title="- get (获取数据)"></a>- get (获取数据)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速获取内部数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFruitsCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fruits</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set-设置数据"><a href="#set-设置数据" class="headerlink" title="- set (设置数据)"></a>- set (设置数据)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将某个变量的值由A变为B</span></span><br><span class="line"><span class="keyword">let</span> fruits = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setFruits</span>(<span class="params">nextFruits</span>) &#123;</span><br><span class="line">  fruits = nextFruits</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setFruits</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="reset-还原数据"><a href="#reset-还原数据" class="headerlink" title="- reset (还原数据)"></a>- reset (还原数据)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将某个变量的值设为其初始值或状态</span></span><br><span class="line"><span class="keyword">let</span> initialFruits = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> fruits = initialFruits</span><br><span class="line"><span class="title function_">setFruits</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits) <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetFruits</span>(<span class="params"></span>) &#123;</span><br><span class="line">  fruits = initialFruits</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">resetFruits</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="fetch-请求数据"><a href="#fetch-请求数据" class="headerlink" title="- fetch (请求数据)"></a>- fetch (请求数据)</h3><ul><li>通常为一个比较耗时的操作，如：异步请求<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchPosts</span>(<span class="params">postCount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(‘<span class="attr">https</span>:<span class="comment">//api.dev/posts&#x27;, &#123;…&#125;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="remove-移除数据"><a href="#remove-移除数据" class="headerlink" title="- remove (移除数据)"></a>- remove (移除数据)</h3><ul><li>逻辑上的删除，数据可能只是被移动某个特定的地方了</li><li>假设页面有个搜索过滤器，可以通过 <code>removeFilter</code> 来移除过滤器的某个值，而不是 <code>deleteFilter</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeFilter</span>(<span class="params">filterName, filters</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> filters.<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span> name !== filterName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> selectedFilters = [<span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;availability&#x27;</span>, <span class="string">&#x27;size&#x27;</span>]</span><br><span class="line"><span class="title function_">removeFilter</span>(<span class="string">&#x27;price&#x27;</span>, selectedFilters)</span><br></pre></td></tr></table></figure></li></ul><h3 id="delete-删除数据"><a href="#delete-删除数据" class="headerlink" title="- delete (删除数据)"></a>- delete (删除数据)</h3><ul><li>将某个数据彻底删除, 是物理上的删除.</li><li>假设你是一个文章审核员, 看到一篇不合规的文章, 当你想彻底删除这篇文章并点击 删除文章 按钮的时候, 执行的应该是一个 deletePost 的删除动作, 而不是 removePost<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deletePost</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> database.<span class="title function_">find</span>(&#123; id &#125;).<span class="title function_">delete</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="compose-组合数据"><a href="#compose-组合数据" class="headerlink" title="- compose (组合数据)"></a>- compose (组合数据)</h3><ul><li>基于现有的数据来创建一个新的数据, 适用于字符串、对象和函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">composePageUrl</span>(<span class="params">pageName, pageId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $&#123;pageName.<span class="title function_">toLowerCase</span>()&#125;-$&#123;pageId&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="handle-处理数据"><a href="#handle-处理数据" class="headerlink" title="- handle (处理数据)"></a>- handle (处理数据)</h3><ul><li>处理某个动作, 通常用来声明一个回调函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleLinkClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Clicked a link!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleLinkClick)</span><br></pre></td></tr></table></figure></li></ul><h2 id="最后是-Context"><a href="#最后是-Context" class="headerlink" title="最后是 Context"></a>最后是 Context</h2><ul><li>context 是一个域, 指代当前函数的执行环境</li><li>函数通常是处理某件事的一个动作, 所以注明函数所属的域, 或者至少注明一个预期的数据类型是很重要的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基于内置方法的纯函数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">predicate, list</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> list.<span class="title function_">filter</span>(predicate)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 确切的表明这个函数是处理 posts 的 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRecentPosts</span>(<span class="params">posts</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">filter</span>(posts, <span class="function">(<span class="params">post</span>) =&gt;</span> post.<span class="property">date</span> === <span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>一些编程语言允许你省略 context, 比如在 JavaScript 中 filter 方法只存在于数组上, 所以没必要给函数添加 context.</li></ul><h2 id="综上总结"><a href="#综上总结" class="headerlink" title="综上总结"></a>综上总结</h2><table><thead><tr><th align="left">Name</th><th>Prefix</th><th>Action(A)</th><th>High context(HC)</th><th>Low context(LC)</th></tr></thead><tbody><tr><td align="left">getPost</td><td></td><td>get</td><td>Post</td><td></td></tr><tr><td align="left">getPostData</td><td></td><td>get</td><td>Post</td><td>Data</td></tr><tr><td align="left">handleClickOutside</td><td></td><td>handle</td><td>Click</td><td>Outside</td></tr><tr><td align="left">shouldDisplayMessage</td><td>should</td><td>Display</td><td>Message</td><td></td></tr></tbody></table><h2 id="提高代码可读性的变量命名技巧参考"><a href="#提高代码可读性的变量命名技巧参考" class="headerlink" title="提高代码可读性的变量命名技巧参考"></a>提高代码可读性的变量命名技巧参考</h2><ol><li>遵循 S-I-D 原则<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">5</span> <span class="comment">// &quot;a&quot; 没有什么含义</span></span><br><span class="line"><span class="keyword">const</span> isPaginatable = (postsCount &gt; <span class="number">10</span>) <span class="comment">// &quot;Paginatable&quot; 听起来很不自然</span></span><br><span class="line"><span class="keyword">const</span> shouldPaginatize = (postsCount &gt; <span class="number">10</span>) <span class="comment">// &quot;Paginatize&quot; 编造一个动词更加荒谬!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="keyword">const</span> postsCount = <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> hasPagination = (postsCount &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> shouldDisplayPagination = (postsCount &gt; <span class="number">10</span>) <span class="comment">// alternatively</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>避免缩写</li><li>不要使用缩写形式, 这会降低代码可读性. 起一个简短并且语义化的名称可能有点难度, 但是不要让这成为你使用缩写的借口<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onItmClk</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onItemClick</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li>避免重复的上下文</li><li>如果命名中的 context 存在与否不会降低其可读性的话, 最好还是移除它:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MenuItem</span> &#123;</span><br><span class="line">  <span class="comment">/* 命名中的 &quot;MenuItem&quot; 与类名的域重复 */</span></span><br><span class="line">  handleMenuItemClick = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 去掉 &quot;MenuItem&quot;, 看起来更简洁 */</span></span><br><span class="line">  handleClick = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>应该映射预期结果<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">const</span> isEnabled = (itemsCount &gt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">disabled</span>=<span class="string">&#123;!isEnabled&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="keyword">const</span> isDisabled = (itemsCount &lt;= <span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">disabled</span>=<span class="string">&#123;isDisabled&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>考虑单数和复数形式</li><li>因为一个变量可能拥有单个或多个值, 所以命名的时候也要考虑单数和复数形式.</li></ul><h2 id="参考原文链接"><a href="#参考原文链接" class="headerlink" title="参考原文链接"></a><a href="https://betterprogramming.pub/a-useful-framework-for-naming-your-classes-functions-and-variables-e7d186e3189f">参考原文链接</a></h2><h1 id="一些常用命名汇总（摘抄）"><a href="#一些常用命名汇总（摘抄）" class="headerlink" title="一些常用命名汇总（摘抄）"></a>一些常用命名汇总（<a href="https://www.aug.plus/archives/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83">摘抄</a>）</h1><table><thead><tr><th align="left">动词</th><th>含义</th><th>返回值</th></tr></thead><tbody><tr><td align="left">can</td><td>判断是否可执行某个动作（权限）</td><td>布尔值，true：可执行；false：不可执行</td></tr><tr><td align="left">has</td><td>判断是否含有某个值</td><td>布尔值，true：含有；false：不含有</td></tr><tr><td align="left">is</td><td>判断是否为某个值</td><td>布尔值，true：为某个值；false：不为某个值</td></tr><tr><td align="left">get</td><td>获取某个值</td><td>任何值</td></tr><tr><td align="left">set</td><td>设置某个值</td><td>无返回值</td></tr><tr><td align="left">load</td><td>加载某些数据</td><td>视场景定</td></tr><tr><td align="left">search</td><td>搜索某些数据</td><td>视场景定</td></tr><tr><td align="left">validate</td><td>校验、验证某些规则</td><td>无返回值</td></tr><tr><td align="left">query</td><td>查询某些数据</td><td>视场景定</td></tr><tr><td align="left">add</td><td>增加、添加数据</td><td>无返回值</td></tr><tr><td align="left">create</td><td>创建数据</td><td>无返回值</td></tr><tr><td align="left">update</td><td>更新某个数据</td><td>无返回值</td></tr><tr><td align="left">modify</td><td>变更某个数据</td><td>无返回值</td></tr><tr><td align="left">edit</td><td>编辑某个数据</td><td>无返回值</td></tr><tr><td align="left">delete</td><td>删除某个数据</td><td>无返回值</td></tr><tr><td align="left">initialize</td><td>初始化某个数据</td><td>无返回值</td></tr><tr><td align="left">select</td><td>选择某个数据</td><td>视场景定</td></tr><tr><td align="left">cancel</td><td>取消某个操作</td><td>无返回值</td></tr><tr><td align="left">confirm</td><td>确认某个操作</td><td>无返回值</td></tr><tr><td align="left">click</td><td>点击某个元素</td><td>视场景定</td></tr><tr><td align="left">submit</td><td>提交某个数据</td><td>无返回值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 项目规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本功能及配置</title>
      <link href="/2021/02/26/Nginx%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/02/26/Nginx%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx的基本功能及配置"><a href="#Nginx的基本功能及配置" class="headerlink" title="Nginx的基本功能及配置"></a>Nginx的基本功能及配置</h1><h2 id="查找-Nginx-进程-安装目录"><a href="#查找-Nginx-进程-安装目录" class="headerlink" title="查找 Nginx 进程&#x2F;安装目录"></a>查找 Nginx 进程&#x2F;安装目录</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ps</span> aux | grep nginx</span><br></pre></td></tr></table></figure><h2 id="查看配置文件-nginx-conf-路径"><a href="#查看配置文件-nginx-conf-路径" class="headerlink" title="查看配置文件 nginx.conf 路径"></a>查看配置文件 nginx.conf 路径</h2><ul><li>条命令也可以用于检查配置文件是否正确<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx <span class="literal">-t</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="全局查找-Nginx-配置文件"><a href="#全局查找-Nginx-配置文件" class="headerlink" title="全局查找 Nginx 配置文件"></a>全局查找 Nginx 配置文件</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 / 根目录下查找文件名为 nginx.conf 的文件</span></span><br><span class="line">find / <span class="literal">-name</span> nginx.conf</span><br><span class="line"><span class="comment"># 从 /etc 目录下查找文件名为 nginx.conf 的文件</span></span><br><span class="line">find /etc <span class="literal">-name</span> nginx.conf</span><br></pre></td></tr></table></figure><h2 id="默认的-nginx-配置文件-nginx-conf-内容"><a href="#默认的-nginx-配置文件-nginx-conf-内容" class="headerlink" title="默认的 nginx 配置文件 nginx.conf 内容"></a>默认的 nginx 配置文件 nginx.conf 内容</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet<span class="literal">-stream</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx-文件结构"><a href="#nginx-文件结构" class="headerlink" title="nginx 文件结构"></a>nginx 文件结构</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">...              <span class="comment">#全局块</span></span><br><span class="line"></span><br><span class="line">events &#123;         <span class="comment">#events块</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      <span class="comment">#http块</span></span><br><span class="line">&#123;</span><br><span class="line">    ...   <span class="comment">#http全局块</span></span><br><span class="line">    server        <span class="comment">#server块</span></span><br><span class="line">    &#123; </span><br><span class="line">        ...       <span class="comment">#server全局块</span></span><br><span class="line">        location [<span class="type">PATTERN</span>]   <span class="comment">#location块</span></span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [<span class="type">PATTERN</span>] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     <span class="comment">#http全局块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 5、location块：配置请求的路由，以及各种页面的处理情况。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于typescript改造旧项目的一些坑</title>
      <link href="/2021/02/26/%E5%85%B3%E4%BA%8Etypescript%E6%94%B9%E9%80%A0%E6%97%A7%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2021/02/26/%E5%85%B3%E4%BA%8Etypescript%E6%94%B9%E9%80%A0%E6%97%A7%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="‘-‘-引入组件报红问题"><a href="#‘-‘-引入组件报红问题" class="headerlink" title="‘@&#x2F;‘ 引入组件报红问题"></a>‘@&#x2F;‘ 引入组件报红问题</h2><ul><li>使用 ‘@&#x2F;xxx&#x2F;xxx’ 引入组件，vetur报红 找不到module，但是可以正常运行问题</li><li>解决办法：1.把项目目录放工作区根目录；2.项目一定排列在第一位</li></ul><h2 id="引入第三方包报红"><a href="#引入第三方包报红" class="headerlink" title="引入第三方包报红"></a>引入第三方包报红</h2><ul><li>引入第三方库 报红找不到module，无法正常使用包，如qs、jQuery</li><li>解决办法1：使用@types进行包管理，然后正常引入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i @types/qs</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br></pre></td></tr></table></figure></li><li>解决办法2：有些包不能用@types管理，自己写声明 XX.d.ts  不推荐</li></ul><h2 id="router配置里引入component组件的时候必须添加-vue后缀"><a href="#router配置里引入component组件的时候必须添加-vue后缀" class="headerlink" title="router配置里引入component组件的时候必须添加.vue后缀"></a>router配置里引入component组件的时候必须添加.vue后缀</h2><h2 id="Element表单验证报红问题"><a href="#Element表单验证报红问题" class="headerlink" title="Element表单验证报红问题"></a>Element表单验证报红问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错信息如下</span></span><br><span class="line"><span class="comment">// Property &#x27;validate&#x27; does not exist on type &#x27;Vue | Element | Vue[] | Element[]&#x27;.</span></span><br><span class="line"><span class="comment">// Property &#x27;validate&#x27; does not exist on type &#x27;Vue&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span> &#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line">( <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loginForm</span> <span class="keyword">as</span> <span class="title class_">Form</span> ).<span class="title function_">validate</span>(<span class="function">(<span class="params">valid: boolean </span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不引入Form，把Form换成any也可以，但是typescript会报警告⚠</span></span><br></pre></td></tr></table></figure><ul><li>使用axios封装的请求，然后解构请求结果报错<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错信息</span></span><br><span class="line"><span class="comment">// Property &#x27;XXX&#x27; does not exist on type &#x27;AxiosResponse&lt;any&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line"><span class="comment">// 新建axios.d.ts文案，添加如下内容，重启项目</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;axios&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">AxiosInstance</span> &#123;</span><br><span class="line">    (<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;any&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@typescript/esline 报错 xxx_x is not <span class="keyword">in</span> camel <span class="keyword">case</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="关闭esline驼峰校验"><a href="#关闭esline驼峰校验" class="headerlink" title="关闭esline驼峰校验"></a>关闭esline驼峰校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在.eslinetrc.js中配置如下：</span></span><br><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&#x27;@typescript-eslint/camelcase&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TS使用”require”报错"><a href="#TS使用”require”报错" class="headerlink" title="TS使用”require”报错"></a>TS使用”require”报错</h2><ul><li>提示报错信息：Cannot find name ‘require’. Do you need to install type definitions for node? Try ‘npm i –save-dev @types&#x2F;node’</li><li>解决方案：<ul><li>1.安装@types&#x2F;node，npm i –save-dev @types&#x2F;node；</li><li>2.在tsconfig.json中的compilerOptions中的types添加”node”；</li><li>3.在使用require前面添加declare var require:any</li></ul></li></ul><h2 id="TS使用”this-xxx”报错"><a href="#TS使用”this-xxx”报错" class="headerlink" title="TS使用”this.xxx”报错"></a>TS使用”this.xxx”报错</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用&quot;this.$router.push(&quot;/xxx&quot;)&quot; =&gt; Property &#x27;$router&#x27; does not exist on type &#x27;Experiment&#x27;.</span></span><br><span class="line"><span class="comment">// 解决：</span></span><br><span class="line">(<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/xxx&quot;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mainVideo</span> =&gt; <span class="title class_">Property</span> <span class="string">&#x27;clientWidth&#x27;</span> does not exist on type <span class="string">&#x27;Vue | Element | Vue[] | Element[]&#x27;</span>.</span><br><span class="line"><span class="comment">// Property &#x27;clientWidth&#x27; does not exist on type &#x27;Vue&#x27;</span></span><br><span class="line"><span class="comment">// 解决：</span></span><br><span class="line">(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mainVideo</span> <span class="keyword">as</span> any).<span class="property">clientWidth</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3的setup函数</title>
      <link href="/2020/12/30/Vue3%E7%9A%84setup%E5%87%BD%E6%95%B0/"/>
      <url>/2020/12/30/Vue3%E7%9A%84setup%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h2><ul><li>setup用于定义变量和方法</li><li>ref用于声明简单数据类型，如：String Number Boolean</li><li>reactive用来声明复杂数据类型，如：Array Objec</li><li>是使用Composition API的入口<ul><li>Composition API的主要思想，将它们定义为从新的setup函数返回的JavaScript变量，而不是从组件的功能（如：data、methods、computed等）定义为对象的属性</li><li>Composition API 代替 Vue Mixins （解决命名冲突、隐式依赖、代码重用等问题）</li></ul></li><li>在生命周期beforeCreate前被调用（执行setup时，组件实例尚未被创建）</li><li>可以返回一个对象，这个对象的属性会被合并到渲染上下文，可以在模板中直接使用</li><li>也可以返回一个渲染函数，如：return () &#x3D;&gt; h(‘div’, [count.value, object.foo])</li><li>在setup中没有this</li><li>接收props作为第一个参数，如果props为对象，可通过watchEffect监视其变化</li><li>接收context作为第二个参数，这个对象包含attrs、slots、emit三个属性</li><li>context非响应式，可以直接解构使用 setup(props,{attr,slots,emit}){}</li><li>执行setup函数时可以访问：props、attrs、slots、emit，不可以访问：data、computed、methods<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, toRefs, isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> defalut &#123;</span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"> props, context </span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>); <span class="comment">// 不能直接解构</span></span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = <span class="title function_">toRefs</span>(props)</span><br><span class="line">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 声明简单数据类型</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">valeu</span>); </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(count)); <span class="comment">// 判断是否为ref创建出来的对象</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title function_">reactive</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]) <span class="comment">// 声明复杂数据类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">addOne</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      count.<span class="property">value</span>++ <span class="comment">// 想改变或获取值 必须 xxx.value</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Attribute(非响应式对象)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽(非响应式对象)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slots</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发时间（方法）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content.<span class="property">emit</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="comment">// 必须返回 模板中才能使用</span></span><br><span class="line">      count, arr, addOne</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用setup语法糖"><a href="#使用setup语法糖" class="headerlink" title="使用setup语法糖"></a>使用setup语法糖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;update(count-1)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      &#123;&#123; count &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;update(count+1)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span> <span class="attr">name</span>=<span class="string">&quot;component-name&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, reactive, toRefs, isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span> = value</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> setup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序通知推送</title>
      <link href="/2020/12/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E7%9F%A5%E6%8E%A8%E9%80%81/"/>
      <url>/2020/12/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E7%9F%A5%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序推送通知方式（订阅消息-消息模板）"><a href="#小程序推送通知方式（订阅消息-消息模板）" class="headerlink" title="小程序推送通知方式（订阅消息&amp;消息模板）"></a>小程序推送通知方式（订阅消息&amp;消息模板）</h1><h2 id="小程序发送小程序的订阅消息-推送到服务通知"><a href="#小程序发送小程序的订阅消息-推送到服务通知" class="headerlink" title="小程序发送小程序的订阅消息(推送到服务通知)"></a>小程序发送小程序的订阅消息(推送到服务通知)</h2><ul><li>准备1：登录小程序-功能-订阅消息（未开通的，需要先开通）-从模板库中添加消息模板并获得模板ID（也可以申请消息模板）</li><li>步骤：<ul><li>获取下发权限 （用户发生点击行为或者发起支付回调后）— 调用接口下发订阅消息</li><li>获取js_code</li><li>根据js_code获取OpenId和UnionID</li><li>获取小程序access_token</li><li>根据access_token调用接口下发订阅消息</li></ul></li><li>参考的开发文档<br>  -<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html">获取下发权限</a><br>  -<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/subscribe-message/subscribeMessage.send.html">调用接口下发订阅消息</a></li></ul><h2 id="小程序调用公众号的消息模板-推送到微信公众号"><a href="#小程序调用公众号的消息模板-推送到微信公众号" class="headerlink" title="小程序调用公众号的消息模板(推送到微信公众号)"></a>小程序调用公众号的消息模板(推送到微信公众号)</h2><ul><li>准备1：注册微信开放平台，将微信公众号和小程序绑定到微信开放平台（目的：获取UnionID）</li><li>准备2：微信公众号添加消息模板功能，从模板库中添加消息模板并获得模板ID，也可以申请模板</li><li>步骤：(根据用户唯一的UnionID去寻找用户在公众号的OpenId,再根据微信公众号的OpenId发送通知到相应的用户)<ul><li>批量获取微信公众号关注的用户Openid</li><li>根据用户Openid获取微信公众号关注的用户UnionID</li><li>将微信公众号关注的用户Openid、UnionID保存到数据库</li><li>两种方式获取小程序用户UnionID<ul><li>根据js_code获取小程序的OpenId和UnionID</li><li>根据小程序的OpenId、access_token获取用户信息UserInfo，根据UserInfo的encryptedData字段解密出小程序的UnionID（不推荐）</li></ul></li><li>根据小程序appid、secret获取小程序access_token</li><li>根据小程序的UnionID去数据库匹配用户在公众号的OpenId</li><li>根据用户在公众号的OpenId、access_token发送消息模板到对应用户</li></ul></li><li>参考的开发文档<ul><li><a href="https://open.weixin.qq.com/">微信开放平台登录</a></li><li><a href="https://mp.weixin.qq.com/">微信公众号登录</a></li><li><a href="https://mp.weixin.qq.com/">微信小程序登录</a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Template_Message_Interface.html">公众号消息模板接口</a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Receiving_event_pushes.html">公众号关注&#x2F;取消关注事件</a>：微信公众号-开发-基本配置-服务器配置-启用</li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html">服务器配置</a></li><li>[公众号获取用户列表&#x2F;获取OpenId]<a href="https://developers.weixin.qq.com/doc/offiaccount/User_Management/Getting_a_User_List.html">https://developers.weixin.qq.com/doc/offiaccount/User_Management/Getting_a_User_List.html</a>)</li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/User_Management/Get_users_basic_information_UnionID.html#UinonId">公众号获取用户基本信息(UnionID)</a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html">公众号获取Access token</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">小程序获取js_code</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html">小程序获取OpenId和UnionID&#x2F;获取code2Session</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html">小程序获取access_token</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html">小程序获取用户信息UserInfo</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95">UserInfo解密算法解密</a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Template_Message_Interface.html#5">公众号消息模板发送</a></li></ul></li></ul><h2 id="下发统一服务消息（官方不支持了）"><a href="#下发统一服务消息（官方不支持了）" class="headerlink" title="下发统一服务消息（官方不支持了）"></a>下发统一服务消息（官方不支持了）</h2><ul><li>下发小程序和公众号统一的服务消息（需要填小程序模板id和公众号模板id）</li></ul><h2 id="小程序消息模板（已废弃）"><a href="#小程序消息模板（已废弃）" class="headerlink" title="小程序消息模板（已废弃）"></a>小程序消息模板（已废弃）</h2><h2 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h2><ul><li>小程序openid：小程序用户的唯一id</li><li>公众号openid：公众号用户的唯一id</li><li>unionid：同一用户，对同一个微信开放平台下的不同应用，unionid是相同的</li><li>准备：<ol><li>将小程序与公众号绑定（绑定后才可获取unionid），官方文档：小程序与公众号绑定获取unionid</li><li>接入微信公众平台开发，也就是给服务号配置一下开发者服务器。当有用户关注&#x2F;取消服务号时，微信服务器会推送关注&#x2F;取消的事件给我们的服务器。官方文档：接入微信公众平台开发</li><li>获取公众号用户列表，即所有用户的公众号openid。官方文档：获取公众号用户列表</li><li>通过公众号openid获取用户的unionid。官方文档：通过公众号openid获取unionid</li><li>推送服务号消息。官方文档：公众号发送模版消息</li></ol><ul><li>注意：</li></ul><ol start="6"><li>在上述的一些接口中，需要获取access_token。小程序和公众号的access_token是不同的，需要用各自的appid和secret去获取。</li><li>access_token每天只能获取200次，有效期是7200秒。所以应该把它加入缓存，而不是每次都去获取新的access_token。</li></ol></li></ul><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><ul><li>将小程序用户与公众号用户关联：<ul><li>小程序用户openid→unionid←公众号用户openid</li><li>要想将小程序与公众号用户关联，第一件事就是获取用户的unionid。</li><li>我们可以在两种情况下获取用户的unionid：</li></ul></li><li>一、如果用户已经关注了公众号，那么在用户登录的时候，就可以获取到unionid</li><li>二、如果用户没有关注公众号，那么得让前端调用wx.getUserInfo，把加密数据给后端解密拿到unionid。<ul><li>解密需要session_key，而session_key又有有效期，得注意它过期的情况。</li><li>当用户关注公众号时，微信会推送事件给我们（本文准备条件的第2条）。</li><li>通过关注事件，我们可以拿到用户的公众号openid，再获取unionid（本文准备条件的第4条）。拿到unionid后，去数据库查询这个unionid的用户，并把公众号openid保存。</li><li>但是，还有两个情况没有考虑到：<ol><li>在我们开发之前，已经关注了公众号的用户没有去关联<ul><li>解决方案：</li><li>获取微信公众号的用户列表，再依次获取用户unionid（本文准备条件的第3、4条）。注意，此操作非常耗时。</li></ul></li><li>用户先关注了公众号，但是从来没用过小程序（数据库里没有unionid，导致无法关联）<ul><li>解决方案：</li><li>新建一张表，把这个公众号用户先记录下来。当小程序用户登录时，先检查一遍这张表尝试关联。</li></ul></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一份参考用的axios封装</title>
      <link href="/2020/11/19/%E4%B8%80%E4%BB%BD%E5%8F%82%E8%80%83%E7%94%A8%E7%9A%84axios%E5%B0%81%E8%A3%85/"/>
      <url>/2020/11/19/%E4%B8%80%E4%BB%BD%E5%8F%82%E8%80%83%E7%94%A8%E7%9A%84axios%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="一份拷贝即用的axios封装代码"><a href="#一份拷贝即用的axios封装代码" class="headerlink" title="一份拷贝即用的axios封装代码"></a>一份拷贝即用的axios封装代码</h1><h2 id="安装Axios"><a href="#安装Axios" class="headerlink" title="安装Axios"></a>安装Axios</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">showStatus</span> = (<span class="params">status: number</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求错误(400)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      message = <span class="string">&#x27;未授权，请重新登录(401)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      message = <span class="string">&#x27;拒绝访问(403)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求出错(404)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求超时(408)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务器错误(500)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务未实现(501)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">      message = <span class="string">&#x27;网络错误(502)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务不可用(503)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">      message = <span class="string">&#x27;网络超时(504)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">      message = <span class="string">&#x27;HTTP版本不受支持(505)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      message = <span class="string">`连接出错(<span class="subst">$&#123;status&#125;</span>)!`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 联调</span></span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">`/`</span> : <span class="string">&#x27;/apis&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">post</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否跨站点访问控制请求</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">30000</span>,</span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="title function_">validateStatus</span> () &#123;</span><br><span class="line">    <span class="comment">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span> &amp;&amp; data.<span class="title function_">startsWith</span>(<span class="string">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class="line">      data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.<span class="property">data</span> = &#123;&#125;</span><br><span class="line">    error.<span class="property">data</span>.<span class="property">msg</span> = <span class="string">&#x27;服务器异常，请联系管理员！&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> status = response.<span class="property">status</span></span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">200</span> || status &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理http错误，抛到业务代码</span></span><br><span class="line">        msg = <span class="title function_">showStatus</span>(status)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> response.<span class="property">data</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            response.<span class="property">data</span> = &#123;msg&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.<span class="property">data</span>.<span class="property">msg</span> = msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.<span class="property">data</span> = &#123;&#125;</span><br><span class="line">    error.<span class="property">data</span>.<span class="property">msg</span> = <span class="string">&#x27;请求超时或服务器异常，请检查网络或联系管理员！&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><h2 id="一些关于Axios的注释"><a href="#一些关于Axios的注释" class="headerlink" title="一些关于Axios的注释"></a>一些关于Axios的注释</h2><ul><li>请求方法应为小写：method: get&#x2F;post&#x2F;put&#x2F;delete在axios内部全部转为小写</li><li>Axios实现原理是基于 XMLHttpRequest 详细可见’axios&#x2F;lib&#x2F;adapters&#x2F;xhr.js’#20</li><li>‘axios&#x2F;lib&#x2F;adapters&#x2F;xhr.js’ -&gt; 浏览器请求模块</li><li>‘axios&#x2F;lib&#x2F;cancel&#x2F;Cancel.js’ -&gt; 取消请求模块</li><li>‘axios&#x2F;lib&#x2F;core&#x2F;Axios.js’ -&gt; 发送请求模块</li><li>‘axios&#x2F;Defaults.js’ -&gt; 默认配置模块</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页安全策略---CSP</title>
      <link href="/2020/11/18/%E7%BD%91%E9%A1%B5%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5---CSP/"/>
      <url>/2020/11/18/%E7%BD%91%E9%A1%B5%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5---CSP/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Content Security Policy （网页安全策略或内容安全策略，简称 CSP)，主要用于检测并削弱某些特定类型的攻击，如跨站脚本(xss)、数据注入攻击等，相当于是让浏览器自动禁止外部注入恶意脚本</p></li><li><p>CSP的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，它的实现和执行全部由浏览器完成，开发者只需要提供配置</p></li><li><p>两种启用CSP方式</p><ul><li>①通过HTTP头部信息的Content-Security-Policy字段添加指定策略  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Security</span>-<span class="title class_">Policy</span>: script-src <span class="string">&#x27;self&#x27;</span>; boject-src <span class="string">&#x27;none&#x27;</span>; style-src cdn.<span class="property">example</span>.<span class="property">org</span> third-party.<span class="property">org</span>; child-src <span class="attr">https</span>:</span><br></pre></td></tr></table></figure></li><li>②通过网页的<meta>标签  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&#x27;Content-Security-Policy&#x27;</span> content=<span class="string">&quot;script-src &#x27;self&#x27;; boject-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>以上代码的配置信息：</li><li>脚本：只信任当前域名</li><li>标签，不信任任何URL，即不加载任何资源</li><li>样式表：只信任cdn.example.org third-party.org</li><li>框架(frame)：必须使用HTTPS协议加载</li><li>其他资源：没有限制</li><li>资源限制选项<ul><li>script-src: 外部脚本</li><li>style-src: 样式表</li><li>img-src: 图片</li><li>media-src: 媒体文件</li><li>font-src: 字体文件</li><li>object-src: 插件，如Flash</li><li>child-src: 框架</li><li>frame-ancestors: 嵌入的外部资源，如：frame、iframe</li><li>content-src: HTTP连接（通过XHR、WebSockets）</li><li>worker-src: worker脚本</li><li>manifest-src: manifest文件</li></ul></li><li>default-src 选项<ul><li>用来限制各个选项的默认值  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Security</span>-<span class="title class_">Policy</span>: <span class="keyword">default</span>-src <span class="string">&#x27;self&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>以上代码限制所有资源只能从当前域名加载</li></ul></li><li><p>参考</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html">http://www.ruanyifeng.com/blog/2016/09/csp.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github搜索技巧</title>
      <link href="/2020/11/12/Github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/11/12/Github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-搜索关键字"><a href="#1-搜索关键字" class="headerlink" title="1.搜索关键字"></a>1.搜索关键字</h2><ul><li>Vue in:name 表示在项目名称中搜索 Vue 关键字</li><li>Vue in:readme 表示在项目readme中搜索 Vue 关键字</li><li>Vue in:description 表示在 项目描述中搜索 Vue 关键字</li><li>Vue in:USERNAME 表示在USERNAME中搜索 Vue 关键字</li><li>Vue in:ORGNAME 表示在组织或机构名中搜索 Vue 关键字</li></ul><h2 id="2-按照项目大小搜索"><a href="#2-按照项目大小搜索" class="headerlink" title="2.按照项目大小搜索"></a>2.按照项目大小搜索</h2><ul><li>size:&gt;&#x3D;5000 Vue 搜索大小超过5M 的包含 Vue 关键字项目</li></ul><h2 id="3-按照Stars量搜索"><a href="#3-按照Stars量搜索" class="headerlink" title="3.按照Stars量搜索"></a>3.按照Stars量搜索</h2><ul><li>stars:&gt;1000 搜索Stars量大于1000的项目</li><li>Vue stars:&gt;1000 搜索Stars量大于1000的Vue项目</li><li>language:Vue stars:&gt;10000搜索开发语言为Vue且stars数大于10000的所有项目</li></ul><h2 id="4-按照语言搜索"><a href="#4-按照语言搜索" class="headerlink" title="4.按照语言搜索"></a>4.按照语言搜索</h2><ul><li>language:Vue location:china 搜索国内的开发者，语言限定为Vue</li></ul><h2 id="5-Github高级搜索"><a href="#5-Github高级搜索" class="headerlink" title="5.Github高级搜索"></a>5.Github高级搜索</h2><ul><li><a href="https://github.com/search/advanced">https://github.com/search/advanced</a></li></ul><h2 id="6-每天-每周-每月热门"><a href="#6-每天-每周-每月热门" class="headerlink" title="6.每天&#x2F;每周&#x2F;每月热门"></a>6.每天&#x2F;每周&#x2F;每月热门</h2><ul><li><a href="https://github.com/trending">https://github.com/trending</a></li></ul><h2 id="7-git如何统计代码行数"><a href="#7-git如何统计代码行数" class="headerlink" title="7.git如何统计代码行数"></a>7.git如何统计代码行数</h2><ul><li>git中有个中自带的查询提交行数的命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --since=2018-01-01 --<span class="keyword">until</span>=2018-12-31 --author=<span class="string">&quot;like&quot;</span> --pretty=tformat: --numstat | gawk <span class="string">&#x27;&#123; add += $1 ; subs += $2 ; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s removed lines : %s total lines: %s\n&quot;,add,subs,loc &#125;&#x27;</span> -</span><br><span class="line"><span class="comment"># 设置对应时间段，--author后面改成自己的名字或空</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一个无聊的canvas</title>
      <link href="/2020/11/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E6%97%A0%E8%81%8A%E7%9A%84canvas/"/>
      <url>/2020/11/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E6%97%A0%E8%81%8A%E7%9A%84canvas/</url>
      
        <content type="html"><![CDATA[<h2 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h2><ul><li><p>静态效果<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/fish.png" alt="flying-fish"></p></li><li><p>GIF<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/fish.gif" alt="flying-fish-gif"></p></li></ul><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#jsi-flying-fish-container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">max-height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/2.2.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;jsi-flying-fish-container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;1221&quot;</span> <span class="attr">height</span>=<span class="string">&quot;241&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./fish.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fish.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">RENDERER</span> = &#123;</span><br><span class="line">    <span class="variable constant_">POINT_INTERVAL</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="variable constant_">FISH_COUNT</span> : <span class="number">300</span>,</span><br><span class="line">    <span class="variable constant_">MAX_INTERVAL_COUNT</span> : <span class="number">50</span>,</span><br><span class="line">    <span class="variable constant_">INIT_HEIGHT_RATE</span> : <span class="number">0.5</span>,</span><br><span class="line">    <span class="variable constant_">THRESHOLD</span> : <span class="number">50</span>,</span><br><span class="line"></span><br><span class="line">    init : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setParameters</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">reconstructMethods</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setup</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">bindEvent</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    setParameters : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$window</span> = $(<span class="variable language_">window</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$container</span> = $(<span class="string">&#x27;#jsi-flying-fish-container&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$canvas</span> = $(<span class="string">&#x27;&lt;canvas /&gt;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span> = <span class="variable language_">this</span>.<span class="property">$canvas</span>.<span class="title function_">appendTo</span>(<span class="variable language_">this</span>.<span class="property">$container</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">points</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fishes</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchIds</span> = [];</span><br><span class="line">    &#125;,</span><br><span class="line">    createSurfacePoints : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="variable language_">this</span>.<span class="property">width</span> / <span class="variable language_">this</span>.<span class="property">POINT_INTERVAL</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pointInterval</span> = <span class="variable language_">this</span>.<span class="property">width</span> / (count - <span class="number">1</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">points</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title function_">SURFACE_POINT</span>(<span class="variable language_">this</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; count; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> point = <span class="keyword">new</span> <span class="title function_">SURFACE_POINT</span>(<span class="variable language_">this</span>, i * <span class="variable language_">this</span>.<span class="property">pointInterval</span>),</span><br><span class="line">                previous = <span class="variable language_">this</span>.<span class="property">points</span>[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            point.<span class="title function_">setPreviousPoint</span>(previous);</span><br><span class="line">            previous.<span class="title function_">setNextPoint</span>(point);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">points</span>.<span class="title function_">push</span>(point);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    reconstructMethods : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchWindowSize</span> = <span class="variable language_">this</span>.<span class="property">watchWindowSize</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">jdugeToStopResize</span> = <span class="variable language_">this</span>.<span class="property">jdugeToStopResize</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startEpicenter</span> = <span class="variable language_">this</span>.<span class="property">startEpicenter</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">moveEpicenter</span> = <span class="variable language_">this</span>.<span class="property">moveEpicenter</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reverseVertical</span> = <span class="variable language_">this</span>.<span class="property">reverseVertical</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">render</span> = <span class="variable language_">this</span>.<span class="property">render</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    setup : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fishes</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchIds</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">intervalCount</span> = <span class="variable language_">this</span>.<span class="property">MAX_INTERVAL_COUNT</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">$container</span>.<span class="title function_">width</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">$container</span>.<span class="title function_">height</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fishCount</span> = <span class="variable language_">this</span>.<span class="property">FISH_COUNT</span> * <span class="variable language_">this</span>.<span class="property">width</span> / <span class="number">500</span> * <span class="variable language_">this</span>.<span class="property">height</span> / <span class="number">500</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$canvas</span>.<span class="title function_">attr</span>(&#123;width : <span class="variable language_">this</span>.<span class="property">width</span>, height : <span class="variable language_">this</span>.<span class="property">height</span>&#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reverse</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fishes</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title function_">FISH</span>(<span class="variable language_">this</span>));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createSurfacePoints</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    watchWindowSize : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">clearTimer</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tmpWidth</span> = <span class="variable language_">this</span>.<span class="property">$window</span>.<span class="title function_">width</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tmpHeight</span> = <span class="variable language_">this</span>.<span class="property">$window</span>.<span class="title function_">height</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchIds</span>.<span class="title function_">push</span>(<span class="built_in">setTimeout</span>(<span class="variable language_">this</span>.<span class="property">jdugeToStopResize</span>, <span class="variable language_">this</span>.<span class="property">WATCH_INTERVAL</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    clearTimer : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">watchIds</span>.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">watchIds</span>.<span class="title function_">pop</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    jdugeToStopResize : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> width = <span class="variable language_">this</span>.<span class="property">$window</span>.<span class="title function_">width</span>(),</span><br><span class="line">            height = <span class="variable language_">this</span>.<span class="property">$window</span>.<span class="title function_">height</span>(),</span><br><span class="line">            stopped = (width == <span class="variable language_">this</span>.<span class="property">tmpWidth</span> &amp;&amp; height == <span class="variable language_">this</span>.<span class="property">tmpHeight</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tmpWidth</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tmpHeight</span> = height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stopped)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setup</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvent : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$window</span>.<span class="title function_">on</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">watchWindowSize</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$container</span>.<span class="title function_">on</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="variable language_">this</span>.<span class="property">startEpicenter</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$container</span>.<span class="title function_">on</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">moveEpicenter</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$container</span>.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">reverseVertical</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getAxis : <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> offset = <span class="variable language_">this</span>.<span class="property">$container</span>.<span class="title function_">offset</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x : event.<span class="property">clientX</span> - offset.<span class="property">left</span> + <span class="variable language_">this</span>.<span class="property">$window</span>.<span class="title function_">scrollLeft</span>(),</span><br><span class="line">            y : event.<span class="property">clientY</span> - offset.<span class="property">top</span> + <span class="variable language_">this</span>.<span class="property">$window</span>.<span class="title function_">scrollTop</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    startEpicenter : <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">axis</span> = <span class="variable language_">this</span>.<span class="title function_">getAxis</span>(event);</span><br><span class="line">    &#125;,</span><br><span class="line">    moveEpicenter : <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> axis = <span class="variable language_">this</span>.<span class="title function_">getAxis</span>(event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">axis</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">axis</span> = axis;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">generateEpicenter</span>(axis.<span class="property">x</span>, axis.<span class="property">y</span>, axis.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">axis</span>.<span class="property">y</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">axis</span> = axis;</span><br><span class="line">    &#125;,</span><br><span class="line">    generateEpicenter : <span class="keyword">function</span>(<span class="params">x, y, velocity</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &lt; <span class="variable language_">this</span>.<span class="property">height</span> / <span class="number">2</span> - <span class="variable language_">this</span>.<span class="property">THRESHOLD</span> || y &gt; <span class="variable language_">this</span>.<span class="property">height</span> / <span class="number">2</span> + <span class="variable language_">this</span>.<span class="property">THRESHOLD</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="title class_">Math</span>.<span class="title function_">round</span>(x / <span class="variable language_">this</span>.<span class="property">pointInterval</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">points</span>[index].<span class="title function_">interfere</span>(y, velocity);</span><br><span class="line">    &#125;,</span><br><span class="line">    reverseVertical : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reverse</span> = !<span class="variable language_">this</span>.<span class="property">reverse</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, count = <span class="variable language_">this</span>.<span class="property">fishes</span>.<span class="property">length</span>; i &lt; count; i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fishes</span>[i].<span class="title function_">reverseVertical</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    controlStatus : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, count = <span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>; i &lt; count; i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="title function_">updateSelf</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, count = <span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>; i &lt; count; i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="title function_">updateNeighbors</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">fishes</span>.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">fishCount</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(--<span class="variable language_">this</span>.<span class="property">intervalCount</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">intervalCount</span> = <span class="variable language_">this</span>.<span class="property">MAX_INTERVAL_COUNT</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">fishes</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title function_">FISH</span>(<span class="variable language_">this</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">render</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">controlStatus</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="string">&#x27;#0184b2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, count = <span class="variable language_">this</span>.<span class="property">fishes</span>.<span class="property">length</span>; i &lt; count; i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fishes</span>[i].<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">context</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">save</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">globalCompositeOperation</span> = <span class="string">&#x27;xor&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">beginPath</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">reverse</span> ? <span class="number">0</span> : <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, count = <span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>; i &lt; count; i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">points</span>[i].<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">context</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">lineTo</span>(<span class="variable language_">this</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">reverse</span> ? <span class="number">0</span> : <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">closePath</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fill</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">restore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">SURFACE_POINT</span> = <span class="keyword">function</span>(<span class="params">renderer, x</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderer</span> = renderer;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable constant_">SURFACE_POINT</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="variable constant_">SPRING_CONSTANT</span> : <span class="number">0.03</span>,</span><br><span class="line">    <span class="variable constant_">SPRING_FRICTION</span> : <span class="number">0.9</span>,</span><br><span class="line">    <span class="variable constant_">WAVE_SPREAD</span> : <span class="number">0.3</span>,</span><br><span class="line">    <span class="variable constant_">ACCELARATION_RATE</span> : <span class="number">0.01</span>,</span><br><span class="line"></span><br><span class="line">    init : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">initHeight</span> = <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">INIT_HEIGHT_RATE</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">initHeight</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fy</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">force</span> = &#123;previous : <span class="number">0</span>, next : <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    setPreviousPoint : <span class="keyword">function</span>(<span class="params">previous</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">previous</span> = previous;</span><br><span class="line">    &#125;,</span><br><span class="line">    setNextPoint : <span class="keyword">function</span>(<span class="params">next</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = next;</span><br><span class="line">    &#125;,</span><br><span class="line">    interfere : <span class="keyword">function</span>(<span class="params">y, velocity</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fy</span> = <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="variable language_">this</span>.<span class="property">ACCELARATION_RATE</span> * ((<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> - <span class="variable language_">this</span>.<span class="property">height</span> - y) &gt;= <span class="number">0</span> ? -<span class="number">1</span> : <span class="number">1</span>) * <span class="title class_">Math</span>.<span class="title function_">abs</span>(velocity);</span><br><span class="line">    &#125;,</span><br><span class="line">    updateSelf : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fy</span> += <span class="variable language_">this</span>.<span class="property">SPRING_CONSTANT</span> * (<span class="variable language_">this</span>.<span class="property">initHeight</span> - <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fy</span> *= <span class="variable language_">this</span>.<span class="property">SPRING_FRICTION</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> += <span class="variable language_">this</span>.<span class="property">fy</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    updateNeighbors : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">previous</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">force</span>.<span class="property">previous</span> = <span class="variable language_">this</span>.<span class="property">WAVE_SPREAD</span> * (<span class="variable language_">this</span>.<span class="property">height</span> - <span class="variable language_">this</span>.<span class="property">previous</span>.<span class="property">height</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">next</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">force</span>.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">WAVE_SPREAD</span> * (<span class="variable language_">this</span>.<span class="property">height</span> - <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">height</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render : <span class="keyword">function</span>(<span class="params">context</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">previous</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">previous</span>.<span class="property">height</span> += <span class="variable language_">this</span>.<span class="property">force</span>.<span class="property">previous</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">previous</span>.<span class="property">fy</span> += <span class="variable language_">this</span>.<span class="property">force</span>.<span class="property">previous</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">next</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">height</span> += <span class="variable language_">this</span>.<span class="property">force</span>.<span class="property">next</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">fy</span> += <span class="variable language_">this</span>.<span class="property">force</span>.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        context.<span class="title function_">lineTo</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> - <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">FISH</span> = <span class="keyword">function</span>(<span class="params">renderer</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderer</span> = renderer;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable constant_">FISH</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="variable constant_">GRAVITY</span> : <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">    init : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">direction</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="variable language_">this</span>.<span class="property">direction</span> ? (<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">width</span> + <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">THRESHOLD</span>) : -<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">THRESHOLD</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">previousY</span> = <span class="variable language_">this</span>.<span class="property">y</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vx</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(<span class="number">4</span>, <span class="number">10</span>) * (<span class="variable language_">this</span>.<span class="property">direction</span> ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">reverse</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="number">1</span> / <span class="number">10</span>, <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="number">4</span> / <span class="number">10</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">vy</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ay</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(<span class="number">0.05</span>, <span class="number">0.2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="number">6</span> / <span class="number">10</span>, <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="number">9</span> / <span class="number">10</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">vy</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(-<span class="number">5</span>, -<span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ay</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(-<span class="number">0.2</span>, -<span class="number">0.05</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isOut</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">theta</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phi</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getRandomValue : <span class="keyword">function</span>(<span class="params">min, max</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> min + (max - min) * <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    reverseVertical : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isOut</span> = !<span class="variable language_">this</span>.<span class="property">isOut</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ay</span> *= -<span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    controlStatus : <span class="keyword">function</span>(<span class="params">context</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">previousY</span> = <span class="variable language_">this</span>.<span class="property">y</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">vx</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">vy</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vy</span> += <span class="variable language_">this</span>.<span class="property">ay</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">reverse</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">y</span> &gt; <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">INIT_HEIGHT_RATE</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">vy</span> -= <span class="variable language_">this</span>.<span class="property">GRAVITY</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isOut</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isOut</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ay</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(<span class="number">0.05</span>, <span class="number">0.2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isOut</span> = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">y</span> &lt; <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">height</span> * <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">INIT_HEIGHT_RATE</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">vy</span> += <span class="variable language_">this</span>.<span class="property">GRAVITY</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isOut</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isOut</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ay</span> = <span class="variable language_">this</span>.<span class="title function_">getRandomValue</span>(-<span class="number">0.2</span>, -<span class="number">0.05</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isOut</span> = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">isOut</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">theta</span> += <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">20</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">theta</span> %= <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">phi</span> += <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">30</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">phi</span> %= <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">generateEpicenter</span>(<span class="variable language_">this</span>.<span class="property">x</span> + (<span class="variable language_">this</span>.<span class="property">direction</span> ? -<span class="number">1</span> : <span class="number">1</span>) * <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">THRESHOLD</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">previousY</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">vx</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">x</span> &gt; <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">width</span> + <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">THRESHOLD</span> || <span class="variable language_">this</span>.<span class="property">vx</span> &lt; <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">x</span> &lt; -<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">THRESHOLD</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render : <span class="keyword">function</span>(<span class="params">context</span>)&#123;</span><br><span class="line">        context.<span class="title function_">save</span>();</span><br><span class="line">        context.<span class="title function_">translate</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">        context.<span class="title function_">rotate</span>(<span class="title class_">Math</span>.<span class="property">PI</span> + <span class="title class_">Math</span>.<span class="title function_">atan2</span>(<span class="variable language_">this</span>.<span class="property">vy</span>, <span class="variable language_">this</span>.<span class="property">vx</span>));</span><br><span class="line">        context.<span class="title function_">scale</span>(<span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">direction</span> ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">        context.<span class="title function_">beginPath</span>();</span><br><span class="line">        context.<span class="title function_">moveTo</span>(-<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">bezierCurveTo</span>(-<span class="number">20</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">bezierCurveTo</span>(<span class="number">15</span>, -<span class="number">10</span>, -<span class="number">20</span>, -<span class="number">15</span>, -<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line">        context.<span class="title function_">save</span>();</span><br><span class="line">        context.<span class="title function_">translate</span>(<span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">scale</span>(<span class="number">0.9</span> + <span class="number">0.2</span> * <span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="variable language_">this</span>.<span class="property">theta</span>), <span class="number">1</span>);</span><br><span class="line">        context.<span class="title function_">beginPath</span>();</span><br><span class="line">        context.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">quadraticCurveTo</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">8</span>);</span><br><span class="line">        context.<span class="title function_">quadraticCurveTo</span>(<span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">quadraticCurveTo</span>(<span class="number">12</span>, -<span class="number">5</span>, <span class="number">20</span>, -<span class="number">8</span>);</span><br><span class="line">        context.<span class="title function_">quadraticCurveTo</span>(<span class="number">5</span>, -<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">fill</span>();</span><br><span class="line">        context.<span class="title function_">restore</span>();</span><br><span class="line"></span><br><span class="line">        context.<span class="title function_">save</span>();</span><br><span class="line">        context.<span class="title function_">translate</span>(-<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        context.<span class="title function_">rotate</span>((<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">3</span> + <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">10</span> * <span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="variable language_">this</span>.<span class="property">phi</span>)) * (<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">reverse</span> ? -<span class="number">1</span> : <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        context.<span class="title function_">beginPath</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">reverse</span>)&#123;</span><br><span class="line">            context.<span class="title function_">moveTo</span>(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">            context.<span class="title function_">bezierCurveTo</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">40</span>);</span><br><span class="line">            context.<span class="title function_">bezierCurveTo</span>(-<span class="number">12</span>, <span class="number">25</span>, -<span class="number">8</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            context.<span class="title function_">moveTo</span>(-<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">            context.<span class="title function_">bezierCurveTo</span>(-<span class="number">10</span>, -<span class="number">10</span>, -<span class="number">10</span>, -<span class="number">30</span>, <span class="number">0</span>, -<span class="number">40</span>);</span><br><span class="line">            context.<span class="title function_">bezierCurveTo</span>(<span class="number">12</span>, -<span class="number">25</span>, <span class="number">8</span>, -<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        context.<span class="title function_">closePath</span>();</span><br><span class="line">        context.<span class="title function_">fill</span>();</span><br><span class="line">        context.<span class="title function_">restore</span>();</span><br><span class="line">        context.<span class="title function_">restore</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">controlStatus</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable constant_">RENDERER</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Element-Ui的select二次封装的下拉搜索组件</title>
      <link href="/2020/11/09/%E5%9F%BA%E4%BA%8EElement-Ui%E7%9A%84select%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%9A%84%E4%B8%8B%E6%8B%89%E6%90%9C%E7%B4%A2%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/11/09/%E5%9F%BA%E4%BA%8EElement-Ui%E7%9A%84select%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%9A%84%E4%B8%8B%E6%8B%89%E6%90%9C%E7%B4%A2%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="少了罗嗦，直接看代码"><a href="#少了罗嗦，直接看代码" class="headerlink" title="少了罗嗦，直接看代码"></a>少了罗嗦，直接看代码</h2><ul><li>注意代码不能直接使用，只是提供一种封装思路，其中 dSearchList 及样式需要自己重新写, dCountryList 来自 dropListMixin</li><li>还有很多方法并未加进来，可根据实际自行添加<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select/index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:filterable</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:style</span>=<span class="string">&quot;customStyle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:class</span>=<span class="string">&quot;customClass&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:remote</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:size</span>=<span class="string">&quot;size&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:remote-method</span>=<span class="string">&quot;dSearchList(&#x27;countryList&#x27;)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:loading</span>=<span class="string">&quot;dLoading&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:clearable</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">input</span>=<span class="string">&quot;onChange($event)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">change</span>=<span class="string">&quot;(val) =&gt; onSelectChange(val)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-for</span>=<span class="string">&quot;item in dCountryList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:key</span>=<span class="string">&quot;item[optionKey]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:label</span>=<span class="string">&quot;item[optionLabel]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:value</span>=<span class="string">&quot;item[optionValue]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-f f-jc-sb&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.code || &quot;&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name || &quot;&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.numCode || &quot;&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; dropListMixin &#125; <span class="keyword">from</span> <span class="string">&quot;@/mixins/drop_list_mixin&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">mixins</span>: [dropListMixin],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">placeholder</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;请输入&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">customStyle</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;width: 100%;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">customClass</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">clearable</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">size</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;small&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">optionKey</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;code&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">optionLabel</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;name&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">optionValue</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;code&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">dInit</span>([<span class="string">&quot;countryList&quot;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, val);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onSelectChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;selectChange&quot;</span>, val);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//   使用示例 </span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">country-select</span> <span class="attr">:size</span>=<span class="string">&quot;medium&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.countryCode&quot;</span> @<span class="attr">selectChange</span>=<span class="string">&quot;val =&gt; onCountrySelect(val,&#x27;countryCode&#x27;)&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">country-select</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//   使用示例 </span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element-ui </tag>
            
            <tag> UI框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于js中对小数的计算</title>
      <link href="/2020/10/03/%E5%85%B3%E4%BA%8Ejs%E4%B8%AD%E5%AF%B9%E5%B0%8F%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2020/10/03/%E5%85%B3%E4%BA%8Ejs%E4%B8%AD%E5%AF%B9%E5%B0%8F%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul><li>在js的小数计算中，0.1+0.2&#x3D;0.30000000000000004<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( num1 + num2 );</span><br><span class="line"><span class="comment">// 0.30000000000000004 </span></span><br></pre></td></tr></table></figure></li></ul><h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><ul><li><p>为什么出现这样的结果，我们把小数转换成计算机能读得懂的二进制就比较明了了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0.1 -&gt; 0.1.toString(2) -&gt; 0.0001100110011001100110011001100110011001100110011001101(无限循环…)</span></span><br><span class="line"><span class="comment">// 0.2 -&gt; 0.1.toString(2) -&gt; 0.001100110011001100110011001100110011001100110011001101(无限循环…)</span></span><br></pre></td></tr></table></figure></li><li><p>双精度浮点数的小数部分最多支持 52 位，所以两者相加之后得到这么一串 </p><ul><li>0.0100110011001100110011001100110011001100110011001100</li></ul></li><li><p>因浮点数小数位的限制而截断的二进制数字，这时候，我们再把它转换为十进制，就成了 0.30000000000000004</p></li></ul><h1 id="如何处理此类问题？"><a href="#如何处理此类问题？" class="headerlink" title="如何处理此类问题？"></a>如何处理此类问题？</h1><ul><li>为了避免产生精度差异，我们要把需要计算的数字乘以 10 的 n 次幂，换算成计算机能够精确识别的整数，然后再除以 10 的 n 次幂，大部分编程语言都是这样处理精度差异的，我们就借用过来处理一下 JS 中的浮点数精度误差。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">formatNum = <span class="keyword">function</span>(<span class="params"> num, digit </span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> m = <span class="title class_">Math</span>.<span class="title function_">pow</span>( <span class="number">10</span>, digit );</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>( num * m, <span class="number">10</span> ) / m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">0.2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( num1 + num2 );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">formatNum</span>( num1 + num2, <span class="number">1</span>) );</span><br><span class="line"><span class="comment">// Tips:</span></span><br><span class="line"><span class="comment">// pow() 方法可返回 x 的 y 次幂的值。</span></span><br><span class="line"><span class="comment">// parseInt() 函数可解析一个字符串，并返回一个整数。（第二个参数取值2-36，省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SVG实现边框特效及绘制图形</title>
      <link href="/2020/06/16/%E4%BD%BF%E7%94%A8SVG%E5%AE%9E%E7%8E%B0%E8%BE%B9%E6%A1%86%E7%89%B9%E6%95%88%E5%8F%8A%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2/"/>
      <url>/2020/06/16/%E4%BD%BF%E7%94%A8SVG%E5%AE%9E%E7%8E%B0%E8%BE%B9%E6%A1%86%E7%89%B9%E6%95%88%E5%8F%8A%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><ul><li>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</li><li>SVG 用来定义用于网络的基于矢量的图形</li><li>SVG 使用 XML 格式定义图形</li><li>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失</li><li>SVG 是万维网联盟的标准</li><li>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体</li></ul><h2 id="SVG绘制矩形和圆角矩形"><a href="#SVG绘制矩形和圆角矩形" class="headerlink" title="SVG绘制矩形和圆角矩形"></a>SVG绘制矩形和圆角矩形</h2><ul><li>rect:绘制矩形标签;</li><li>x:矩形的左侧位置,定义矩形到<svg>左侧的距离是Xpx;</li><li>y:矩形的顶端位置,定义矩形到<svg>顶部的距离是Ypx;</li><li>rx&#x2F;ry:是圆角半径;</li><li>style:</li><li>fill:填充颜色;</li><li>fill-opacity:填充颜色透明度;</li><li>stroke:描边颜色;</li><li>stroke-Width:描边宽度;</li><li>stroke-opacity:描边透明度;</li></ul><h2 id="SVG绘制椭圆–"><a href="#SVG绘制椭圆–" class="headerlink" title="SVG绘制椭圆–"></a>SVG绘制椭圆–</h2><ul><li>ellipse:绘制椭圆标签;</li><li>cx:定义椭圆中心的X坐标;</li><li>cy:定义椭圆中心的Y坐标;</li><li>rx:定义椭圆的水平半径;</li><li>ry:定义椭圆的垂直半径;</li></ul><h2 id="SVG绘制直线–"><a href="#SVG绘制直线–" class="headerlink" title="SVG绘制直线–"></a>SVG绘制直线–</h2><ul><li>line:绘制直线标签;</li><li>x1:直线起始点X坐标;</li><li>y1:直线起始点Y坐标;</li><li>x2:直线终止点X坐标;</li><li>y2:直线终止点Y坐标;</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2>  <style>    .svg-main {      width: 200px;    }    svg {      width: 200px;      height: 50px;      margin-bottom: 20px;      background: #444;      cursor: default;    }    rect#shape {      fill: transparent;      stroke: white;      stroke-width: 6px;      stroke-dasharray: 0 500;      stroke-dashoffset: 0;      transition: 0.5s ease;      /* animation:dong 2s ease-in-out infinite alternate;    */    }    svg:hover #shape {      stroke-dasharray: 500 0;      stroke-width: 6px;      stroke: rgb(32, 213, 226);    }    @keyframes dong {      100% {        stroke-dasharray: 500 0;        stroke-width: 6px;        /* stroke-dashoffset:-250;    */        stroke: white;      }    }    rect#one {      fill: transparent;      stroke: yellowgreen;      stroke-width: 6px;      stroke-dasharray: 0 500;      stroke-dashoffset: 250;      animation: dong1 2s ease-in-out infinite alternate;    }    @keyframes dong1 {      100% {        stroke-dasharray: 500 0;        stroke-width: 6px;        /* stroke-dashoffset:0;    */        stroke: greenyellow;      }    }    rect#two {      fill: transparent;      stroke: rgb(233, 43, 43);      stroke-width: 6px;      stroke-dasharray: 200 300;      stroke-dashoffset: 250;      animation: dong2 2s ease-in-out infinite alternate;    }    @keyframes dong2 {      100% {        stroke-dasharray: 200 0;        stroke-width: 6px;        /* stroke-dashoffset:0;    */        stroke: rgb(233, 43, 43);      }    }    rect#three {      fill: transparent;      stroke: rgb(233, 220, 43);      stroke-width: 6px;      stroke-dasharray: 50 450;      stroke-dashoffset: 50;      animation: dong3 2s ease-in-out infinite alternate;    }    rect#threes {      fill: transparent;      stroke: rgb(233, 103, 43);      stroke-width: 6px;      stroke-dasharray: 50 450;      stroke-dashoffset: -200;      animation: dong3 2s ease-in-out infinite alternate;    }    @keyframes dong3 {      100% {        stroke-dasharray: 500 0;        stroke-width: 6px;        /* stroke-dashoffset:-250;    */        stroke: rgb(233, 220, 43);      }    }    rect#four {      fill: transparent;      stroke: skyblue;      stroke-width: 6px;      stroke-dasharray: 50 450;      stroke-dashoffset: 150;      transition: 0.5s ease;      /* animation:dong4 2s ease infinite alternate;    */    }    svg:hover #four {      stroke-dasharray: 250 250;    }    rect#fours {      fill: transparent;      stroke: blue;      stroke-width: 6px;      stroke-dasharray: 50 450;      stroke-dashoffset: 200;      transition: 0.5s ease;      /* animation:dong4s 2s ease infinite alternate;    */    }    svg:hover #fours {      stroke-dasharray: 250 50;    }    @keyframes dong4 {      100% {        stroke-dasharray: 250 250;      }    }    @keyframes dong4s {      100% {        stroke-dasharray: 250 50;      }    }    text {      fill: white;      font-size: 30px;      transition: 0.5s linear;    }    svg:hover text {      fill: rgb(30, 129, 223);    }    svg:hover .four {      fill: rgb(231, 105, 21);    }    #five {      fill: transparent;      stroke: rgb(255, 0, 179);      stroke-width: 6px;      stroke-dasharray: 50 400;      stroke-dashoffset: -75;      stroke-opacity: 0;      animation: dong5 1s linear infinite alternate;    }    @keyframes dong5 {      100% {        stroke-opacity: 1;        stroke: rgb(192, 44, 180);        stroke-dasharray: 50 20;      }    }    #six {      fill: transparent;      stroke: rgb(0, 255, 21);      stroke-width: 6px;      stroke-dasharray: 50 400;      stroke-dashoffset: 50;      animation: dong6 1s linear infinite alternate;    }    @keyframes dong6 {      100% {        stroke: rgb(231, 250, 59);        stroke-dasharray: 20 1;      }    }    rect#svg-border {      fill: transparent;      stroke: white;      stroke-width: 6px;      stroke-dasharray: 0, 200, 0, 50, 0, 200, 0, 50;      stroke-dashoffset: 0;      transition: all .3s ease;    }    svg:hover #svg-border {      stroke-dasharray: 200, 0, 50, 0, 200, 0, 50, 0;      stroke-width: 6px;      stroke: #58bc58;    }  </style>  <main class="">    <svg>      <rect id="shape" height="50" width="200"></rect>      <text x="70" y="35"><a href="###">百度</a></text>    </svg>    <svg>      <rect id="one" height="50" width="200"></rect>    </svg>    <svg>      <rect id="two" height="50" width="200"></rect>    </svg>    <svg>      <rect id="three" height="50" width="200"></rect>      <rect id="threes" height="50" width="200"></rect>    </svg>    <svg>      <rect id="fours" height="50" width="200"></rect>      <rect id="four" height="50" width="200"></rect>      <text class="four" x="70" y="35"><a href="###">淘宝</a></text>    </svg>    <svg>      <rect id="five" height="50" width="200"></rect>    </svg>    <svg>      <rect id="six" height="50" width="200"></rect>    </svg>    <svg>      <rect id="svg-border" height="50" width="200"></rect>      <text x="55" y="35"><a href="###">四边框</a></text>    </svg>    <svg>      <circle cx="100" cy="25" r="20" stroke="orange" stroke-width="6" fill="#ff5" />    </svg>    <svg>      <rect x="25" y="10" width="150" height="30" style="fill:#ccc; stroke:orange; stroke-width:5px;" />    </svg>    <svg>      <rect x="25" y="10" rx="15" ry="15" width="150" height="30"        style="fill:#ccc; stroke:orange; stroke-width:5px; stroke-opacity:.5; fill-opacity:.9;" />    </svg>    <svg >       <line x1="5" y1="5" x2="190" y2="40" style="stroke:rgba(255, 0, 0, .5); stroke-width:5px;" />     </svg>    <svg>       <ellipse cx="100" cy="25" rx="50" ry="15" stroke="orange" stroke-width="5" fill="#000" fill-opacity=".5" />     </svg>  </main>     <h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#696969</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">main</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#444</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: default;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#shape</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">0</span> <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* animation:dong 2s ease-in-out infinite alternate;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#shape</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">500</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">32</span>, <span class="number">213</span>, <span class="number">226</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">500</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* stroke-dashoffset:-250;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke</span>: white;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#one</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">0</span> <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">250</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: dong1 <span class="number">2s</span> ease-in-out infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong1 &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">500</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* stroke-dashoffset:0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#two</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">43</span>, <span class="number">43</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">200</span> <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">250</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: dong2 <span class="number">2s</span> ease-in-out infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong2 &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">200</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* stroke-dashoffset:0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">43</span>, <span class="number">43</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#three</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">220</span>, <span class="number">43</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">50</span> <span class="number">450</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">50</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: dong3 <span class="number">2s</span> ease-in-out infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#threes</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">103</span>, <span class="number">43</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">50</span> <span class="number">450</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: -<span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: dong3 <span class="number">2s</span> ease-in-out infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong3 &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">500</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* stroke-dashoffset:-250;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">220</span>, <span class="number">43</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#four</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: skyblue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">50</span> <span class="number">450</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">150</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* animation:dong4 2s ease infinite alternate;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#four</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">250</span> <span class="number">250</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#fours</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: blue;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">50</span> <span class="number">450</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* animation:dong4s 2s ease infinite alternate;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#fours</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">250</span> <span class="number">50</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong4 &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">250</span> <span class="number">250</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong4s &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">250</span> <span class="number">50</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">text</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">text</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">129</span>, <span class="number">223</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.four</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: <span class="built_in">rgb</span>(<span class="number">231</span>, <span class="number">105</span>, <span class="number">21</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#five</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">179</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">50</span> <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: -<span class="number">75</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: dong5 <span class="number">1s</span> linear infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong5 &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">192</span>, <span class="number">44</span>, <span class="number">180</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">50</span> <span class="number">20</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#six</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">21</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">50</span> <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">50</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: dong6 <span class="number">1s</span> linear infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> dong6 &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke</span>: <span class="built_in">rgb</span>(<span class="number">231</span>, <span class="number">250</span>, <span class="number">59</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">stroke-dasharray</span>: <span class="number">20</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">rect</span><span class="selector-id">#svg-border</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">fill</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">50</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#svg-border</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-dasharray</span>: <span class="number">200</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke-width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">stroke</span>: <span class="number">#58bc58</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;shape&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;70&quot;</span> <span class="attr">y</span>=<span class="string">&quot;35&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;three&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;threes&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;fours&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;four&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span> <span class="attr">x</span>=<span class="string">&quot;70&quot;</span> <span class="attr">y</span>=<span class="string">&quot;35&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;five&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;six&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;svg-border&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;55&quot;</span> <span class="attr">y</span>=<span class="string">&quot;35&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>四边框<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25&quot;</span> <span class="attr">r</span>=<span class="string">&quot;20&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;orange&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;6&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#ff5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;25&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#ccc; stroke:orange; stroke-width:5px;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;25&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;15&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;fill:#ccc; stroke:orange; stroke-width:5px; stroke-opacity:.5; fill-opacity:.9;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> &gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;5&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;5&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;190&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;40&quot;</span> <span class="attr">style</span>=<span class="string">&quot;stroke:rgba(255, 0, 0, .5); stroke-width:5px;&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;50&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;orange&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;5&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#000&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;.5&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SVG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue简介</title>
      <link href="/2020/05/19/Vue%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/05/19/Vue%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue是什么？"><a href="#Vue是什么？" class="headerlink" title="Vue是什么？"></a>Vue是什么？</h2><ul><li>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。<ul><li>渐进式：声明式渲染 -&gt; 组件系统 -&gt; 客户端路由 -&gt; 大规模状态管理 -&gt; 构建工具</li><li><details>  <summary>声明式渲染 与 响应式触发</summary>    使用模板语法 声明式地将数据渲染进DOM，叫声明式渲染。即DOM状态只是数据状态的一个映射。  如果属性的状态值发生了变化，无须做任何操作，与dom绑定的属性会自动发生改变，叫属性的响应式触发。</details></li><li>组件系统：将一个大型的界面切分成一个一个更小的可控单元，具有可复用性。</li><li>客户端路由：针对单页应用而言，需要有路由让一个URL对应到一个应用的状态。</li><li>状态管理：大型项目设计涉及多个组件之间的数据共享</li><li>构建工具：Vue官方提供了一个构建工具vue-cli，可以快速安装webPack、loader等等包</li></ul></li><li>Vue是前端三大框架之一<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Vue%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%A1%86%E6%9E%B6.jpeg" alt="渐进式框架"><br>渐进式框架</li></ul><h2 id="Vue的发展历程"><a href="#Vue的发展历程" class="headerlink" title="Vue的发展历程"></a>Vue的发展历程</h2><ul><li>实验阶段（2013 年中到 2014 年 2 月）</li><li>0.x 阶段 (2014 年 2 月到 2015 年 10 月)</li><li>1.x 阶段 (2015 年 10 月到 2016 年 9 月) 发行版名称 [Evangelion]</li><li>2.x 阶段 (2016 年 9 月至今) 发行版名称 [Ghost in the Shell]</li></ul><h2 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h2><ul><li>MVVM主要把每个页面分成了M（Model）、V（View）、VM（ViewModel）。VM是其中核心，M和V间的调度者。</li><li>M: 保存的是每个页面中单独的数据保存在data里。</li><li>V: 每个页面的html结构。</li><li>VM，一个调度者，分割了M和V，M和V通过中间的VM关联。V想要保存数据到M，都要有VM做中间处理；V想要渲染页面，需要调用VM，VM从M中取数据。</li><li>前端中使用MVVM思想，主要让开发更方便，MVVM提供了数据的双向绑定（由VM提供）。<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/1589862758(1).jpg" alt="MVVM模式"></li></ul><p>双向数据绑定</p><ul><li>Vue双向数据绑定是通过数据劫持结合发布订阅模式的方式来实现的，也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；</li><li>核心：关于VUE双向数据绑定，其核心是 Object.defineProperty()方法；</li><li>把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter&#x2F;setter。</li><li>实现数据双向数据绑定<ul><li>1、实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>2、实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>3、实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>( obj, <span class="string">&quot;greet&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;调用 get 方法&quot;</span> )</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params"> newVal </span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用 set 方法，传入的值是：&quot;</span> + newVal );</span><br><span class="line">    obj.<span class="property">say</span> = newVal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.<span class="property">greet</span>; <span class="comment">// 调用 get 方法</span></span><br><span class="line">obj.<span class="property">greet</span> = <span class="string">&quot;hello&quot;</span>; <span class="comment">// 调用 set 方法，传入的值是：hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;say: &quot;hello&quot;&#125;</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Object.defineProperty.png" alt="数据双向绑定"></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Object.defineProperty1.jpg" alt="数据双向绑定"></p><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Object.defineProperty2.jpg" alt="数据双向绑定"><br>数据双向绑定</p><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/lifecycle.png" alt="Vue生命周期"><br>Vue生命周期</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native for Windows 0.61 起步</title>
      <link href="/2020/05/14/01-React-Native-Windows%E4%B9%8B%E8%B5%B7%E6%AD%A5/"/>
      <url>/2020/05/14/01-React-Native-Windows%E4%B9%8B%E8%B5%B7%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><ul><li>Windows 10</li></ul><h1 id="开发依赖"><a href="#开发依赖" class="headerlink" title="开发依赖"></a>开发依赖</h1><ul><li>安装 Visual Studio 2019</li><li>安装 Visual Studio 2019 的这些选项<ul><li>工作负载 -&gt; 通用 Windows 平台开发 -&gt; 勾选可选项里的 “C++ (v141)通用 Windows 平台工具”</li><li>工作负载 -&gt; 使用 C++ 的桌面开发</li><li>单个组件 -&gt; 编译器、生成工具和运行时 -&gt; MSVC v141 – VS 2017 C++ x64&#x2F;x86 生成工具(v14.16)</li><li>单个组件 -&gt; 编译器、生成工具和运行时 -&gt; MSVC v141 – VS 2017 C++ ARM64 生成工具(v14.16)</li><li>单个组件 -&gt; 开发活动 -&gt; Node.js 开发工具</li><li>预计安装所需空间大小：21.64GB</li></ul></li></ul><h1 id="安装-React-Native-的开发依赖"><a href="#安装-React-Native-的开发依赖" class="headerlink" title="安装 React Native 的开发依赖"></a>安装 React Native 的开发依赖</h1><ul><li>安装标准的 React Native 开发依赖，中文文档</li><li>安装 node.js，确保node的版本是12.9.1或是更高，12.9.1是构建 React Native for Windows 推荐的版本</li><li>安装 Chrome，用于调式JS,可选</li><li>安装 Yarn，可选安装，如果你想为 react-native-windows 添砖加瓦则续安装</li></ul><h1 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h1><ul><li>如果在运行应用程序后，打包程序未更新或应用程序未显示 React Native 内容-请关闭打包程序命令提示符窗口，并确保该应用程序已打开，然后运行 yarn start 并再次从 Visual Studio 运行该应用程序。</li><li>如果您在UWP应用程序窗口中看到带有错误消息：的红色错误框，请 ERROR: Instance failed to start. A connection with the server cannot be established 确保您正在使用打包 yarn start 程序运行，然后再次运行该应用程序。</li></ul><h1 id="安装-React-Native-for-Windows"><a href="#安装-React-Native-for-Windows" class="headerlink" title="安装 React Native for Windows"></a>安装 React Native for Windows</h1><ul><li>在需要创建项目的目录下面执行 <code>react-native init</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init &lt;project name&gt; --version ^<span class="number">0.61</span><span class="number">.5</span></span><br><span class="line"><span class="comment">// npx 还能避免全局安装的模块,安装模块时会下载到一个临时目录，使用以后再删除</span></span><br><span class="line"><span class="comment">// –version ^0.61.5 指定版本号</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="安装-Windows-扩展"><a href="#安装-Windows-扩展" class="headerlink" title="安装 Windows 扩展"></a>安装 Windows 扩展</h1><ul><li>安装 React Native for Windows 软件包<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project name&gt; </span><br><span class="line">npx react-native-windows-init --overwrite</span><br><span class="line"><span class="comment">// 切换到创建项目的目录下面然后安装</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="运行-React-Native-Windows-应用"><a href="#运行-React-Native-Windows-应用" class="headerlink" title="运行 React Native Windows 应用"></a>运行 React Native Windows 应用</h1><ul><li>运行前确保浏览器已经打开</li><li>在 VS Code 中运行<ul><li>安装 VS Code 插件： React Native Tools</li><li>在应用程根目录创建文件 .vscode&#x2F;launch.json，并粘贴如下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Debug Windows&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;reactnative&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;platform&quot;</span>: <span class="string">&quot;windows&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx react-native run-windows</span><br><span class="line"><span class="comment">// 第一次启动会有点慢，安装后会淡出一个命令提示符窗口，请按回车以继续</span></span><br></pre></td></tr></table></figure><ul><li>按 “r” 键可以重载应用</li></ul><h1 id="在-Visual-Studio-中运行"><a href="#在-Visual-Studio-中运行" class="headerlink" title="在 Visual Studio 中运行"></a>在 Visual Studio 中运行</h1><ul><li>在 Visual Studio 中打开解决方案文件（如：”\windowsAppDemo\windows\windowsAppDemo.sln”）</li><li>如果 Visual Studio 显示无法加载，可以关闭 Visual Studio 然后重新打开</li><li>在项目目录项目下打开命令行提示符运行yarn start</li><li>在 Visual Studio 中的菜单下面选 Debug -&gt; x64 -&gt; 本地计算机（点击绿色三角按钮启动）<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/welcome-react-native-for-windows.png" alt="应用运行成功截图"><!-- 应用运行成功截图 --></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Native </tag>
            
            <tag> React-Native-Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用正则表达式</title>
      <link href="/2020/05/14/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/05/14/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="匹配数字或版本号"><a href="#匹配数字或版本号" class="headerlink" title="匹配数字或版本号"></a>匹配数字或版本号</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.b（eg: 1.0, 1.100, 甚至 1.1000）</span></span><br><span class="line"><span class="comment">// a.b.c (eg: 1.1.1, 1.12.1, 甚至 1.121.1)</span></span><br><span class="line"><span class="comment">// a（a可能&gt;5位）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不限长度版本</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^\d+$|^\d+\.\d+$|^\d+(\.\d+)&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="comment">// 限制长度（每一位版本号应该是一位数）</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^\d$|^\d\.\d$|^\d(\.\d)&#123;1,2&#125;$/</span>;</span><br></pre></td></tr></table></figure><h1 id="正数的正则表达式"><a href="#正数的正则表达式" class="headerlink" title="正数的正则表达式"></a>正数的正则表达式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正数的正则表达式(包括0，小数保留两位)：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^((0&#123;1&#125;\.\d&#123;1,2&#125;)|([1-9]\d*\.&#123;1&#125;\d&#123;1,2&#125;)|([1-9]+\d*)|0)$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正数的正则表达式(不包括0，小数保留两位)：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^((0&#123;1&#125;\.\d&#123;1,2&#125;)|([1-9]\d*\.&#123;1&#125;\d&#123;1,2&#125;)|([1-9]+\d*))$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正整数的正则表达式(包括0)：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^[+]&#123;0,1&#125;(\d+)$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正整数的正则表达式(不包括0)：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^[1-9]\d*$/</span></span><br></pre></td></tr></table></figure><h1 id="折扣正则表达式"><a href="#折扣正则表达式" class="headerlink" title="折扣正则表达式"></a>折扣正则表达式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 折扣（0-1）的小数的正则表达式(包括1)：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^(0\.\d+|1)$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 折扣（0-1）的小数的正则表达式(不包括1)：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Reg</span> = <span class="regexp">/^(0\.\d+)$/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象组件实现节流/防抖</title>
      <link href="/2020/05/04/%E6%8A%BD%E8%B1%A1%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81and%E9%98%B2%E6%8A%96/"/>
      <url>/2020/05/04/%E6%8A%BD%E8%B1%A1%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81and%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<h1 id="节流-防抖"><a href="#节流-防抖" class="headerlink" title="节流&#x2F;防抖"></a>节流&#x2F;防抖</h1><ul><li>节流：<ul><li>一个函数执行一次后，只有大于设定的执行周期后才会被执行第二次(点击事件)</li><li>有个需要频繁触发的函数，出于优化性能角度，在规定时间内，只让函数触发的第一次生效后面不生效</li></ul></li><li>防抖：<ul><li>一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面不生效</li></ul></li></ul><h2 id="Vue实现函数防抖组件"><a href="#Vue实现函数防抖组件" class="headerlink" title="Vue实现函数防抖组件"></a>Vue实现函数防抖组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="keyword">function</span> (<span class="params">fn, wait = <span class="number">50</span>, isDebounce, ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">let</span> lastCall = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...params</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDebounce) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(ctx, params)</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">      <span class="keyword">if</span> (now - lastCall &lt; wait) <span class="keyword">return</span></span><br><span class="line">      lastCall = now</span><br><span class="line">      fn.<span class="title function_">apply</span>(ctx, params)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Throttle&quot;</span>,</span><br><span class="line">  <span class="attr">abstract</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">events</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">isDebounce</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventKeys</span> = <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">originMap</span> = &#123;&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">throttledMap</span> = &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventKeys</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> target = vnode.<span class="property">data</span>.<span class="property">on</span>[key]</span><br><span class="line">      <span class="keyword">if</span> (target === <span class="variable language_">this</span>.<span class="property">originMap</span>[key] &amp;&amp; <span class="variable language_">this</span>.<span class="property">throttledMap</span>[key]) &#123;</span><br><span class="line">        vnode.<span class="property">data</span>.<span class="property">on</span>[key] = <span class="variable language_">this</span>.<span class="property">throttledMap</span>[key]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">originMap</span>[key] = target</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">throttledMap</span>[key] = <span class="title function_">throttle</span>(target, <span class="variable language_">this</span>.<span class="property">time</span>, <span class="variable language_">this</span>.<span class="property">isDebounce</span>, vnode)</span><br><span class="line">        vnode.<span class="property">data</span>.<span class="property">on</span>[key] = <span class="variable language_">this</span>.<span class="property">throttledMap</span>[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过第三个参数 isDebounce来控制切换防抖节流</span></span><br><span class="line"><span class="comment">// 在 main.js 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Throttle</span> <span class="keyword">from</span> <span class="string">&quot;./Throttle&quot;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;Throttle&quot;</span>, <span class="title class_">Throttle</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Throttle</span> <span class="attr">:timer</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">events</span>=<span class="string">&quot;click&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">botton</span> @<span class="attr">click</span>=<span class="string">&quot;onClick($event, 1)&quot;</span>&gt;</span>click + 1 &#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Throttle</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Throttle</span> <span class="attr">:timer</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">events</span>=<span class="string">&quot;click&quot;</span> <span class="attr">:isDebounce</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">botton</span> @<span class="attr">click</span>=<span class="string">&quot;onAdd&quot;</span>&gt;</span>click + 3 &#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Throttle</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Throttle</span> <span class="attr">:timer</span>=<span class="string">&quot;3300&quot;</span> <span class="attr">events</span>=<span class="string">&quot;mouseleave&quot;</span> <span class="attr">:isDebounce</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">botton</span> @<span class="attr">mouseleave.prevent</span>=<span class="string">&quot;onAdd&quot;</span>&gt;</span>click + 3 &#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Throttle</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">onClick</span>(<span class="params">$ev,val</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = val</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">onAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> += <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现一个防抖函数"><a href="#实现一个防抖函数" class="headerlink" title="实现一个防抖函数"></a>实现一个防抖函数</h2>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在第一次触发事件时，不立即执行，而是在给定的时间值后，如果没有再次触发就执行，如果触发了，就取消当前的计时，然后重新计时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 需要防抖的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; delay 毫秒，防抖时间值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay=<span class="number">300</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(fn, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一个节流函数"><a href="#实现一个节流函数" class="headerlink" title="实现一个节流函数"></a>实现一个节流函数</h2>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似控制阀门定期开放的函数，即让函数执行一次后，在间隔的时间里暂时失效不能再次执行，等过了间隔时间又重新激活（相当于冷却时间）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 需要节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; delay 毫秒，节流间隔时间值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay=<span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!valid) &#123;</span><br><span class="line">      <span class="comment">// 休息时间，不执行函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工作时间，执行函数，并且在间隔期间内把状态设为无效</span></span><br><span class="line">    valid = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>()</span><br><span class="line">      valid = <span class="literal">true</span></span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防抖函数的图形化表述"><a href="#防抖函数的图形化表述" class="headerlink" title="防抖函数的图形化表述"></a>防抖函数的图形化表述</h2><ul><li><p>防抖函数</p><style>    .con {        box-sizing: border-box !important;        width: 600px;        height: 200px;        background: #eeeeee;        padding: 20px;    }    .rate-con {        width: 500px;        height: 46px;        position: relative;        margin: 20px;        border: 1px solid #000;    }    .rate {        box-sizing: border-box !important;        border: none !important;        padding: 0 !important;        margin: 0 !important;        width: 500px !important;        height: 45px !important;        position: absolute;        left: 50%;        top: 50%;        transform: translate(-50%, -50%);        font-size: 16px !important;        color: red;        z-index: 99;        background: none !important;        padding-left: 10px !important;    }    .rate-bg {      box-sizing: border-box !important;        position: absolute;        width: 0px;        height: 42px;        left: 1px;        top: 1px;        background: #58bc58;    }    .btn-list {        width: 500px;        text-align: center;        padding: 20px;    }    .btn-list button {        padding: 10px 30px;        border: none;        cursor: pointer;        font-size: 14px;    }    .install {        background: #58bc58;    }    .reset {        background: #ccc;    }</style><div class="con">    <div class="rate-con" id="">        <input type="text" value="0%" class="rate" id="rate">        <div class="rate-bg" id="rateBg"></div>    </div>    <div class="btn-list">        <button class="install" id="install">安装</button>        <button class="reset" id="reset">重置</button>    </div></div><script>    let rateTimer = null    let installBtn = document.getElementById('install')    let resetBtn = document.getElementById('reset')    let rateBg = document.getElementById('rateBg')    let rateInput = document.getElementById('rate')    let defaultWidth = 0    installBtn.onclick = () => {        if (defaultWidth > 494) {            alert("已经安装完成啦，请重置或刷新")        } else {            defaultWidth = 0            rateing()        }    }    resetBtn.onclick = () => {        defaultWidth = 0        rateBg.style.width = 0 + "px"        rateInput.value = "0%"        clearInterval(rateTimer)    }    function rateing() {        if (rateTimer) {            clearInterval(rateTimer)        }        rateTimer = setInterval(() => {            console.log();            if (defaultWidth > 494) {                clearInterval(rateTimer)                alert("安装完成啦")            }            let w = defaultWidth + 1            rateBg.style.width = w + 'px'            defaultWidth = w            rateInput.value = ((defaultWidth / 494) * 100).toFixed(0) + "%"        }, 10)    }</script></li><li><p>防抖函数类似此安装，只要进度没到100%，重新点击安装按钮他就会从头开始安装，直到安装进度能达到100%的时候才会触发事件，否则就不会触发</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 节流/防抖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分支管理策略</title>
      <link href="/2020/03/02/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/"/>
      <url>/2020/03/02/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Git分支管理策略"><a href="#Git分支管理策略" class="headerlink" title="Git分支管理策略"></a>Git分支管理策略</h1><h2 id="一-主分支Master"><a href="#一-主分支Master" class="headerlink" title="一. 主分支Master"></a>一. 主分支Master</h2><ul><li><p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/master.png" alt="master分支"></p></li><li><p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p></li></ul><h2 id="二、开发分支Develop"><a href="#二、开发分支Develop" class="headerlink" title="二、开发分支Develop"></a>二、开发分支Develop</h2><ul><li><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Develop.png" alt="Develop分支"></p></li><li><p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p></li><li><p>Git创建Develop分支的命令：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop master</span><br><span class="line"><span class="comment">//后面是跟一个master说明，创建的develop分支是基于当前的master， 如果当前就在master分支，则可以不写。 如果当前分支HEAD指向的是别的分支，又想基于master分支创建，就必须写master</span></span><br></pre></td></tr></table></figure></li><li><p>将Develop分支发布到Master分支的命令：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切换到Master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment">// 对Develop分支进行合并</span></span><br><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure></li><li><p>git merge –no-ff develop 中的 –no-ff 参数是什么意思。默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将Master分支指向Develop分支。</p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/merge1.png" alt="快速marge"></p></li><li><p>使用–no-ff参数后，会执行正常合并(如下图)，在Master分支上生成一个新节点。(更希望使用这种做法，保证版本演进清晰)</p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/merge2.png" alt="正常marge"></p></li></ul><h2 id="三、临时性分支"><a href="#三、临时性分支" class="headerlink" title="三、临时性分支"></a>三、临时性分支</h2><ul><li>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</li><li>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能（feature）分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 预发布（release）分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修补bug（fixbug）分支</span></span><br></pre></td></tr></table></figure></li><li>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</li></ul><h2 id="四、-功能分支"><a href="#四、-功能分支" class="headerlink" title="四、 功能分支"></a>四、 功能分支</h2><ul><li><p>功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/feature-develop.png" alt="功能分支"></p></li><li><p>功能分支的名字，可以采用feature-*的形式命名。</p></li><li><p>创建一个功能分支：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure></li><li><p>开发完成后，将功能分支合并到develop分支：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure></li><li><p>删除feature分支：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-x</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、预发布分支"><a href="#五、预发布分支" class="headerlink" title="五、预发布分支"></a>五、预发布分支</h2><ul><li>预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</li><li>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</li><li>创建一个预发布分支：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-<span class="number">1.2</span> develop</span><br></pre></td></tr></table></figure></li><li>确认没有问题后，合并到master分支：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-<span class="number">1.2</span></span><br><span class="line"><span class="comment">// 对合并生成的新节点，做一个标签</span></span><br><span class="line">git tag -a <span class="number">1.2</span></span><br></pre></td></tr></table></figure></li><li>再合并到develop分支：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-<span class="number">1.2</span></span><br></pre></td></tr></table></figure></li><li>最后，删除预发布分支：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d release-<span class="number">1.2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="六、修补bug分支"><a href="#六、修补bug分支" class="headerlink" title="六、修补bug分支"></a>六、修补bug分支</h2><ul><li><p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p></li><li><p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/fixbug.png" alt="修补bug分支"></p></li><li><p>创建一个修补bug分支：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b fixbug-<span class="number">0.1</span> master</span><br></pre></td></tr></table></figure></li><li><p>修补结束后，合并到master分支：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff fixbug-<span class="number">0.1</span></span><br><span class="line">git tag -a <span class="number">0.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></li><li><p>再合并到develop分支：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff fixbug-<span class="number">0.1</span></span><br></pre></td></tr></table></figure></li><li><p>最后，删除”修补bug分支”：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d fixbug-<span class="number">0.1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 版本控制工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些自己的项目规范</title>
      <link href="/2020/02/13/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
      <url>/2020/02/13/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="项目目录规范"><a href="#项目目录规范" class="headerlink" title="项目目录规范"></a>项目目录规范</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">└─<span class="title class_">Code</span></span><br><span class="line">├─www.<span class="property">github</span>.<span class="property">com</span></span><br><span class="line">│ ├─project1</span><br><span class="line">│ ├─project2</span><br><span class="line">│ └─project3</span><br><span class="line">└─www.<span class="property">xxx1</span>.<span class="property">com</span></span><br><span class="line">├─project1</span><br><span class="line">├─project2</span><br><span class="line">└─project3</span><br></pre></td></tr></table></figure><h2 id="项目文件名及项目内命名规范"><a href="#项目文件名及项目内命名规范" class="headerlink" title="项目文件名及项目内命名规范"></a>项目文件名及项目内命名规范</h2><ul><li>组件名，小驼峰：<code>testComponents</code></li><li>函数名，小驼峰：<code>testFunction</code></li><li>类名，横线：<code>test-class</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用笔记</title>
      <link href="/2020/01/13/Linux%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/13/Linux%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-软件装在哪里？"><a href="#Linux-软件装在哪里？" class="headerlink" title="Linux 软件装在哪里？"></a>Linux 软件装在哪里？</h1><h2 id="1-opt目录"><a href="#1-opt目录" class="headerlink" title="1. opt目录"></a>1. opt目录</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`/opt`</span> 是用来安装附加软件包，是用户级程序目录，</span><br><span class="line">相当于 <span class="string">`D:/soft`</span>，<span class="string">`opt`</span>有可选的意思，</span><br><span class="line">安装到<span class="string">`/opt`</span>目录下的程序，所有的数据、库文件都会放置在同一个目录下</span><br></pre></td></tr></table></figure><h2 id="2-usr目录"><a href="#2-usr目录" class="headerlink" title="2. &#x2F;usr目录"></a>2. &#x2F;usr目录</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`/usr`</span>: 相当于 <span class="attr">C</span>:/<span class="title class_">Windows</span></span><br><span class="line"><span class="string">`/usr/lib`</span>: 相当于 <span class="string">`C:/Windows/System32`</span></span><br><span class="line"><span class="string">`/usr/local`</span>: 相当于 <span class="string">`C:/Progrem Files`</span>  是用户级程序目录，用户自己编译的软件默认会安装到此目录（存放手动安装的软件，即不是通过<span class="string">&#x27;yum&#x27;</span>或<span class="string">&#x27;apt-get&#x27;</span>安装的软件）</span><br><span class="line">它和/usr有相似的目录结构，让软件包管理器来管理<span class="string">`/usr`</span>，而把自定义脚本放到<span class="string">`/usr/local`</span>目录下</span><br></pre></td></tr></table></figure><h1 id="源码放哪里"><a href="#源码放哪里" class="headerlink" title="源码放哪里"></a>源码放哪里</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`/usr/src`</span> 系统级的源码目录</span><br><span class="line"><span class="string">`/usr/local/src`</span> 用户级的源码目录</span><br></pre></td></tr></table></figure><h1 id="Linux软件包管理（安装、删除）"><a href="#Linux软件包管理（安装、删除）" class="headerlink" title="Linux软件包管理（安装、删除）"></a>Linux软件包管理（安装、删除）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span> 下载软件包：wget 软件包地址</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 手动安装（tar.<span class="property">gz</span>源、tar.<span class="property">bz2</span>源）</span><br><span class="line">  ① 下载相应的软件包，如soft.<span class="property">tar</span>.<span class="property">gz</span>/soft.<span class="property">tar</span>.<span class="property">bz2</span></span><br><span class="line">  ② cd soft.<span class="property">tar</span>.<span class="property">gz</span>/soft.<span class="property">tar</span>.<span class="property">bz2</span>所在的目录</span><br><span class="line">  ③ tar -xzvf soft.<span class="property">tar</span>.<span class="property">gz</span>     <span class="comment">//一般会生成一个soft目录</span></span><br><span class="line">  ④ cd soft </span><br><span class="line">  ⑤./configure      <span class="comment">// 为编译做准备</span></span><br><span class="line">  ⑥ make            <span class="comment">// 编译软件 （时间很久）</span></span><br><span class="line">  ⑦ make install    <span class="comment">// 安装软件</span></span><br><span class="line">  ⑧ make clean      <span class="comment">// 删除安装产生的临时文件  </span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> rpm包安装</span><br><span class="line">  ① 下载相应的软件包，如soft.<span class="property">version</span>.<span class="property">rpm</span></span><br><span class="line">  ② cd soft.<span class="property">version</span>.<span class="property">rpm</span>所在的目录</span><br><span class="line">  ③ rpm -ivh soft.<span class="property">version</span>.<span class="property">rpm</span>   <span class="comment">// -i 安装软件 -t 测试安装，不是真的安装 -p 显示安装进度 -f 忽略任何错误 -U 升级安装 -v 检测套件是否正确安装</span></span><br><span class="line">  ④ 卸载 rpm -e 软件名</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> dep包安装</span><br><span class="line">  ① 下载相应的软件包，如soft.<span class="property">version</span>.<span class="property">dep</span></span><br><span class="line">  ② cd soft.<span class="property">version</span>.<span class="property">dep</span>所在目录</span><br><span class="line">  ③ dpkg -i soft.<span class="property">version</span>.<span class="property">dep</span></span><br><span class="line">  ④ 卸载 dpkg -e 软件名</span><br><span class="line">  ⑤ 查看已安装的软件包 dpkg –l <span class="string">&#x27;*软件包名*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> apt方式安装（安装deb包）</span><br><span class="line">  ① apt-cache search 软件包</span><br><span class="line">  ② apt-get install 软件包</span><br><span class="line">  ③ 删除（保留配置文件） apt-get remove 软件名</span><br><span class="line">  ④ 删除（不保留配置文件） apt-get --purge remove 软件名</span><br><span class="line">  ⑤ dpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。</span><br><span class="line">    apt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。</span><br><span class="line">    apt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.<span class="property">deb</span>文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.<span class="property">deb</span>文件一并删除。</span><br><span class="line">    apt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。</span><br><span class="line">    apt-get upgrade——更新所有已安装的软件包</span><br><span class="line">    apt-get dist-upgrade——将系统升级到新版本</span><br><span class="line">    apt-cache search string——在软件包列表中搜索字符串</span><br><span class="line">    apt-cache showpkg pkgs——显示软件包信息。</span><br><span class="line">    apt-cache stats——查看库里有多少软件</span><br><span class="line">    apt-cache dumpavail——打印可用软件包列表。</span><br><span class="line">    apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。</span><br><span class="line">    apt-cache pkgnames——打印软件包列表中所有软件包的名称</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> yum方式安装</span><br><span class="line">  ① yum -y install 软件包</span><br><span class="line">  ② 卸载 yum remove 软件名</span><br><span class="line">  ③ 已安装列表 yum list all</span><br><span class="line">  ④ 查看软件包信息 yum info 软件名</span><br><span class="line">  ⑥ 升级所有的软件包 yum update 软件名 </span><br><span class="line">  ⑦ 清除所有包缓存  yum clean all </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换yum源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先备份/etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line">mv /etc/yum.<span class="property">repos</span>.<span class="property">d</span>/<span class="title class_">CentOS</span>-<span class="title class_">Base</span>.<span class="property">repo</span> /etc/yum.<span class="property">repos</span>.<span class="property">d</span>/<span class="title class_">CentOS</span>-<span class="title class_">Base</span>.<span class="property">repo</span>.<span class="property">backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载对应版本 repo 文件, 放入 /etc/yum.repos.d/ (操作前请做好相应备份)</span></span><br><span class="line"><span class="comment">// 163源</span></span><br><span class="line"><span class="title class_">CentOS5</span> ：<span class="attr">http</span>:<span class="comment">//mirrors.163.com/.help/CentOS5-Base-163.repo</span></span><br><span class="line"><span class="title class_">CentOS6</span> ：<span class="attr">http</span>:<span class="comment">//mirrors.163.com/.help/CentOS6-Base-163.repo</span></span><br><span class="line"><span class="title class_">CentOS7</span> ：<span class="attr">http</span>:<span class="comment">//mirrors.163.com/.help/CentOS7-Base-163.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 阿里云源</span></span><br><span class="line"><span class="title class_">CentOS5</span> ：<span class="attr">http</span>:<span class="comment">//mirrors.aliyun.com/repo/Centos-5.repo</span></span><br><span class="line"><span class="title class_">CentOS6</span> ：<span class="attr">http</span>:<span class="comment">//mirrors.aliyun.com/repo/Centos-6.repo</span></span><br><span class="line"><span class="title class_">CentOS7</span> ：<span class="attr">http</span>:<span class="comment">//mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载</span></span><br><span class="line">wget <span class="attr">http</span>:<span class="comment">//mirrors.163.com/.help/CentOS6-Base-163.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重命名</span></span><br><span class="line">mv <span class="title class_">CentOS6</span>-<span class="title class_">Base</span>-<span class="number">163.</span>repo <span class="title class_">CentOS</span>-<span class="title class_">Base</span>.<span class="property">repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行以下命令生成缓存</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h1 id="自己在Linux-上的一些操作"><a href="#自己在Linux-上的一些操作" class="headerlink" title="自己在Linux 上的一些操作"></a>自己在Linux 上的一些操作</h1><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v     <span class="comment">// 查看是否已安装</span></span><br><span class="line">yum install nodejs    <span class="comment">// 安装nodejs 询问时 输入 y</span></span><br><span class="line">rpm -qa | grep node <span class="comment">// 查看是否已安装</span></span><br><span class="line">rpm -ql node <span class="comment">// 查看安装路径</span></span><br></pre></td></tr></table></figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx   <span class="comment">// 安装nginx</span></span><br><span class="line"></span><br><span class="line">systemctl start nginx.<span class="property">service</span>   <span class="comment">// 启动nginx</span></span><br><span class="line">systemctl enable nginx.<span class="property">service</span>    <span class="comment">// 开机启动</span></span><br><span class="line">systemctl stop nginx.<span class="property">service</span>    <span class="comment">// 停止nginx服务</span></span><br></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><ul><li>配置两个ssl证书<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">log_format main <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">sendfile            on;</span><br><span class="line">tcp_nopush          on;</span><br><span class="line">tcp_nodelay         on;</span><br><span class="line">keepalive_timeout   65;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">include             /etc/nginx/mime.types;</span><br><span class="line">default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line"><span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line"><span class="comment"># for more information.</span></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  www.damao2250.com;</span><br><span class="line">    root         /var/www/damao;</span><br><span class="line">    <span class="comment">#告诉浏览器有效期内只准用 https 访问</span></span><br><span class="line">    add_header Strict-Transport-Security max-age=15768000;</span><br><span class="line">    <span class="comment">#永久重定向到 https 站点</span></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">Settings <span class="keyword">for</span> a TLS enabled server.</span><br><span class="line">server &#123;</span><br><span class="line">listen 443 ssl http2 default_server;</span><br><span class="line">listen [::]:443 ssl http2 default_server;</span><br><span class="line">server_name www.damao2250.com;</span><br><span class="line">root /var/www/damao;</span><br><span class="line"></span><br><span class="line">   ssl_certificate <span class="string">&quot;/opt/ssl/www.damao2250.com/www.damao2250.com.pem&quot;</span>;</span><br><span class="line">   ssl_certificate_key <span class="string">&quot;/opt/ssl/www.damao2250.com/www.damao2250.com.key&quot;</span>;</span><br><span class="line">   ssl_session_cache shared:SSL:1m;</span><br><span class="line">   ssl_session_timeout  10m;</span><br><span class="line">   ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">   ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">   include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   error_page 404 /404.html;</span><br><span class="line">       location = /40x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   error_page 500 502 503 504 /50x.html;</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ycy.damao2250.com;</span><br><span class="line">    <span class="comment">#告诉浏览器有效期内只准用 https 访问</span></span><br><span class="line">    add_header Strict-Transport-Security max-age=15768000;</span><br><span class="line">    <span class="comment">#永久重定向到 https 站点</span></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">Settings <span class="keyword">for</span> a TLS enabled server.</span><br><span class="line">server &#123;</span><br><span class="line">listen 443 ssl http2;</span><br><span class="line">listen [::]:443 ssl http2;</span><br><span class="line">server_name ycy.damao2250.com;</span><br><span class="line">root /var/www/ycy;</span><br><span class="line"></span><br><span class="line">   ssl_certificate <span class="string">&quot;/opt/ssl/ycy.damao2250.com/ycy.damao2250.com.pem&quot;</span>;</span><br><span class="line">   ssl_certificate_key <span class="string">&quot;/opt/ssl/ycy.damao2250.com/ycy.damao2250.com.key&quot;</span>;</span><br><span class="line">   ssl_session_cache shared:SSL:1m;</span><br><span class="line">   ssl_session_timeout  10m;</span><br><span class="line">   ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">   ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">   include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   error_page 404 /404.html;</span><br><span class="line">       location = /40x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   error_page 500 502 503 504 /50x.html;</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署Gitlab"><a href="#部署Gitlab" class="headerlink" title="部署Gitlab"></a>部署Gitlab</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装依赖软件</span></span><br><span class="line">yum -y install policycoreutils  policycoreutils-python openssh-server openssh-clients postfix</span><br><span class="line"><span class="comment">// but already installed and latest version  &amp;&amp;　Nothing to do</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启postfix， postfix支持gitlab发信功能，设置postfix开机自启</span></span><br><span class="line">systemctl enable postfix &amp;&amp; systemctl start postfix</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如若 postfix 无法启动</span></span><br><span class="line"><span class="comment">// 修改 /etc/postfix/main.cf</span></span><br><span class="line">inet_interfaces = all</span><br><span class="line">inet_protocols = ipv4</span><br><span class="line">systemctl start postfix</span><br><span class="line">systemctl enable postfix</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如无法ssh来远程连接主机的 开启 ssh </span></span><br><span class="line">systemctl enable sshd</span><br><span class="line">systemctl start sshd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装防火墙</span></span><br><span class="line">yum install firewalld systemd -y</span><br><span class="line"><span class="comment">// 开启防火墙</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment">// 添加http服务到firewalld,pemmanent表示永久生效，若不加--permanent系统下次启动后就会失效。</span></span><br><span class="line">firewall-cmd --permanent --add-service=http</span><br><span class="line"><span class="comment">// 重启防火墙</span></span><br><span class="line">systemctl reload firewalld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载gitlab</span></span><br><span class="line">wget <span class="attr">https</span>:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.5.0-ce.0.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装 ce代表社区版 ee代表企业版</span></span><br><span class="line">rpm -i gitlab-ce-<span class="number">12.5</span><span class="number">.0</span>-ce<span class="number">.0</span>.<span class="property">el7</span>.<span class="property">x86_64</span>.<span class="property">rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改配置文件 gitlab.rb  使用外部nginx 不使用内部nginx</span></span><br><span class="line">vim /etc/gitlab/gitlab.<span class="property">rb</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">external_url <span class="string">&#x27;http://120.79.166.206:8888&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置并启动gitlab</span></span><br><span class="line">gitlab-ctl stop</span><br><span class="line"></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果执行 gitlab-ctl reconfigure 卡死在 ruby_block[authorize Grafana with GitLab] action run   就强制结束  ctrl+c 然后</span></span><br><span class="line">systemctl restart gitlab-runsvdir</span><br><span class="line"><span class="comment">// 再</span></span><br><span class="line">gitlab-ctl stop</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问报502。原因是nginx用户无法访问gitlab用户的socket文件。 重启gitlab需要重新授权</span></span><br><span class="line">chmod -R o+x /<span class="keyword">var</span>/opt/gitlab/gitlab-rails</span><br><span class="line"><span class="comment">// 访问502也可能是  内存太小 超时了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始账户: root 密码:5iveL!fe</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完全卸载GitLab</span></span><br><span class="line"><span class="comment">// 一. 停止gitlab</span></span><br><span class="line"><span class="comment">//     sudo gitlab-ctl stop</span></span><br><span class="line"><span class="comment">// 二、卸载gitlab（这块注意了，看看是gitlab-ce版本还是gitlab-ee版本，别写错误了）</span></span><br><span class="line"><span class="comment">//     sudo rpm -e gitlab-ce</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三、查看gitlab进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     ps -ef|grep gitlab</span></span><br><span class="line"><span class="comment">// 　    杀掉第一个守护进程(runsvdir -P /opt/gitlab/service log)</span></span><br><span class="line"><span class="comment">// 　    kill -9 4473</span></span><br><span class="line"><span class="comment">// 　    再次查看gitlab进程是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四、删除gitlab文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         find / -name *gitlab*|xargs rm -rf      删除所有包含gitlab的文件及目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         find / -name gitlab |xargs rm -rf </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         删除gitlab-ctl uninstall时自动在root下备份的配置文件（ls /root/gitlab* 看看有没有，有也删除）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过以上几步就可以彻底卸载gitlab</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下的Nginx及OpenResty的基础使用</title>
      <link href="/2019/12/31/Windows%E4%B8%8B%E7%9A%84Nginx%E5%8F%8AOpenResty%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/31/Windows%E4%B8%8B%E7%9A%84Nginx%E5%8F%8AOpenResty%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx基础命令"><a href="#Nginx基础命令" class="headerlink" title="Nginx基础命令"></a>Nginx基础命令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动</span></span><br><span class="line">start nginx</span><br><span class="line">nginx.<span class="property">exe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line">nginx -s stop   <span class="comment">// 快速停止，不保存信息</span></span><br><span class="line">nginx -s quit   <span class="comment">// 完整有序停止并保存信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新载入</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新打开日志文件</span></span><br><span class="line">nginx -s reopen</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 Nginx 版本</span></span><br><span class="line">nginx -v  <span class="comment">// 简单</span></span><br><span class="line">nginx -V  <span class="comment">// 详细</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 Nginx 是否正常启动</span></span><br><span class="line">tasklist/fi <span class="string">&quot;imagename eq nginx.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 杀对应pid进程</span></span><br><span class="line">taskklii /pid &#123;pid&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制杀对应pid进程</span></span><br><span class="line">taskklii /pid &#123;pid&#125; /f</span><br><span class="line"></span><br><span class="line"><span class="comment">// 杀nginx全部进程</span></span><br><span class="line">taskkill /im nginx.<span class="property">exe</span> /f</span><br></pre></td></tr></table></figure><h2 id="Nginx配置详解"><a href="#Nginx配置详解" class="headerlink" title="Nginx配置详解"></a>Nginx配置详解</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ########### 每个指令必须有分号结束。#################</span></span><br><span class="line"><span class="comment">// #user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span></span><br><span class="line"><span class="comment">// #worker_processes 2;  #允许生成的进程数，默认为1</span></span><br><span class="line"><span class="comment">// #pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span></span><br><span class="line"><span class="comment">// error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line"><span class="comment">// events &#123;</span></span><br><span class="line"><span class="comment">//     accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line"><span class="comment">//     multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line"><span class="comment">//     #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line"><span class="comment">//     worker_connections  1024;    #最大连接数，默认为512</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// http &#123;</span></span><br><span class="line"><span class="comment">//     include       mime.types;   #文件扩展名与文件类型映射表</span></span><br><span class="line"><span class="comment">//     default_type  application/octet-stream; #默认文件类型，默认为text/plain</span></span><br><span class="line"><span class="comment">//     #access_log off; #取消服务日志    </span></span><br><span class="line"><span class="comment">//     log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span></span><br><span class="line"><span class="comment">//     access_log log/access.log myFormat;  #combined为日志格式的默认值</span></span><br><span class="line"><span class="comment">//     sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span></span><br><span class="line"><span class="comment">//     sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line"><span class="comment">//     keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     upstream mysvr &#123;   </span></span><br><span class="line"><span class="comment">//       server 127.0.0.1:7878;</span></span><br><span class="line"><span class="comment">//       server 192.168.10.121:3333 backup;  #热备</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     error_page 404 https://www.baidu.com; #错误页</span></span><br><span class="line"><span class="comment">//     server &#123;</span></span><br><span class="line"><span class="comment">//         keepalive_requests 120; #单连接请求上限次数。</span></span><br><span class="line"><span class="comment">//         listen       4545;   #监听端口</span></span><br><span class="line"><span class="comment">//         server_name  127.0.0.1;   #监听地址       </span></span><br><span class="line"><span class="comment">//         location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line"><span class="comment">//            #root path;  #根目录</span></span><br><span class="line"><span class="comment">//            #index vv.txt;  #设置默认页</span></span><br><span class="line"><span class="comment">//            proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span></span><br><span class="line"><span class="comment">//            deny 127.0.0.1;  #拒绝的ip</span></span><br><span class="line"><span class="comment">//            allow 172.18.5.54; #允许的ip           </span></span><br><span class="line"><span class="comment">//         &#125; </span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// # 1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；</span></span><br><span class="line"><span class="comment">// # 2.$remote_user ：用来记录客户端用户名称；</span></span><br><span class="line"><span class="comment">// # 3.$time_local ： 用来记录访问时间与时区；</span></span><br><span class="line"><span class="comment">// # 4.$request ： 用来记录请求的url与http协议；</span></span><br><span class="line"><span class="comment">// # 5.$status ： 用来记录请求状态；成功是200；</span></span><br><span class="line"><span class="comment">// # 6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line"><span class="comment">// # 7.$http_referer ：用来记录从那个页面链接访问过来的；</span></span><br><span class="line"><span class="comment">// # 8.$http_user_agent ：记录客户端浏览器的相关信息；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// # 1、全局块（events块之前）：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</span></span><br><span class="line"><span class="comment">// # 2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</span></span><br><span class="line"><span class="comment">// # 3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</span></span><br><span class="line"><span class="comment">// # 4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</span></span><br><span class="line"><span class="comment">// # 5、location块：配置请求的路由，以及各种页面的处理情况。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> OpenResty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决elment-ui折叠和收缩导航栏延时动画效果</title>
      <link href="/2019/12/12/%E8%A7%A3%E5%86%B3elment-ui%E6%8A%98%E5%8F%A0%E5%92%8C%E6%94%B6%E7%BC%A9%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%BB%B6%E6%97%B6%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
      <url>/2019/12/12/%E8%A7%A3%E5%86%B3elment-ui%E6%8A%98%E5%8F%A0%E5%92%8C%E6%94%B6%E7%BC%A9%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%BB%B6%E6%97%B6%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="解决elment-ui折叠和收缩导航栏延时动画效果"><a href="#解决elment-ui折叠和收缩导航栏延时动画效果" class="headerlink" title="解决elment-ui折叠和收缩导航栏延时动画效果"></a>解决elment-ui折叠和收缩导航栏延时动画效果</h2><ul><li><p>解决方法：</p><ul><li>最外层包一层div</li><li>通过div类名设置样式穿透<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout-aside-menu</span> /deep/ <span class="selector-class">.collapse-transition</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="number">0s</span> height, <span class="number">0s</span> padding-top, <span class="number">0s</span> padding-bottom;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0s</span> height, <span class="number">0s</span> padding-top, <span class="number">0s</span> padding-bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout-aside-menu</span> /deep/ <span class="selector-class">.horizontal-collapse-transition</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="number">0s</span> width, <span class="number">0s</span> padding-left, <span class="number">0s</span> padding-right;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0s</span> width, <span class="number">0s</span> padding-left, <span class="number">0s</span> padding-right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout-aside-menu</span> /deep/ <span class="selector-class">.horizontal-collapse-transition</span> <span class="selector-class">.el-submenu__title</span> <span class="selector-class">.el-submenu__icon-arrow</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>补充点：</p><ul><li>stylus的样式穿透 使用 <code>&gt;&gt;&gt;</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  外层 &gt;&gt;&gt; 第三方组件 &#123;</span></span><br><span class="line"><span class="comment">    样式</span></span><br><span class="line"><span class="comment">  &#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.wrapper</span> &gt;&gt;&gt; <span class="selector-class">.swiper-pagination-bullet-active</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>sass和less的样式穿透 使用 <code>/deep/</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    外层 /deep/ 第三方组件 &#123;</span></span><br><span class="line"><span class="comment">      样式</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="selector-class">.wrapper</span> /deep/ <span class="selector-class">.swiper-pagination-bullet-active</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-indigo使用遇到的问题</title>
      <link href="/2019/12/11/hexo-theme-indigo%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/11/hexo-theme-indigo%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-主题地址"><a href="#Hexo-主题地址" class="headerlink" title="Hexo 主题地址"></a>Hexo 主题地址</h1><ul><li><a href="https://github.com/yscoder/hexo-theme-indigo">https://github.com/yscoder/hexo-theme-indigo</a></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>主页的导航栏关闭的×按钮，以及搜索按钮，分享按钮，每次点击出现动画前都会新打开一个about:blank#blocked页面。查看html发现相应的 a标签中都有 target&#x3D;’_blank’</li><li>可能是在编译的时候默认把a标签的target属性自动补上了，要是a标签本身就有target这个属性就不会往上加了</li></ul><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><ul><li>菜单关闭按钮<ul><li>打开themes\indigo\layout_partial\menu.ejs</li><li>找到 id&#x3D;”menu-off” 的a标签</li><li>在a标签上新增 target&#x3D;””</li></ul></li><li>搜索图标菜单关闭按钮<ul><li>打开themes\indigo\layout_partial\header.ejs</li><li>找到 id&#x3D;”search” 的a标签</li><li>在a标签上新增 target&#x3D;””</li></ul></li><li>右侧分享按钮<ul><li>打开 themes\indigo\layout_partial\header.ejs</li><li>找到 id&#x3D;”menuShare” 的a标签</li><li>在a标签上新增 target&#x3D;””</li></ul></li><li>点击赞赏按钮、关闭赞赏框<ul><li>打开 themes\indigo\layout_partial\post.ejs</li><li>找到 id&#x3D;”rewardBtn” 的a标签</li><li>在a标签上新增 target&#x3D;””</li><li>打开 themes\indigo\layout_partial\post\reward.ejs</li><li>找到 id&#x3D;”rewardOff” 的a标签</li><li>在a标签上新增 target&#x3D;””</li></ul></li></ul><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><ul><li>上传GitHub是网络连接超时<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/Damao2250/damao2250.github.io/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure></li><li>这是因为配置文件配置<code>deploy</code>仓库地址为https的原因</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>配置<code>_config.yml</code>下的<code>deploy</code>的<code>repo</code>为<code>git@xxx.git</code></li></ul><pre><code class="bash">deploy:  type: &#39;git&#39;  repo: &#39;git@github.com:Damao2250/damao2250.github.io.git&#39;  branch: &#39;master&#39;···</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDoc注释规范</title>
      <link href="/2019/12/02/JSDoc%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/"/>
      <url>/2019/12/02/JSDoc%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@abstract</span>  (同义：<span class="doctag">@virtual</span>)</span></span><br><span class="line"><span class="comment"> * 该成员必须由继承者实现（或重写）</span></span><br><span class="line"><span class="comment"> * This member must be implemented (or overridden) by the inheritor.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span></span></span><br><span class="line"><span class="comment"> * 指定此成员的访问级别（私有，程序包私有，公共或受保护）。</span></span><br><span class="line"><span class="comment"> * Specify the access level of this member (private, package-private, public, or protected).</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@alias</span></span></span><br><span class="line"><span class="comment"> * 将成员视为具有不同的名称。</span></span><br><span class="line"><span class="comment"> * Treat a member as if it had a different name.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@async</span></span></span><br><span class="line"><span class="comment"> * 表示一个函数是异步的。</span></span><br><span class="line"><span class="comment"> * Indicate that a function is asynchronous.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@augments</span></span></span><br><span class="line"><span class="comment"> * 指示符号从父符号继承并添加到父符号。</span></span><br><span class="line"><span class="comment"> * Indicate that a symbol inherits from, and adds to, a parent symbol.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * 标识项目的作者。</span></span><br><span class="line"><span class="comment"> * Identify the author of an item.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@borrows</span></span></span><br><span class="line"><span class="comment"> * 该对象使用来自另一个对象的东西</span></span><br><span class="line"><span class="comment"> * This object uses something from another object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@callback</span></span></span><br><span class="line"><span class="comment"> * 记录回调函数。</span></span><br><span class="line"><span class="comment"> * Document a callback function.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span> (同义：<span class="doctag">@constructor</span>)</span></span><br><span class="line"><span class="comment"> * 该功能旨在通过&quot;new&quot;关键字来调用。</span></span><br><span class="line"><span class="comment"> * This function is intended to be called with the &quot;new&quot; keyword.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@classdesc</span></span></span><br><span class="line"><span class="comment"> * 使用以下文本描述整个类</span></span><br><span class="line"><span class="comment"> * Use the following text to describe the entire class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constant</span> (同义：<span class="doctag">@const</span>)</span></span><br><span class="line"><span class="comment"> * 将对象记录为常量</span></span><br><span class="line"><span class="comment"> * Document an object as a constant.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructs</span></span></span><br><span class="line"><span class="comment"> * 该函数成员将是上一类的构造函数</span></span><br><span class="line"><span class="comment"> * This function member will be the constructor for the previous class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright</span></span></span><br><span class="line"><span class="comment"> * 记录一些版权信息</span></span><br><span class="line"><span class="comment"> * Document some copyright information.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@default</span></span></span><br><span class="line"><span class="comment"> * 记录默认值</span></span><br><span class="line"><span class="comment"> * Document the default value.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span></span></span><br><span class="line"><span class="comment"> * 记录这不再是首选方法</span></span><br><span class="line"><span class="comment"> * Document that this is no longer the preferred way.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> (同义：<span class="doctag">@desc</span>)</span></span><br><span class="line"><span class="comment"> * 描述一个符号</span></span><br><span class="line"><span class="comment"> * Describe a symbol.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@enum</span></span></span><br><span class="line"><span class="comment"> * 记录相关属性的集合</span></span><br><span class="line"><span class="comment"> * Document a collection of related properties.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@event</span></span></span><br><span class="line"><span class="comment"> * 记录事件</span></span><br><span class="line"><span class="comment"> * Document an event.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * 提供有关如何使用已记录项目的示例</span></span><br><span class="line"><span class="comment"> * Provide an example of how to use a documented item.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exports</span></span></span><br><span class="line"><span class="comment"> * 标识由JavaScript模块导出的成员</span></span><br><span class="line"><span class="comment"> * Identify the member that is exported by a JavaScript module.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@external</span>(同义：<span class="doctag">@host</span>)</span></span><br><span class="line"><span class="comment"> * 标识外部类，名称空间或模块</span></span><br><span class="line"><span class="comment"> * Identifies an external class, namespace, or module.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span>(同义：<span class="doctag">@fileoverview</span>,<span class="doctag">@overview</span>)</span></span><br><span class="line"><span class="comment"> * 描述一个文件</span></span><br><span class="line"><span class="comment"> * Describe a file.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@fires</span>(同义：<span class="doctag">@emits</span>)</span></span><br><span class="line"><span class="comment"> * 描述此方法可能触发的事件</span></span><br><span class="line"><span class="comment"> * Describe the events this method may fire.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@function</span>(同义：<span class="doctag">@function</span>,<span class="doctag">@method</span>)</span></span><br><span class="line"><span class="comment"> * 描述一个函数或方法</span></span><br><span class="line"><span class="comment"> * Describe a function or method.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@generator</span></span></span><br><span class="line"><span class="comment"> * 表示函数是生成器函数</span></span><br><span class="line"><span class="comment"> * Indicate that a function is a generator function.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@global</span></span></span><br><span class="line"><span class="comment"> * 记录全局对象</span></span><br><span class="line"><span class="comment"> * Document a global object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hideconstructor</span></span></span><br><span class="line"><span class="comment"> * 指示不应显示构造函数</span></span><br><span class="line"><span class="comment"> * Indicate that the constructor should not be displayed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ignore</span></span></span><br><span class="line"><span class="comment"> * 省略文档中的符号</span></span><br><span class="line"><span class="comment"> * Omit a symbol from the documentation.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implements</span></span></span><br><span class="line"><span class="comment"> * 该符号实现一个​​接口</span></span><br><span class="line"><span class="comment"> * This symbol implements an interface.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@inheritdoc</span></span></span><br><span class="line"><span class="comment"> * 指示符号应继承其父级的文档</span></span><br><span class="line"><span class="comment"> * Indicate that a symbol should inherit its parent&#x27;s documentation.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@inner</span></span></span><br><span class="line"><span class="comment"> * 记录内部对象</span></span><br><span class="line"><span class="comment"> * Document an inner object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@instance</span></span></span><br><span class="line"><span class="comment"> * 记录实例成员</span></span><br><span class="line"><span class="comment"> * Document an instance member.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@interface</span></span></span><br><span class="line"><span class="comment"> * 此符号是其他人可以实现的接口</span></span><br><span class="line"><span class="comment"> * This symbol is an interface that others can implement.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@kind</span></span></span><br><span class="line"><span class="comment"> * 这是什么符号 </span></span><br><span class="line"><span class="comment"> * What kind of symbol is this?</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@lends</span></span></span><br><span class="line"><span class="comment"> * 在对象文字上记录属性，就好像它们属于具有给定名称的符号一样</span></span><br><span class="line"><span class="comment"> * Document properties on an object literal as if they belonged to a symbol with a given name.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * 标识适用于此代码的许可证</span></span><br><span class="line"><span class="comment"> * Identify the license that applies to this code.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@listens</span></span></span><br><span class="line"><span class="comment"> * 列出符号侦听的事件</span></span><br><span class="line"><span class="comment"> * List the events that a symbol listens for.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@member</span></span></span><br><span class="line"><span class="comment"> * 记录成员</span></span><br><span class="line"><span class="comment"> * Document a member.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span></span></span><br><span class="line"><span class="comment"> * 该符号属于父符号 </span></span><br><span class="line"><span class="comment"> * This symbol belongs to a parent symbol.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mixes</span></span></span><br><span class="line"><span class="comment"> * 该对象混合了另一个对象的所有成员</span></span><br><span class="line"><span class="comment"> * This object mixes in all the members from another object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mixin</span></span></span><br><span class="line"><span class="comment"> * 记录一个混合对象</span></span><br><span class="line"><span class="comment"> * Document a mixin object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@module</span></span></span><br><span class="line"><span class="comment"> * 编写一个JavaScript模块</span></span><br><span class="line"><span class="comment"> * Document a JavaScript module.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span></span></span><br><span class="line"><span class="comment"> * 记录对象的名称</span></span><br><span class="line"><span class="comment"> * Document the name of an object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@namespace</span></span></span><br><span class="line"><span class="comment"> * 记录名称空间对象</span></span><br><span class="line"><span class="comment"> * Document a namespace object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@override</span></span></span><br><span class="line"><span class="comment"> * 指示符号覆盖其父代</span></span><br><span class="line"><span class="comment"> * Indicate that a symbol overrides its parent.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span></span></span><br><span class="line"><span class="comment"> * 此符号是软件包专用的</span></span><br><span class="line"><span class="comment"> * This symbol is meant to be package-private.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>(同义：<span class="doctag">@arg</span>,<span class="doctag">@argument</span>)</span></span><br><span class="line"><span class="comment"> * 将参数记录到函数中</span></span><br><span class="line"><span class="comment"> * Document the parameter to a function.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> * 此符号是专用的</span></span><br><span class="line"><span class="comment"> * This symbol is meant to be private.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span>(同义：<span class="doctag">@prop</span>)</span></span><br><span class="line"><span class="comment"> * 记录对象的属性</span></span><br><span class="line"><span class="comment"> * Document a property of an object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@protected</span></span></span><br><span class="line"><span class="comment"> * 此符号用于保护</span></span><br><span class="line"><span class="comment"> * This symbol is meant to be protected.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@public</span></span></span><br><span class="line"><span class="comment"> * 此符号是公开的</span></span><br><span class="line"><span class="comment"> * This symbol is meant to be public.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@readonly</span></span></span><br><span class="line"><span class="comment"> * 该符号是只读的</span></span><br><span class="line"><span class="comment"> * This symbol is meant to be read-only.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@requires</span></span></span><br><span class="line"><span class="comment"> * 该文件需要一个JavaScript模块</span></span><br><span class="line"><span class="comment"> * This file requires a JavaScript module.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> * 记录函数的返回值</span></span><br><span class="line"><span class="comment"> * Document the return value of a function.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span></span></span><br><span class="line"><span class="comment"> * 有关更多信息，请参考其他一些文档</span></span><br><span class="line"><span class="comment"> * Refer to some other documentation for more information.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span></span></span><br><span class="line"><span class="comment"> * 何时添加此功能</span></span><br><span class="line"><span class="comment"> * When was this feature added?</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@static</span></span></span><br><span class="line"><span class="comment"> * 记录静态成员</span></span><br><span class="line"><span class="comment"> * Document a static member.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@summary</span></span></span><br><span class="line"><span class="comment"> * 完整说明的简短版本</span></span><br><span class="line"><span class="comment"> * A shorter version of the full description.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@this</span></span></span><br><span class="line"><span class="comment"> * &quot;this&quot;关键字在这里指的是什么</span></span><br><span class="line"><span class="comment"> * What does the &#x27;this&#x27; keyword refer to here?</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>(同义：<span class="doctag">@exception</span>)</span></span><br><span class="line"><span class="comment"> * 描述可能引发的错误</span></span><br><span class="line"><span class="comment"> * Describe what errors could be thrown.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@todo</span></span></span><br><span class="line"><span class="comment"> * 记录要完成的任务</span></span><br><span class="line"><span class="comment"> * Document tasks to be completed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@tutorial</span>(教程)</span></span><br><span class="line"><span class="comment"> * 插入指向随附的教程文件的链接</span></span><br><span class="line"><span class="comment"> * Insert a link to an included tutorial file.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span></span></span><br><span class="line"><span class="comment"> * 记录对象的类型</span></span><br><span class="line"><span class="comment"> * Document the type of an object.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@typedef</span></span></span><br><span class="line"><span class="comment"> * 记录自定义类型</span></span><br><span class="line"><span class="comment"> * Document a custom type.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@variation</span></span></span><br><span class="line"><span class="comment"> * 区分具有相同名称的不同对象</span></span><br><span class="line"><span class="comment"> * Distinguish different objects with the same name.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> * 记录项目的版本号</span></span><br><span class="line"><span class="comment"> * Documents the version number of an item.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@yields</span>(同义：<span class="doctag">@yield</span>)</span></span><br><span class="line"><span class="comment"> * 记录生成器函数产生的值</span></span><br><span class="line"><span class="comment"> * Document the value yielded by a generator function.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git同时提交到两个远程库</title>
      <link href="/2019/11/27/%E4%BD%BF%E7%94%A8git%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%A4%E4%B8%AA%E8%BF%9C%E7%A8%8B%E5%BA%93/"/>
      <url>/2019/11/27/%E4%BD%BF%E7%94%A8git%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%A4%E4%B8%AA%E8%BF%9C%E7%A8%8B%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="使用git同时提交到多个远程库"><a href="#使用git同时提交到多个远程库" class="headerlink" title="使用git同时提交到多个远程库"></a>使用git同时提交到多个远程库</h1><h2 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h2><h1 id="1、添加第一个仓库：-2、添加第二个仓库：-如果还有其他仓库，就以此方式继续添加3、提交"><a href="#1、添加第一个仓库：-2、添加第二个仓库：-如果还有其他仓库，就以此方式继续添加3、提交" class="headerlink" title="1、添加第一个仓库：  2、添加第二个仓库：+ 如果还有其他仓库，就以此方式继续添加3、提交"></a>1、添加第一个仓库：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin <span class="attr">https</span>:<span class="comment">//gitlab.com/XXX/xxx.git</span></span><br></pre></td></tr></table></figure><br>2、添加第二个仓库：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url --add origin <span class="attr">https</span>:<span class="comment">//github.com/XXX/xxx.git</span></span><br></pre></td></tr></table></figure><br>+ 如果还有其他仓库，就以此方式继续添加<br>3、提交<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin --all</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tips：</span></span><br><span class="line"><span class="comment">// 打开.git/config，可以看到这样的配置：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">`[remote &quot;origin&quot;]</span></span><br><span class="line"><span class="string">  url = https://gitlab.com/XXX/xxx.git</span></span><br><span class="line"><span class="string">  fetch = +refs/heads/*:refs/remotes/origin/*</span></span><br><span class="line"><span class="string">  url = https://github.com/XXX/xxx.git`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刚才的命令其实就是添加了这些配置,也可以不用命令行，可以直接编辑该文件，添加对应的url即可</span></span><br></pre></td></tr></table></figure><h2 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h2><ul><li>直接添加另一个远程仓库地址<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git remote add [name] [远程库地址]</span><br><span class="line">git push [name]</span><br><span class="line"><span class="comment">// [name] 取个远程库名并连接远程地址  然后push上去      git默认的[name]为origin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如：</span></span><br><span class="line"><span class="comment">// git remote add test https://github.com/XXX/xxx.git</span></span><br><span class="line"><span class="comment">// git push test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是想同步两个远程仓库必须同时push &amp;&amp; pull</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// git push origin</span></span><br><span class="line"><span class="comment">// git push test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// git pull origin</span></span><br><span class="line"><span class="comment">// git pull test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看.gigt中的config文件</span></span><br><span class="line"><span class="string">`[remote &quot;origin&quot;]</span></span><br><span class="line"><span class="string">    url = https://gitlab.com/XXX/xxx.git</span></span><br><span class="line"><span class="string">    fetch = +refs/heads/*:refs/remotes/origin/*</span></span><br><span class="line"><span class="string">[branch &quot;master&quot;]</span></span><br><span class="line"><span class="string">    remote = origin</span></span><br><span class="line"><span class="string">    merge = refs/heads/master</span></span><br><span class="line"><span class="string">[remote &quot;test&quot;]</span></span><br><span class="line"><span class="string">    url = https://github.com/XXX/xxx.git</span></span><br><span class="line"><span class="string">  fetch = +refs/heads/*:refs/remotes/test/*`</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 版本控制工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的一些优化</title>
      <link href="/2019/11/26/vue%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96/"/>
      <url>/2019/11/26/vue%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-路由懒加载"><a href="#1-路由懒加载" class="headerlink" title="1. 路由懒加载"></a>1. 路由懒加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/about/about&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="2-不生成-map-文件"><a href="#2-不生成-map-文件" class="headerlink" title="2. 不生成.map 文件"></a>2. 不生成.map 文件</h2><ul><li>webpack默认会生成map文件，map文件是用来调试代码的。此外，这里还要注意sourcemap的配置分 开发（dev）和线上（build）两个地方配置，开发我们就不管了，就用默认的，线上我们是不需要这个代码的。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置 vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Element组件按需加载"><a href="#3-Element组件按需加载" class="headerlink" title="3. Element组件按需加载"></a>3. Element组件按需加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 babel-plugin-component：</span></span><br><span class="line">npm install babel-plugin-component -D</span><br><span class="line"><span class="comment">// 修改babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;@vue/app&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">useBuiltIns</span>: <span class="string">&quot;entry&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;component&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-echart优化"><a href="#4-echart优化" class="headerlink" title="4. echart优化"></a>4. echart优化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 babel-plugin-equire</span></span><br><span class="line">npm install babel-plugin-equire -D</span><br><span class="line"><span class="comment">// 修改babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="string">&#x27;equire&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// others</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新建echarts.js</span></span><br><span class="line"><span class="keyword">const</span> echarts = <span class="title function_">equire</span>([</span><br><span class="line">  <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;legend&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;grid&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">  <span class="comment">// others</span></span><br><span class="line">])</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> echarts</span><br></pre></td></tr></table></figure><ul><li>或者<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建echarts.js</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/lib/echarts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/chart/line&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/chart/lines&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/chart/radar&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/legend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/tooltip&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/grid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> echarts</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 然后再到需要引用echarts的页面进行引入</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;../echarts&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-图片的压缩合并"><a href="#5-图片的压缩合并" class="headerlink" title="5. 图片的压缩合并"></a>5. 图片的压缩合并</h2><ul><li><a href="https://tinypng.com/">无损压缩图片：https://tinypng.com/</a></li></ul><h2 id="6-添加分析工具"><a href="#6-添加分析工具" class="headerlink" title="6. 添加分析工具"></a>6. 添加分析工具</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm i webpack-bundle-analyzer</span><br><span class="line"><span class="comment">// 在 vue.config.js 中添加</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* 添加分析工具 */</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">npm_config_report</span>) &#123;</span><br><span class="line">      config</span><br><span class="line">      .<span class="title function_">plugin</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class="line">      .<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="property">BundleAnalyzerPlugin</span>)</span><br><span class="line">      .<span class="title function_">end</span>()</span><br><span class="line">      config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;prefetch&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">npm run build –report</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+Github搭建图床</title>
      <link href="/2019/11/13/PicGo+Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/2019/11/13/PicGo+Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<ol><li>图床是什么</li></ol><ul><li>图床,是专门储存图片的空间,同时允许你为图片创建链接的网上空间</li></ul><ol start="2"><li>图床可以干什么</li></ol><ul><li>使用Markdown写作用到图片时，不可避免的就要用到图床，可以方便快捷的使用图片链接，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看</li></ul><ol start="3"><li>搭建一个简易的图床 （PicGo + Github）</li></ol><ul><li><p>下载PicGo：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a><br>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E4%B8%8B%E8%BD%BD1.jpg" alt="下载PicGo1"></p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E4%B8%8B%E8%BD%BD2.jpg" alt="下载PicGo2"></p></li></ul><ol start="4"><li>创建一个公开仓库，</li></ol><ul><li>创建一个公开仓库，点击右上角的个人头像出现下拉菜单，然后点倒数第二项 设置（英文版为 Setting），然后点左侧菜单的最后一个 Developer setting，然后再点左侧菜单的最后一个 Personal access tokens，然后在右侧有一个 Generate new token 的按钮，点击它，然后选择 repo，然后直接拉到最下面点击绿色的按钮 Generate token。之后会生成一个 token 码 ，需要注意的是这个 token 只显示一次！所以可以先把他复制保存的其他地方。其余三项不用填，直接确定然后设为默认图床即可</li><li>注意新版的仓库名不用带<code>.git</code>，即：<code>Damao2250/FileTransfer</code><br>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E8%AE%BE%E7%BD%AE.jpg" alt="图床设置"></li></ul><ol start="5"><li>使用</li></ol><ul><li><p>把保存的图片拖到上传区的虚线框里或者直接点击上传即可。提示上传成功之后即可在相册的那栏里看到上传的照片，然后点对应图片下面的文本框似的按钮就可以直接复制外链地址然后粘贴到想要显示图片的地方就可以了<br>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E8%AE%BE%E7%BD%AE1.jpg" alt="图床使用1"></p><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E8%AE%BE%E7%BD%AE3.jpg" alt="图床使用2"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex官方例子解读</title>
      <link href="/2019/11/13/Vuex%E5%AE%98%E6%96%B9%E4%BE%8B%E5%AD%90%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/11/13/Vuex%E5%AE%98%E6%96%B9%E4%BE%8B%E5%AD%90%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure><h2 id="Vuex-是什么"><a href="#Vuex-是什么" class="headerlink" title="Vuex 是什么"></a>Vuex 是什么</h2><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。<br>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>State<ul><li>单一状态树，用一个对象就包含了全部的应用层级状态</li></ul></li><li>Getter<ul><li>相当于 State 的计算属性</li></ul></li><li>Mutation<ul><li>提交 mutation是更改 store 中状态的唯一方法, 相当于事件</li></ul></li><li>Action<ul><li>类似于 mutation, 但 Action 提交的是 mutation，而不是直接变更状态，而且可以包含任意异步操作</li></ul></li><li>Module<ul><li>将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter</li></ul></li><li>官方购物车项目结构<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... <span class="comment"># 抽取出API请求</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="comment"># 我们组装模块并导出 store 的地方</span></span><br><span class="line">    ├── actions.js        <span class="comment"># 根级别的 action</span></span><br><span class="line">    ├── mutations.js      <span class="comment"># 根级别的 mutation</span></span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="comment"># 购物车模块</span></span><br><span class="line">        └── products.js   <span class="comment"># 产品模块</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>在 mutation-types.js 中定义类型常量，默认全部大写 —&gt; 把常量放在单独的文件中可以让你的代码合作者或者迭代者对整个 app 包含的 mutation 一目了然</li><li>Vuex- Action的 { commit }<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vuex 中 使用 Action 处理异步请求时，常规写法如下</span></span><br><span class="line"><span class="attr">getMenuAction</span>:<span class="function">(<span class="params">context</span>) =&gt;</span>&#123;</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;SET_MENU_LIST&#x27;</span>,[<span class="string">&#x27;承保2&#x27;</span>,<span class="string">&#x27;核保2&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们也可以使用如下简化写法，如下</span></span><br><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="attr">getMenuAction</span>:<span class="function">(<span class="params">&#123;commit&#125;</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">commit</span>(‘<span class="variable constant_">SET_MENU_LIST</span>’,[‘承保<span class="number">2</span>’,’核保<span class="number">2</span>’])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; commit &#125; 是变量解构赋值</span></span><br><span class="line">context = &#123; </span><br><span class="line">    <span class="attr">dispatch</span>: local.<span class="property">dispatch</span>,</span><br><span class="line">    <span class="attr">commit</span>: local.<span class="property">commit</span>,</span><br><span class="line">    <span class="attr">getters</span>: local.<span class="property">getters</span>,</span><br><span class="line">    <span class="attr">state</span>: local.<span class="property">state</span>,</span><br><span class="line">    <span class="attr">rootGetters</span>: store.<span class="property">getters</span>,</span><br><span class="line">    <span class="attr">rootState</span>: store.<span class="property">state</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 常规写法 context.commit = context.local.commit</span></span><br><span class="line"><span class="comment">// 使用变量解构赋值后 &#123; commit &#125; 相当于 commit= context.commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// state 同理</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Taro实现微信小程序登录流程</title>
      <link href="/2019/11/13/%E4%BD%BF%E7%94%A8Taro%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/11/13/%E4%BD%BF%E7%94%A8Taro%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><pre><code>![小程序登录流程](https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Taro%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B.png)</code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre><code>1. 调用Taro.login()获取登录凭证code；2. 调用Taro.request()将code传到服务器；3. 服务器端调用微信登录校验接口（appid+appsecret+code），获得session_key+openid；4. 服务器端生成AUTH_TICKET（相当于userId），使用AUTH_TICKET为key，session_key+openid为value的形式存在服 务器，并将AUTH_TICKET传送给客户端；5. 客户端本地存储AUTH_TICKET，登录成功！6. 下次登录时可以用AUTH_TICKET传输到服务器端验证登录态是否过期，未过期则登录成功。</code></pre><h2 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h2><ul><li>获取用户信息一定要用户主动点击按钮授权<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Button</span> openType=<span class="string">&quot;getUserInfo&quot;</span> onGetUserInfo=&#123;<span class="variable language_">this</span>.<span class="property">onGetUserInfo</span>&#125; type=<span class="string">&quot;primary&quot;</span>&gt;微信授权登录，获取用户信息&lt;/<span class="title class_">Button</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onGetUserInfo</span>(<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">detail</span>);</span><br><span class="line">    <span class="keyword">if</span> (info.<span class="property">detail</span>.<span class="property">errMsg</span> === “<span class="attr">getUserInfo</span>:ok”) &#123;</span><br><span class="line">    <span class="title class_">Taro</span>.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: ‘授权成功，正在登录…’,</span><br><span class="line">        <span class="attr">icon</span>: ‘none’,</span><br><span class="line">        <span class="attr">mask</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Taro</span>.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: ‘未授权,请授权登录！’,</span><br><span class="line">            <span class="attr">icon</span>: ‘none’,</span><br><span class="line">            <span class="attr">mask</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>Taro 支持使用 <code>async functions</code> 来让开发者获得不错的异步编程体验，开启 <code>async functions</code> 支持需要安装包 <code>@tarojs/async-await</code></p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> yarn add @tarojs/a<span class="built_in">sync-await</span></span><br><span class="line"><span class="comment"># 或者使用 npm</span></span><br><span class="line"><span class="variable">$</span> npm install –save @tarojs/a<span class="built_in">sync-await</span></span><br></pre></td></tr></table></figure></li><li><p>随后在项目入口文件 <code>app.js</code> 中直接 <code>import</code> ，就可以开始使用 <code>async functions</code> 功能了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app.js</span></span><br><span class="line"><span class="keyword">import</span> ‘@tarojs/<span class="keyword">async</span>-<span class="keyword">await</span>’</span><br></pre></td></tr></table></figure></li><li><p>值得注意的事，使用 @tarojs&#x2F;async-await 一定要记得按照 开发前注意: <a href="https://taro-docs.jd.com/taro/docs/before-dev-remind.html">https://taro-docs.jd.com/taro/docs/before-dev-remind.html</a> 中提示的内容进行操作，否则会出现报错</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Taro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Taro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React+GGEditor搭建可视化图编辑器项目</title>
      <link href="/2019/11/11/React+GGEditor%E6%90%AD%E5%BB%BA%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%BC%96%E8%BE%91%E5%99%A8%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/11/11/React+GGEditor%E6%90%AD%E5%BB%BA%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%BC%96%E8%BE%91%E5%99%A8%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>GG-editor 插件基于 React 框架，可以创建编辑思维导图、流程图、拓扑图等图形</li><li>项目依赖： <code>react-router-dom, gg-editor, antd</code></li></ul><h2 id="安装所需依赖"><a href="#安装所需依赖" class="headerlink" title="安装所需依赖"></a>安装所需依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化项目</span></span><br><span class="line">create-react-app ggeditore</span><br><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line">npm i react-router-dom</span><br><span class="line">npm i gg-editor</span><br><span class="line">npm i antd</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">yarn add react-router-dom</span><br><span class="line">yarn add gg-editor</span><br><span class="line">yarn add antd</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装 gg-editor</span></span><br><span class="line"><span class="comment">// 不要安装 bate 的版本</span></span><br><span class="line">npm i gg-editor@<span class="number">2.0</span><span class="number">.4</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">yarn add gg-editor@<span class="number">2.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Flow</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GGEditor</span>, &#123; <span class="title class_">Flow</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;gg-editor&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">nodes</span>: [&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="string">&#x27;70*70&#x27;</span>,</span><br><span class="line">    <span class="attr">shape</span>: <span class="string">&#x27;flow-circle&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#FA8C16&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;起止节点&#x27;</span>,</span><br><span class="line">    <span class="attr">x</span>: <span class="number">55</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">55</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;ea1184e8&#x27;</span>,</span><br><span class="line">    <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="attr">size</span>: <span class="string">&#x27;70*70&#x27;</span>,</span><br><span class="line">    <span class="attr">shape</span>: <span class="string">&#x27;flow-circle&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#FA8C16&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;结束节点&#x27;</span>,</span><br><span class="line">    <span class="attr">x</span>: <span class="number">55</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">255</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;481fbb1a&#x27;</span>,</span><br><span class="line">    <span class="attr">index</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">edges</span>: [&#123;</span><br><span class="line">    <span class="attr">source</span>: <span class="string">&#x27;ea1184e8&#x27;</span>,</span><br><span class="line">    <span class="attr">sourceAnchor</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;481fbb1a&#x27;</span>,</span><br><span class="line">    <span class="attr">targetAnchor</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;7989ac70&#x27;</span>,</span><br><span class="line">    <span class="attr">index</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">GGEditor</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Flow</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">500</span>, <span class="attr">height:</span> <span class="attr">500</span> &#125;&#125; <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">GGEditor</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mind</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GGEditor</span>, &#123; <span class="title class_">Mind</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;gg-editor&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">roots</span>: [&#123;</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;中心主题&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;分支主题 1&#x27;</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;分支主题 2&#x27;</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;分支主题 3&#x27;</span>,</span><br><span class="line">    &#125;],</span><br><span class="line">  &#125;],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">GGEditor</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Mind</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">500</span>, <span class="attr">height:</span> <span class="attr">500</span> &#125;&#125; <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">GGEditor</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="高阶用法（可编辑）"><a href="#高阶用法（可编辑）" class="headerlink" title="高阶用法（可编辑）"></a>高阶用法（可编辑）</h2><ul><li>详细请看Github代码: <a href="https://github.com/damao2250">https://github.com/damao2250</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> GGEditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Router的使用</title>
      <link href="/2019/11/11/React-Router%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/11/React-Router%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-react-router-还是-react-router-dom-？"><a href="#使用-react-router-还是-react-router-dom-？" class="headerlink" title="使用 react-router 还是 react-router-dom ？"></a>使用 react-router 还是 react-router-dom ？</h1><h2 id="React-router"><a href="#React-router" class="headerlink" title="React-router"></a>React-router</h2><ul><li>React Router 包含3个库, react-router、react-router-dom、和 react-router-native。react-router 提供最基本的路由功能，实际使用，我们不会直接安装 react-router,而是根据应用运行的环境选择安装 react-router-dom(在浏览器中使用)或 react-router-native(在 react-native中使用)。react-router-dom 和 react-router-native 都依赖 react-router,所以在安装时， react-router 也会自动安装。</li><li>两者的关系<ul><li>react-router：提供 router 的核心api。如 Router、Route、Switch 等，没有提供有关dom操作进行路由跳转的api</li><li>react-router-dom：提供 BrowserRouter、Route、Link等api，可以通过dom操作控制路由</li><li>react-router-dom：基于 react-router，加入了在浏览器运行环境下的一些功能，例如：Link 组件，会渲染一个 a 标签，Link 组件源码a标签行; BrowserRouter和HashRouter 组件，前者使用 pushState 和 popState 事件构建路由，后者使用 window.location.hash 和 hashchange 事件构建路由。</li><li>react-router-dom 里包含了 react-router 的依赖，因此只需要安装后者即可</li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i react-router-dom</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><ul><li>简易使用示例</li></ul><ol><li>新建一个 router&#x2F;index.js 文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入一些模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入需要用到的页面组件 </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./../views/home/home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./../views/about/about&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">router</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// Route 路由</span></span><br><span class="line">    <span class="comment">// Redirect 重定向</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">render</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        () =&gt;</span> <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li>home组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//home.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Link 路由跳转</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>about组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//about.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">About</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Link 路由跳转</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>about<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>app.js中引入router<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>  &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Router</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>嵌套路由<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// about.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">About</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// &#123;this.props.children&#125;  ==&gt; 显示嵌套路由</span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>about<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./../views/home/home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./../views/about/about&#x27;</span></span><br><span class="line"><span class="keyword">import</span> somePage <span class="keyword">from</span> <span class="string">&#x27;./../views/somePage/somePage&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">router</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">render</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        () =&gt;</span> <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span>(</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">About</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about/somePage&quot;</span> <span class="attr">component</span>=<span class="string">&#123;somePage&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">About</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ol><ul><li>参考<a href="https://segmentfault.com/a/1190000016421036">https://segmentfault.com/a/1190000016421036</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建博客</title>
      <link href="/2019/11/08/Hexo+Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/08/Hexo+Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="github-hexo-创建个人博客"><a href="#github-hexo-创建个人博客" class="headerlink" title="github + hexo 创建个人博客"></a>github + hexo 创建个人博客</h1><ol><li><p>创建 <github Name>.github.io 仓库</p></li><li><p>全局安装hexo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建 hexo 项目</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>连接到 GitHub</p></li></ol><ul><li>修改根目录下 _congif.yml<figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repo: &lt;你的仓库地址&gt; <span class="comment">#　如：https://github.com/Damao2250/damao2250.github.io</span></span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>自动部署到 GitHub<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装部署工具</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动部署</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开 &lt;github Name&gt;.github.io  查看效果</span></span><br></pre></td></tr></table></figure></li><li>部署简化</li></ol><ul><li>修改 package.json<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">“build”: “hexo clean &amp; hexo deploy”</span><br><span class="line"><span class="comment">// 部署命令</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>发布新文章<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [layout] 为布局，可选项为 `post`、`page`、`draft`，这将决定文章所在文件路径。</span></span><br><span class="line"><span class="comment">// &lt;title&gt; 为文章标题</span></span><br><span class="line"><span class="comment">// 如 hexo new post 这是一个文章标题</span></span><br><span class="line">hexo <span class="keyword">new</span> [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li>更换主题</li></ol><ul><li>下载主题 -&gt; 更换主题<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载到themes文件夹下</span></span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/KevinOfNeu/hexo-theme-xoxo xoxo</span></span><br><span class="line"><span class="comment">// 修改 _config.yml 配置</span></span><br><span class="line"><span class="attr">theme</span>: xoxo</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/04/hello-world/"/>
      <url>/2019/11/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
