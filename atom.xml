<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damao</title>
  
  <subtitle>乐躬耕于陇亩兮，吾爱吾庐。聊寄傲于琴书兮，以待天时。</subtitle>
  <link href="http://damao2250.com/atom.xml" rel="self"/>
  
  <link href="http://damao2250.com/"/>
  <updated>2023-09-13T02:10:10.289Z</updated>
  <id>http://damao2250.com/</id>
  
  <author>
    <name>Damao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css自定义有序列表</title>
    <link href="http://damao2250.com/2023/09/13/css%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8/"/>
    <id>http://damao2250.com/2023/09/13/css%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8/</id>
    <published>2023-09-13T00:45:18.000Z</published>
    <updated>2023-09-13T02:10:10.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-属性-list-style-type"><a href="#CSS-属性-list-style-type" class="headerlink" title="CSS 属性 list-style-type"></a>CSS 属性 list-style-type</h2><ul><li><code>list-style-type</code>可以设置列表元素的 marker（比如圆点、符号、或者自定义计数器样式）, 默认为disc实心圆点</li><li>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type">MDN</a></li></ul><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><ul><li><code>none</code> 不显示<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: none;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:none !important;">  <li style="list-style-type:none !important;">白日依山尽</li>  <li style="list-style-type:none !important;">黄河入海流</li>  <li style="list-style-type:none !important;">欲穷千里目</li>  <li style="list-style-type:none !important;">更上一层楼</li></ul></li><li><code>disc</code> 实心圆(默认)<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: disc;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:disc !important;">  <li style="list-style-type:disc !important;">白日依山尽</li>  <li style="list-style-type:disc !important;">黄河入海流</li>  <li style="list-style-type:disc !important;">欲穷千里目</li>  <li style="list-style-type:disc !important;">更上一层楼</li></ul></li><li><code>circle</code> 空心圆<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: circle;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:circle !important;">  <li style="list-style-type:circle !important;">白日依山尽</li>  <li style="list-style-type:circle !important;">黄河入海流</li>  <li style="list-style-type:circle !important;">欲穷千里目</li>  <li style="list-style-type:circle !important;">更上一层楼</li></ul></li><li><code>square</code> 实心方块<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: square;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:square !important;">  <li style="list-style-type:square !important;">白日依山尽</li>  <li style="list-style-type:square !important;">黄河入海流</li>  <li style="list-style-type:square !important;">欲穷千里目</li>  <li style="list-style-type:square !important;">更上一层楼</li></ul></li><li><code>decimal</code> 十进制阿拉伯数字<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: decimal;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:decimal !important;">  <li style="list-style-type:decimal !important;">白日依山尽</li>  <li style="list-style-type:decimal !important;">黄河入海流</li>  <li style="list-style-type:decimal !important;">欲穷千里目</li>  <li style="list-style-type:decimal !important;">更上一层楼</li></ul></li><li><code>cjk-decimal</code> 十进制数大写<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: cjk-decimal;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:cjk-decimal !important;">  <li style="list-style-type:cjk-decimal !important;">白日依山尽</li>  <li style="list-style-type:cjk-decimal !important;">黄河入海流</li>  <li style="list-style-type:cjk-decimal !important;">欲穷千里目</li>  <li style="list-style-type:cjk-decimal !important;">更上一层楼</li></ul></li><li><code>decimal-leading-zero</code> 十进制阿拉伯数字(个位数前面补零)<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: decimal-leading-zero;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:decimal-leading-zero !important;">  <li style="list-style-type:decimal-leading-zero !important;">白日依山尽</li>  <li style="list-style-type:decimal-leading-zero !important;">黄河入海流</li>  <li style="list-style-type:decimal-leading-zero !important;">欲穷千里目</li>  <li style="list-style-type:decimal-leading-zero !important;">更上一层楼</li></ul></li><li><code>lower-roman</code> 小写的罗马数字<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: lower-roman;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:lower-roman !important;">  <li style="list-style-type:lower-roman !important;">白日依山尽</li>  <li style="list-style-type:lower-roman !important;">黄河入海流</li>  <li style="list-style-type:lower-roman !important;">欲穷千里目</li>  <li style="list-style-type:lower-roman !important;">更上一层楼</li></ul></li><li><code>upper-roman</code> 大写的罗马数字<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: upper-roman;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:upper-roman !important;">  <li style="list-style-type:upper-roman !important;">白日依山尽</li>  <li style="list-style-type:upper-roman !important;">黄河入海流</li>  <li style="list-style-type:upper-roman !important;">欲穷千里目</li>  <li style="list-style-type:upper-roman !important;">更上一层楼</li></ul></li><li>其他<ul><li>lower-greek 小写古典希腊文</li><li>lower-alpha, lower-latin 小写ASCII字母</li><li>upper-alpha, upper-latin 大写ASCII字母</li><li>其他非常用的属性值：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type#%E8%AF%AD%E6%B3%95">语法取值</a></li></ul></li></ul><h2 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h2><ul><li><p>取值为 <code>cjk-decimal</code>, <code>cjk-ideographic</code>, <code>japanese-informal</code>, <code>korean-hanja-informal</code>, <code>trad-chinese-informal</code>时，个位都是 一、二、三…</p><pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: cjk-decimal;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:cjk-decimal !important;">  <li style="list-style-type:cjk-decimal !important;">白日依山尽</li>  <li style="list-style-type:cjk-decimal !important;">黄河入海流</li>  <li style="list-style-type:cjk-decimal !important;">欲穷千里目</li>  <li style="list-style-type:cjk-decimal !important;">更上一层楼</li></ul></li><li><p>取值为 <code>korean-hanja-formal</code>, <code>simp-chinese-formal</code>, <code>trad-chinese-formal</code>时，个位都是 壹、贰、叁…</p><pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: simp-chinese-formal;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:simp-chinese-formal !important;">  <li style="list-style-type:simp-chinese-formal !important;">白日依山尽</li>  <li style="list-style-type:simp-chinese-formal !important;">黄河入海流</li>  <li style="list-style-type:simp-chinese-formal !important;">欲穷千里目</li>  <li style="list-style-type:simp-chinese-formal !important;">更上一层楼</li></ul></li><li><p><code>cjk-earthly-branch</code>：子、丑、寅…（地支序号）</p><ul><li>地支超过十二时会自动排序：子子、子丑、子寅…（天干同理）<pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: cjk-earthly-branch;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:cjk-earthly-branch !important;"><li style="list-style-type:cjk-earthly-branch !important;">白日依山尽</li><li style="list-style-type:cjk-earthly-branch !important;">黄河入海流</li><li style="list-style-type:cjk-earthly-branch !important;">欲穷千里目</li><li style="list-style-type:cjk-earthly-branch !important;">更上一层楼</li></ul></li></ul></li><li><p><code>cjk-heavenly-stem</code>：子、丑、寅…（天干序号）</p><pre class="line-numbers language-none"><code class="language-none">&lt;ul style&#x3D;&quot;list-style-type: cjk-heavenly-stem;&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul style="list-style-type:cjk-heavenly-stem !important;">  <li style="list-style-type:cjk-heavenly-stem !important;">白日依山尽</li>  <li style="list-style-type:cjk-heavenly-stem !important;">黄河入海流</li>  <li style="list-style-type:cjk-heavenly-stem !important;">欲穷千里目</li>  <li style="list-style-type:cjk-heavenly-stem !important;">更上一层楼</li></ul></li></ul><h2 id="自定义序号"><a href="#自定义序号" class="headerlink" title="自定义序号"></a>自定义序号</h2><h3 id="自定义数字"><a href="#自定义数字" class="headerlink" title="自定义数字"></a>自定义数字</h3>  <pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;  @counter-style circled-simp-chinese-informal &#123;    system: additive;    suffix: &quot; &quot;;    additive-symbols: ㊉ 10, ㊈ 9, ㊇ 8, ㊆ 7, ㊅ 6, ㊄ 5, ㊃ 4, ㊂ 3, ㊁ 2, ㊀ 1;  &#125;  .origin &#123;    list-style: circled-simp-chinese-informal;  &#125;&lt;&#x2F;style&gt;&lt;ul class&#x3D;&quot;origin&quot;&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;  &lt;li&gt;白日依山尽&lt;&#x2F;li&gt;  &lt;li&gt;黄河入海流&lt;&#x2F;li&gt;  &lt;li&gt;欲穷千里目&lt;&#x2F;li&gt;  &lt;li&gt;更上一层楼&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <style>    @counter-style circled-simp-chinese-informal {      system: additive;      suffix: " ";      additive-symbols: ㊉ 10, ㊈ 9, ㊇ 8, ㊆ 7, ㊅ 6, ㊄ 5, ㊃ 4, ㊂ 3, ㊁ 2, ㊀ 1;    }    .origin {      list-style: circled-simp-chinese-informal  !important;    }  </style>  <ul class="origin">    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>    <li class="origin">白日依山尽</li>    <li class="origin">黄河入海流</li>    <li class="origin">欲穷千里目</li>    <li class="origin">更上一层楼</li>  </ul><h3 id="自定义表情"><a href="#自定义表情" class="headerlink" title="自定义表情"></a>自定义表情</h3>  <pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;  @counter-style emoji-test &#123;    system: additive;    suffix: &quot; &quot;;    additive-symbols: 😍 10, 😜 9, 😂 8, 😅 7, 😁 6, 🙂 5, 😐 4, 🙁 3, 😨 2, 😭 1;  &#125;  .emoji &#123;    list-style: emoji-test;  &#125;&lt;&#x2F;style&gt;&lt;ul class&#x3D;&quot;emoji&quot;&gt;  &lt;li&gt;君不见，黄河之水天上来，奔流到海不复回&lt;&#x2F;li&gt;  &lt;li&gt;君不见，高堂明镜悲白发，朝如青丝暮成雪&lt;&#x2F;li&gt;  &lt;li&gt;人生得意须尽欢，莫使金樽空对月&lt;&#x2F;li&gt;  &lt;li&gt;天生我材必有用，千金散尽还复来&lt;&#x2F;li&gt;  &lt;li&gt;烹羊宰牛且为乐，会须一饮三百杯&lt;&#x2F;li&gt;  &lt;li&gt;岑夫子，丹丘生，将进酒，杯莫停&lt;&#x2F;li&gt;  &lt;li&gt;与君歌一曲，请君为我倾耳听&lt;&#x2F;li&gt;  &lt;li&gt;钟鼓馔玉不足贵，但愿长醉不愿醒&lt;&#x2F;li&gt;  &lt;li&gt;古来圣贤皆寂寞，惟有饮者留其名&lt;&#x2F;li&gt;  &lt;li&gt;陈王昔时宴平乐，斗酒十千恣欢谑&lt;&#x2F;li&gt;  &lt;li&gt;主人何为言少钱，径须沽取对君酌&lt;&#x2F;li&gt;  &lt;li&gt;五花马，千金裘，呼儿将出换美酒，与尔同销万古愁&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <style>    @counter-style emoji-test {      system: additive;      suffix: " ";      additive-symbols: 😍 10, 😜 9, 😂 8, 😅 7, 😁 6, 🙂 5, 😐 4, 🙁 3, 😨 2, 😭 1;    }    .emoji {      list-style: emoji-test  !important;    }  </style>  <ul class="emoji">    <li class="emoji">君不见，黄河之水天上来，奔流到海不复回</li>    <li class="emoji">君不见，高堂明镜悲白发，朝如青丝暮成雪</li>    <li class="emoji">人生得意须尽欢，莫使金樽空对月</li>    <li class="emoji">天生我材必有用，千金散尽还复来</li>    <li class="emoji">烹羊宰牛且为乐，会须一饮三百杯</li>    <li class="emoji">岑夫子，丹丘生，将进酒，杯莫停</li>    <li class="emoji">与君歌一曲，请君为我倾耳听</li>    <li class="emoji">钟鼓馔玉不足贵，但愿长醉不愿醒</li>    <li class="emoji">古来圣贤皆寂寞，惟有饮者留其名</li>    <li class="emoji">陈王昔时宴平乐，斗酒十千恣欢谑</li>    <li class="emoji">主人何为言少钱，径须沽取对君酌</li>    <li class="emoji">五花马，千金裘，呼儿将出换美酒，与尔同销万古愁</li>  </ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSS-属性-list-style-type&quot;&gt;&lt;a href=&quot;#CSS-属性-list-style-type&quot; class=&quot;headerlink&quot; title=&quot;CSS 属性 list-style-type&quot;&gt;&lt;/a&gt;CSS 属性 list-style-ty</summary>
      
    
    
    
    <category term="CSS" scheme="http://damao2250.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://damao2250.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>信息系统项目管理师教程</title>
    <link href="http://damao2250.com/2023/09/06/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B8%88%E6%95%99%E7%A8%8B/"/>
    <id>http://damao2250.com/2023/09/06/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B8%88%E6%95%99%E7%A8%8B/</id>
    <published>2023-09-06T06:04:21.000Z</published>
    <updated>2023-09-11T00:41:47.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、信息化发展"><a href="#1、信息化发展" class="headerlink" title="1、信息化发展"></a>1、信息化发展</h1><h2 id="信息与信息化"><a href="#信息与信息化" class="headerlink" title="信息与信息化"></a>信息与信息化</h2><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><h3 id="信息系统"><a href="#信息系统" class="headerlink" title="信息系统"></a>信息系统</h3><h3 id="信息化"><a href="#信息化" class="headerlink" title="信息化"></a>信息化</h3><h2 id="现代化基础建设"><a href="#现代化基础建设" class="headerlink" title="现代化基础建设"></a>现代化基础建设</h2><h3 id="新型基础设施建设"><a href="#新型基础设施建设" class="headerlink" title="新型基础设施建设"></a>新型基础设施建设</h3><h3 id="工业互联网"><a href="#工业互联网" class="headerlink" title="工业互联网"></a>工业互联网</h3><h3 id="车联网"><a href="#车联网" class="headerlink" title="车联网"></a>车联网</h3><h2 id="现代化创新发展"><a href="#现代化创新发展" class="headerlink" title="现代化创新发展"></a>现代化创新发展</h2><h3 id="农业农村现代化"><a href="#农业农村现代化" class="headerlink" title="农业农村现代化"></a>农业农村现代化</h3><h3 id="两化融合与智能制造"><a href="#两化融合与智能制造" class="headerlink" title="两化融合与智能制造"></a>两化融合与智能制造</h3><h3 id="消费互联网"><a href="#消费互联网" class="headerlink" title="消费互联网"></a>消费互联网</h3><h2 id="数字中国"><a href="#数字中国" class="headerlink" title="数字中国"></a>数字中国</h2><h3 id="数字经济"><a href="#数字经济" class="headerlink" title="数字经济"></a>数字经济</h3><h3 id="数字政府"><a href="#数字政府" class="headerlink" title="数字政府"></a>数字政府</h3><h3 id="数字社会"><a href="#数字社会" class="headerlink" title="数字社会"></a>数字社会</h3><h3 id="数字生态"><a href="#数字生态" class="headerlink" title="数字生态"></a>数字生态</h3><h2 id="数字化转型与元宇宙"><a href="#数字化转型与元宇宙" class="headerlink" title="数字化转型与元宇宙"></a>数字化转型与元宇宙</h2><h3 id="数字化转型"><a href="#数字化转型" class="headerlink" title="数字化转型"></a>数字化转型</h3><h3 id="元宇宙"><a href="#元宇宙" class="headerlink" title="元宇宙"></a>元宇宙</h3><h1 id="2、信息技术发展"><a href="#2、信息技术发展" class="headerlink" title="2、信息技术发展"></a>2、信息技术发展</h1><h2 id="信息技术及其发展"><a href="#信息技术及其发展" class="headerlink" title="信息技术及其发展"></a>信息技术及其发展</h2><h3 id="计算机软硬件"><a href="#计算机软硬件" class="headerlink" title="计算机软硬件"></a>计算机软硬件</h3><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><h3 id="存储和数据库"><a href="#存储和数据库" class="headerlink" title="存储和数据库"></a>存储和数据库</h3><h3 id="信息安全"><a href="#信息安全" class="headerlink" title="信息安全"></a>信息安全</h3><h3 id="信息技术的发展"><a href="#信息技术的发展" class="headerlink" title="信息技术的发展"></a>信息技术的发展</h3><h2 id="新一代信息技术及应用"><a href="#新一代信息技术及应用" class="headerlink" title="新一代信息技术及应用"></a>新一代信息技术及应用</h2><h3 id="物联网"><a href="#物联网" class="headerlink" title="物联网"></a>物联网</h3><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><h3 id="虚拟现实"><a href="#虚拟现实" class="headerlink" title="虚拟现实"></a>虚拟现实</h3><h1 id="3、信息系统治理"><a href="#3、信息系统治理" class="headerlink" title="3、信息系统治理"></a>3、信息系统治理</h1><h1 id="4、信息系统管理"><a href="#4、信息系统管理" class="headerlink" title="4、信息系统管理"></a>4、信息系统管理</h1><h1 id="5、信息系统工程"><a href="#5、信息系统工程" class="headerlink" title="5、信息系统工程"></a>5、信息系统工程</h1><h1 id="6、项目管理概论"><a href="#6、项目管理概论" class="headerlink" title="6、项目管理概论"></a>6、项目管理概论</h1><h2 id="项目基本要素"><a href="#项目基本要素" class="headerlink" title="项目基本要素"></a>项目基本要素</h2><h3 id="项目基础"><a href="#项目基础" class="headerlink" title="项目基础"></a>项目基础</h3><pre><code>+ 独特的产品、服务、可交付成果+ 临时性工作（有明确的起点终点）+ 项目驱动变更+ 项目创造业务价值（有形、无形）+ 项目启动背景</code></pre><h3 id="项目管理的重要性"><a href="#项目管理的重要性" class="headerlink" title="项目管理的重要性"></a>项目管理的重要性</h3><h3 id="项目成功的标准"><a href="#项目成功的标准" class="headerlink" title="项目成功的标准"></a>项目成功的标准</h3><pre><code>+ 时间、成本、范围、质量</code></pre><h3 id="项目、项目集、项目组合与运营管理"><a href="#项目、项目集、项目组合与运营管理" class="headerlink" title="项目、项目集、项目组合与运营管理"></a>项目、项目集、项目组合与运营管理</h3><pre><code>+ 项目、项目集-&gt;正确地做事+ 项目组合-&gt;做正确的事+ 项目集管理+ 项目组合管理+ 运营管理（项目交付后，不属于项目管理范畴）+ 运营与项目管理+ 组织级项目管理和战略</code></pre><h3 id="项目内外部运行环境"><a href="#项目内外部运行环境" class="headerlink" title="项目内外部运行环境"></a>项目内外部运行环境</h3><pre><code>+ 组织过程资产+ 组织内部的事业环境因素+ 组织外部的事业环境因素</code></pre><h3 id="组织系统"><a href="#组织系统" class="headerlink" title="组织系统"></a>组织系统</h3><pre><code>+ 治理框架+ 管理要素+ 组织结构类型（职能、矩阵-强、矩阵-弱、矩阵-均衡、项目导向、混合型、PMO）+ 项目管理办公室（支持型、控制型、指令型）</code></pre><h3 id="项目管理和产品管理"><a href="#项目管理和产品管理" class="headerlink" title="项目管理和产品管理"></a>项目管理和产品管理</h3><h2 id="项目经理的角色"><a href="#项目经理的角色" class="headerlink" title="项目经理的角色"></a>项目经理的角色</h2><h3 id="项目经理的定义"><a href="#项目经理的定义" class="headerlink" title="项目经理的定义"></a>项目经理的定义</h3><h3 id="项目经理的影响力范围"><a href="#项目经理的影响力范围" class="headerlink" title="项目经理的影响力范围"></a>项目经理的影响力范围</h3><h3 id="项目经历的能力（重点）"><a href="#项目经历的能力（重点）" class="headerlink" title="项目经历的能力（重点）"></a>项目经历的能力（重点）</h3><pre><code>+ 项目管理技能（正确地做事）+ 战略和商务管理技能+ 领导力技能（做正确的事）+ 领导力与管理</code></pre><h2 id="价值驱动的项目管理知识体系（重点）"><a href="#价值驱动的项目管理知识体系（重点）" class="headerlink" title="价值驱动的项目管理知识体系（重点）"></a>价值驱动的项目管理知识体系（重点）</h2><h3 id="项目管理原则（12个原则）"><a href="#项目管理原则（12个原则）" class="headerlink" title="项目管理原则（12个原则）"></a>项目管理原则（12个原则）</h3><pre><code>+ 勤勉、尊重和关心他人+ 营造协作的项目团队环境+ 促进干系人有效参与+ 聚焦于价值+ 识别、评估和响应系统交互+ 展现领导力行为+ 根据环境进行裁剪+ 将质量融入到过程和结果中+ 驾驭复杂性+ 优化风险应对+ 拥抱适应性和韧性+ 为实现目标而驱动变革</code></pre><h3 id="项目生命周期和项目阶段"><a href="#项目生命周期和项目阶段" class="headerlink" title="项目生命周期和项目阶段"></a>项目生命周期和项目阶段</h3><pre><code>+ 项目启动+ 组织与准备+ 执行项目工作+ 结束项目+ 生命周期特征  - 成本与人力投入：低（开始）-最高（工作执行）-迅速回落（项目快结束）  - 风险于不确定性：最大（开始）-随着决策的定制与交付成果的验收而降低  - 变更和纠错成本：低（开始）-项目越接近完成越大+ 生命周期类型（重点）  - 预测型（需求明确、计划驱动）-结束时一次交付  - 迭代型（重复循环）-分次交付  - 增量型（逐渐增加）-分次交付  - 适应型（敏捷）-频繁交付  - 混合型（不考）</code></pre><h3 id="项目管理过程组（五个过程组）"><a href="#项目管理过程组（五个过程组）" class="headerlink" title="项目管理过程组（五个过程组）"></a>项目管理过程组（五个过程组）</h3><pre><code>+ 启动过程组+ 规划过程组+ 执行过程组+ 监控过程组+ 收尾过程组</code></pre><h3 id="项目管理知识领域（十大知识领域）"><a href="#项目管理知识领域（十大知识领域）" class="headerlink" title="项目管理知识领域（十大知识领域）"></a>项目管理知识领域（十大知识领域）</h3><ul><li></li></ul><h3 id="项目绩效域（8个绩效域）"><a href="#项目绩效域（8个绩效域）" class="headerlink" title="项目绩效域（8个绩效域）"></a>项目绩效域（8个绩效域）</h3><h3 id="价值交付系统"><a href="#价值交付系统" class="headerlink" title="价值交付系统"></a>价值交付系统</h3><h1 id="7、项目立项管理"><a href="#7、项目立项管理" class="headerlink" title="7、项目立项管理"></a>7、项目立项管理</h1><ul><li>四个阶段：项目立项与立项申请、初步可行性研究、详细可行性研究、评估与决策<h2 id="项目建议与立项申请"><a href="#项目建议与立项申请" class="headerlink" title="项目建议与立项申请"></a>项目建议与立项申请</h2><h2 id="项目可行性研究"><a href="#项目可行性研究" class="headerlink" title="项目可行性研究"></a>项目可行性研究</h2><h3 id="可行性研究内容（重点）"><a href="#可行性研究内容（重点）" class="headerlink" title="可行性研究内容（重点）"></a>可行性研究内容（重点）</h3><ul><li>技术可行性、经济可行性、社会效益可行性、运行环境可行性<h3 id="初步可行性研究"><a href="#初步可行性研究" class="headerlink" title="初步可行性研究"></a>初步可行性研究</h3><h3 id="详细可行性研究"><a href="#详细可行性研究" class="headerlink" title="详细可行性研究"></a>详细可行性研究</h3></li></ul></li></ul><h1 id="8、项目整合管理"><a href="#8、项目整合管理" class="headerlink" title="8、项目整合管理"></a>8、项目整合管理</h1><h2 id="管理基础"><a href="#管理基础" class="headerlink" title="管理基础"></a>管理基础</h2><h3 id="执行整合"><a href="#执行整合" class="headerlink" title="执行整合"></a>执行整合</h3><h3 id="整合的复杂性"><a href="#整合的复杂性" class="headerlink" title="整合的复杂性"></a>整合的复杂性</h3><h3 id="管理新实践"><a href="#管理新实践" class="headerlink" title="管理新实践"></a>管理新实践</h3><h3 id="项目管理计划和文件"><a href="#项目管理计划和文件" class="headerlink" title="项目管理计划和文件"></a>项目管理计划和文件</h3><h2 id="项目整合管理过程"><a href="#项目整合管理过程" class="headerlink" title="项目整合管理过程"></a>项目整合管理过程</h2><h3 id="过程概述"><a href="#过程概述" class="headerlink" title="过程概述"></a>过程概述</h3><h3 id="裁剪考虑因素"><a href="#裁剪考虑因素" class="headerlink" title="裁剪考虑因素"></a>裁剪考虑因素</h3><h3 id="敏捷与适应方法"><a href="#敏捷与适应方法" class="headerlink" title="敏捷与适应方法"></a>敏捷与适应方法</h3><h2 id="执行项目章程"><a href="#执行项目章程" class="headerlink" title="执行项目章程"></a>执行项目章程</h2><h2 id="制定项目管理计划"><a href="#制定项目管理计划" class="headerlink" title="制定项目管理计划"></a>制定项目管理计划</h2><h2 id="指导与管理项目工作"><a href="#指导与管理项目工作" class="headerlink" title="指导与管理项目工作"></a>指导与管理项目工作</h2><h2 id="管理项目知识"><a href="#管理项目知识" class="headerlink" title="管理项目知识"></a>管理项目知识</h2><h2 id="监控项目工作"><a href="#监控项目工作" class="headerlink" title="监控项目工作"></a>监控项目工作</h2><h2 id="实施整体变更控制"><a href="#实施整体变更控制" class="headerlink" title="实施整体变更控制"></a>实施整体变更控制</h2><h2 id="结束项目或阶段"><a href="#结束项目或阶段" class="headerlink" title="结束项目或阶段"></a>结束项目或阶段</h2><h1 id="9、项目范围管理-5"><a href="#9、项目范围管理-5" class="headerlink" title="9、项目范围管理(5)"></a>9、项目范围管理(5)</h1><h1 id="10、项目进度管理-5"><a href="#10、项目进度管理-5" class="headerlink" title="10、项目进度管理(5)"></a>10、项目进度管理(5)</h1><h1 id="11、项目成本管理-5"><a href="#11、项目成本管理-5" class="headerlink" title="11、项目成本管理(5)"></a>11、项目成本管理(5)</h1><h1 id="12、项目质量管理-5"><a href="#12、项目质量管理-5" class="headerlink" title="12、项目质量管理(5)"></a>12、项目质量管理(5)</h1><h1 id="13、项目资源管理（论文）"><a href="#13、项目资源管理（论文）" class="headerlink" title="13、项目资源管理（论文）"></a>13、项目资源管理（论文）</h1><h1 id="14、项目沟通管理（与干系人联系）"><a href="#14、项目沟通管理（与干系人联系）" class="headerlink" title="14、项目沟通管理（与干系人联系）"></a>14、项目沟通管理（与干系人联系）</h1><h1 id="15、项目风险管理"><a href="#15、项目风险管理" class="headerlink" title="15、项目风险管理"></a>15、项目风险管理</h1><h1 id="16、项目采购管理"><a href="#16、项目采购管理" class="headerlink" title="16、项目采购管理"></a>16、项目采购管理</h1><h1 id="17、项目干系人管理（与沟通联系）"><a href="#17、项目干系人管理（与沟通联系）" class="headerlink" title="17、项目干系人管理（与沟通联系）"></a>17、项目干系人管理（与沟通联系）</h1><h1 id="18、项目绩效域"><a href="#18、项目绩效域" class="headerlink" title="18、项目绩效域"></a>18、项目绩效域</h1><h1 id="19、配置与变更管理-5"><a href="#19、配置与变更管理-5" class="headerlink" title="19、配置与变更管理(5)"></a>19、配置与变更管理(5)</h1><h1 id="20、高级项目管理"><a href="#20、高级项目管理" class="headerlink" title="20、高级项目管理"></a>20、高级项目管理</h1><h1 id="21、项目管理科学基础"><a href="#21、项目管理科学基础" class="headerlink" title="21、项目管理科学基础"></a>21、项目管理科学基础</h1><h1 id="22、组织通用治理"><a href="#22、组织通用治理" class="headerlink" title="22、组织通用治理"></a>22、组织通用治理</h1><h1 id="23、组织通用管理"><a href="#23、组织通用管理" class="headerlink" title="23、组织通用管理"></a>23、组织通用管理</h1><h1 id="24、法律法规与标准规范"><a href="#24、法律法规与标准规范" class="headerlink" title="24、法律法规与标准规范"></a>24、法律法规与标准规范</h1><h1 id="关键英文词"><a href="#关键英文词" class="headerlink" title="关键英文词"></a>关键英文词</h1><ul><li>PMO（项目管理办公室）- Project Management Office Manager</li><li>CCB（项目管理委员会）- Change Control Board</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、信息化发展&quot;&gt;&lt;a href=&quot;#1、信息化发展&quot; class=&quot;headerlink&quot; title=&quot;1、信息化发展&quot;&gt;&lt;/a&gt;1、信息化发展&lt;/h1&gt;&lt;h2 id=&quot;信息与信息化&quot;&gt;&lt;a href=&quot;#信息与信息化&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="信息系统项目管理师教程" scheme="http://damao2250.com/categories/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B8%88%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="信息系统项目管理师教程" scheme="http://damao2250.com/tags/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B8%88%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>chrome允许跨域</title>
    <link href="http://damao2250.com/2023/08/29/chrome%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/"/>
    <id>http://damao2250.com/2023/08/29/chrome%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F/</id>
    <published>2023-08-29T01:47:09.000Z</published>
    <updated>2023-08-29T02:19:46.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-下"><a href="#Windows-下" class="headerlink" title="Windows 下"></a>Windows 下</h2><ul><li>复制一个 chrome 浏览器的快捷方式，在属性中找到打开路径，在 …chrome.exe 后面加上<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">--</span>args <span class="token operator">--</span>disable<span class="token operator">-</span>web<span class="token operator">-</span>security <span class="token operator">--</span>user<span class="token operator">-</span>data<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token string">"C:/ChromeDevSession"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="Mac-下"><a href="#Mac-下" class="headerlink" title="Mac 下"></a>Mac 下</h2><ul><li>在终端中执行命令<pre class="line-numbers language-js" data-language="js"><code class="language-js">open <span class="token operator">-</span>a <span class="token string">'Google Chrome'</span> <span class="token operator">--</span>args <span class="token operator">--</span>disable<span class="token operator">-</span>web<span class="token operator">-</span>security <span class="token operator">--</span>user<span class="token operator">-</span>data<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>chrome_dev_test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="扩展程序的方式"><a href="#扩展程序的方式" class="headerlink" title="扩展程序的方式"></a>扩展程序的方式</h2><ul><li><p>Chrome: <a href="https://chrome.google.com/webstore/detail/cros-anywhere/gcagclbpmooihllccniifbdekfeneebm?hl=zh-CN">cros-anywhere</a></p></li><li><p>Firefox ：<a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/">cros-anywhere</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows-下&quot;&gt;&lt;a href=&quot;#Windows-下&quot; class=&quot;headerlink&quot; title=&quot;Windows 下&quot;&gt;&lt;/a&gt;Windows 下&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;复制一个 chrome 浏览器的快捷方式，在属性中找到打开路径，在 …c</summary>
      
    
    
    
    <category term="小技巧" scheme="http://damao2250.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Chrome" scheme="http://damao2250.com/tags/Chrome/"/>
    
    <category term="跨域" scheme="http://damao2250.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Kodi相关</title>
    <link href="http://damao2250.com/2023/06/14/Kodi%E7%9B%B8%E5%85%B3/"/>
    <id>http://damao2250.com/2023/06/14/Kodi%E7%9B%B8%E5%85%B3/</id>
    <published>2023-06-14T08:47:10.000Z</published>
    <updated>2023-06-14T10:28:17.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kodi下载"><a href="#Kodi下载" class="headerlink" title="Kodi下载"></a>Kodi下载</h2><ul><li><a href="https://kodi.tv/download/">Kodi</a></li></ul><h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><details>  <summary>在智能电视上免费看万千影视，只需要在Kodi上安装这个The Crew插件</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%9C%A8%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8A%E5%85%8D%E8%B4%B9%E7%9C%8B%E4%B8%87%E5%8D%83%E5%BD%B1%E8%A7%86%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%9C%A8Kodi%E4%B8%8A%E5%AE%89%E8%A3%85%E8%BF%99%E4%B8%AAThe%20Crew%E6%8F%92%E4%BB%B61.png" alt="在智能电视上免费看万千影视，只需要在Kodi上安装这个The Crew插件"></p><p>  <a href="https://www.luckydesigner.space/smarttv-to-watch-everythings-movie-via-kodi/">转自：https://www.luckydesigner.space/smarttv-to-watch-everythings-movie-via-kodi/</a></p></details><details>  <summary>智能电视上kodi观影之如何安装支持中文字幕插件</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8Akodi%E8%A7%82%E5%BD%B1%E4%B9%8B%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95%E6%8F%92%E4%BB%B6.png" alt="智能电视上kodi观影之如何安装支持中文字幕插件"></p><p>  <a href="https://www.luckydesigner.space/how-to-install-chinese-subtitle-in-kodi/">转自：https://www.luckydesigner.space/how-to-install-chinese-subtitle-in-kodi/</a></p></details><details>  <summary>如何在电视上用kodi自定义看各国上万直播源</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%A6%82%E4%BD%95%E5%9C%A8%E7%94%B5%E8%A7%86%E4%B8%8A%E7%94%A8kodi%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9C%8B%E5%90%84%E5%9B%BD%E4%B8%8A%E4%B8%87%E7%9B%B4%E6%92%AD%E6%BA%90.png" alt="如何在电视上用kodi自定义看各国上万直播源"></p><p>  <a href="https://www.luckydesigner.space/kodi-software-to-watch-online-tv/">转自：https://www.luckydesigner.space/kodi-software-to-watch-online-tv/</a></p></details><details>  <summary>过年就该和家人玩游戏使用kodi在智能电视上玩万种电视游戏</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E8%BF%87%E5%B9%B4%E5%B0%B1%E8%AF%A5%E5%92%8C%E5%AE%B6%E4%BA%BA%E7%8E%A9%E6%B8%B8%E6%88%8F%E4%BD%BF%E7%94%A8kodi%E5%9C%A8%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8A%E7%8E%A9%E4%B8%87%E7%A7%8D%E7%94%B5%E8%A7%86%E6%B8%B8%E6%88%8F.png" alt="过年就该和家人玩游戏使用kodi在智能电视上玩万种电视游戏"></p><p>  <a href="https://www.luckydesigner.space/play-tv-game-online-with-kodi/">转自：https://www.luckydesigner.space/play-tv-game-online-with-kodi/</a></p></details><details>  <summary>在智能电视上如何看Youtube视频，使用Kodi你就能做到</summary><p>  <img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%9C%A8%E6%99%BA%E8%83%BD%E7%94%B5%E8%A7%86%E4%B8%8A%E5%A6%82%E4%BD%95%E7%9C%8BYoutube%E8%A7%86%E9%A2%91%EF%BC%8C%E4%BD%BF%E7%94%A8Kodi%E4%BD%A0%E5%B0%B1%E8%83%BD%E5%81%9A%E5%88%B0.png" alt="在智能电视上如何看Youtube视频，使用Kodi你就能做到"></p><p>  <a href="https://www.luckydesigner.space/how-to-watch-youtube-on-tv-via-kodi/">转自：https://www.luckydesigner.space/how-to-watch-youtube-on-tv-via-kodi/</a></p></details>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kodi下载&quot;&gt;&lt;a href=&quot;#Kodi下载&quot; class=&quot;headerlink&quot; title=&quot;Kodi下载&quot;&gt;&lt;/a&gt;Kodi下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kodi.tv/download/&quot;&gt;Kodi&lt;/a&gt;&lt;/li</summary>
      
    
    
    
    <category term="Kodi" scheme="http://damao2250.com/categories/Kodi/"/>
    
    
    <category term="软件" scheme="http://damao2250.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mac软件安装记录</title>
    <link href="http://damao2250.com/2023/05/23/Mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>http://damao2250.com/2023/05/23/Mac%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</id>
    <published>2023-05-23T00:56:11.000Z</published>
    <updated>2023-08-30T01:13:11.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Office-2019-for-Mac-安装教程"><a href="#Office-2019-for-Mac-安装教程" class="headerlink" title="Office 2019 for Mac 安装教程"></a>Office 2019 for Mac 安装教程</h1><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ul><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/Office%202019%20for%20Mac%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.docx">Office 2019 for Mac 安装教程</a></li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/SWDVD5_Office_Mac_Serializer_2019_MLF_X21-88135.ISO">SWDVD5_OfficeMac_Serializer_2019 MLFX21-88135.ISO</a></li><li>Office 2019 for Mac （文件太大，未上传）</li></ul><h2 id="激活软件安装"><a href="#激活软件安装" class="headerlink" title="激活软件安装"></a>激活软件安装</h2><ol><li>解压：<code>SWDVD5_OfficeMac_Serializer_2019 MLFX21-88135.ISO</code><ul><li>右键一打开方式一选择一个解压工具打开如果未下载解压工具，可从App Store下载如图的The Unarchiver</li></ul></li><li>打开解压后的文件夹，双击安装<code>Microsoft_Office_2019_VL_Serializer.pkg</code></li></ol><h2 id="office安装"><a href="#office安装" class="headerlink" title="office安装"></a>office安装</h2><ol><li>双击安装：<code>Microsoft Office 16.46.21021202 Installer.pkg</code></li><li>安装完成后必须点击更新，等待全部软件更新，不然会显示未激活</li></ol><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ol><li><p>安装完后打开Office组件后左下角不再有激活的选项，成为已激活状态。如果仍有激活选项，请再运行一次步骤2。</p></li><li><p>此前已注册的个人Microsoft账号仍可继续登录使用，如有问题可登陆官网更改资料或重设密码等。</p></li><li><p>仅支持macOS版本10.14.0或者更高版本。</p></li><li><p>如果显示Office打开错误可能是由于未完全卸载，仅删除了应用程序，仍然有遗留的支持文件和许可文件等，请完全卸载后重启电脑，再重新安装即可成功。</p></li></ol><h2 id="完全卸载Office"><a href="#完全卸载Office" class="headerlink" title="完全卸载Office"></a>完全卸载Office</h2><ol><li>删除 Office 2019 for Mac 应用程序</li></ol><ul><li>打开 Finder，然后单击“应用程序”</li><li>按住 Command 命令的同时单击以选择所有 Office 2019 for Mac 应用程序</li><li>按住 Ctrl 的同时单击或右键单击所选应用程序，然后单击“移到废纸等”</li></ul><ol start="2"><li>资源库中删除支持文件</li></ol><ul><li>打开 Finder，单击“前往”&gt;“电脑”找到“Macintosh HD”&gt;“资源库</li><li>在“资源库”文件夹，找到“LaunchDaemns”文件夹中，如果存在下面两个文件单击“移到废纸等”删除下面两个文件<ul><li>com.microsoft.office.licensingV2.helper.plist (如果存在)</li><li>com.microsoft.autoupdate.helper.plist (如果存在)</li></ul></li><li>在“资源库”&gt;“PrivilegedHelperTools”，如果存在下面两个文件单击“移到废纸等”删除下面两个文件<ul><li>com.microsoft.office.licensingV2.helper (如果存在)</li><li>com.microsoft.autoupdate.helper (如果存在)</li></ul></li></ul><ol start="3"><li>删除破解或无效许可文件</li></ol><ul><li>按照如何删除 Mac 上的 破解版Ofice 许可证文件”中的说明使用许可证删除工具。此工具可完全删除 Mac 上的许可证文件.</li><li>参考链接: <a href="https://support.microsoft.com/zh-cn/office/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4-mac-%E4%B8%8A%E7%9A%84-office-%E8%AE%B8%E5%8F%AF%E8%AF%81%E6%96%87%E4%BB%B6-b032c0f6-a431-4dad-83a9-6b727c03b193">删除Mac上的激活许可文件</a></li></ul><ol start="4"><li>从 DockQ 中删除 Office 2019 for Mac 图标</li></ol><ul><li>如果你已将 Ofice 图标添加到 Dock，在你卸载 Ofice 2019 for Mac 之后，它们可能会变为问号.</li><li>若要删除这些图标，请在按住 Control 的同时单击或右键单击图标，然后单击“选项”&gt;“从 Dock 中移除”.</li></ul><ol start="5"><li>清空废纸等，重新启动计算机</li></ol><ul><li>做完以上步骤之后，请右击“废纸等”清空“废纸等”并重新启动计算机</li></ul><h3 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h3><ul><li><a href="https://itc.shisu.edu.cn/78/6a/c10035a161898/page.htm">Office 2019 for Mac 安装激活教程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Office-2019-for-Mac-安装教程&quot;&gt;&lt;a href=&quot;#Office-2019-for-Mac-安装教程&quot; class=&quot;headerlink&quot; title=&quot;Office 2019 for Mac 安装教程&quot;&gt;&lt;/a&gt;Office 2019 fo</summary>
      
    
    
    
    <category term="MAC" scheme="http://damao2250.com/categories/MAC/"/>
    
    
    <category term="软件" scheme="http://damao2250.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器控制台安装npm包</title>
    <link href="http://damao2250.com/2023/05/05/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AE%89%E8%A3%85npm%E5%8C%85/"/>
    <id>http://damao2250.com/2023/05/05/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AE%89%E8%A3%85npm%E5%8C%85/</id>
    <published>2023-05-05T10:57:32.000Z</published>
    <updated>2023-05-05T11:10:47.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>通过 <code>&lt;script /&gt;</code>标签在HTML页面上引入CDN资源</li><li>通过CND连接搜索相应的资源，如：<a href="https://api.cdnjs.com/libraries?search=jquery">https://api.cdnjs.com/libraries?search=jquery</a></li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 存储原始传入的名称</span><span class="token keyword">let</span> pkg_name_origin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">npmInstall</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">originName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> originName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pkg_name_origin <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token comment">// 三种引入方式</span>  <span class="token comment">// 如果是一个有效的URL，直接通过&lt;script />标签插入</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\/\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">injectScript</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果指定了版本，尝试使用unpkg加载</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">unpkg</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 否则，尝试使用cdnjs搜索</span>  <span class="token keyword">return</span> <span class="token function">cdnjs</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 在页面中插入&lt;script />标签</span><span class="token keyword">const</span> <span class="token function-variable function">injectScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>  script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pkg_name_origin<span class="token punctuation">,</span> <span class="token string">' 安装成功。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pkg_name_origin<span class="token punctuation">,</span> <span class="token string">' 安装失败。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// document.body.removeChild(script);</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">unpkg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">injectScript</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://unpkg.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">cdnjs</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> searchPromise <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.cdnjs.com/libraries?search=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token comment">// 不显示referrer的任何信息在请求头中</span>    <span class="token punctuation">&#123;</span> referrerPolicy<span class="token operator">:</span> <span class="token string">'no-referrer'</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> results<span class="token punctuation">,</span> total <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> searchPromise<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Sorry, '</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">' not found, please try another keyword.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 取结果中最相关的一条</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> exactName<span class="token punctuation">,</span> latest<span class="token operator">:</span> url <span class="token punctuation">&#125;</span> <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> exactName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">' not found, import '</span><span class="token punctuation">,</span> exactName<span class="token punctuation">,</span> <span class="token string">' instead.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 通过&lt;script />标签插入</span>  <span class="token function">injectScript</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">npmInstall</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接引入</span><span class="token function">npmInstall</span><span class="token punctuation">(</span><span class="token string">'moment@2.29.4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定版本</span><span class="token function">npmInstall</span><span class="token punctuation">(</span><span class="token string">'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引入cdn地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;&amp;lt;script /&amp;gt;&lt;/code&gt;标签在HTML页面上引入CDN资源&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="小技巧" scheme="http://damao2250.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="浏览器控制台" scheme="http://damao2250.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
    <category term="安装npm包" scheme="http://damao2250.com/tags/%E5%AE%89%E8%A3%85npm%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>无法删除的水印方案</title>
    <link href="http://damao2250.com/2023/03/31/%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E7%9A%84%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/"/>
    <id>http://damao2250.com/2023/03/31/%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E7%9A%84%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/</id>
    <published>2023-03-31T06:11:50.000Z</published>
    <updated>2023-04-10T08:13:13.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">WaterMark</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认样式</span>    <span class="token keyword">const</span> defaultStyles <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      transform<span class="token operator">:</span> <span class="token string">'rotate(-15deg)'</span><span class="token punctuation">,</span>      position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>      overflow<span class="token operator">:</span> <span class="token string">'hidden'</span><span class="token punctuation">,</span>      zIndex<span class="token operator">:</span> <span class="token number">9999999</span><span class="token punctuation">,</span>      opacity<span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>      fontFamily<span class="token operator">:</span> <span class="token string">'微软雅黑'</span><span class="token punctuation">,</span>      color<span class="token operator">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>      textAlign<span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>      padding<span class="token operator">:</span> <span class="token string">'10px 10px'</span><span class="token punctuation">,</span>      whiteSpace<span class="token operator">:</span> <span class="token string">'nowrap'</span><span class="token punctuation">,</span>      display<span class="token operator">:</span> <span class="token string">'block'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 覆盖默认样式</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> left <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span> fontSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> styles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options    <span class="token keyword">this</span><span class="token punctuation">.</span>styles <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>defaultStyles<span class="token punctuation">,</span> <span class="token operator">...</span>styles <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">createMaskDiv</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> top</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> maskDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    maskDiv<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'water_mask_id_0'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> styles <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>styles<span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>left<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> top<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>top<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> fontSize<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fontSize<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> styles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maskDiv<span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> styles<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    maskDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>    <span class="token keyword">return</span> maskDiv<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">createWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> maskDiv <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createMaskDiv</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>maskDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> width <span class="token operator">=</span> maskDiv<span class="token punctuation">.</span>offsetWidth    <span class="token keyword">let</span> height <span class="token operator">=</span> maskDiv<span class="token punctuation">.</span>offsetHeight    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>maskDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'eb-watermark'</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointer-events: none !important; display: block !important; visibility: visible !important; position: fixed !important; top: 0 !important; left: 0 !important; opacity: 1 !important; z-index: 0 !important; transform: translateX(0) !important;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> mode<span class="token operator">:</span> <span class="token string">'open'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left    <span class="token keyword">let</span> top <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span> i <span class="token operator">+=</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span> j <span class="token operator">+=</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        shadowRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createMaskDiv</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> observerConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span> childList<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> subtree<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> attributes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> attributeFilter<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'style'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 监听DOM改变</span>    <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMutation</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> observerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置characterData监听元素的innerText改变</span>    <span class="token keyword">const</span> shadowRootObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutations</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleShadowRootMutation</span><span class="token punctuation">(</span>mutations<span class="token punctuation">,</span> shadowRoot<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    shadowRootObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>shadowRoot<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>observerConfig<span class="token punctuation">,</span> characterData<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleMutation</span><span class="token punctuation">(</span><span class="token parameter">mutations</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> watermark <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'eb-watermark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>removedNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> mutation<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">'eb-watermark'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>watermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'attributes'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">'eb-watermark'</span> <span class="token operator">||</span> mutation<span class="token punctuation">.</span>attributeName <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          watermark<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> watermark <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#eb-watermark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>watermark <span class="token operator">||</span> watermark<span class="token punctuation">.</span>parentElement <span class="token operator">!==</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token operator">!</span>watermark<span class="token punctuation">.</span>shadowRoot <span class="token operator">||</span> <span class="token operator">!</span>watermark<span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#water_mask_id_0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>watermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        watermark<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleShadowRootMutation</span><span class="token punctuation">(</span><span class="token parameter">mutations<span class="token punctuation">,</span> shadowRoot</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>removedNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'attributes'</span> <span class="token operator">||</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'characterData'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentNode <span class="token operator">===</span> shadowRoot <span class="token operator">||</span> mutation<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode <span class="token operator">===</span> shadowRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> watermark <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'eb-watermark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          watermark<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> watermark <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'eb-watermark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>watermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      watermark<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WaterMark<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> WaterMark <span class="token keyword">from</span> <span class="token string">'./watermark'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">WaterMark</span><span class="token punctuation">(</span><span class="token string">'我是水印啊'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h2><ul><li>目前只支持插入到body的全屏水印，下一步优化支持指定id的div水印</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现代码&quot;&gt;&lt;a href=&quot;#实现代码&quot; class=&quot;headerlink&quot; title=&quot;实现代码&quot;&gt;&lt;/a&gt;实现代码&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code cl</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="水印" scheme="http://damao2250.com/tags/%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>用css实现防止按钮重复点击</title>
    <link href="http://damao2250.com/2023/02/18/%E7%94%A8css%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/"/>
    <id>http://damao2250.com/2023/02/18/%E7%94%A8css%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB/</id>
    <published>2023-02-18T10:42:47.000Z</published>
    <updated>2023-02-18T10:58:10.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>利用<code>pointer-events</code>属性设置元素是否对鼠标事件做出反应</li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><ul><li>可以延申加入自定义动画<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save-button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.save-button</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> buttonThrottle 2s step-end forwards<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.save-button:active</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> buttonThrottle</span> <span class="token punctuation">&#123;</span>  <span class="token selector">from</span> <span class="token punctuation">&#123;</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">to</span> <span class="token punctuation">&#123;</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> all<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ul><li>打开开发者模式，查看Console会发现每隔两秒钟之后才能触发Console打印</li></ul><p><button class="save-button" onclick="console.log('保存')">保存</button></p><style>.save-button {  animation: buttonThrottle 2s step-end forwards;}.save-button:active {  animation: none;}@keyframes buttonThrottle {  from {    color: red;    pointer-events: none;  }  to {    color: blue;    pointer-events: all;  }}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;利用&lt;code&gt;pointer-events&lt;/code&gt;属性设置元素是否对鼠标事件做出反应&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="CSS" scheme="http://damao2250.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://damao2250.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>发布订阅模式和观察者模式</title>
    <link href="http://damao2250.com/2023/02/15/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://damao2250.com/2023/02/15/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-02-15T10:40:49.000Z</published>
    <updated>2023-02-18T03:47:01.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h3><ul><li>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。</li><li>观察者模式有一个别名叫“发布-订阅模式”，或者说是“订阅-发布模式”，订阅者和订阅目标是联系在一起的，当订阅目标发生改变时，逐个通知订阅者</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>目标&lt;=&gt;观察者</li><li>观察者观察目标（监听目标）-&gt; 目标发生变化-&gt; 目标主动通知观察者</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li>拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价，即“一对多”的依赖关系（一个拍卖师多个竞价者）</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>Vue数据双向绑定</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=></span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 创建观察者ob1</span><span class="token keyword">let</span> ob1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建观察者ob2</span><span class="token keyword">let</span> ob2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建目标sub</span><span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 目标sub添加观察者ob1 （目标和观察者建立了依赖关系）</span>sub<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ob1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 目标sub添加观察者ob2</span>sub<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ob2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 目标sub触发SMS事件（目标主动通知观察者）</span>sub<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">'I fired `SMS` event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><h3 id="发布订阅模式（Pub-Sub-Pattern）"><a href="#发布订阅模式（Pub-Sub-Pattern）" class="headerlink" title="发布订阅模式（Pub-Sub Pattern）"></a>发布订阅模式（Pub-Sub Pattern）</h3><ul><li>发布订阅模式中，发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为调度中心或事件通道，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者</li><li>发布订阅模式是在观察者模式的基础上做的优化升级</li></ul><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><ul><li>发布者-&gt;事件中心&lt;=&gt;订阅者</li><li>订阅者需要向事件中心订阅指定的事件 -&gt; 发布者向事件中心发布指定事件内容 -&gt; 事件中心通知订阅者 -&gt; 订阅者收到消息（可能是多个订阅者）</li></ul><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><ul><li>你在微博上关注了A，同时其他很多人也关注了A，那么当A发布动态的时候，微博就会为你们推送这条动态。A就是发布者，你是订阅者，微博就是调度中心，你和A是没有直接的消息往来的，全是通过微博来协调的（你的关注，A的发布动态）</li></ul><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><ul><li>vue中的事件总线，$emit和$on, $on用来订阅事件，$emit用来发布订阅的事件</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">PubSub</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 事件中心/调度中心</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 订阅</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> callbacks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callbacks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 发布</span>  <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> callbacks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 创建事件调度中心，为订阅者和发布者提供调度服务</span><span class="token keyword">let</span> pubSub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// A订阅了SMS事件（A只关注SMS本身，而不关心谁发布这个事件）</span>pubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'SMS'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// B订阅了SMS事件</span>pubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'SMS'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// C发布了SMS事件（C只关注SMS本身，不关心谁订阅了这个事件）</span>pubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'SMS'</span><span class="token punctuation">,</span> <span class="token string">'I published `SMS` event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>发布-订阅模式是面向调度中心编程的，而观察者模式则是面向目标和观察者编程的。前者用于解耦发布者和订阅者，后者用于耦合目标和观察者</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;h3 id=&quot;观察者模式（Observer-Pattern）&quot;&gt;&lt;a href=&quot;#观察者模式（Observer-Pat</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器禁止用户打开devtools</title>
    <link href="http://damao2250.com/2023/02/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A6%81%E6%AD%A2%E7%94%A8%E6%88%B7%E6%89%93%E5%BC%80devtools/"/>
    <id>http://damao2250.com/2023/02/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A6%81%E6%AD%A2%E7%94%A8%E6%88%B7%E6%89%93%E5%BC%80devtools/</id>
    <published>2023-02-07T01:13:10.000Z</published>
    <updated>2023-02-07T01:35:49.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="禁止键盘-F12"><a href="#禁止键盘-F12" class="headerlink" title="禁止键盘 F12"></a>禁止键盘 F12</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token number">123</span> <span class="token operator">!==</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">||</span> event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="禁止鼠标右键后选择检查元素"><a href="#禁止鼠标右键后选择检查元素" class="headerlink" title="禁止鼠标右键后选择检查元素"></a>禁止鼠标右键后选择检查元素</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="监听devtools的打开事件"><a href="#监听devtools的打开事件" class="headerlink" title="监听devtools的打开事件"></a>监听devtools的打开事件</h2><ul><li>通关检查浏览器可视区域和浏览器窗口的差值来判断用户是否打开了devtools</li><li>但是浏览器在新窗口打开devtools时，这个检测很容易被绕过<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">resize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> width <span class="token operator">=</span> window<span class="token punctuation">.</span>outerWidth <span class="token operator">-</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">></span> threshold<span class="token punctuation">;</span>  <span class="token keyword">const</span> height <span class="token operator">=</span> window<span class="token punctuation">.</span>outerHeight <span class="token operator">-</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">></span> threshold<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">||</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'控制台打开了！！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> resize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="基于MutationObserver检测用户改变元素属性"><a href="#基于MutationObserver检测用户改变元素属性" class="headerlink" title="基于MutationObserver检测用户改变元素属性"></a>基于MutationObserver检测用户改变元素属性</h2><ul><li>MutationObserver 可以监测到 DOM 元素上任何属性的变化情况，如有需要，也可以监听其子元素的变化情况</li><li>MutationObserver监听的是元素的属性，即attributes，如：style、class、type、href等</li><li>禁止用户用开发者工具修改某些属性时使用，如：用户企图修改网站水印<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// &lt;h1 style="margin:100px;">需要检测的元素&lt;/h1></span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  childList<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  attributes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  subtree<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  attributesOldValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  characterData<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  characterDataOldValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">expression</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行恢复方法</span>    <span class="token function">expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">records</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> record <span class="token operator">=</span> records<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'attributes'</span> <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>attributeName <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      h1<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'margin:100px;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'characterData'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      h1<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'需要检测的元素'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;禁止键盘-F12&quot;&gt;&lt;a href=&quot;#禁止键盘-F12&quot; class=&quot;headerlink&quot; title=&quot;禁止键盘 F12&quot;&gt;&lt;/a&gt;禁止键盘 F12&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-langua</summary>
      
    
    
    
    <category term="浏览器" scheme="http://damao2250.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="devtools" scheme="http://damao2250.com/tags/devtools/"/>
    
    <category term="开发者工具" scheme="http://damao2250.com/tags/%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>JS几个必会的手写功能</title>
    <link href="http://damao2250.com/2023/02/07/JS%E5%87%A0%E4%B8%AA%E5%BF%85%E4%BC%9A%E7%9A%84%E6%89%8B%E5%86%99%E5%8A%9F%E8%83%BD/"/>
    <id>http://damao2250.com/2023/02/07/JS%E5%87%A0%E4%B8%AA%E5%BF%85%E4%BC%9A%E7%9A%84%E6%89%8B%E5%86%99%E5%8A%9F%E8%83%BD/</id>
    <published>2023-02-07T01:05:13.000Z</published>
    <updated>2023-02-07T01:46:35.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Promise-all"><a href="#1、Promise-all" class="headerlink" title="1、Promise.all"></a>1、Promise.all</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function-variable function">myAll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// promises 可以不是数组，但必须要具有 Iterator 接口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> promises<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'TypeError: promises is not iterable'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promises<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">const</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Promise.resolve 的作用是将普通值或 thenable 对象转为 promise，promise 则直接返回</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Promise<span class="token punctuation">.</span><span class="token function">myAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、Promise-race"><a href="#2、Promise-race" class="headerlink" title="2、Promise.race"></a>2、Promise.race</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function-variable function">myRace</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// promises 可以不是数组，但必须要具有 Iterator 接口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> promises<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'TypeError: promises is not iterable'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 先出来的结果会被 resolve 或 reject 出去, 一旦状态变化就不会再变</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Promise<span class="token punctuation">.</span><span class="token function">myRace</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Promise-any"><a href="#3、Promise-any" class="headerlink" title="3、Promise.any"></a>3、Promise.any</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function-variable function">myAny</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// promises 可以不是数组，但必须要具有 Iterator 接口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> promises<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'TypeError: promises is not iterable'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'所有 promise 都失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Promise<span class="token punctuation">.</span><span class="token function">myAny</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、冒泡排序"><a href="#4、冒泡排序" class="headerlink" title="4、冒泡排序"></a>4、冒泡排序</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从第一个元素开始，比较相邻的两个元素，前者大就交换位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 交换位置</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 每次遍历结束，都能找到一个最大值，放在数组最后</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、选择排序"><a href="#5、选择排序" class="headerlink" title="5、选择排序"></a>5、选择排序</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 假设每次循环，最小值就是第一个</span>    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果最小值大于其他的值，则修改索引，从而找到真正的最小值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minIndex <span class="token operator">=</span> j      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 最小值和第一个交换位置</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr  <span class="token comment">// 每次取第一个元素作为基准值</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果小于基准值，则把它放在左数组</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果大于等于基准值，则放在右数组</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 递归处理，并把左中右三个数组拼接起来</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、call"><a href="#7、call" class="headerlink" title="7、call"></a>7、call</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> globalThis</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 把方法添加到 context 上，这样使用context[key]调用的时候，内部的 this 就指向了 context</span>  <span class="token comment">// 使用 Symbol 防止 context 原有属性被覆盖</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> height<span class="token punctuation">]</span> <span class="token operator">=</span> arguments  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, My height is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>height<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>say<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>myName<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">)</span> <span class="token comment">// My name is Jack, My age is 16, My height is 170</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、apply"><a href="#8、apply" class="headerlink" title="8、apply"></a>8、apply</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> globalThis</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 把方法添加到 context 上，这样使用context[key]调用的时候，内部的 this 就指向了 context</span>  <span class="token comment">// 使用 Symbol 防止 context 原有属性被覆盖</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> res  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> height<span class="token punctuation">]</span> <span class="token operator">=</span> arguments  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, My height is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>height<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>say<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span>myName<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// My name is Jack, My age is 16, My height is 170</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、bind"><a href="#9、bind" class="headerlink" title="9、bind"></a>9、bind</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> globalThis</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">newFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">newFunc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 通过 new 调用，this 为新创建的对象实例，将函数内部的 this 替换为这个新对象</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 普通方式调用，将函数内部的 this 替换为 context</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 支持 new 调用</span>  newFunc<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token keyword">return</span> newFunc<span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> height<span class="token punctuation">]</span> <span class="token operator">=</span> arguments  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, My height is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>height<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mySay <span class="token operator">=</span> say<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span>myName<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token function">mySay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// My name is Jack, My age is 16, My height is 170</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、instanceof"><a href="#10、instanceof" class="headerlink" title="10、instanceof"></a>10、instanceof</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> Fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断构造函数 Fn 是否出现在 obj 的原型链上</span>  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>proto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、new"><a href="#11、new" class="headerlink" title="11、new"></a>11、new</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype  <span class="token comment">// 将构造函数内部的 this 替换为新对象，并执行构造函数方法</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果构造函数有返回值，且类型为 object, 则把这个值返回</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'Jack', age: 16 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12、统计页面中所有标签的种类和个数"><a href="#12、统计页面中所有标签的种类和个数" class="headerlink" title="12、统计页面中所有标签的种类和个数"></a>12、统计页面中所有标签的种类和个数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getTagCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取页面上所有标签元素</span>  <span class="token keyword">const</span> tags <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> tagNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> tags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 把所有标签名转为小写，添加到数组中</span>    tagNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> tagNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// test</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getTagCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#123; html: 1, head: 1, body: 1, div: 2, script: 1 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-类型判断"><a href="#13-类型判断" class="headerlink" title="13.类型判断"></a>13.类型判断</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">myTypeOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 测试</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> array</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> regexp</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> date</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> math</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myTypeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//--> function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、Promise-all&quot;&gt;&lt;a href=&quot;#1、Promise-all&quot; class=&quot;headerlink&quot; title=&quot;1、Promise.all&quot;&gt;&lt;/a&gt;1、Promise.all&lt;/h2&gt;&lt;pre class=&quot;line-numbers lang</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://damao2250.com/tags/JS/"/>
    
    <category term="JavaScript" scheme="http://damao2250.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用AJAX、Axios、Fetch</title>
    <link href="http://damao2250.com/2023/02/06/%E4%BD%BF%E7%94%A8AJAX%E3%80%81Axios%E3%80%81Fetch/"/>
    <id>http://damao2250.com/2023/02/06/%E4%BD%BF%E7%94%A8AJAX%E3%80%81Axios%E3%80%81Fetch/</id>
    <published>2023-02-06T08:04:24.000Z</published>
    <updated>2023-02-18T04:08:58.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ul><li>AJAX全称为“Asynchronous JavaScript and XML”（异步JavaScript和XML）</li><li>AJAX最主要的两个特性：在不重新加载页面的情况下发送请求给服务器；受并使用从服务器发来的数据<h3 id="AJAX请求的五个步骤"><a href="#AJAX请求的五个步骤" class="headerlink" title="AJAX请求的五个步骤"></a>AJAX请求的五个步骤</h3><ul><li>1.建立XMLHttpRequest对象</li><li>2.设置回调函数</li><li>3.配置请求信息，(如open,get方法)，使用open方法与服务器建立链接</li><li>4.向服务器发送数据</li><li>5.在回调函数中针对不同的响应状态进行处理</li></ul></li></ul><h3 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h3><ul><li>0 －（请求未初始化）还没有调用send()方法</li><li>1 －（正在加载）已调用send()方法，正在发送请求</li><li>2 －（加载成功）send()方法执行完成，已经接收到全部响应内容</li><li>3 －（交互）正在解析响应内容</li><li>4 －（完成）响应内容解析完成，可以在客户端调用了</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"GET"</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> async<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 声明XMLHttpRequest </span>    <span class="token comment">// 在IE5和IE6中需要使用ActiveX对象 let XRH = new ActiveXObject("Microsoft.XMLHTTP");</span>    <span class="token keyword">let</span> <span class="token constant">XHR</span> <span class="token operator">=</span> XMLHttpRequest<span class="token punctuation">;</span>    <span class="token comment">// 创建XMLHttqRequest</span>    <span class="token constant">XHR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 初始化请求参数</span>    <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span>    <span class="token comment">// 设置响应的数据类型</span>    <span class="token constant">XHR</span><span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>    <span class="token comment">// 设置请求头(求头的设置必须在xhr open之后，并且在send之前)</span>    <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// applicationx-www-form-urlencoded  text/html  application/json multipart/form-data</span>    <span class="token comment">// 设置请求状态改变时执行的函数</span>    <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">XHR</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token keyword">return</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">响应状态:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">XHR</span><span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token string">"FINISH"</span><span class="token punctuation">)</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">XHR</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取服务器响应的数据，XHR.responseText为响应体</span>        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token constant">XHR</span><span class="token punctuation">.</span>responseText        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment">// 解析数据(数据为JSON数据时)</span>        <span class="token comment">// res = JSON.parse(res)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 异常处理</span>    <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Network request failed'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 发起请求</span>    <span class="token constant">XHR</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 调用（百度首页的调试窗口中调用）</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"A=1&amp;B=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX#%E6%96%87%E6%A1%A3">https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX#%E6%96%87%E6%A1%A3</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started">https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started</a></li></ul><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><ul><li>Fetch是浏览器内置API，在浏览器环境中，可以通过顶层对象window获取</li><li>fetch()是XMLHttpRequest(ajax使用的就是XMLHttpRequest)的升级版，用于在JavaScript脚本里面发出HTTP请求</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 完整options对象</span><span class="token comment">/**  &#123;    method: "GET", // HTTP 请求的方法，POST、DELETE、PUT等    headers: &#123; // 请求头      "Content-Type": "text/plain;charset=UTF-8"    &#125;,    body: undefined, // POST 请求体    referrer: "about:client",    referrerPolicy: "no-referrer-when-downgrade", // 指定了 HTTP 头部 referer 字段的值    mode: "cors", // 请求的模式    credentials: "same-origin",    cache: "default", // 请求的 cache 模式    redirect: "follow", // 可用的 redirect 模式    integrity: "",    keepalive: false,    signal: undefined  &#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Failed'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用await语法"><a href="#使用await语法" class="headerlink" title="使用await语法"></a>使用await语法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded; charset=UTF-8"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token string">'foo=bar&amp;lorem=ipsum'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST提交JSON数据"><a href="#POST提交JSON数据" class="headerlink" title="POST提交JSON数据"></a>POST提交JSON数据</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> user <span class="token operator">=</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span>  <span class="token string">'John'</span><span class="token punctuation">,</span> surname<span class="token operator">:</span>  <span class="token string">'Smith'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json;charset=utf-8'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST提交表单数据"><a href="#POST提交表单数据" class="headerlink" title="POST提交表单数据"></a>POST提交表单数据</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="file"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传二进制数据"><a href="#上传二进制数据" class="headerlink" title="上传二进制数据"></a>上传二进制数据</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span>     canvasElem<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>  <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span>  <span class="token string">'POST'</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> blob<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取消fetch-请求"><a href="#取消fetch-请求" class="headerlink" title="取消fetch()请求"></a>取消fetch()请求</h3><ul><li>fetch()请求发送以后，如果中途想要取消，需要使用AbortController对象<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  signal<span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>signal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'abort'</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'abort!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>signal<span class="token punctuation">.</span>aborted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="GET请求-1"><a href="#GET请求-1" class="headerlink" title="GET请求"></a>GET请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// get请求携带参数</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=5422'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 也可以这样写</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">5422</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 相应类型为流文件</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>  url<span class="token operator">:</span> <span class="token string">'http://www.xxx.com/test'</span><span class="token punctuation">,</span>  responseType<span class="token operator">:</span> <span class="token string">'stream'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'xxx.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="POST请求-1"><a href="#POST请求-1" class="headerlink" title="POST请求"></a>POST请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    firstName<span class="token operator">:</span> <span class="token string">'三'</span><span class="token punctuation">,</span>    lastName<span class="token operator">:</span> <span class="token string">'张'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 也可以配置参数</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>  url<span class="token operator">:</span> <span class="token string">'/user/001'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    firstName<span class="token operator">:</span> <span class="token string">'三'</span><span class="token punctuation">,</span>    lastName<span class="token operator">:</span> <span class="token string">'张'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="并行请求"><a href="#并行请求" class="headerlink" title="并行请求"></a>并行请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acct<span class="token punctuation">,</span> perms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Both requests are now complete</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  baseURL<span class="token operator">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span>  timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'X-Custom-Header'</span><span class="token operator">:</span> <span class="token string">'custom header content'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 全局默认配置</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://api.example.com'</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AUTH_TOKEN</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span><span class="token comment">// Custom instance defaults</span><span class="token comment">// Set config defaults when creating the instance</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  baseURL<span class="token operator">:</span> <span class="token string">'https://api.example.com'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Alter defaults after instance has been created</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AUTH_TOKEN</span><span class="token punctuation">;</span><span class="token comment">// Config order of precedence</span><span class="token comment">// Create an instance using the config defaults provided by the library</span><span class="token comment">// At this point the timeout config value is `0` as is the default for the library</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Override timeout default for the library</span><span class="token comment">// Now all requests will wait 2.5 seconds before timing out</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span><span class="token comment">// Override timeout for this request as it's known to take a long time</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/longRequest'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  timeout<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Intercept request/responses</span><span class="token comment">// Add a request interceptor</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Do something before request is sent</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Do something with request error</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Add a response interceptor</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Do something with response data</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Do something with response error</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Remove interceptor</span><span class="token keyword">var</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Custom instance interceptors</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Catch error</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// The request was made and the server responded with a status code</span>      <span class="token comment">// that falls out of the range of 2xx</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// The request was made but no response was received</span>      <span class="token comment">// `error.request` is an instance of XMLHttpRequest in the browser and an instance of</span>      <span class="token comment">// http.ClientRequest in node.js</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Something happened in setting up the request that triggered an Error</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Custom HTTP status code error</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">validateStatus</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> status <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment">// Reject only if the status code is greater than or equal to 500</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Cancel request with cancel token</span><span class="token keyword">var</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span><span class="token keyword">var</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  cancelToken<span class="token operator">:</span> source<span class="token punctuation">.</span>token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thrown</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request canceled'</span><span class="token punctuation">,</span> thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// handle error</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'new name'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  cancelToken<span class="token operator">:</span> source<span class="token punctuation">.</span>token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// cancel the request (the message parameter is optional)</span>source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'Operation canceled by the user.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Create cancel token</span><span class="token keyword">var</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span><span class="token keyword">var</span> cancel<span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  cancelToken<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// An executor function receives a cancel function as a parameter</span>    cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// cancel the request</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;AJAX全称为“Asynchronous JavaScript and XML”（异步JavaScript和XM</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="Axios" scheme="http://damao2250.com/tags/Axios/"/>
    
    <category term="AJAX" scheme="http://damao2250.com/tags/AJAX/"/>
    
    <category term="Fetch" scheme="http://damao2250.com/tags/Fetch/"/>
    
  </entry>
  
  <entry>
    <title>JS中的笛卡尔乘积</title>
    <link href="http://damao2250.com/2023/01/12/JS%E4%B8%AD%E7%9A%84%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/"/>
    <id>http://damao2250.com/2023/01/12/JS%E4%B8%AD%E7%9A%84%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/</id>
    <published>2023-01-12T10:54:16.000Z</published>
    <updated>2023-01-12T11:43:02.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笛卡尔乘积定义"><a href="#笛卡尔乘积定义" class="headerlink" title="笛卡尔乘积定义"></a>笛卡尔乘积定义</h2><ul><li>笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尔积（Cartesian product），又称直积，表示为X×Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员。</li><li>假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</li><li>摘自<a href="https://baike.baidu.com/item/%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/6323173">百度百科</a></li></ul><h2 id="js实现笛卡尔乘积"><a href="#js实现笛卡尔乘积" class="headerlink" title="js实现笛卡尔乘积"></a>js实现笛卡尔乘积</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'热'</span><span class="token punctuation">,</span> <span class="token string">'冷'</span><span class="token punctuation">,</span> <span class="token string">'冰'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'大'</span><span class="token punctuation">,</span> <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'小'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'全糖'</span><span class="token punctuation">,</span> <span class="token string">'半糖'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'现喝'</span><span class="token punctuation">,</span> <span class="token string">'打包'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 根据 list 计算所有组合结果</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'热大全糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'热大全糖打包'</span><span class="token punctuation">,</span> <span class="token string">'热大半糖现喝'</span><span class="token punctuation">,</span>  <span class="token string">'热大半糖打包'</span><span class="token punctuation">,</span> <span class="token string">'热中全糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'热中全糖打包'</span><span class="token punctuation">,</span>  <span class="token string">'热中半糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'热中半糖打包'</span><span class="token punctuation">,</span> <span class="token string">'热小全糖现喝'</span><span class="token punctuation">,</span>  <span class="token string">'热小全糖打包'</span><span class="token punctuation">,</span> <span class="token string">'热小半糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'热小半糖打包'</span><span class="token punctuation">,</span>  <span class="token string">'冷大全糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冷大全糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冷大半糖现喝'</span><span class="token punctuation">,</span>  <span class="token string">'冷大半糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冷中全糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冷中全糖打包'</span><span class="token punctuation">,</span>  <span class="token string">'冷中半糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冷中半糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冷小全糖现喝'</span><span class="token punctuation">,</span>  <span class="token string">'冷小全糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冷小半糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冷小半糖打包'</span><span class="token punctuation">,</span>  <span class="token string">'冰大全糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冰大全糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冰大半糖现喝'</span><span class="token punctuation">,</span>  <span class="token string">'冰大半糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冰中全糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冰中全糖打包'</span><span class="token punctuation">,</span>  <span class="token string">'冰中半糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冰中半糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冰小全糖现喝'</span><span class="token punctuation">,</span>  <span class="token string">'冰小全糖打包'</span><span class="token punctuation">,</span> <span class="token string">'冰小半糖现喝'</span><span class="token punctuation">,</span> <span class="token string">'冰小半糖打包'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>思路</p><ol><li>从原数组中取出前两项数组相互组合得到组合结果1</li><li>再利用组合结果1与原数组第三项数组相互组合得到结果2</li><li>依此类推，组合完原数组的所有数组项得到最终组合结果</li></ol></li><li><p>实现代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 法一</span><span class="token keyword">const</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token keyword">of</span> previousValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> b <span class="token keyword">of</span> currentValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      next<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 法二</span><span class="token keyword">const</span> result2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> previousValue<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ret<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>currentValue<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">b</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result2'</span><span class="token punctuation">,</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 法三</span><span class="token keyword">function</span> <span class="token function">combination</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> result <span class="token comment">// list长度为0时直接返回result</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> subList <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> subList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> subResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> r <span class="token keyword">of</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tailList <span class="token operator">=</span> subList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> r <span class="token operator">+</span> item<span class="token punctuation">)</span> <span class="token comment">// [...r,item]</span>        subResult<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>tailList<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      result <span class="token operator">=</span> subResult    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"combination"</span><span class="token punctuation">,</span><span class="token function">combination</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Tips：reduce-语法"><a href="#Tips：reduce-语法" class="headerlink" title="Tips：reduce()语法"></a>Tips：reduce()语法</h2><ul><li><p>reduce()语法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span><span class="token punctuation">[</span>initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// callback 回调函数</span><span class="token comment">// initialValue 初始值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>callback</code>函数包含四个参数：</p><ul><li><code>previousValue</code>：上一次调用<code>callback</code>时的返回值。在第一次调用时，若指定了初始值<code>initialValue</code>，其值则为<code>initialValue</code>，否则为数组索引为0的元素<code>array[0]</code></li><li><code>currentValue</code>：数组中正在处理的元素。在第一次调用时，若指定了初始值<code>initialValue</code>，其值则为数组索引为0的元素·，否则为<code>array[1]</code></li><li><code>currentIndex</code>：数组中正在处理的元素的索引。若指定了初始值<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</li><li>array：用于遍历的数组</li></ul></li><li><p><code>initialValue</code>(可选)</p><ul><li>作为第一次调用<code>callback</code>函数时参数<code>previousValue</code>的值。若指定了初始值<code>initialValue</code>，则<code>currentValue</code>则将使用数组第一个元素；否则<code>previousValue</code>将使用数组第一个元素，而<code>currentValue</code>将使用数组第二个元素</li></ul></li><li><p>reduce返回值</p><ul><li>回调函数遍历整个数组后的结果</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;笛卡尔乘积定义&quot;&gt;&lt;a href=&quot;#笛卡尔乘积定义&quot; class=&quot;headerlink&quot; title=&quot;笛卡尔乘积定义&quot;&gt;&lt;/a&gt;笛卡尔乘积定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尔积（Cartesian product），</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="笛卡尔乘积" scheme="http://damao2250.com/tags/%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTML拖拽API</title>
    <link href="http://damao2250.com/2023/01/11/HTML%E6%8B%96%E6%8B%BDAPI/"/>
    <id>http://damao2250.com/2023/01/11/HTML%E6%8B%96%E6%8B%BDAPI/</id>
    <published>2023-01-11T01:26:47.000Z</published>
    <updated>2023-01-11T01:28:08.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML拖拽API备忘清单"><a href="#HTML拖拽API备忘清单" class="headerlink" title="HTML拖拽API备忘清单"></a>HTML拖拽API备忘清单</h2><table><thead><tr><th align="left">事件</th><th align="left">on事件处理程序</th><th align="left">触发时刻</th></tr></thead><tbody><tr><td align="left">drag</td><td align="left">ondrag</td><td align="left">当拖拽元素或选中的文本时触发</td></tr><tr><td align="left">dragend</td><td align="left">ondragend</td><td align="left">当拖拽操作结束时触发 (比如松开鼠标按键或敲“Esc”键)</td></tr><tr><td align="left">dragenter</td><td align="left">ondragenter</td><td align="left">当拖拽元素或选中的文本到一个可释放目标时触发</td></tr><tr><td align="left">dragexit</td><td align="left">ondragexit</td><td align="left">当元素变得不再是拖拽操作的选中目标时触发</td></tr><tr><td align="left">dragleave</td><td align="left">ondragleave</td><td align="left">当拖拽元素或选中的文本离开一个可释放目标时触发</td></tr><tr><td align="left">dragover</td><td align="left">ondragover</td><td align="left">当元素或选中的文本被拖到一个可释放目标上时触发（每100毫秒触发一次）</td></tr><tr><td align="left">dragstart</td><td align="left">ondragstart</td><td align="left">当用户开始拖拽一个元素或选中的文本时触发</td></tr><tr><td align="left">drop</td><td align="left">ondrop</td><td align="left">当元素或选中的文本在可释放目标上被释放时触发</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>在拖拽过程中，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer">DataTransfer</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem">DataTransferItem</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItemList">和DataTransferItemList</a> 来传输与拖拽元素绑定的数据。</p></li><li><p>因此实现一个 HTML 元素的拖拽，一般需要以下几个步骤：</p><ol><li>给想要拖拽的元素设置 draggable 属性为 true</li><li>设置拖拽监听事件来完成自己的需求</li><li>若有需要，在监听事件中设置拖拽数据</li></ol></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html-drag-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html-drag-box-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html-drag-box<span class="token punctuation">"</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html-drag-img-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html-drag-img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://dummyimage.com/600x400/ffd53b/fff.png&amp;text=photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html-drop-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>reset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.html-drag-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 70vh<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">justify-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#html-drag-box-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> 2 / 3<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> 1/ 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.html-drag-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12vh<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#html-drag-img-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> 2 / 3<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> 3/ 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.html-drag-img</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12vh<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.html-drop-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> 2 / 3<span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> 2/ 3<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>20<span class="token punctuation">,</span> 179<span class="token punctuation">,</span> 241<span class="token punctuation">)</span> dashed 4px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 14vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 18vh<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.html-drop-box::before</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"请拖放到此区域"</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>160<span class="token punctuation">,</span> 157<span class="token punctuation">,</span> 157<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2vh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.html-dropped</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>17<span class="token punctuation">,</span> 241<span class="token punctuation">,</span> 28<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.html-dropover</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>252<span class="token punctuation">,</span> 83<span class="token punctuation">,</span> 32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 用于限制从本地拖入图片时的大小 */</span><span class="token selector">.html-drop-box img</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12vh<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> dragbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'html-drag-box'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> dropbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'html-drop-box'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> dragimg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'html-drag-img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> boxcontainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'html-drag-box-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> imgcontainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'html-drag-img-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> resetBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'reset-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dragbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragstart'</span><span class="token punctuation">,</span> onDragStart<span class="token punctuation">)</span><span class="token punctuation">;</span>dragbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragend'</span><span class="token punctuation">,</span> onDragEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>dragimg<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragstart'</span><span class="token punctuation">,</span> onDragStart<span class="token punctuation">)</span><span class="token punctuation">;</span>dragimg<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragend'</span><span class="token punctuation">,</span> onDragEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>dropbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> onDragOver<span class="token punctuation">)</span><span class="token punctuation">;</span>dropbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragleave'</span><span class="token punctuation">,</span> onDragLeave<span class="token punctuation">)</span><span class="token punctuation">;</span>dropbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> onDrop<span class="token punctuation">)</span><span class="token punctuation">;</span>resetBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> resetElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">onDragStart</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'text/plain'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">.7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">onDragEnd</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">onDragOver</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认情况下是不允许放置拖拽元素的，因此需要取消默认设置</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dropbox<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'html-dropover'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">onDragLeave</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dropbox<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'html-dropover'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">onDrop</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 阻止一些默认操作，如拖拽超链接会默认打开页面</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resetElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dropbox<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'html-dropover'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dropbox<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'html-dropped'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> isFile <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 若拖拽对象是文件</span>    <span class="token punctuation">[</span><span class="token operator">...</span>e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>items<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> file <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAsFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">createPreview</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            isFile <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFile<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    dropbox<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createPreview</span><span class="token punctuation">(</span><span class="token parameter">imageFile</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imageFile<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"image/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>imageFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    dropbox<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">resetElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dropbox<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'html-dropped'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dropbox<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'html-dropped'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    boxcontainer<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dragbox<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgcontainer<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dragimg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML拖拽API备忘清单&quot;&gt;&lt;a href=&quot;#HTML拖拽API备忘清单&quot; class=&quot;headerlink&quot; title=&quot;HTML拖拽API备忘清单&quot;&gt;&lt;/a&gt;HTML拖拽API备忘清单&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th alig</summary>
      
    
    
    
    <category term="HTML API" scheme="http://damao2250.com/categories/HTML-API/"/>
    
    
    <category term="HTML拖拽" scheme="http://damao2250.com/tags/HTML%E6%8B%96%E6%8B%BD/"/>
    
  </entry>
  
  <entry>
    <title>致富与杠杆</title>
    <link href="http://damao2250.com/2023/01/10/%E8%87%B4%E5%AF%8C%E4%B8%8E%E6%9D%A0%E6%9D%86/"/>
    <id>http://damao2250.com/2023/01/10/%E8%87%B4%E5%AF%8C%E4%B8%8E%E6%9D%A0%E6%9D%86/</id>
    <published>2023-01-10T01:36:43.000Z</published>
    <updated>2023-01-10T02:24:56.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文摘自一下文章"><a href="#本文摘自一下文章" class="headerlink" title="本文摘自一下文章"></a>本文摘自一下文章</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2020/05/weekly-issue-107.html">阮一峰的网络日志</a></li><li><a href="https://new.qq.com/rain/a/20200413A0U72C00">如何不靠运气致富</a></li></ul><h2 id="致富与杠杆"><a href="#致富与杠杆" class="headerlink" title="致富与杠杆"></a>致富与杠杆</h2><p>美国风险投资家 <a href="https://twitter.com/naval">Naval Ravikant</a> 有一个很有名的长推特，一共40条，题目叫做<a href="https://threadreaderapp.com/thread/1002103360646823936.html">《如何致富，不靠运气》</a>，谈了他的商业观。</p><p>和菜头翻译过<a href="https://new.qq.com/omn/20200413/20200413A0U72C00.html">中文版</a>。另外，Naval Ravikant 后来还有一篇<a href="https://nav.al/rich">长文</a>，详细解释这些观点。</p><p>他认为，致富其实只需要两步。</p><p>第一步：找到”个人-市场-产品”这三者交叉的那个定位。 你问问自己，你的竞争力在哪里？市场需要的哪一种产品，可以用到你的这种竞争力？这就是你的定位。</p><p>第二步：使用各种杠杆（leverage），使得你的产品可以服务尽可能大的市场。</p><p>只要做到上面这二步，就会赚到大钱。</p><p>我觉得，他总结得很精辟。赚大钱的奥秘就是定位和杠杆这两件事。当市场需要你的产品时，如果有办法”放大”产品，服务更多的人，你就成功了。</p><p>Naval Ravikant 说，传统的杠杆是劳动力和资本。通过雇佣更多的员工和借贷更多的钱，把业务放大。但是， 互联网时代，新的杠杆出现了，那就是软件和自媒体。</p><p>只要服务器开着，软件（包括网站和 App）就能帮你开展业务，服务更多的人。媒体杠杆更简单，只要写文章、拍视频、录播客，放到网上就可以了。只要别人看到这些内容，就等于帮你放大了业务。</p><p>这两种新杠杆，成本更低，限制条件更少（不需要大量雇人，也不需要跟银行打交道），因此是更好的杠杆。如果你把四种杠杆结合起来，就能发挥最大的威力。事实上，那些互联网巨头都是这四种杠杆的结合，难怪它们都赚到了大钱。</p><p>在我看来，这个周刊也是一种杠杆。一方面，我通过周刊，把自己的想法、看到的东西，传递出去，接触到更多的人；另一方面，周刊反过来督促我每周大量的阅读，去找到能帮到我的技术、创意、趋势和故事。</p><p>从某个角度看，人生的成就其实取决于你能影响到多少人。祝愿大家都能找到自己的人生杠杆。</p><h2 id="和菜头翻译的中文版"><a href="#和菜头翻译的中文版" class="headerlink" title="和菜头翻译的中文版"></a>和菜头翻译的中文版</h2><ol><li>Seek wealth, not money or status. Wealth is having assets that earn while you sleep. Money is how we transfer time and wealth. Status is your place in the social hierarchy.</li></ol><ul><li>去寻求财富，而非金钱或地位。财富就是你拥有资产，而资产在你睡觉的时候都还在为你赚钱；金钱是我们转换时间和财富的工具；身份是你在社会等级体系里所处的位置。</li></ul><ol start="2"><li>Understand that ethical wealth creation is possible. If you secretly despise wealth, it will elude you.</li></ol><ul><li>要明白一件事：一个人完全可以不靠坑蒙拐骗站着赚取财富。如果你在暗中鄙视财富，那么财富也会躲着你。</li></ul><ol start="3"><li>Ignore people playing status games. They gain status by attacking people playing wealth creation games.</li></ol><ul><li>别去理会那些热衷于玩身份游戏的人，他们通过攻击那些创造财富的人以获得自己的身份。</li></ul><ol start="4"><li>You’re not going to get rich renting out your time. You must own equity — a piece of a business — to gain your financial freedom.</li></ol><ul><li>你不会通过出租自己的时间而变得富有。你必须拥有产权，也就是生意的一部分，以此才能赢得个人财务自由。</li></ul><ol start="5"><li>You will get rich by giving society what it wants but do<br>es not yet know how to get. At scale.</li></ol><ul><li>提供社会大众想要但是他们还不知道如何获取的东西，你就会因此而致富。但有一点：你必须规模化地供应社会。</li></ul><ol start="6"><li>Pick an industry where you can play long term games with long term people.</li></ol><ul><li>选择一个你可以长期从事的产业，寻找一批可以一起长期共事的人。</li></ul><ol start="7"><li>The Internet has massively broadened the possible space of careers. Most people haven’t figured this out yet.</li></ol><ul><li>互联网极大拓展了一个人职业生涯的可能性。绝大多数人对此毫无认知。</li></ul><ol start="8"><li>Play iterated games. All the returns in life, whether in wealth, relationships, or knowledge, come from compound interest.</li></ol><ul><li>玩就玩复利游戏。无论是财富，人际关系或者是知识，所有你人生里获得的回报，都来自复利。</li></ul><ol start="9"><li>Pick business partners with high intelligence, energy, and, above all, integrity.</li></ol><ul><li>在选择商业合作伙伴的时候，选择那些高智商、精力旺盛的家伙，但在这一切之上，他应该是个正直诚实的人。</li></ul><ol start="10"><li>Don’t partner with cynics and pessimists. Their beliefs are self-fulfilling.</li></ol><ul><li>不要和愤世嫉俗者和悲观主义者合作，因为他们会任由坏事发生，以此证明他们的负面看法是正确的。</li></ul><ol start="11"><li>Learn to sell. Learn to build. If you can do both, you will be unstoppable.</li></ol><ul><li>学会如何销售，学会如何创建。如果你同时能做到这两件事，你的成功将无可阻挡。</li></ul><ol start="12"><li>Arm yourself with specific knowledge, accountability, and leverage.</li></ol><ul><li>用独到知识，责任感和杠杆武装自己。</li></ul><ol start="13"><li>Specific knowledge is knowledge that you cannot be trained for. If society can train you, it can train someone else, and replace you.</li></ol><ul><li>独到知识是那种不可以通过培训而获得的知识。这是因为，如果这种知识可以经由培训而得，那么其他人同样也可以，并且以此取代你。</li></ul><ol start="14"><li>Specific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now.</li></ol><ul><li>在真正的好奇心和热情驱使你前进的路上，你更有可能获得独到知识，而不是在追逐潮流热点的闻风起舞脚步里。</li></ul><ol start="15"><li>Building specific knowledge will feel like play to you but will look like work to others.</li></ol><ul><li>创建独到知识的过程对于你就像是在玩，而对于别人则像是工作。</li></ul><ol start="16"><li>When specific knowledge is taught, it’s through apprenticeships, not schools.</li></ol><ul><li>不能通过学校教育教会一个人独到知识，它只能通过学徒制口传身教。</li></ul><ol start="17"><li>Specific knowledge is often highly technical or creative. It cannot be outsourced or automated.</li></ol><ul><li>独到知识通常极富技术性和创造性，因此它不能被外包或自动实现。</li></ul><ol start="18"><li>Embrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage.</li></ol><ul><li>拥抱责任感，押上自己的声誉以承担商业风险。社会也会以责任，产权和杠杆作为回报。</li></ul><ol start="19"><li>The most accountable people have singular, public, and risky brands: Oprah, Trump, Kanye, Elon.</li></ol><ul><li>最具责任感的人都具有独一无二的、世人皆知的、敢于冒险的个性特征，如奥普拉、川普、坎耶、埃隆。</li></ul><ol start="20"><li>“Give me a lever long enough, and a place to stand, and I will move the earth.” — Archimedes</li></ol><ul><li>只要给我一根足够长的杠杆，一处可以立足的地方，我就能撬起地球。——阿基米德</li></ul><ol start="21"><li>Fortunes require leverage. Business leverage comes from capital, people, and products with no marginal cost of replication (code and media).</li></ol><ul><li>财富增长需要使用杠杆。商业杠杆有三个来源：1、资本；2、人力；3、复制起来边际成本为零的产品（如：代码和媒体）。</li></ul><ol start="22"><li>Capital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment.</li></ol><ul><li>资本的意思就是钱。想要融资，那就运用你的独到知识，配合你责任感，展示出你良好的判断力。</li></ul><ol start="23"><li>Labor means people working for you. It’s the oldest and most fought-over form of leverage. Labor leverage will impress your parents, but don’t waste your life chasing it.</li></ol><ul><li>人力指的就是为你干活的人，它是最古老也是争夺最激烈的杠杆。人力杠杆会让你父母因为你手下有许多人为你工作而感到骄傲，但你不要浪费生命去追求这一点。</li></ul><ol start="24"><li>Capital and labor are permissioned leverage. Everyone is chasing capital, but someone has to give it to you. Everyone is trying to lead, but someone has to follow you.</li></ol><ul><li>资本和劳动力是需要征得许可才能使用的杠杆。每个人都在追逐资本，但总得有个什么人给你才行；每个人都想要领导其它人，但总得有什么人愿意跟着你才行。</li></ul><ol start="25"><li>Code and media are permissionless leverage. They’re the leverage behind the newly rich. You can create software and media that works for you while you sleep.</li></ol><ul><li>代码和媒体是无需要许可即可使用的杠杆。它们是新贵人群背后的杠杆，你可以通过自己创建的软件和媒体，在睡觉时仍然为你干活。</li></ul><ol start="26"><li>An army of robots is freely available — it’s just packed in data centers for heat and space efficiency. Use it.</li></ol><ul><li>一支机器人军团已经集结待命，只是为了节约空间和热效能，它们被打包放进数据中心。去用吧。</li></ul><ol start="27"><li>If you can’t code, write books and blogs, record videos and podcasts.</li></ol><ul><li>如果你不会编程，那你还可以写书和博客，或者做视频或者音频节目。</li></ul><ol start="28"><li>Leverage is a force multiplier for your judgement.</li></ol><ul><li>杠杆能够成倍地放大你的判断力（所产生的效能）。</li></ul><ol start="29"><li>Judgement requires experience, but can be built faster by learning foundational skills.</li></ol><ul><li>判断力需要经验，但它可以通过学习基本技能的方法更快速地建立起来。</li></ul><ol start="30"><li>There is no skill called “business.” Avoid business magazines and business classes.</li></ol><ul><li>并不存在一种叫做“商业”的能力。尽量避开商业杂志和商业课程。</li></ul><ol start="31"><li>Study microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers.</li></ol><ul><li>去学习微观经济学、博弈论、心理学、说服术、伦理学、数学和计算机科学。</li></ul><ol start="32"><li>Reading is faster than listening. Doing is faster than watching.</li></ol><ul><li>读比听快，做比看快。</li></ul><ol start="33"><li>You should be too busy to “do coffee,” while still keeping an uncluttered calendar.</li></ol><ul><li>你应该忙得没有社交的时间才对，与此同时你应该始终保证日程安排井井有条。</li></ul><ol start="34"><li>Set and enforce an aspirational personal hourly rate. If fixing a problem will save less than your hourly rate, ignore it. If outsourcing a task will cost less than your hourly rate, outsource it.</li></ol><ul><li>你应该为自己设定一个有抱负的个人时薪数，并且坚持执行。如果解决一个问题所能节省下来的成本低于你的个人时薪，那就忽略这个问题好了；如果一项任务的外包成本低于你的个人时薪，就把它外包出去。</li></ul><ol start="35"><li>Work as hard as you can. Even though who you work with and what you work on are more important than how hard you work.</li></ol><ul><li>尽管你跟谁一起工作、做什么工作，要远比你的努力程度更加重要。但还是要倾尽全力去工作。</li></ul><ol start="36"><li>Become the best in the world at what you do. Keep redefining what you do until this is true.</li></ol><ul><li>你所做的事情，要努力做到世界最好。不断重新定义你在做什么，直到真的做到世界最好。</li></ul><ol start="37"><li>There are no get rich quick schemes. That’s just someone else getting rich off you.</li></ol><ul><li>这个世界上并没有快速赚钱致富的方法，如果你想要找寻这种方法，那它只会让别人从你身上赚钱致富。</li></ul><ol start="38"><li>Apply specific knowledge, with leverage, and eventually you will get what you deserve.</li></ol><ul><li>运用你的独到知识，配合上杠杆，最终你会得到你应该得到的东西。</li></ul><ol start="39"><li>When you’re finally wealthy, you’ll realize that it wasn’t what you were seeking in the first place. But that’s for another day.</li></ol><ul><li>终有一天当你变得富有，你会发现那一切并不是你最开始想要的东西。但是那就是另外一回事了。</li></ul><ul><li>注释：</li></ul><ol><li><p>财富就是你睡着觉，你的资产也在为你继续赚钱。这是一个越来越被广泛接受的定义。Naval Ravikant是硅谷狂热的数字货币支持者，所以，他的话另有所指。从前后文来看，他所谓的资产并不等于是传统意义上的房产、股票、收藏，而是偏向于他反复提及的：软件和媒体。</p></li><li><p>出租时间概念，许多人理解为打工，认为打工就是出租自己的时间以换取金钱。其实并非如此，Naval所指的出租时间概念，指的是一个人的财富增长，是否直接关系到他的时间。一个小卖部的老板，他并不为谁打工，但是他的财富增长需要他长时间守在店里，因此，他依然是出租时间换钱。但一个淘宝点卡店老板则不同，他的点卡销售是全自动的，不需要24小时守着，而且也不需要只做这一样生意。这就是Naval所谓互联网拓宽了个人职业生涯的一个例子。</p></li><li><p>equity我翻译为产权，不是一个很好的翻法。但是Naval前文提到assets，很明显，作为投资人他非常清楚地知道这两个字眼之间的区别。equity无论是翻译为股票、权益或者是资产，原文说“ You must own equity — a piece of a business — to gain your financial freedom.”，这是和出租时间概念做对应的。出租时间的人，在商业链条里作为生产资料出现，不拥有任何产权，也就无法通过商业行为获利，所以，我这里勉强翻译为产权。</p></li><li><p>specific knowledge我翻译为独到知识，没有翻译为特定知识、专业知识或者是特殊知识。原因是在我的理解中，specific knowledge不是书本知识，也不是学校教授的知识，更不可能在网上免费获取。一方面，它只能提供自己实践来获取；另一方面，它只能通过前人口耳相传。这种知识是做成一件事情的关键，属于知识体系中不共的那一部分。所以，我翻译为独到知识。</p></li><li><p>“Give me a lever long enough, and a place to stand, and I will move the earth.” — Archimedes 这话不像是阿基米德说的。更像是一次抬杠的结果：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">“给我一个支点，我就能撬起地球！”“那么，您站在哪儿呢？”“好吧，给我一个支点，再给我一个站立的地方，我就能撬起地球。”“那么，您用空气就能撬起地球了？”“好吧，给我一根足够长的杠杆，一处可以立足的地方，我就可以翘起地球！”“那么，阿基米德先生，支点又不需要了吗？”“滚！”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>accountability我本想翻译为“靠谱程度”，想想还是算了。</p></li><li><p>号称是“四十条语录”，但是我就找见了39条。</p></li><li><p>结合上下文看，Leverage一词始终翻译为“杠杆”其实也不大对头。Naval一再强调代码、博客、播客、视频节目，我觉得Leverage在他那里，有些时候应该相当于是个人影响力的代名词，或者可以简单理解为放大器。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本文摘自一下文章&quot;&gt;&lt;a href=&quot;#本文摘自一下文章&quot; class=&quot;headerlink&quot; title=&quot;本文摘自一下文章&quot;&gt;&lt;/a&gt;本文摘自一下文章&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/</summary>
      
    
    
    
    <category term="碎碎念" scheme="http://damao2250.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="http://damao2250.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Vue3备忘清单</title>
    <link href="http://damao2250.com/2022/12/29/Vue3%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
    <id>http://damao2250.com/2022/12/29/Vue3%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</id>
    <published>2022-12-29T10:56:47.000Z</published>
    <updated>2023-01-16T03:42:43.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><code>Vue</code> 是一套用于构建用户界面的渐进式框架</li><li><a href="https://cn.vuejs.org/">Vue 3.x</a> 官方文档 (cn.vuejs.org)</li><li><a href="https://router.vuejs.org/zh/">Vue Router 4.x</a> 官方文档 (router.vuejs.org)</li><li><a href="https://v2.cn.vuejs.org/">Vue 2</a> 官方文档 (v2.cn.vuejs.org)</li><li>注意：Vue 3.x 版本对应 Vue Router 4.x 路由版本</li></ul><h2 id="通过-CDN-使用-Vue"><a href="#通过-CDN-使用-Vue" class="headerlink" title="通过 CDN 使用 Vue"></a>通过 CDN 使用 Vue</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue@3/dist/vue.global.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> message <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> createApp<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"Hello Vue3"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        message      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-ES-模块构建版本"><a href="#使用-ES-模块构建版本" class="headerlink" title="使用 ES 模块构建版本"></a>使用 ES 模块构建版本</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> message<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/vue@3/dist/vue.esm-browser.js'</span>  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"Hello Vue3"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        message      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><ul><li>已安装 16.0 或更高版本的 Node.js</li><li>以下指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ npm init vue@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">✔ Project name: … &lt;your<span class="token operator">-</span>project<span class="token operator">-</span>name>✔ Add TypeScript? … No<span class="token operator">/</span>Yes✔ Add JSX Support? … No<span class="token operator">/</span>Yes✔ Add Vue Router <span class="token keyword">for</span> Single Page Application development? … No<span class="token operator">/</span>Yes✔ Add Pinia <span class="token keyword">for</span> state management? … No<span class="token operator">/</span>Yes✔ Add Vitest <span class="token keyword">for</span> Unit testing? … No<span class="token operator">/</span>Yes✔ Add Cypress <span class="token keyword">for</span> both Unit and <span class="token keyword">End</span><span class="token operator">-</span>to<span class="token operator">-</span><span class="token keyword">End</span> testing? … No<span class="token operator">/</span>Yes✔ Add ESLint <span class="token keyword">for</span> code quality? … No<span class="token operator">/</span>Yes✔ Add Prettier <span class="token keyword">for</span> code formatting? … No<span class="token operator">/</span>YesScaffolding project in <span class="token punctuation">.</span><span class="token operator">/</span>&lt;your<span class="token operator">-</span>project<span class="token operator">-</span>name><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Done<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>安装依赖并启动开发服务器<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ cd &lt;your<span class="token operator">-</span>project<span class="token operator">-</span>name>$ npm install$ npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>当你准备将应用发布到生产环境时，请运行：<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ npm run build<span class="token comment"># 此命令会在 ./dist 文件夹中为你的应用创建一个生产环境的构建版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>初始化应用<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"Hello Vue3"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      message    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>挂载应用<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123; count &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Message: &#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 使用的是 Mustache 语法 (即双大括号)，每次 msg 属性更改时它也会同步 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 双大括号&#123;&#123;&#125;&#125;会将数据解释为纯文本，使用 v-html 指令，将插入 HTML --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamicId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 简写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamicId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="布尔型-Attribute"><a href="#布尔型-Attribute" class="headerlink" title="布尔型 Attribute"></a>布尔型 Attribute</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isButtonDisabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h2><ul><li>通过不带参数的 v-bind，你可以将它们绑定到单个元素上<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>  <span class="token keyword">import</span> comp <span class="token keyword">from</span> <span class="token string">"./Comp.vue"</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>comp v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"&#123;a, b&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果你是使用的 setup 语法糖。需要使用 defineprops 声名（可以直接使用a/b）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> String<span class="token punctuation">,</span>  b<span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ok <span class="token operator">?</span> <span class="token string">'YES'</span> <span class="token operator">:</span> <span class="token string">'NO'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>div <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"`list-$&#123;id&#125;`"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="仅支持表达式-例子都是无效"><a href="#仅支持表达式-例子都是无效" class="headerlink" title="仅支持表达式(例子都是无效)"></a>仅支持表达式(例子都是无效)</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 这是一个语句，而非表达式</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 条件控制也不支持，请使用三元表达式</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> message <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toTitleDate(date)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  &#123;&#123; formatDate(date) &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 Directives"></a>指令 Directives</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Now you see me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数-Arguments"><a href="#参数-Arguments" class="headerlink" title="参数 Arguments"></a>参数 Arguments</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 简写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 简写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 简写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>这里的 attributeName 会作为一个 JS 表达式被动态执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态的事件名称"><a href="#动态的事件名称" class="headerlink" title="动态的事件名称"></a>动态的事件名称</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 简写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修饰符-Modifiers"><a href="#修饰符-Modifiers" class="headerlink" title="修饰符 Modifiers"></a>修饰符 Modifiers</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- .prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault() --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">v<span class="token operator">-</span>on<span class="token operator">:</span>submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"onSubmit"</span>──┬─ ─┬──── ─┬─────  ─┬──────  ┆   ┆      ┆        ╰─ Value 解释为<span class="token constant">JS</span>表达式  ┆   ┆      ╰─ Modifiers 由前导点表示  ┆   ╰─ Argument 跟随冒号或速记符号  ╰─ Name 以 v<span class="token operator">-</span> 开头使用速记时可以省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h1><h2 id="声明状态"><a href="#声明状态" class="headerlink" title="声明状态"></a>声明状态</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> state<span class="token punctuation">.</span>count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">// `defineComponent`用于IDE推导类型</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// setup 用于组合式 API 的特殊钩子函数</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 暴露 state 到模板</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      state    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"increment"</span><span class="token operator">></span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> state<span class="token punctuation">.</span>count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不要忘记同时暴露 increment 函数</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">,</span>      increment    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="setup语法糖"><a href="#setup语法糖" class="headerlink" title="setup语法糖"></a>setup语法糖</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"increment"</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> state<span class="token punctuation">.</span>count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment">// setup 语法糖用于简化代码，尤其是当需要暴露的状态和方法越来越多时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用-ref-定义响应式变量"><a href="#用-ref-定义响应式变量" class="headerlink" title="用 ref() 定义响应式变量"></a>用 ref() 定义响应式变量</h2><ul><li>reactive只能用于对象、数组和 Map、Set 这样的集合类型，对 string、number 和 boolean 这样的原始类型则需要使用ref<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; value: 0 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">const</span> objectRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这是响应式的替换</span>objectRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  bar<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 该函数接收一个 ref</span><span class="token comment">// 需要通过 .value 取值</span><span class="token comment">// 但它会保持响应性</span><span class="token function">callSomeFunction</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 仍然是响应式的</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在 html 模板中不需要带 .value 就可以使用<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="有状态方法"><a href="#有状态方法" class="headerlink" title="有状态方法"></a>有状态方法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> debounce <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash-es'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每个实例都有了自己的预置防抖的处理函数</span>    <span class="token keyword">const</span> debouncedClick <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>click<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// ... 对点击的响应 ...</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 最好是在组件卸载时</span>    <span class="token comment">// 清除掉防抖计时器</span>    <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      debouncedClick<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应式样式"><a href="#响应式样式" class="headerlink" title="响应式样式"></a>响应式样式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> open <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"open = !open"</span><span class="token operator">></span>Toggle<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>Hello Vue<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>style scope<span class="token operator">></span>  div<span class="token punctuation">&#123;</span>    transition<span class="token operator">:</span> height <span class="token number">0.1</span>s linear<span class="token punctuation">;</span>    overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>    height<span class="token operator">:</span> v<span class="token operator">-</span><span class="token function">bind</span><span class="token punctuation">(</span>open <span class="token operator">?</span> <span class="token string">'30px'</span> <span class="token operator">:</span> <span class="token string">'0px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="响应式进阶-——-watch-和-computed"><a href="#响应式进阶-——-watch-和-computed" class="headerlink" title="响应式进阶 —— watch 和 computed"></a>响应式进阶 —— watch 和 computed</h1><h2 id="监听状态"><a href="#监听状态" class="headerlink" title="监听状态"></a>监听状态</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> isEvent <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  isEvent<span class="token punctuation">.</span>value <span class="token operator">=</span> count<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"increment"</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>    is event<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> isEvent <span class="token operator">?</span> <span class="token string">'yes'</span> <span class="token operator">:</span> <span class="token string">'no'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="立即监听状态"><a href="#立即监听状态" class="headerlink" title="立即监听状态"></a>立即监听状态</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  isEvent<span class="token punctuation">.</span>value <span class="token operator">=</span> count<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 上例中的 watch 不会立即执行，导致 isEvent 状态的初始值不准确。</span>  <span class="token comment">// 配置立即执行，会在一开始的时候立即执行一次</span>  immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算状态"><a href="#计算状态" class="headerlink" title="计算状态"></a>计算状态</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment">// computed 的回调函数里，会根据已有并用到的状态计算出新的状态</span><span class="token keyword">const</span> capital <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> text<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>to capital<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> capital <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><h2 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a>defineProps</h2><ul><li><p>子组件定义需要的参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">// 这里可以将 `username` 解构出来，</span><span class="token comment">// 但是一旦解构出来再使用，就不具备响应式能力</span><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>username<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父组件参入参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">'vue'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>children <span class="token operator">:</span>username<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a>defineEmits</h2><ul><li>子组件定义支持 emit 的函数<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineEmits<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'search'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">,</span> keyword<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"keyword"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"onSearch"</span><span class="token operator">></span>search<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>父组件绑定子组件定义的事件<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keyword</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>children @search<span class="token operator">=</span><span class="token string">"onSearch"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h2><ul><li>子组件对父组件暴露方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineExpose<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> onSearch <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"keyword"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>父组件调用子组件的方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">const</span> childrenRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">onSearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  childrenRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">onSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>children ref<span class="token operator">=</span><span class="token string">'childrenRef'</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"onSearch"</span><span class="token operator">></span>search<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide / Inject"></a>Provide / Inject</h2><ul><li>在应用中使用 ProvideKey<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> InjectionKey<span class="token punctuation">,</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">const</span> ProvideKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> InjectionKey<span class="token operator">&lt;</span>Ref<span class="token operator">&lt;</span>string<span class="token operator">>></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>父组件为后代组件提供数据<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ProvideKey <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./types'</span><span class="token keyword">const</span> text <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token function">provide</span><span class="token punctuation">(</span>ProvideKey<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>后代组件注入父组件提供的数据<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ProvideKey <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./types'</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>ProvideKey<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h4<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="Vue-中使用-TypeScript"><a href="#Vue-中使用-TypeScript" class="headerlink" title="Vue 中使用 TypeScript"></a>Vue 中使用 TypeScript</h1><h2 id="为组件的-props-标注类型"><a href="#为组件的-props-标注类型" class="headerlink" title="为组件的 props 标注类型"></a>为组件的 props 标注类型</h2><ul><li>当使用 &lt;script setup&gt; 时，defineProps() 宏函数支持从它的参数中推导类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> String<span class="token punctuation">,</span> required<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  bar<span class="token operator">:</span> Number<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>props<span class="token punctuation">.</span>foo <span class="token comment">// string</span>props<span class="token punctuation">.</span>bar <span class="token comment">// number | undefined</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>对同一个文件中的一个接口或对象类型字面量的引用：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span>defineProps<span class="token operator">&lt;</span>Props<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Props 解构默认值<pre class="line-numbers language-none"><code class="language-none">export interface Props &#123;  msg?: string  labels?: string[]&#125;const props &#x3D; withDefaults(defineProps&lt;Props&gt;(), &#123;  msg: &#39;hello&#39;,  labels: () &#x3D;&gt; [&#39;one&#39;, &#39;two&#39;]&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用目前为实验性的响应性语法糖<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> string  count<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token comment">// 对 defineProps() 的响应性解构</span><span class="token comment">// 默认值会被编译为等价的运行时选项</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  name<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span>Props<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="为组件的-emits-标注类型"><a href="#为组件的-emits-标注类型" class="headerlink" title="为组件的 emits 标注类型"></a>为组件的 emits 标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token comment">// 运行时</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 基于类型</span><span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为-ref-标注类型"><a href="#为-ref-标注类型" class="headerlink" title="为 ref() 标注类型"></a>为 ref() 标注类型</h2><ul><li>ref 会根据初始化时的值推导其类型：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> year<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'2023'</span><span class="token punctuation">)</span>year<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2023</span> <span class="token comment">// 成功！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="为-reactive-标注类型"><a href="#为-reactive-标注类型" class="headerlink" title="为 reactive() 标注类型"></a>为 reactive() 标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>  title<span class="token operator">:</span> string  year<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token keyword">const</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  title<span class="token operator">:</span> <span class="token string">'Vue 3 指引'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为-computed-标注类型"><a href="#为-computed-标注类型" class="headerlink" title="为 computed() 标注类型"></a>为 computed() 标注类型</h2><ul><li>你还可以通过泛型参数显式指定类型：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> double <span class="token operator">=</span> computed<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 若返回值不是 number 类型则会报错</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="为事件处理函数标注类型"><a href="#为事件处理函数标注类型" class="headerlink" title="为事件处理函数标注类型"></a>为事件处理函数标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// `event` 隐式地标注为 `any` 类型</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>input    type<span class="token operator">=</span><span class="token string">"text"</span>    @change<span class="token operator">=</span><span class="token string">"handleChange"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">// 显式地为事件处理函数的参数标注类型</span><span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为-provide-inject-标注类型"><a href="#为-provide-inject-标注类型" class="headerlink" title="为 provide / inject 标注类型"></a>为 provide / inject 标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> provide<span class="token punctuation">,</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> InjectionKey <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> InjectionKey<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token comment">// 若提供的是非字符串值会导致错误</span><span class="token function">provide</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token comment">// foo 的类型：string | undefined</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为模板引用标注类型"><a href="#为模板引用标注类型" class="headerlink" title="为模板引用标注类型"></a>为模板引用标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> el <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLInputElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  el<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token string">"el"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为组件模板引用标注类型"><a href="#为组件模板引用标注类型" class="headerlink" title="为组件模板引用标注类型"></a>为组件模板引用标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// MyModal.vue</span><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> isContentShown <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">open</span> <span class="token operator">=</span>       <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>isContentShown<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  open<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 TypeScript 内置的 InstanceType 工具类型来获取其实例类<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// App.vue</span><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> MyModal <span class="token keyword">from</span> <span class="token string">'./MyModal.vue'</span>type Modal <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyModal<span class="token operator">></span><span class="token keyword">const</span> modal <span class="token operator">=</span> ref<span class="token operator">&lt;</span>Modal <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">openModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  modal<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="选项式-API-为组件的-props-标注类型"><a href="#选项式-API-为组件的-props-标注类型" class="headerlink" title="选项式 API 为组件的 props 标注类型"></a>选项式 API 为组件的 props 标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 启用了类型推导</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> String<span class="token punctuation">,</span>    id<span class="token operator">:</span> <span class="token punctuation">[</span>Number<span class="token punctuation">,</span> String<span class="token punctuation">]</span><span class="token punctuation">,</span>    msg<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> String<span class="token punctuation">,</span> required<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    metadata<span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 类型：string | undefined</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token comment">// 类型：number|string|undefined</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id    <span class="token comment">// 类型：string</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg    <span class="token comment">// 类型：any</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>metadata  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 PropType 这个工具类型来标记更复杂的 props 类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>  title<span class="token operator">:</span> string  author<span class="token operator">:</span> string  year<span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    book<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 提供相对 `Object` 更确定的类型</span>      type<span class="token operator">:</span> Object <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>Book<span class="token operator">></span><span class="token punctuation">,</span>      required<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 也可以标记函数</span>    callback<span class="token operator">:</span> Function <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>title <span class="token comment">// string</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>year <span class="token comment">// number</span>    <span class="token comment">// TS Error: argument of type 'string' is not</span>    <span class="token comment">// assignable to parameter of type 'number'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callback<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="选项式-API-为组件的-emits-标注类型"><a href="#选项式-API-为组件的-emits-标注类型" class="headerlink" title="选项式 API 为组件的 emits 标注类型"></a>选项式 API 为组件的 emits 标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>type Payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span> bookName<span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  emits<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token parameter">payload<span class="token operator">:</span> Payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 执行运行时校验</span>      <span class="token keyword">return</span> payload<span class="token punctuation">.</span>bookName<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'addBook'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        bookName<span class="token operator">:</span> <span class="token number">123</span> <span class="token comment">// 类型错误</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">// 类型错误</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'non-declared-event'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选项式-API-为计算属性标记类型"><a href="#选项式-API-为计算属性标记类型" class="headerlink" title="选项式 API 为计算属性标记类型"></a>选项式 API 为计算属性标记类型</h2><ul><li>计算属性会自动根据其返回值来推导其类型：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      message<span class="token operator">:</span> <span class="token string">'Hello!'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">'!'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token comment">// 类型：string</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在某些场景中，你可能想要显式地标记出计算属性的类型以确保其实现是正确的：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      message<span class="token operator">:</span> <span class="token string">'Hello!'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 显式标注返回类型</span>    <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">'!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 标注一个可写的计算属性</span>    greetingUppercased<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token operator">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="选项式-API-为事件处理函数标注类型"><a href="#选项式-API-为事件处理函数标注类型" class="headerlink" title="选项式 API 为事件处理函数标注类型"></a>选项式 API 为事件处理函数标注类型</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选项式-API-扩展全局属性"><a href="#选项式-API-扩展全局属性" class="headerlink" title="选项式 API 扩展全局属性"></a>选项式 API 扩展全局属性</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>declare module <span class="token string">'vue'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">&#123;</span>    $http<span class="token operator">:</span> <span class="token keyword">typeof</span> axios    <span class="token function-variable function">$translate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> string  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类型扩展的位置<ul><li>我们可以将这些类型扩展放在一个 .ts 文件，或是一个影响整个项目的 *.d.ts 文件中<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 不工作，将覆盖原始类型。</span>declare module <span class="token string">'vue'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">$translate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> string  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 正常工作。</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>declare module <span class="token string">'vue'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">$translate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> string  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="选项式-API-扩展自定义选项"><a href="#选项式-API-扩展自定义选项" class="headerlink" title="选项式 API 扩展自定义选项"></a>选项式 API 扩展自定义选项</h2><ul><li>某些插件，比如 vue-router，提供了一些自定义的组件选项，比如 beforeRouteEnter：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果没有确切的类型标注，这个钩子函数的参数会隐式地标注为 any 类型。我们可以为 ComponentCustomOptions 接口扩展自定义的选项来支持：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Route <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>declare module <span class="token string">'vue'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomOptions</span> <span class="token punctuation">&#123;</span>    beforeRouteEnter<span class="token operator">?</span><span class="token punctuation">(</span>      to<span class="token operator">:</span> Route<span class="token punctuation">,</span>      from<span class="token operator">:</span> Route<span class="token punctuation">,</span>      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>    <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="API-参考"><a href="#API-参考" class="headerlink" title="API 参考"></a>API 参考</h1><h2 id="全局-API-应用实例"><a href="#全局-API-应用实例" class="headerlink" title="全局 API - 应用实例"></a>全局 API - 应用实例</h2><h3 id="createApp"><a href="#createApp" class="headerlink" title="createApp()"></a>createApp()</h3><ul><li>创建一个应用实例 #</li></ul><h3 id="createSSRApp"><a href="#createSSRApp" class="headerlink" title="createSSRApp()"></a>createSSRApp()</h3><ul><li>以 SSR 激活模式创建一个应用实例 #</li></ul><h3 id="app-mount"><a href="#app-mount" class="headerlink" title="app.mount()"></a>app.mount()</h3><ul><li>将应用实例挂载在一个容器元素中 #</li></ul><h3 id="app-unmount"><a href="#app-unmount" class="headerlink" title="app.unmount()"></a>app.unmount()</h3><ul><li>卸载一个已挂载的应用实例 #</li></ul><h3 id="app-provide"><a href="#app-provide" class="headerlink" title="app.provide()"></a>app.provide()</h3><ul><li>提供一个可以在应用中的所有后代组件中注入使用的值 #</li></ul><h3 id="app-component"><a href="#app-component" class="headerlink" title="app.component()"></a>app.component()</h3><ul><li>注册或获取全局组件 #</li></ul><h3 id="app-directive"><a href="#app-directive" class="headerlink" title="app.directive()"></a>app.directive()</h3><ul><li>注册或获取全局指令 #</li></ul><h3 id="app-use"><a href="#app-use" class="headerlink" title="app.use()"></a>app.use()</h3><ul><li>安装一个插件 #</li></ul><h3 id="app-mixin"><a href="#app-mixin" class="headerlink" title="app.mixin()"></a>app.mixin()</h3><ul><li>全局注册一个混入 #</li></ul><h3 id="app-version"><a href="#app-version" class="headerlink" title="app.version"></a>app.version</h3><ul><li>当前应用所使用的 Vue 版本号 #</li></ul><h3 id="app-config"><a href="#app-config" class="headerlink" title="app.config"></a>app.config</h3><ul><li>获得应用实例的配置设定 #</li></ul><h3 id="app-config-errorHandler"><a href="#app-config-errorHandler" class="headerlink" title="app.config.errorHandler"></a>app.config.errorHandler</h3><ul><li>为应用内抛出的未捕获错误指定一个全局处理函数 #</li></ul><h3 id="app-config-warnHandler"><a href="#app-config-warnHandler" class="headerlink" title="app.config.warnHandler"></a>app.config.warnHandler</h3><ul><li>为 Vue 的运行时警告指定一个自定义处理函数 #</li></ul><h3 id="app-config-performance"><a href="#app-config-performance" class="headerlink" title="app.config.performance"></a>app.config.performance</h3><ul><li>在浏览器开发工具中追踪性能表现 #</li></ul><h3 id="app-config-compilerOptions"><a href="#app-config-compilerOptions" class="headerlink" title="app.config.compilerOptions"></a>app.config.compilerOptions</h3><ul><li>配置运行时编译器的选项 #</li></ul><h3 id="app-config-globalProperties"><a href="#app-config-globalProperties" class="headerlink" title="app.config.globalProperties"></a>app.config.globalProperties</h3><ul><li>注册全局属性对象 #</li></ul><h3 id="app-config-optionMergeStrategies"><a href="#app-config-optionMergeStrategies" class="headerlink" title="app.config.optionMergeStrategies"></a>app.config.optionMergeStrategies</h3><ul><li>定义自定义组件选项的合并策略的对象 #</li></ul><h2 id="全局-API-通用"><a href="#全局-API-通用" class="headerlink" title="全局 API - 通用"></a>全局 API - 通用</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><ul><li>Vue 版本号 #</li></ul><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick()"></a>nextTick()</h3><ul><li>等待下一次 DOM 更新后执行回调 #</li></ul><h3 id="defineComponent"><a href="#defineComponent" class="headerlink" title="defineComponent()"></a>defineComponent()</h3><ul><li>在定义 Vue 组件时提供类型推导的辅助函数 #</li></ul><h3 id="defineAsyncComponent"><a href="#defineAsyncComponent" class="headerlink" title="defineAsyncComponent()"></a>defineAsyncComponent()</h3><ul><li>定义一个异步组件 #</li></ul><h3 id="defineCustomElement"><a href="#defineCustomElement" class="headerlink" title="defineCustomElement()"></a>defineCustomElement()</h3><ul><li>和 defineComponent 接受的参数相同，不同的是会返回一个原生自定义元素类的构造器 #</li></ul><h2 id="组合式-API-setup"><a href="#组合式-API-setup" class="headerlink" title="组合式 API - setup()"></a>组合式 API - setup()</h2><h2 id="组合式-API-响应式-核心"><a href="#组合式-API-响应式-核心" class="headerlink" title="组合式 API - 响应式: 核心"></a>组合式 API - 响应式: 核心</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h3><ul><li>返回一个 ref 对象 #</li></ul><h3 id="computed"><a href="#computed" class="headerlink" title="computed ()"></a>computed ()</h3><ul><li>定义一个计算属性 #</li></ul><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h3><ul><li>返回一个对象的响应式代理 #</li></ul><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly()"></a>readonly()</h3><ul><li>返回一个原值的只读代理 #</li></ul><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect()"></a>watchEffect()</h3><ul><li>立即运行一个函数，同时监听 #</li></ul><h3 id="watchPostEffect"><a href="#watchPostEffect" class="headerlink" title="watchPostEffect()"></a>watchPostEffect()</h3><ul><li>watchEffect() 使用 flush: ‘post’ 选项时的别名。 #</li></ul><h3 id="watchSyncEffect"><a href="#watchSyncEffect" class="headerlink" title="watchSyncEffect()"></a>watchSyncEffect()</h3><ul><li>watchEffect() 使用 flush: ‘sync’ 选项时的别名。 #</li></ul><h3 id="watch"><a href="#watch" class="headerlink" title="watch()"></a>watch()</h3><ul><li>侦听一个或多个响应式数据源 #</li></ul><h2 id="组合式-API-响应式-工具"><a href="#组合式-API-响应式-工具" class="headerlink" title="组合式 API - 响应式: 工具"></a>组合式 API - 响应式: 工具</h2><h3 id="isRef"><a href="#isRef" class="headerlink" title="isRef()"></a>isRef()</h3><ul><li>判断是否为 ref #</li></ul><h3 id="unref"><a href="#unref" class="headerlink" title="unref()"></a>unref()</h3><ul><li>是 ref，返回内部值，否则返回参数本身 #</li></ul><h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef()"></a>toRef()</h3><ul><li>创建一个属性对应的 ref #</li></ul><h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h3><ul><li>将对象上的每一个可枚举属性转换为 ref #</li></ul><h3 id="isProxy"><a href="#isProxy" class="headerlink" title="isProxy()"></a>isProxy()</h3><ul><li>检查一个对象是否是由 reactive()、readonly()、shallowReactive() 或 shallowReadonly() 创建的代理 #</li></ul><h3 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive()"></a>isReactive()</h3><ul><li>检查一个对象是否是由 reactive() 或 shallowReactive() 创建的代理。 #</li></ul><h3 id="isReadonly"><a href="#isReadonly" class="headerlink" title="isReadonly()"></a>isReadonly()</h3><ul><li>检查传入的值是否为只读对象 #</li></ul><h2 id="组合式-API-响应式-进阶"><a href="#组合式-API-响应式-进阶" class="headerlink" title="组合式 API - 响应式: 进阶"></a>组合式 API - 响应式: 进阶</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef()"></a>shallowRef()</h3><ul><li>ref() 的浅层作用形式。 #</li></ul><h3 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef()"></a>triggerRef()</h3><ul><li>强制触发依赖于一个浅层 ref 的副作用，这通常在对浅引用的内部值进行深度变更后使用。 #</li></ul><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef()"></a>customRef()</h3><ul><li>创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式。 #</li></ul><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive()"></a>shallowReactive()</h3><ul><li>reactive() 的浅层作用形式。 #</li></ul><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly()"></a>shallowReadonly()</h3><ul><li>readonly() 的浅层作用形式。 #</li></ul><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw()"></a>toRaw()</h3><ul><li>根据一个 Vue 创建的代理返回其原始对象。 #</li></ul><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw()"></a>markRaw()</h3><ul><li>将一个对象标记为不可被转为代理。返回该对象本身。 #</li></ul><h3 id="effectScope"><a href="#effectScope" class="headerlink" title="effectScope()"></a>effectScope()</h3><ul><li>创建一个 effect 作用域，可以捕获其中所创建的响应式副作用 (即计算属性和侦听器)，这样捕获到的副作用可以一起处理。 #</li></ul><h3 id="getCurrentScope"><a href="#getCurrentScope" class="headerlink" title="getCurrentScope()"></a>getCurrentScope()</h3><ul><li>如果有的话，返回当前活跃的 effect 作用域。 #</li></ul><h3 id="onScopeDispose"><a href="#onScopeDispose" class="headerlink" title="onScopeDispose()"></a>onScopeDispose()</h3><ul><li>在当前活跃的 effect 作用域上注册一个处理回调函数。当相关的 effect 作用域停止时会调用这个回调函数。 #</li></ul><h2 id="组合式-API-生命周期钩子"><a href="#组合式-API-生命周期钩子" class="headerlink" title="组合式 API - 生命周期钩子"></a>组合式 API - 生命周期钩子</h2><h3 id="onMounted"><a href="#onMounted" class="headerlink" title="onMounted()"></a>onMounted()</h3><ul><li>组件挂载完成后执行 #</li></ul><h3 id="onUpdated"><a href="#onUpdated" class="headerlink" title="onUpdated()"></a>onUpdated()</h3><ul><li>状态变更而更新其 DOM 树之后调用 #</li></ul><h3 id="onUnmounted"><a href="#onUnmounted" class="headerlink" title="onUnmounted()"></a>onUnmounted()</h3><ul><li>组件实例被卸载之后调用 #</li></ul><h3 id="onBeforeMount"><a href="#onBeforeMount" class="headerlink" title="onBeforeMount()"></a>onBeforeMount()</h3><ul><li>组件被挂载之前被调用 #</li></ul><h3 id="onBeforeUpdate"><a href="#onBeforeUpdate" class="headerlink" title="onBeforeUpdate()"></a>onBeforeUpdate()</h3><ul><li>状态变更而更新其 DOM 树之前调用 #</li></ul><h3 id="onBeforeUnmount"><a href="#onBeforeUnmount" class="headerlink" title="onBeforeUnmount()"></a>onBeforeUnmount()</h3><ul><li>组件实例被卸载之前调用 #</li></ul><h3 id="onErrorCaptured"><a href="#onErrorCaptured" class="headerlink" title="onErrorCaptured()"></a>onErrorCaptured()</h3><ul><li>捕获了后代组件传递的错误时调用 #</li></ul><h3 id="onRenderTracked"><a href="#onRenderTracked" class="headerlink" title="onRenderTracked()"></a>onRenderTracked()</h3><ul><li>组件渲染过程中追踪到响应式依赖时调用 #</li></ul><h3 id="onRenderTriggered"><a href="#onRenderTriggered" class="headerlink" title="onRenderTriggered()"></a>onRenderTriggered()</h3><ul><li>响应式依赖的变更触发了组件渲染时调用 #</li></ul><h3 id="onActivated"><a href="#onActivated" class="headerlink" title="onActivated()"></a>onActivated()</h3><ul><li>若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件被插入到 DOM 中时调用 #</li></ul><h3 id="onDeactivated"><a href="#onDeactivated" class="headerlink" title="onDeactivated()"></a>onDeactivated()</h3><ul><li>若组件实例是 &lt;KeepAlive&gt; 缓存树的一部分，当组件从 DOM 中被移除时调用 #</li></ul><h3 id="onServerPrefetch"><a href="#onServerPrefetch" class="headerlink" title="onServerPrefetch()"></a>onServerPrefetch()</h3><ul><li>组件实例在服务器上被渲染之前调用 #</li></ul><h2 id="组合式-API-依赖注入"><a href="#组合式-API-依赖注入" class="headerlink" title="组合式 API - 依赖注入"></a>组合式 API - 依赖注入</h2><h3 id="provide"><a href="#provide" class="headerlink" title="provide()"></a>provide()</h3><ul><li>提供一个可以被后代组件中注入使用的值 #</li></ul><h3 id="inject"><a href="#inject" class="headerlink" title="inject()"></a>inject()</h3><ul><li>注入一个由祖先组件提供的值 #</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="Vue3" scheme="http://damao2250.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>css碎片记忆</title>
    <link href="http://damao2250.com/2022/12/07/css%E7%A2%8E%E7%89%87%E8%AE%B0%E5%BF%86/"/>
    <id>http://damao2250.com/2022/12/07/css%E7%A2%8E%E7%89%87%E8%AE%B0%E5%BF%86/</id>
    <published>2022-12-07T08:58:39.000Z</published>
    <updated>2022-12-07T09:03:58.369Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>滚动条不占位 overlay属性</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow-y</span><span class="token punctuation">:</span> overlay<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在CSS中将颜色定义为变量</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>  <span class="token property">--main-color</span><span class="token punctuation">:</span>#06c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#foo</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>也可以在JavaScript /客户端操作CSS变量 */</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--main-color'</span><span class="token punctuation">,</span><span class="token string">"#6c0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>CSS文字渐变</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.p</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ffa54d<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span>#ffa54d<span class="token punctuation">,</span>#f07bc5 50%<span class="token punctuation">,</span>#43aeff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>    <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;滚动条不占位 overlay属性&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-css&quot; data-language=&quot;css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token se</summary>
      
    
    
    
    <category term="CSS" scheme="http://damao2250.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://damao2250.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Github向开源项目提交PR步骤</title>
    <link href="http://damao2250.com/2022/12/07/Github%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4PR%E6%AD%A5%E9%AA%A4/"/>
    <id>http://damao2250.com/2022/12/07/Github%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4PR%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-12-07T07:58:38.000Z</published>
    <updated>2022-12-07T08:25:36.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向开源项目提交PR步骤"><a href="#向开源项目提交PR步骤" class="headerlink" title="向开源项目提交PR步骤"></a>向开源项目提交PR步骤</h2><h3 id="Fork原项目到自己的仓库中"><a href="#Fork原项目到自己的仓库中" class="headerlink" title="Fork原项目到自己的仓库中"></a>Fork原项目到自己的仓库中</h3><ul><li><code>fork</code>是’分叉’、’复制’的意思，<code>fork</code>可以复制出一个仓库的新拷贝，包含了原有库中的所有提交记录</li><li><code>fork</code>后这个代码库是完全独立的，可以在自己的库中做任何修改，也可以向原来的库提交合并请求</li></ul><h3 id="clone自己仓库中的项目到本地"><a href="#clone自己仓库中的项目到本地" class="headerlink" title="clone自己仓库中的项目到本地"></a>clone自己仓库中的项目到本地</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ git clone 自己仓库中fork过来的项目地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h3 id="创建修改分支"><a href="#创建修改分支" class="headerlink" title="创建修改分支"></a>创建修改分支</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建并切换到自己要修改的分支，一般修改分支名应为：bugfix/xxx</span>$ git checkout <span class="token operator">-</span>b 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h3 id="修改相应内容"><a href="#修改相应内容" class="headerlink" title="修改相应内容"></a>修改相应内容</h3><ul><li>修正错误内容</li></ul><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ git add <span class="token punctuation">.</span>$ git commit <span class="token operator">-</span>m <span class="token string">"fix：xxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h3 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ git push <span class="token operator">-</span>u origin bugfix<span class="token operator">/</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h3 id="创建PR"><a href="#创建PR" class="headerlink" title="创建PR"></a>创建PR</h3><ul><li>GitHub仓库上方 <code>Compare &amp; pull request</code> 按钮，创建一个PR</li><li>打开pull request页面可以给该项目作者留言说明，然后点击<code>Create pull request</code>按钮</li><li>等作者同意并<code>Merge pull request</code>之后，就完成一个PR了</li></ul><h3 id="关于PR"><a href="#关于PR" class="headerlink" title="关于PR"></a>关于PR</h3><ul><li>怎么理解<code>Pull requests</code>？字面意思：拉取请求，合并请求</li><li>一个有趣知乎的回答说：我改了你们的代码，你们拉回去看看吧</li><li>大概 To request you to pull my code, is called <code>pull request</code>（求拉！）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;向开源项目提交PR步骤&quot;&gt;&lt;a href=&quot;#向开源项目提交PR步骤&quot; class=&quot;headerlink&quot; title=&quot;向开源项目提交PR步骤&quot;&gt;&lt;/a&gt;向开源项目提交PR步骤&lt;/h2&gt;&lt;h3 id=&quot;Fork原项目到自己的仓库中&quot;&gt;&lt;a href=&quot;#For</summary>
      
    
    
    
    <category term="Github" scheme="http://damao2250.com/categories/Github/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
    <category term="Pull request" scheme="http://damao2250.com/tags/Pull-request/"/>
    
  </entry>
  
  <entry>
    <title>JS中常用的小工具</title>
    <link href="http://damao2250.com/2022/12/07/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://damao2250.com/2022/12/07/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-12-07T06:15:20.000Z</published>
    <updated>2022-12-08T00:52:35.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个最简单的服务器框架（Node）"><a href="#一个最简单的服务器框架（Node）" class="headerlink" title="一个最简单的服务器框架（Node）"></a>一个最简单的服务器框架（Node）</h2><ul><li>通过 <code>node server.js</code> 进行启动服务器<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 导入模块 （yarn add express 或 npm i express 安装）</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实例化对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义端口号</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment">// 设置路由</span><span class="token comment">/** * 当访问根路径时返回Hello World */</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听端口</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server running at  http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一个最简单的服务器框架（Node）&quot;&gt;&lt;a href=&quot;#一个最简单的服务器框架（Node）&quot; class=&quot;headerlink&quot; title=&quot;一个最简单的服务器框架（Node）&quot;&gt;&lt;/a&gt;一个最简单的服务器框架（Node）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过 &lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="工具" scheme="http://damao2250.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>转：86张脑图，一口气看完React</title>
    <link href="http://damao2250.com/2022/12/02/%E8%BD%AC%EF%BC%9A86%E5%BC%A0%E8%84%91%E5%9B%BE%EF%BC%8C%E4%B8%80%E5%8F%A3%E6%B0%94%E7%9C%8B%E5%AE%8CReact/"/>
    <id>http://damao2250.com/2022/12/02/%E8%BD%AC%EF%BC%9A86%E5%BC%A0%E8%84%91%E5%9B%BE%EF%BC%8C%E4%B8%80%E5%8F%A3%E6%B0%94%E7%9C%8B%E5%AE%8CReact/</id>
    <published>2022-12-02T03:26:45.000Z</published>
    <updated>2022-12-02T03:31:55.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><ul><li><a href="https://juejin.cn/post/7085145274200358949">https://juejin.cn/post/7085145274200358949</a></li><li><a href="https://aqingya.cn/articl/bf557b10.html">https://aqingya.cn/articl/bf557b10.html</a></li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><div id="post">  <article class="post-content" id="article-container">    <h2 id="1、安装">      <a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装    </h2>    <p>      <a href="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png"        data-thumb="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png">        <img src="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png">      </a>    </p>    <h2 id="2、核心概念">      <a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念    </h2>    <h3 id="2-1JSX-简介">      <a href="#2-1JSX-简介" class="headerlink" title="2.1JSX 简介"></a>2.1JSX 简介    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png"        data-thumb="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png">        <img src="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png">      </a>    </p>    <h3 id="2-2元素渲染">      <a href="#2-2元素渲染" class="headerlink" title="2.2元素渲染"></a>2.2 元素渲染    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png"        data-thumb="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png">        <img src="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png">      </a>    </p>    <h3 id="2-3组件-amp-Props">      <a href="#2-3组件-amp-Props" class="headerlink" title="2.3组件 &amp; Props"></a>2.3 组件 &amp;      Props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png"        data-thumb="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png">        <img src="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png">      </a>    </p>    <h3 id="2-4-1State-amp-生命周期">      <a href="#2-4-1State-amp-生命周期" class="headerlink" title="2.4.1State &amp; 生命周期"></a>2.4.1State &amp; 生命周期    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png"        data-thumb="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png">        <img src="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png">      </a>    </p>    <h3 id="2-4-2数据流和正确使用State">      <a href="#2-4-2数据流和正确使用State" class="headerlink" title="2.4.2数据流和正确使用State"></a>2.4.2      数据流和正确使用 State    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png"        data-thumb="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png">        <img src="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png">      </a>    </p>    <h3 id="2-5事件处理">      <a href="#2-5事件处理" class="headerlink" title="2.5事件处理"></a>2.5 事件处理    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png"        data-thumb="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png">        <img src="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png">      </a>    </p>    <h3 id="2-6条件渲染">      <a href="#2-6条件渲染" class="headerlink" title="2.6条件渲染"></a>2.6 条件渲染    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png"        data-thumb="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png">        <img src="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png">      </a>    </p>    <h3 id="2-7列表-amp-Key">      <a href="#2-7列表-amp-Key" class="headerlink" title="2.7列表 &amp; Key"></a>2.7 列表 &amp; Key    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png"        data-thumb="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png">        <img src="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png">      </a>    </p>    <h3 id="2-8表单">      <a href="#2-8表单" class="headerlink" title="2.8表单"></a>2.8 表单    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png"        data-thumb="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png">        <img src="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png">      </a>    </p>    <h3 id="2-9状态提升">      <a href="#2-9状态提升" class="headerlink" title="2.9状态提升"></a>2.9 状态提升    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png"        data-thumb="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png">        <img src="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png">      </a>    </p>    <h3 id="2-10组合-vs-继承">      <a href="#2-10组合-vs-继承" class="headerlink" title="2.10组合 vs 继承"></a>2.10      组合 vs 继承    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png"        data-thumb="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png">        <img src="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png">      </a>    </p>    <h3 id="2-11React-哲学">      <a href="#2-11React-哲学" class="headerlink" title="2.11React 哲学"></a>2.11React 哲学    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png"        data-thumb="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png">        <img src="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png">      </a>    </p>    <h2 id="3-高级指引">      <a href="#3-高级指引" class="headerlink" title="3. 高级指引"></a>3. 高级指引    </h2>    <h3 id="3-1无障碍辅助功能">      <a href="#3-1无障碍辅助功能" class="headerlink" title="3.1无障碍辅助功能"></a>3.1 无障碍辅助功能    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png"        data-thumb="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png">        <img src="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png">      </a>    </p>    <h3 id="3-2代码分割">      <a href="#3-2代码分割" class="headerlink" title="3.2代码分割"></a>3.2 代码分割    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png"        data-thumb="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png">        <img src="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png">      </a>    </p>    <h3 id="3-3-1Context">      <a href="#3-3-1Context" class="headerlink" title="3.3.1Context"></a>3.3.1Context    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png"        data-thumb="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png">        <img src="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png">      </a>    </p>    <h3 id="3-3-2Context-API">      <a href="#3-3-2Context-API" class="headerlink" title="3.3.2Context API"></a>3.3.2Context      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png"        data-thumb="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png">        <img src="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png">      </a>    </p>    <h3 id="3-4错误边界">      <a href="#3-4错误边界" class="headerlink" title="3.4错误边界"></a>3.4 错误边界    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png" data-caption="3.4错误边界"        data-thumb="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png">        <img src="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png" alt="3.4错误边界"></a>    <div class="img-alt is-center">3.4 错误边界</div>    </p>    <h3 id="3-5Refs-转发">      <a href="#3-5Refs-转发" class="headerlink" title="3.5Refs 转发"></a>3.5Refs 转发    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png"        data-thumb="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png">        <img src="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png">      </a>    </p>    <h3 id="3-6Fragments">      <a href="#3-6Fragments" class="headerlink" title="3.6Fragments"></a>3.6Fragments    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png"        data-thumb="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png">        <img src="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png">      </a>    </p>    <h3 id="3-7高阶组件">      <a href="#3-7高阶组件" class="headerlink" title="3.7高阶组件"></a>3.7 高阶组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png"        data-thumb="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png">        <img src="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png">      </a>    </p>    <h3 id="3-8-1集成带有-DOM-操作的插件">      <a href="#3-8-1集成带有-DOM-操作的插件" class="headerlink" title="3.8.1集成带有 DOM 操作的插件"></a>3.8.1 集成带有 DOM 操作的插件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png"        data-thumb="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png">        <img src="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png">      </a>    </p>    <h3 id="3-8-2与其他第三方库协同">      <a href="#3-8-2与其他第三方库协同" class="headerlink" title="3.8.2与其他第三方库协同"></a>3.8.2 与其他第三方库协同    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png"        data-thumb="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png">        <img src="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png">      </a>    </p>    <h3 id="3-9-1JSX-本质">      <a href="#3-9-1JSX-本质" class="headerlink" title="3.9.1JSX 本质"></a>3.9.1JSX      本质    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png"        data-thumb="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png">        <img src="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png">      </a>    </p>    <h3 id="3-9-2JSX-指定-React-元素类型">      <a href="#3-9-2JSX-指定-React-元素类型" class="headerlink" title="3.9.2JSX 指定 React 元素类型"></a>3.9.2JSX 指定 React 元素类型    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png"        data-thumb="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png">        <img src="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png">      </a>    </p>    <h3 id="3-9-3JSX-中指定-props">      <a href="#3-9-3JSX-中指定-props" class="headerlink" title="3.9.3JSX 中指定 props"></a>3.9.3JSX 中指定 props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png"        data-thumb="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png">        <img src="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png">      </a>    </p>    <h3 id="3-9-4JSX-中的子元素">      <a href="#3-9-4JSX-中的子元素" class="headerlink" title="3.9.4JSX 中的子元素"></a>3.9.4JSX 中的子元素    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png"        data-thumb="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png">        <img src="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png">      </a>    </p>    <h3 id="3-10-1性能优化之生产版本">      <a href="#3-10-1性能优化之生产版本" class="headerlink" title="3.10.1性能优化之生产版本"></a>3.10.1      性能优化之生产版本    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png"        data-thumb="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png">        <img src="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png">      </a>    </p>    <h3 id="3-10-2使用-Chrome-Performance-标签分析组件">      <a href="#3-10-2使用-Chrome-Performance-标签分析组件" class="headerlink"        title="3.10.2使用 Chrome Performance 标签分析组件"></a>3.10.2 使用 Chrome Performance 标签分析组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png"        data-thumb="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png">        <img src="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png">      </a>    </p>    <h3 id="3-10-3使用开发者工具中的分析器对组件进行分析">      <a href="#3-10-3使用开发者工具中的分析器对组件进行分析" class="headerlink" title="3.10.3使用开发者工具中的分析器对组件进行分析"></a>3.10.3      使用开发者工具中的分析器对组件进行分析    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png"        data-thumb="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png">        <img src="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png">      </a>    </p>    <h3 id="3-10-4其他优化">      <a href="#3-10-4其他优化" class="headerlink" title="3.10.4其他优化"></a>3.10.4 其他优化    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png"        data-thumb="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png">        <img src="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png">      </a>    </p>    <h3 id="3-11Portals">      <a href="#3-11Portals" class="headerlink" title="3.11Portals"></a>3.11Portals    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png"        data-thumb="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png">        <img src="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png">      </a>    </p>    <h3 id="3-12Profiler-API">      <a href="#3-12Profiler-API" class="headerlink" title="3.12Profiler API"></a>3.12Profiler      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png"        data-thumb="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png">        <img src="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png">      </a>    </p>    <h3 id="3-13不使用-ES6">      <a href="#3-13不使用-ES6" class="headerlink" title="3.13不使用 ES6"></a>3.13 不使用      ES6    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png"        data-thumb="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png">        <img src="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png">      </a>    </p>    <h3 id="3-14不使用-JSX">      <a href="#3-14不使用-JSX" class="headerlink" title="3.14不使用 JSX"></a>3.14 不使用      JSX    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png"        data-thumb="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png">        <img src="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png">      </a>    </p>    <h3 id="3-15协调">      <a href="#3-15协调" class="headerlink" title="3.15协调"></a>3.15 协调    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png"        data-thumb="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png">        <img src="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png">      </a>    </p>    <h3 id="3-16Refs-amp-DOM">      <a href="#3-16Refs-amp-DOM" class="headerlink" title="3.16Refs &amp; DOM"></a>3.16Refs      &amp; DOM    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png"        data-thumb="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png">        <img src="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png">      </a>    </p>    <h3 id="3-17Render-Props">      <a href="#3-17Render-Props" class="headerlink" title="3.17Render Props"></a>3.17Render      Props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png"        data-thumb="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png">        <img src="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png">      </a>    </p>    <h3 id="3-18-1静态类型检查之Flow">      <a href="#3-18-1静态类型检查之Flow" class="headerlink" title="3.18.1静态类型检查之Flow"></a>3.18.1      静态类型检查之 Flow    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png"        data-thumb="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png">        <img src="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png">      </a>    </p>    <h3 id="3-18-2静态类型检查之TypeScript">      <a href="#3-18-2静态类型检查之TypeScript" class="headerlink" title="3.18.2静态类型检查之TypeScript"></a>3.18.2 静态类型检查之      TypeScript    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png"        data-thumb="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png">        <img src="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png">      </a>    </p>    <h3 id="3-18-2静态类型检查之其他">      <a href="#3-18-2静态类型检查之其他" class="headerlink" title="3.18.2静态类型检查之其他"></a>3.18.2      静态类型检查之其他    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png"        data-thumb="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png">        <img src="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png">      </a>    </p>    <h3 id="3-19严格模式">      <a href="#3-19严格模式" class="headerlink" title="3.19严格模式"></a>3.19 严格模式    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png"        data-thumb="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png">        <img src="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png">      </a>    </p>    <h3 id="3-20使用-PropTypes-进行类型检查">      <a href="#3-20使用-PropTypes-进行类型检查" class="headerlink" title="3.20使用 PropTypes 进行类型检查"></a>3.20 使用 PropTypes      进行类型检查    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png"        data-thumb="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png">        <img src="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png">      </a>    </p>    <h3 id="3-21非受控组件">      <a href="#3-21非受控组件" class="headerlink" title="3.21非受控组件"></a>3.21 非受控组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png"        data-thumb="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png">        <img src="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png">      </a>    </p>    <h3 id="3-22Web-Components">      <a href="#3-22Web-Components" class="headerlink" title="3.22Web Components"></a>3.22Web Components    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png"        data-thumb="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png">        <img src="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png">      </a>    </p>    <h2 id="4-API-参考">      <a href="#4-API-参考" class="headerlink" title="4. API 参考"></a>4. API 参考    </h2>    <h3 id="4-1-1React-顶层-API之概览">      <a href="#4-1-1React-顶层-API之概览" class="headerlink" title="4.1.1React 顶层 API之概览"></a>4.1.1React 顶层 API 之概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png"        data-thumb="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png">        <img src="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png">      </a>    </p>    <h3 id="4-1-2React-顶层-API之参考">      <a href="#4-1-2React-顶层-API之参考" class="headerlink" title="4.1.2React 顶层 API之参考"></a>4.1.2React 顶层 API 之参考    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png"        data-thumb="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png">        <img src="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png">      </a>    </p>    <h3 id="4-1-3React-顶层-API之参考2">      <a href="#4-1-3React-顶层-API之参考2" class="headerlink" title="4.1.3React 顶层 API之参考2"></a>4.1.3React 顶层 API 之参考 2    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png"        data-thumb="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png">        <img src="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png">      </a>    </p>    <h3 id="4-2-1React-Component之概述">      <a href="#4-2-1React-Component之概述" class="headerlink" title="4.2.1React.Component之概述"></a>4.2.1React.Component      之概述    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png"        data-thumb="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png">        <img src="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png">      </a>    </p>    <h3 id="4-2-2常用的生命周期方法">      <a href="#4-2-2常用的生命周期方法" class="headerlink" title="4.2.2常用的生命周期方法"></a>4.2.2 常用的生命周期方法    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png"        data-thumb="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png">        <img src="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png">      </a>    </p>    <h3 id="4-2-3不常用的生命周期方法">      <a href="#4-2-3不常用的生命周期方法" class="headerlink" title="4.2.3不常用的生命周期方法"></a>4.2.3      不常用的生命周期方法    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png"        data-thumb="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png">        <img src="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png">      </a>    </p>    <h3 id="4-2-4其他-API">      <a href="#4-2-4其他-API" class="headerlink" title="4.2.4其他 API"></a>4.2.4 其他      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png"        data-thumb="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png">        <img src="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png">      </a>    </p>    <h3 id="4-2-5Class-属性和实例属性">      <a href="#4-2-5Class-属性和实例属性" class="headerlink" title="4.2.5Class 属性和实例属性"></a>4.2.5Class 属性和实例属性    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png"        data-thumb="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png">        <img src="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png">      </a>    </p>    <h3 id="4-3ReactDOM">      <a href="#4-3ReactDOM" class="headerlink" title="4.3ReactDOM"></a>4.3ReactDOM    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png"        data-thumb="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png">        <img src="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png">      </a>    </p>    <h3 id="4-4ReactDOMClient">      <a href="#4-4ReactDOMClient" class="headerlink" title="4.4ReactDOMClient"></a>4.4ReactDOMClient    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png"        data-thumb="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png">        <img src="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png">      </a>    </p>    <h3 id="4-5ReactDOMServer">      <a href="#4-5ReactDOMServer" class="headerlink" title="4.5ReactDOMServer"></a>4.5ReactDOMServer    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png"        data-thumb="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png">        <img src="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png">      </a>    </p>    <h3 id="4-6DOM-元素">      <a href="#4-6DOM-元素" class="headerlink" title="4.6DOM 元素"></a>4.6DOM 元素    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png"        data-thumb="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png">        <img src="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png">      </a>    </p>    <h3 id="4-7-1合成事件">      <a href="#4-7-1合成事件" class="headerlink" title="4.7.1合成事件"></a>4.7.1 合成事件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png"        data-thumb="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png">        <img src="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png">      </a>    </p>    <h3 id="4-7-2支持的事件">      <a href="#4-7-2支持的事件" class="headerlink" title="4.7.2支持的事件"></a>4.7.2 支持的事件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png"        data-thumb="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png">        <img src="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png">      </a>    </p>    <h3 id="4-7-3支持的事件2">      <a href="#4-7-3支持的事件2" class="headerlink" title="4.7.3支持的事件2"></a>4.7.3      支持的事件 2    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png"        data-thumb="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png">        <img src="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png">      </a>    </p>    <h3 id="4-7-4支持的事件3">      <a href="#4-7-4支持的事件3" class="headerlink" title="4.7.4支持的事件3"></a>4.7.4      支持的事件 3    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png"        data-thumb="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png">        <img src="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png">      </a>    </p>    <h3 id="4-8Test-Utilities">      <a href="#4-8Test-Utilities" class="headerlink" title="4.8Test Utilities"></a>4.8Test      Utilities    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png"        data-thumb="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png">        <img src="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png">      </a>    </p>    <h3 id="4-9Test-Renderer">      <a href="#4-9Test-Renderer" class="headerlink" title="4.9Test Renderer"></a>4.9Test      Renderer    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png"        data-thumb="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png">        <img src="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png">      </a>    </p>    <h3 id="4-10JS-环境要求">      <a href="#4-10JS-环境要求" class="headerlink" title="4.10JS 环境要求"></a>4.10JS      环境要求    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png"        data-thumb="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png">        <img src="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png">      </a>    </p>    <h3 id="4-11React-术语词">      <a href="#4-11React-术语词" class="headerlink" title="4.11React 术语词"></a>4.11React 术语词    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png"        data-thumb="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png">        <img src="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png">      </a>    </p>    <h2 id="5-Hook">      <a href="#5-Hook" class="headerlink" title="5. Hook"></a>5. Hook    </h2>    <h3 id="5-1Hook-简介">      <a href="#5-1Hook-简介" class="headerlink" title="5.1Hook 简介"></a>5.1Hook 简介    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png"        data-thumb="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png">        <img src="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png">      </a>    </p>    <h3 id="5-2Hook-概览">      <a href="#5-2Hook-概览" class="headerlink" title="5.2Hook 概览"></a>5.2Hook 概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png"        data-thumb="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png">        <img src="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png">      </a>    </p>    <h3 id="5-3使用-State-Hook">      <a href="#5-3使用-State-Hook" class="headerlink" title="5.3使用 State Hook"></a>5.3 使用 State      Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png"        data-thumb="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png">        <img src="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png">      </a>    </p>    <h3 id="5-4使用-Effect-Hook">      <a href="#5-4使用-Effect-Hook" class="headerlink" title="5.4使用 Effect Hook"></a>5.4 使用      Effect Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png"        data-thumb="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png">        <img src="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png">      </a>    </p>    <h3 id="5-5Hook-规则">      <a href="#5-5Hook-规则" class="headerlink" title="5.5Hook 规则"></a>5.5Hook 规则    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png"        data-thumb="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png">        <img src="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png">      </a>    </p>    <h3 id="5-6自定义">      <a href="#5-6自定义" class="headerlink" title="5.6自定义"></a>5.6 自定义    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png"        data-thumb="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png">        <img src="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png">      </a>    </p>    <h3 id="5-7Hook-API">      <a href="#5-7Hook-API" class="headerlink" title="5.7Hook API"></a>5.7Hook      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png"        data-thumb="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png">        <img src="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png">      </a>    </p>    <h3 id="5-8-1Hooks-FAQ之采纳策略">      <a href="#5-8-1Hooks-FAQ之采纳策略" class="headerlink" title="5.8.1Hooks FAQ之采纳策略"></a>5.8.1Hooks FAQ 之采纳策略    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png"        data-thumb="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png">        <img src="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png">      </a>    </p>    <h3 id="5-8-2Hooks-FAQ之从-Class-迁移到-Hook">      <a href="#5-8-2Hooks-FAQ之从-Class-迁移到-Hook" class="headerlink"        title="5.8.2Hooks FAQ之从 Class 迁移到 Hook"></a>5.8.2Hooks FAQ 之从 Class 迁移到 Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png"        data-thumb="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png">        <img src="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png">      </a>    </p>    <h3 id="5-8-3Hooks-FAQ之性能优化">      <a href="#5-8-3Hooks-FAQ之性能优化" class="headerlink" title="5.8.3Hooks FAQ之性能优化"></a>5.8.3Hooks FAQ 之性能优化    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png"        data-thumb="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png">        <img src="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png">      </a>    </p>    <h3 id="5-8-4Hooks-FAQ之底层原理">      <a href="#5-8-4Hooks-FAQ之底层原理" class="headerlink" title="5.8.4Hooks FAQ之底层原理"></a>5.8.4Hooks FAQ 之底层原理    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png"        data-thumb="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png">        <img src="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png">      </a>    </p>    <h2 id="6-测试">      <a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试    </h2>    <h3 id="6-1测试概览">      <a href="#6-1测试概览" class="headerlink" title="6.1测试概览"></a>6.1 测试概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png"        data-thumb="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png">        <img src="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png">      </a>    </p>    <h3 id="6-2测试技巧">      <a href="#6-2测试技巧" class="headerlink" title="6.2测试技巧"></a>6.2 测试技巧    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png"        data-thumb="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png">        <img src="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png">      </a>    </p>    <h3 id="6-3测试环境">      <a href="#6-3测试环境" class="headerlink" title="6.3测试环境"></a>6.3 测试环境    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png"        data-thumb="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png">        <img src="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png">      </a>    </p>    <h2 id="7-FAQ">      <a href="#7-FAQ" class="headerlink" title="7. FAQ"></a>7. FAQ    </h2>    <h3 id="7-1AJAX-及-APIs">      <a href="#7-1AJAX-及-APIs" class="headerlink" title="7.1AJAX 及 APIs"></a>7.1AJAX 及 APIs    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png"        data-thumb="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png">        <img src="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png">      </a>    </p>    <h3 id="7-2Babel，JSX-及构建过程">      <a href="#7-2Babel，JSX-及构建过程" class="headerlink" title="7.2Babel，JSX 及构建过程"></a>7.2Babel，JSX 及构建过程    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png"        data-thumb="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png">        <img src="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png">      </a>    </p>    <h3 id="7-3传递函数给组件">      <a href="#7-3传递函数给组件" class="headerlink" title="7.3传递函数给组件"></a>7.3 传递函数给组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png" data-caption="7.3传递函数给组件"        data-thumb="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png">        <img src="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png" alt="7.3传递函数给组件"></a>    <div class="img-alt is-center">7.3 传递函数给组件</div>    </p>    <h3 id="7-4组件状态">      <a href="#7-4组件状态" class="headerlink" title="7.4组件状态"></a>7.4 组件状态    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png"        data-thumb="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png">        <img src="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png">      </a>    </p>    <h3 id="7-5样式与-CSS">      <a href="#7-5样式与-CSS" class="headerlink" title="7.5样式与 CSS"></a>7.5 样式与 CSS    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png"        data-thumb="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png">        <img src="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png">      </a>    </p>    <h3 id="7-6项目文件结构">      <a href="#7-6项目文件结构" class="headerlink" title="7.6项目文件结构"></a>7.6 项目文件结构    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png" data-caption="7.6项目文件结构"        data-thumb="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png">        <img src="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png" alt="7.6项目文件结构"></a>    <div class="img-alt is-center">7.6 项目文件结构</div>    </p>    <h3 id="7-7Virtual-DOM-及内核">      <a href="#7-7Virtual-DOM-及内核" class="headerlink" title="7.7Virtual DOM 及内核"></a>7.7Virtual DOM 及内核    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png"        data-thumb="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png">        <img src="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png">      </a>    </p>  </article></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7085145274200358949&quot;&gt;https://jue</summary>
      
    
    
    
    <category term="React" scheme="http://damao2250.com/categories/React/"/>
    
    
    <category term="React" scheme="http://damao2250.com/tags/React/"/>
    
    <category term="转载与记录" scheme="http://damao2250.com/tags/%E8%BD%AC%E8%BD%BD%E4%B8%8E%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
