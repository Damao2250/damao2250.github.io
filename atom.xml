<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damao</title>
  
  <subtitle>乐躬耕于陇亩兮，吾爱吾庐。聊寄傲于琴书兮，以待天时。</subtitle>
  <link href="http://damao2250.com/atom.xml" rel="self"/>
  
  <link href="http://damao2250.com/"/>
  <updated>2021-09-22T01:33:37.903Z</updated>
  <id>http://damao2250.com/</id>
  
  <author>
    <name>Damao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://damao2250.com/2021/10/03/hello-world/"/>
    <id>http://damao2250.com/2021/10/03/hello-world/</id>
    <published>2021-10-03T03:02:58.833Z</published>
    <updated>2021-09-22T01:33:37.903Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>_posts</title>
    <link href="http://damao2250.com/2021/10/03/index/"/>
    <id>http://damao2250.com/2021/10/03/index/</id>
    <published>2021-10-03T03:02:30.000Z</published>
    <updated>2021-10-03T03:02:30.758Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>git之多SSH-key配置</title>
    <link href="http://damao2250.com/2021/09/13/git%E4%B9%8B%E5%A4%9ASSH-key%E9%85%8D%E7%BD%AE/"/>
    <id>http://damao2250.com/2021/09/13/git%E4%B9%8B%E5%A4%9ASSH-key%E9%85%8D%E7%BD%AE/</id>
    <published>2021-09-13T01:25:00.000Z</published>
    <updated>2021-10-04T04:20:17.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生成SSH-Key"><a href="#1-生成SSH-Key" class="headerlink" title="1. 生成SSH-Key"></a>1. 生成SSH-Key</h1><ul><li>Windows系统请使用Git bash操作<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成第一个SSH-Key</span>$ ssh-keygen -t rsa -C <span class="token string">"你的邮箱” -f ~/.ssh/id_rsa_one# 生成第二个SSH-Key$ ssh-keygen -t rsa -C "</span>"你的邮箱”” -f ~/.ssh/id_rsa_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>创建完成之后 我们在.ssh的根目录下可以看到文件<ul><li>C:\Users\Administrator.ssh 或者 C:\Users\电脑用户名.ssh</li></ul></li></ul><h1 id="2-添加私钥"><a href="#2-添加私钥" class="headerlink" title="2. 添加私钥"></a>2. 添加私钥</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在终端中执行</span>$ ssh-add ~/.ssh/id_rsa_gitlab$ ssh-add ~/.ssh/id_rsa_github<span class="token comment"># 如果执行ssh-add时提示 Could not open a connection to your authentication agent</span><span class="token comment"># 可以先执行命令:</span>$ ssh-agent <span class="token function">bash</span><span class="token comment"># 然后再重新运行ssh-add命令即可</span><span class="token comment"># 添加成功会出现提示：</span><span class="token comment"># Identity added 等字样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-查看私钥列表是否存在"><a href="#3-查看私钥列表是否存在" class="headerlink" title="3. 查看私钥列表是否存在"></a>3. 查看私钥列表是否存在</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add -l<span class="token comment"># 当我们可以看到2条私钥的时候就证明安装成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4-修改配置文件config"><a href="#4-修改配置文件config" class="headerlink" title="4. 修改配置文件config"></a>4. 修改配置文件config</h1><ul><li>若.ssh目录(就是私钥所在的文件夹)下无config文件，那就需要自己创建config文件（可用vs code创建）</li><li>创建后添加一下内容：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># giglab</span>Host giglab.comHostName giglab.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_gitlab<span class="token comment"># github</span>Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_github<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-在gitlab、github网站中设置SSH-keys"><a href="#5-在gitlab、github网站中设置SSH-keys" class="headerlink" title="5. 在gitlab、github网站中设置SSH keys"></a>5. 在gitlab、github网站中设置SSH keys</h1></li><li>在gitlab、github网站中找到用户设置，找到SSH keys</li><li>在.ssh的根目录中找到对应网站的.pub结尾的文件，用记事本打开，然后复制内容到对应网站保存即可<h1 id="6-用ssh命令测试验证"><a href="#6-用ssh命令测试验证" class="headerlink" title="6. 用ssh命令测试验证"></a>6. 用ssh命令测试验证</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@gitlab.com$ <span class="token function">ssh</span> -T git@github.com<span class="token comment"># 如果出现 Are you sure you want to continue connecting? </span><span class="token comment"># 直接输入 yes</span><span class="token comment"># 然后重复上面的命令</span><span class="token comment"># 验证通过会有类似“Welconme”或者“Hi”的欢迎字样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-清空私钥列表"><a href="#7-清空私钥列表" class="headerlink" title="7. 清空私钥列表"></a>7. 清空私钥列表</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-生成SSH-Key&quot;&gt;&lt;a href=&quot;#1-生成SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;1. 生成SSH-Key&quot;&gt;&lt;/a&gt;1. 生成SSH-Key&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Windows系统请使用Git bash操作&lt;pre</summary>
      
    
    
    
    <category term="版本控制工具" scheme="http://damao2250.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://damao2250.com/2021/08/31/docker%E8%B5%B7%E6%AD%A5%E6%95%99%E7%A8%8B/"/>
    <id>http://damao2250.com/2021/08/31/docker%E8%B5%B7%E6%AD%A5%E6%95%99%E7%A8%8B/</id>
    <published>2021-08-31T01:25:00.000Z</published>
    <updated>2021-10-04T04:16:23.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装docker</span>yum <span class="token function">install</span> docker -y<span class="token comment"># 查看docker版本</span>docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自动部署时需要的Dockerfile"><a href="#自动部署时需要的Dockerfile" class="headerlink" title="自动部署时需要的Dockerfile"></a>自动部署时需要的Dockerfile</h1><ul><li>编写Dockerfile时文件名就为Dockerfile，不需要要任何后缀，编写完后放到项目根目录下</li><li>版本1<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>node<span class="token operator">:</span><span class="token number">10</span><span class="token operator">-</span>frontend<span class="token operator">-</span><span class="token number">0.01</span><span class="token constant">WORKDIR</span> <span class="token operator">/</span>app<span class="token constant">ADD</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token constant">RUN</span> npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span>repository<span class="token operator">/</span>npm <span class="token operator">&amp;&amp;</span> npm i <span class="token operator">&amp;&amp;</span> npm run build<span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>nginx<span class="token operator">:</span><span class="token number">1.17</span><span class="token constant">ENV</span> <span class="token constant">TZ</span><span class="token operator">=</span>Asia<span class="token operator">/</span>Shanghai<span class="token constant">WORKDIR</span> <span class="token operator">/</span>www<span class="token constant">COPY</span> –from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>dist <span class="token operator">/</span>www<span class="token constant">COPY</span> –from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>conf<span class="token constant">EXPOSE</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>版本2（嘉熙版本）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>node<span class="token operator">:</span><span class="token number">14</span><span class="token constant">WORKDIR</span> <span class="token operator">/</span>app<span class="token constant">COPY</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token constant">RUN</span> npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span>repository<span class="token operator">/</span>npm<span class="token operator">/</span> \  <span class="token operator">&amp;&amp;</span> npm config <span class="token keyword">set</span> sass_binary_site https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>node<span class="token operator">-</span>sass<span class="token operator">/</span> \  <span class="token operator">&amp;&amp;</span> npm i <span class="token operator">&amp;&amp;</span> npm run build<span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>nginx<span class="token operator">:</span><span class="token number">1.17</span><span class="token constant">ENV</span> <span class="token constant">TZ</span><span class="token operator">=</span>Asia<span class="token operator">/</span>Shanghai<span class="token constant">COPY</span> <span class="token operator">--</span>from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>dist <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token constant">COPY</span> <span class="token operator">--</span>from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>conf<span class="token constant">EXPOSE</span> <span class="token number">80</span><span class="token constant">CMD</span> nginx <span class="token operator">-</span>g <span class="token string">"daemon off;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>npm config set registry <a href="https://xxx/">https://xxx</a> —&gt; 设置镜像源地址</li><li>COPY –from=0 &lt;源路径&gt; &lt;目标路径&gt; —&gt; 从指定目录复制文件到指定路径</li><li>EXPOSE —&gt; 声明端口</li><li>使用nginx -g “daemon off;”启动nginx容器的原因<ul><li>背景：Docker 容器启动时，默认会把容器内部第一个进程，也就是pid=1的程序，作为docker容器是否正在运行的依据，如果 docker 容器pid=1的进程挂了，那么docker容器便会直接退出。</li><li>原因：nginx默认是以后台模式启动的，Docker未执行自定义的CMD之前，nginx的pid是1，执行到CMD之后，nginx就在后台运行，bash或sh脚本的pid变成了1。所以一旦执行完自定义CMD，nginx容器也就退出了。为了保持nginx的容器不退出，应该关闭nginx后台运行</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-lang</summary>
      
    
    
    
    <category term="Linux" scheme="http://damao2250.com/categories/Linux/"/>
    
    
    <category term="docker" scheme="http://damao2250.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Git分支建立及提交规范</title>
    <link href="http://damao2250.com/2021/08/20/Git%E5%88%86%E6%94%AF%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <id>http://damao2250.com/2021/08/20/Git%E5%88%86%E6%94%AF%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</id>
    <published>2021-08-20T01:25:00.000Z</published>
    <updated>2021-10-04T04:20:57.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支建立规范"><a href="#分支建立规范" class="headerlink" title="分支建立规范"></a>分支建立规范</h1><h2 id="Git主要分支说明："><a href="#Git主要分支说明：" class="headerlink" title="Git主要分支说明："></a>Git主要分支说明：</h2><ul><li>Master<ul><li>主分支，维护发布产品的代码，存储了正式发布的历史</li></ul></li><li>Develop<ul><li>开发分支，作为功能的集成分支，维护开发中的代码，代码最终要合入Master分支</li></ul></li><li>Feature<ul><li>开自Develop分支，主要用于开发新功能，开发者根据自己负责模块自行维护，模块开发完成并自测通过后，代码合入Develop分支，新功能提交应该从不直接与master分支交互</li><li>命名规范为：feature/#…，每一个功能都应对应一个issue，…即为issue号</li><li>开发中的合并代码采用rebase方法（可以使分支的提交历史看上去更简洁，详细可见rebase与merge的对比），具体方法如下：<ul><li>新建feature分支：git checkout develop， git branch feature/#…， git checkout feature/#…</li><li>feature分支开发一段功能后：git add.， git commit -m “…”， git checkout develop， git pull origin develop， git checkout feature/#…， git rebase develop（代码依次为提交本次代码，添加提交信息，切换到develop分支并拉取最新分支，切换回feature分支，rebase develop分支）</li><li>在rebase develop分支时，可能会产生conflict，此时仍在rebase过程中，这时需要手动修改代码解决冲突，然后解决完该次冲突（rebase会对比每次未合入develop分支的提交，可能每次提交都会有冲突）后，再执行git add.，git rebase –continue命令，rebase完成后，即可push代码。</li><li>多个分支同时开发时，应当频繁地将测试后可运行的feature分支更新到dev分支，每次更新dev分支时通知其他开发人员，拉取最新的dev分支，将自己正在开发的分支rebase dev分支。这样可以避免较长时间没有进行rebase而导致的冲突较多问题。</li></ul></li></ul></li><li>Bugfix<ul><li>开自Develop分支或者Release分支，主要用于修复当前开发中的功能的已知bug；每一个已发现的bug都应该在gitlab中记录issue，并定期更新当前解决进展，如有有价值的思考或独特的解决方法，可以在issue中评论并在wiki的技术知识库或个人空间博文中进行记录。</li><li>命名规范为：bugfix/#…</li></ul></li><li>Hotfix<ul><li>开自Master分支，主要用于修复当前已发布版本的已知bug；解决bug时注意事项参考Bugfix。这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。为Bug修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把它想成是一个直接在master分支上处理的临时发布。</li><li>命名规范为：hotfix/#…</li></ul></li><li>Release<ul><li>开自Develop分支，主要用于发布版本，一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做Bug修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，执行以下三个操作：</li><li>合并Release分支到Master；</li><li>给Master打上对应版本的标签tag；</li><li>Release回归，这些从新建发布分支以来的做的修改要合并回develop分支。</li><li>命名规范为：release/…，…即为版本号<h1 id="代码提交规范"><a href="#代码提交规范" class="headerlink" title="代码提交规范"></a>代码提交规范</h1></li></ul></li><li>建议经常用命令git status查看当前所在分支并用git log查看当前分支记录，每次提交前与checkout分支时都先查看当前分支再进行下一步操作</li><li>提交信息的说明，禁止无意义的日志语言，如modify，修改xxx文件等，任何修改都应该简要说明</li><li>Commit message格式 <type>: <subject> 注意冒号后面有空格</li><li>type 用于说明 commit 的类别，只允许使用下面7个标识<ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></li><li>subject<ul><li>subject是 commit 目的的简短描述，不超过50个字符，且结尾不加句号（.）。</li><li>提交分支合并请求之前的基础原则，如本地编译通过、手工或者自动化验收的测试通过</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分支建立规范&quot;&gt;&lt;a href=&quot;#分支建立规范&quot; class=&quot;headerlink&quot; title=&quot;分支建立规范&quot;&gt;&lt;/a&gt;分支建立规范&lt;/h1&gt;&lt;h2 id=&quot;Git主要分支说明：&quot;&gt;&lt;a href=&quot;#Git主要分支说明：&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="版本控制工具" scheme="http://damao2250.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JS实现杨辉三角</title>
    <link href="http://damao2250.com/2021/07/26/JS%E5%AE%9E%E7%8E%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    <id>http://damao2250.com/2021/07/26/JS%E5%AE%9E%E7%8E%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</id>
    <published>2021-07-26T01:25:00.000Z</published>
    <updated>2021-10-04T06:01:11.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h1><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92.png" alt="杨辉三角"></p><h2 id="给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的第n行"><a href="#给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的第n行" class="headerlink" title="给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的第n行"></a>给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的第n行</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">triangle</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log('arr1',arr1);</span>        arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// console.log('arr2', arr2);</span>    arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">triangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的前n行"><a href="#给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的前n行" class="headerlink" title="给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的前n行"></a>给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的前n行</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">triangle</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(`数组共有$&#123;n&#125;行：`);</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//按照杨辉三角的特性，将数填入二维数字中。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// console.log(arr);</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// console.log(arr[i]);</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">triangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;杨辉三角&quot;&gt;&lt;a href=&quot;#杨辉三角&quot; class=&quot;headerlink&quot; title=&quot;杨辉三角&quot;&gt;&lt;/a&gt;杨辉三角&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Damao2250/FileTran</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="杨辉三角" scheme="http://damao2250.com/tags/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>Taro与uni-app对比</title>
    <link href="http://damao2250.com/2021/07/25/Taro%E4%B8%8Euni-app%E5%AF%B9%E6%AF%94/"/>
    <id>http://damao2250.com/2021/07/25/Taro%E4%B8%8Euni-app%E5%AF%B9%E6%AF%94/</id>
    <published>2021-07-25T01:25:00.000Z</published>
    <updated>2021-10-04T06:08:08.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Taro和uni-app的介绍"><a href="#Taro和uni-app的介绍" class="headerlink" title="Taro和uni-app的介绍"></a>Taro和uni-app的介绍</h1><h2 id="Taro的介绍"><a href="#Taro的介绍" class="headerlink" title="Taro的介绍"></a>Taro的介绍</h2><ul><li>Taro 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发 微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ 小程序 / H5 / RN 等应用。</li><li>官方文档：<a href="https://nervjs.github.io/taro">https://nervjs.github.io/taro</a></li><li>Github地址：<a href="https://github.com/nervjs/taro">https://github.com/nervjs/taro</a><h2 id="uni-app的介绍"><a href="#uni-app的介绍" class="headerlink" title="uni-app的介绍"></a>uni-app的介绍</h2></li><li>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。</li><li>官方文档：<a href="https://uniapp.dcloud.io/">https://uniapp.dcloud.io</a></li><li>Github地址：<a href="https://github.com/dcloudio/uni-app">https://github.com/dcloudio/uni-app</a><h1 id="两者的对比"><a href="#两者的对比" class="headerlink" title="两者的对比"></a>两者的对比</h1><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2></li><li>两者都是用主流框架开发的</li><li>都能支持微信、百度、支付宝、今日头条等小程序，H5，以及iOS和Android的App</li><li>均支持使用npm/yarn安装管理第三方依赖</li><li>均支持使用ES6甚至更新的ES规范</li><li>均支持使用less/scss/ts等预编译器</li><li>均支持进行应用状态管理，taro支持Redux，uni-app支持vuex<h2 id="差异点"><a href="#差异点" class="headerlink" title="差异点"></a>差异点</h2></li></ul><table><thead><tr><th align="left"></th><th align="left">Taro</th><th align="left">uni-app</th></tr></thead><tbody><tr><td align="left">开发技术栈</td><td align="left">React框架开发</td><td align="left">Vue框架开发</td></tr><tr><td align="left">开发工具</td><td align="left">官方未特别推荐IDE</td><td align="left">官方推荐HBuilderX,开发工具可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs</td></tr><tr><td align="left">跨端程度</td><td align="left">微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ 小程序 / H5 / RN</td><td align="left">微信/支付宝/百度/头条/QQ/钉钉/淘宝小程序、快应用、iOS、Android、Web（响应式）</td></tr><tr><td align="left">版本升级差异</td><td align="left">1.X与2.X之间没有做平滑升级，版本差异太大，升级版本会导致各种不兼容的bug；3.X则属于开放式架构的改动，采用了重运行时的架构</td><td align="left">无版本升级影响</td></tr><tr><td align="left">物料市场</td><td align="left">NutUI、Taro UI；物料市场活跃度低，更新速度慢</td><td align="left">uni-ui、uView UI、mui；插件市场活跃度高，插件数量多，更新速度快</td></tr><tr><td align="left">社区活跃度</td><td align="left">GitHub Issuse、Discussions</td><td align="left">GitHub Issuse、官网社区问答</td></tr><tr><td align="left">学习维护成本</td><td align="left">高</td><td align="left">低</td></tr><tr><td align="left">云开发支持</td><td align="left">无</td><td align="left">uniCloud</td></tr></tbody></table><h2 id="Taro-amp-amp-DCloud-amp-amp-uni-app-amp-amp-微信小程序诞生节点"><a href="#Taro-amp-amp-DCloud-amp-amp-uni-app-amp-amp-微信小程序诞生节点" class="headerlink" title="Taro &amp;&amp; DCloud &amp;&amp; uni-app &amp;&amp; 微信小程序诞生节点"></a>Taro &amp;&amp; DCloud &amp;&amp; uni-app &amp;&amp; 微信小程序诞生节点</h2><ul><li>Taro 2018年4月8日发布0.0.1版本<ul><li><a href="https://github.com/NervJS/taro/releases?after=v0.0.5">https://github.com/NervJS/taro/releases?after=v0.0.5</a></li></ul></li><li>DCloud于2012年开始研发小程序技术，优化webview的功能和性能，并加入W3C和HTML5中国产业联盟，推出了HBuilder开发工具，为后续产业化做准备<ul><li><a href="https://uniapp.dcloud.io/history">https://uniapp.dcloud.io/history</a></li></ul></li><li>uni-app 2019年1月11日发布1.4.0.20181227 版本<ul><li><a href="https://github.com/dcloudio/uni-app/releases?after=1.8.0.20190330">https://github.com/dcloudio/uni-app/releases?after=1.8.0.20190330</a></li></ul></li><li>微信团队于2016年初决定上线小程序业务，但其没有接入联盟标准，而是订制了自己的标准。2017年1月9日，张小龙在2017微信公开课Pro上发布的微信小程序正式上线<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/e1fd563ba0301f44e923d9b9ae67b59.png" alt="微信小程序上线"></li></ul><h1 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h1><h2 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 全局安装 @tarojs&#x2F;cli$ npm install -g @tarojs&#x2F;cli# 创建 taro 项目$ taro init myApp# 进入项目目录$ cd myApp# 运行到微信小程序，调试模式$ npm run dev:weapp# 发行到微信小程序$ npm run build:weapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 全局安装 vue-cli$ npm install -g @vue&#x2F;cli# 创建uni-app项目$ vue create -p dcloudio&#x2F;uni-preset-vue my-project# 进入项目目录$ cd my-project# 运行到微信小程序，调试模式$ npm run dev:mp-weixin# 发行到微信小程序$ npm run build:mp-weixin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>或者直接通过HBuilderX可视化界面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Taro和uni-app的介绍&quot;&gt;&lt;a href=&quot;#Taro和uni-app的介绍&quot; class=&quot;headerlink&quot; title=&quot;Taro和uni-app的介绍&quot;&gt;&lt;/a&gt;Taro和uni-app的介绍&lt;/h1&gt;&lt;h2 id=&quot;Taro的介绍&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="小程序" scheme="http://damao2250.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="Taro" scheme="http://damao2250.com/tags/Taro/"/>
    
    <category term="uni-app" scheme="http://damao2250.com/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>JS中的call()、apply()、bind()的用法</title>
    <link href="http://damao2250.com/2021/07/09/JS%E4%B8%AD%E7%9A%84call()%E3%80%81apply()%E3%80%81bind()%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://damao2250.com/2021/07/09/JS%E4%B8%AD%E7%9A%84call()%E3%80%81apply()%E3%80%81bind()%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2021-07-09T01:25:00.000Z</published>
    <updated>2021-10-04T06:03:14.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="少罗嗦，直接看代码"><a href="#少罗嗦，直接看代码" class="headerlink" title="少罗嗦，直接看代码"></a>少罗嗦，直接看代码</h1><ul><li><p>其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！</p></li><li><p>先看明白下面：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例1</span><span class="token comment">// 注意是var不是let  如果使用let的话，obj.objAge 为undefined</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>  objAge<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>  <span class="token function-variable function">myFun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">年龄</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>objAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//17</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小张年龄undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例2</span><span class="token keyword">var</span> fav <span class="token operator">=</span> <span class="token string">'盲僧'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fav<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//盲僧　</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>比较一下这两者this 的差别，第一个打印里面的this 指向obj，第二个全局声明的shows()函数 this 是window</p></li></ul><h3 id="1-call-、apply-、bind-都是用来重定义-this-这个对象的！"><a href="#1-call-、apply-、bind-都是用来重定义-this-这个对象的！" class="headerlink" title="1. call()、apply()、bind()都是用来重定义 this 这个对象的！"></a>1. call()、apply()、bind()都是用来重定义 this 这个对象的！</h3><p>  如：<br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>objAge<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token function-variable function">myFun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">年龄</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'玛丽'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token comment">//玛丽年龄18</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　 <span class="token comment">//玛丽年龄18</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　<span class="token comment">//玛丽年龄18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ul><li>以上出了bind 方法后面多了个()外 ，结果返回都一致</li><li>由此得出结论，bind返回的是一个新的函数，你必须调用它才会被执行</li></ul><h3 id="2-对比call、bind、apply传参情况下"><a href="#2-对比call、bind、apply传参情况下" class="headerlink" title="2. 对比call、bind、apply传参情况下"></a>2. 对比call、bind、apply传参情况下</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>objAge<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token function-variable function">myFun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span>v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">年龄</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -> 来自</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>k<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">去往</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>v<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'玛丽'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　      <span class="token comment">// 玛丽年龄18 -> 来自广州去往上海</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 玛丽年龄18 -> 来自广州去往上海</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 玛丽年龄18 -> 来自广州去往上海</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　     <span class="token comment">// 玛丽年龄18 -> 来自广州,上海去往undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>微妙的差距</p></li><li><p>从上面四个结果不难看出 call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：</p><ul><li>call的参数是直接放进去的，第二第三第n个参数全都用逗号分隔，直接放到后面obj.myFun.call(db,’成都’, … ,’string’);</li><li>apply的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,[‘成都’, …, ‘string’ ]);</li><li>bind除了返回是函数以外，它 的参数和call 一样</li></ul></li><li><p>当然，三者的参数不限定是string类型，允许是各种类型，包括函数、object等等</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;少罗嗦，直接看代码&quot;&gt;&lt;a href=&quot;#少罗嗦，直接看代码&quot; class=&quot;headerlink&quot; title=&quot;少罗嗦，直接看代码&quot;&gt;&lt;/a&gt;少罗嗦，直接看代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！&lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="call" scheme="http://damao2250.com/tags/call/"/>
    
    <category term="apply" scheme="http://damao2250.com/tags/apply/"/>
    
    <category term="bind" scheme="http://damao2250.com/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>关于React三千问</title>
    <link href="http://damao2250.com/2021/07/08/%E5%85%B3%E4%BA%8EReact%E4%B8%89%E5%8D%83%E9%97%AE/"/>
    <id>http://damao2250.com/2021/07/08/%E5%85%B3%E4%BA%8EReact%E4%B8%89%E5%8D%83%E9%97%AE/</id>
    <published>2021-07-08T03:00:42.000Z</published>
    <updated>2021-10-04T03:01:33.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何理解React？有哪些新特性？"><a href="#如何理解React？有哪些新特性？" class="headerlink" title="如何理解React？有哪些新特性？"></a>如何理解React？有哪些新特性？</h1><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><ul><li><p>React，用于构建用户界面的 JavaScript 库，提供了 UI 层面的解决方案</p></li><li><p>遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效</p></li><li><p>使用虚拟DOM来有效地操作真实DOM，遵循从高阶组件到低阶组件的单向数据流</p></li><li><p>帮助我们将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面</p></li><li><p>React 类组件使用一个名为 render() 的方法或者函数组件return，接收输入的数据并返回需要展示的内容</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">HelloMessage</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        Hello <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>HelloMessage name<span class="token operator">=</span><span class="token string">"Taylor"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hello-example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h2><p>React特性有很多，如：</p></li><li><p>JSX语法</p></li><li><p>单向数据绑定</p></li><li><p>虚拟DOM</p></li><li><p>声明式编程</p></li><li><p>Component</p></li></ul><p>着重介绍下声明式编程及Component</p><h3 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h3><ul><li><p>声明式编程是一种编程范式，它关注的是你要做什么，而不是如何做</p></li><li><p>它表达逻辑而不显式地定义步骤。这意味着我们需要根据逻辑的计算来声明要显示的组件</p></li><li><p>如实现一个标记的地图：</p></li><li><p>通过命令式创建地图、创建标记、以及在地图上添加的标记的步骤如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建地图</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token punctuation">.</span>map</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'map'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    zoom<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    center<span class="token operator">:</span> <span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span>lng<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建标记</span><span class="token keyword">const</span> marker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token punctuation">.</span>marker</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    position<span class="token operator">:</span> <span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">'Hello Marker'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 地图上添加标记</span>marker<span class="token punctuation">.</span><span class="token function">setMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而用React实现上述功能则如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Map zoom<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span> center<span class="token operator">=</span><span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">&#125;</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Marker position<span class="token operator">=</span><span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">&#125;</span> title<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Hello Marker'</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Map<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>声明式编程方式使得React组件很容易使用，最终的代码简单易于维护</p></li></ul><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><ul><li><p>在React 中，一切皆为组件。通常将应用程序的整个逻辑分解为小的单个部分。我们将每个单独的部分称为组件</p></li><li><p>组件可以是一个函数或者是一个类，接受数据输入，处理它并返回在UI中呈现的React元素</p></li><li><p>函数式组件（无状态组件）如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Jumbotron style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>backgroundColor<span class="token operator">:</span><span class="token string">'orange'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token constant">TODO</span> App<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Jumbotron<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类组件（有状态组件）如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Dashboard</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"dashboard"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>ToDoForm <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ToDolist <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个组件该有的特点如下：</p></li><li><p>可组合：个组件易于和其它组件一起使用，或者嵌套在另一个组件内部</p></li><li><p>可重用：每个组件都是具有独立功能的，它可以被使用在多个UI场景</p></li><li><p>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</p><h2 id="三、优势"><a href="#三、优势" class="headerlink" title="三、优势"></a>三、优势</h2></li><li><p>通过上面的初步了解，可以感受到React存在的优势：</p><ul><li>高效灵活</li><li>声明式的设计，简单使用</li><li>组件式开发，提高代码复用率</li><li>单向响应的数据流会比双向绑定的更安全，速度更快<h1 id="Real-DOM-与-Virtual-DOM-的区别？有何优缺点？"><a href="#Real-DOM-与-Virtual-DOM-的区别？有何优缺点？" class="headerlink" title="Real DOM 与 Virtual DOM 的区别？有何优缺点？"></a>Real DOM 与 Virtual DOM 的区别？有何优缺点？</h1><h2 id="一、是什么-1"><a href="#一、是什么-1" class="headerlink" title="一、是什么"></a>一、是什么</h2></li></ul></li><li><p>Real DOM，真实DOM， 意思为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构，如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello world<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Virtual Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述</p></li><li><p>创建虚拟DOM目的就是为了更好将虚拟的节点渲染到页面视图中，虚拟DOM对象的节点与真实DOM的属性一一照应</p></li><li><p>在React中，JSX是其一大特性，可以让你在JS中通过使用XML的方式去直接声明界面的DOM结构</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vDom <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> <span class="token comment">// 创建h1标签，右边千万不能加引号</span><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token comment">// 找到&lt;div id="root">&lt;/div>节点</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>vDom<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token comment">// 把创建的h1标签渲染到root节点上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>上述中，ReactDOM.render()用于将你创建好的虚拟DOM节点插入到某个真实节点上，并渲染到页面上</p></li><li><p>JSX实际是一种语法糖，在使用过程中会被babel进行编译转化成JS代码，上述VDOM转化为如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vDom <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">'h1'</span>，   <span class="token punctuation">&#123;</span> className<span class="token operator">:</span> <span class="token string">'hClass'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">'hId'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">'hello world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以看到，JSX就是为了简化直接调用React.createElement() 方法：</p></li><li><p>第一个参数是标签名，例如h1、span、table…</p></li><li><p>第二个参数是个对象，里面存着标签的一些属性，例如id、class等</p></li><li><p>第三个参数是节点中的文本</p></li><li><p>通过console.log(VDOM)，则能够得到虚拟VDOM消息</p></li><li><p>所以可以得到，JSX通过babel的方式转化成React.createElement执行，返回值是一个对象，也就是虚拟DOM</p></li></ul><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><ul><li><p>两者的区别如下：</p><ul><li>虚拟DOM不会进行排版与重绘操作，而真实DOM会频繁重排与重绘</li><li>虚拟DOM的总损耗是“虚拟DOM增删改 + 真实DOM差异增删改+排版与重绘”，真实DOM的总损耗是“真实DOM完全增删改+排版与重绘”</li></ul></li><li><p>传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程</p></li><li><p>当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程</p></li><li><p>而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算</p></li></ul><h2 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h2><ul><li>真实DOM的优势：<ul><li>易用</li></ul></li><li>缺点：<ul><li>效率低，解析速度慢，内存占用量过高</li><li>性能差：频繁操作真实DOM，易于导致重绘与回流</li></ul></li><li>使用虚拟DOM的优势如下：<ul><li>简单方便：如果使用手动操作真实DOM来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难</li><li>性能方面：使用Virtual DOM，能够有效避免真实DOM数频繁更新，减少多次引起重绘与回流，提高性能</li><li>跨平台：React借助虚拟DOM， 带来了跨平台的能力，一套代码多端运行</li></ul></li><li>缺点：<ul><li>在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化</li><li>首次渲染大量DOM时，由于多了一层虚拟DOM的计算，速度比正常稍慢<h1 id="React生命周期有哪些不同的阶段？每个阶段对应的方法是？"><a href="#React生命周期有哪些不同的阶段？每个阶段对应的方法是？" class="headerlink" title="React生命周期有哪些不同的阶段？每个阶段对应的方法是？"></a>React生命周期有哪些不同的阶段？每个阶段对应的方法是？</h1><h1 id="对State-和-Porps的理解？有何区别？"><a href="#对State-和-Porps的理解？有何区别？" class="headerlink" title="对State 和 Porps的理解？有何区别？"></a>对State 和 Porps的理解？有何区别？</h1><h1 id="super-和-super-props-有何区别？"><a href="#super-和-super-props-有何区别？" class="headerlink" title="super() 和 super(props) 有何区别？"></a>super() 和 super(props) 有何区别？</h1><h1 id="React中的setState执行机制？"><a href="#React中的setState执行机制？" class="headerlink" title="React中的setState执行机制？"></a>React中的setState执行机制？</h1><h1 id="对React的执行机制如何理解？"><a href="#对React的执行机制如何理解？" class="headerlink" title="对React的执行机制如何理解？"></a>对React的执行机制如何理解？</h1><h1 id="React事件绑定方式有哪些？有何区别？"><a href="#React事件绑定方式有哪些？有何区别？" class="headerlink" title="React事件绑定方式有哪些？有何区别？"></a>React事件绑定方式有哪些？有何区别？</h1><h1 id="React构建组件的方式有哪些？有何区别？"><a href="#React构建组件的方式有哪些？有何区别？" class="headerlink" title="React构建组件的方式有哪些？有何区别？"></a>React构建组件的方式有哪些？有何区别？</h1><h1 id="React中组件通信方式有哪些？"><a href="#React中组件通信方式有哪些？" class="headerlink" title="React中组件通信方式有哪些？"></a>React中组件通信方式有哪些？</h1><h1 id="React中的key有什么作用？"><a href="#React中的key有什么作用？" class="headerlink" title="React中的key有什么作用？"></a>React中的key有什么作用？</h1><h1 id="对React-refs的理解？有何应用场景？"><a href="#对React-refs的理解？有何应用场景？" class="headerlink" title="对React refs的理解？有何应用场景？"></a>对React refs的理解？有何应用场景？</h1><h1 id="对React中类组件和函数组件的理解？有何区别？"><a href="#对React中类组件和函数组件的理解？有何区别？" class="headerlink" title="对React中类组件和函数组件的理解？有何区别？"></a>对React中类组件和函数组件的理解？有何区别？</h1></li></ul></li></ul><p><a href="#">来源：JS每日一题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何理解React？有哪些新特性？&quot;&gt;&lt;a href=&quot;#如何理解React？有哪些新特性？&quot; class=&quot;headerlink&quot; title=&quot;如何理解React？有哪些新特性？&quot;&gt;&lt;/a&gt;如何理解React？有哪些新特性？&lt;/h1&gt;&lt;h2 id=&quot;一、是什么</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="React" scheme="http://damao2250.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ES6的两个特性：Class类和类的继承extens</title>
    <link href="http://damao2250.com/2021/06/25/ES6%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%B9%E6%80%A7%EF%BC%9AClass%E7%B1%BB%E5%92%8C%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BFextens/"/>
    <id>http://damao2250.com/2021/06/25/ES6%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%B9%E6%80%A7%EF%BC%9AClass%E7%B1%BB%E5%92%8C%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BFextens/</id>
    <published>2021-06-25T01:25:00.000Z</published>
    <updated>2021-10-04T04:17:08.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><ul><li><p>ES6引入Class(类)的概念，让类的写法更接近传统语言的写法，ES6的类可以看作是语法糖，它的绝大部分功能，ES5都可以做得到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法</p></li><li><p>对比ES5和ES6创建class的写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ================= ES5 start =================</span><span class="token comment">// ES5 -> 构造函数、原型方法、静态属性</span><span class="token comment">// 构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 原型方法</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 静态属性</span>Person<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">"Person的静态属性"</span><span class="token punctuation">;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Damao"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Damao</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person的静态属性</span><span class="token comment">// ================= ES5 end =================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ================= ES6 start =================</span><span class="token comment">// ES6 -> 构造函数、原型方法、静态属性</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 原型方法（无需加function）</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 静态属性</span>Person<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">"Person的静态属性"</span><span class="token punctuation">;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Damao"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Damao</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person的静态属性</span><span class="token comment">// ================= ES6 end =================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ES6 class中，用static修饰即为类的静态方法（可以直接用类名访问），即在这个类（构造函数）对象本身上的方法，加上static表示该方法不会被实例继承</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"this is static method"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this is static method</span><span class="token comment">//</span><span class="token comment">// 静态方法不可以通过实例来即成，即不能通过实例调用，如</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: person.classMethod is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类的继承extends"><a href="#类的继承extends" class="headerlink" title="类的继承extends"></a>类的继承extends</h1></li><li><p>Class可以通过extends关键字来实现继承，而ES5则需要通过修改原型链来实现继承</p></li><li><p>对比ES5和ES6继承的写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ================= ES5 start =================</span><span class="token comment">// ES5 -> 利用原型让一个引用类型继承另一个引用类型的属性和方法，即让原型对象等于另一个类型的实例</span><span class="token comment">// 原型继承缺点：父类公有和私有属性方法都为子类公有</span><span class="token comment">// </span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Damao"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SuperPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>superName <span class="token operator">=</span> <span class="token string">"Damao2250"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承 Person</span><span class="token class-name">SuperPerson</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SuperPerson</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SuperPerson<span class="token punctuation">;</span><span class="token class-name">SuperPerson</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>superName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> superPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superPerson<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Damao</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superPerson<span class="token punctuation">.</span><span class="token function">getSuperName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Damao2250</span><span class="token comment">// ================= ES5 end =================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ================= ES6 start =================</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 构造函数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 原型方法（无需加function）</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SuperPerson</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> superName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在继承的构造函数中，必须调用一次super方法，它表示构造函数的继承；必须在this前调用</span>  <span class="token comment">// super()是将父类中的this对象继承给子类</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>superName <span class="token operator">=</span> superName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">superGetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// super 直接调用父级的原型方法</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>superName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperPerson</span><span class="token punctuation">(</span><span class="token string">"Damao"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"Damao2250"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Damao</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">superGetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Damao  Damao2250</span><span class="token comment">// ================= ES6 end =================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Class类&quot;&gt;&lt;a href=&quot;#Class类&quot; class=&quot;headerlink&quot; title=&quot;Class类&quot;&gt;&lt;/a&gt;Class类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ES6引入Class(类)的概念，让类的写法更接近传统语言的写法，ES6的类可以看作是语法</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="ES6" scheme="http://damao2250.com/tags/ES6/"/>
    
    <category term="Class" scheme="http://damao2250.com/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>一道基础Vue生命周期的面试题</title>
    <link href="http://damao2250.com/2021/05/11/%E4%B8%80%E9%81%93%E5%9F%BA%E7%A1%80Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://damao2250.com/2021/05/11/%E4%B8%80%E9%81%93%E5%9F%BA%E7%A1%80Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2021-05-11T01:25:00.000Z</published>
    <updated>2021-10-04T04:11:33.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据Vue的生命周期说出console打印出来的值"><a href="#根据Vue的生命周期说出console打印出来的值" class="headerlink" title="根据Vue的生命周期说出console打印出来的值"></a>根据Vue的生命周期说出console打印出来的值</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num1<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    num2<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num1 <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeCreated"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined    (页面载入触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"created"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3     (页面载入触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeMount"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3     (页面载入触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3     (页面载入触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeUpdate"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3     (有数据更新时才会触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"updated"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3     (有数据更新时才会触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeDestroy"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3     (离开组件时才会触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destroyed"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3    (离开组件时才会触发)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ul><li>父子组件生命周期如何执行<ul><li>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt;</li><li>子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt;</li><li>父mounted -&gt;</li><li>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated -&gt;</li><li>父beforeDestroy-&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;根据Vue的生命周期说出console打印出来的值&quot;&gt;&lt;a href=&quot;#根据Vue的生命周期说出console打印出来的值&quot; class=&quot;headerlink&quot; title=&quot;根据Vue的生命周期说出console打印出来的值&quot;&gt;&lt;/a&gt;根据Vue的生命周期说</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="面试题" scheme="http://damao2250.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数组的一些操作技巧</title>
    <link href="http://damao2250.com/2021/05/08/%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    <id>http://damao2250.com/2021/05/08/%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</id>
    <published>2021-05-08T01:25:00.000Z</published>
    <updated>2021-10-04T04:09:11.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速复制数组"><a href="#快速复制数组" class="headerlink" title="快速复制数组"></a>快速复制数组</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sameArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr: "</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"sameArr: "</span><span class="token punctuation">,</span> sameArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// arr:[1, 2, 3, 4]</span><span class="token comment">// sameArr:[1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="快速合并数组"><a href="#快速合并数组" class="headerlink" title="快速合并数组"></a>快速合并数组</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> mergedArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">,</span> <span class="token operator">...</span>arr3<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mergedArr: "</span><span class="token punctuation">,</span> mergedArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// mergedArr:[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="快速过滤掉相同元素"><a href="#快速过滤掉相同元素" class="headerlink" title="快速过滤掉相同元素"></a>快速过滤掉相同元素</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> uniqueArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"uniqueArr: "</span><span class="token punctuation">,</span> uniqueArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// uniqueArr: [1, 2, 3, 4, 5, 8, 9, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li><p>ES6 之 new Set()</p><ul><li>Set 是 es6 新增的数据结构，似于数组，但它的一大特性就是所有元素都是唯一的，没有重复的值，我们一般称为集合。<ul><li>Set 对象方法</li><li>add 添加某个值，返回 Set 对象本身</li><li>clear 删除所有的键/值对，没有返回值</li><li>delete 删除某个键，返回 true，如果删除失败，返回 false</li><li>forEach 对每个元素执行指定操作</li><li>has 返回一个布尔值，表示某个键是否在当前 Set 对象之中<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Array 转 Set</span><span class="token keyword">var</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"value1"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用...操作符，将 Set 转 Array</span><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// String 转 Set</span><span class="token keyword">var</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set(4) &#123;"h", "e", "l", "o"&#125;</span><span class="token comment">// 注：Set 中 toString 方法是不能将 Set 转换成 String</span>Set 对象作用<span class="token comment">// 数组去重</span><span class="token keyword">var</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span><span class="token comment">// 并集</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> union <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;1, 2, 3, 4&#125;</span><span class="token comment">// 交集</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;2, 3&#125;</span><span class="token comment">// 差集</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="过滤符合条件的数组项"><a href="#过滤符合条件的数组项" class="headerlink" title="过滤符合条件的数组项"></a>过滤符合条件的数组项</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"apple"</span><span class="token punctuation">,</span>  <span class="token string">"banana"</span><span class="token punctuation">,</span>  <span class="token string">"pear"</span><span class="token punctuation">,</span>  <span class="token string">"watermelon"</span><span class="token punctuation">,</span>  <span class="token string">"strawberry"</span><span class="token punctuation">,</span>  <span class="token string">"arbutus"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> hFruits <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fruit</span><span class="token punctuation">)</span> <span class="token operator">=></span> fruit<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hFruits: "</span><span class="token punctuation">,</span> hFruits<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hFruits: ["apple", "arbutus"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检查数组中的某些项目是否匹配条件"><a href="#检查数组中的某些项目是否匹配条件" class="headerlink" title="检查数组中的某些项目是否匹配条件"></a>检查数组中的某些项目是否匹配条件</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组的交集"><a href="#数组的交集" class="headerlink" title="数组的交集"></a>数组的交集</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> intersection <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>intersection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="筛选数组的差异部分"><a href="#筛选数组的差异部分" class="headerlink" title="筛选数组的差异部分"></a>筛选数组的差异部分</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> difference <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> allDifference <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token operator">...</span>arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">...</span>arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>difference<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allDifference<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对数组中的项目进行排序"><a href="#对数组中的项目进行排序" class="headerlink" title="对数组中的项目进行排序"></a>对数组中的项目进行排序</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 升序</span><span class="token keyword">const</span> asc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>asc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [9, 16, 20, 23, 52, 99]</span><span class="token comment">// 降序</span><span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [99, 52, 23, 20, 16, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2></li></ul></li></ul></li><li><p>实现原理</p><ul><li>数组中有 n 个数，比较每相邻两个数，如果前者大于后者，就把两个数交换位置；这样一来，第一轮就可以选出一个最大的数放在最后面；那么经过 n-1（数组的 length - 1） 轮，就完成了所有数的排序。<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/sort%E6%8E%92%E5%BA%8F.gif" alt="sort排序"></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 声明一个变量，作为标志位</span>    <span class="token keyword">var</span> done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max <span class="token operator">-</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1、外层 for 循环控制循环次数</span><span class="token comment">// 2、内层 for 循环进行两数交换，找每次的最大数，排到最后</span><span class="token comment">// 3、设置一个标志位，减少不必要的循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速复制数组&quot;&gt;&lt;a href=&quot;#快速复制数组&quot; class=&quot;headerlink&quot; title=&quot;快速复制数组&quot;&gt;&lt;/a&gt;快速复制数组&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://damao2250.com/tags/JS/"/>
    
    <category term="数组" scheme="http://damao2250.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的柯里化函数示例</title>
    <link href="http://damao2250.com/2021/04/19/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B/"/>
    <id>http://damao2250.com/2021/04/19/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-04-19T01:25:00.000Z</published>
    <updated>2021-10-04T04:13:00.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是柯里化"><a href="#什么是柯里化" class="headerlink" title="什么是柯里化"></a>什么是柯里化</h1><ul><li>柯里化就是把一个多参数的函数转换为一系列只带单个参数的函数<h2 id="未柯里化前的函数"><a href="#未柯里化前的函数" class="headerlink" title="未柯里化前的函数"></a>未柯里化前的函数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="柯里化后的函数"><a href="#柯里化后的函数" class="headerlink" title="柯里化后的函数"></a>柯里化后的函数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token parameter">b</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token parameter">c</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="柯里化过程"><a href="#柯里化过程" class="headerlink" title="柯里化过程"></a>柯里化过程</h2></li><li>将 <code>multiply(1，2，3)</code> 函数调用转换为 <code>multiply(1)(2)(3)</code> 调用</li><li>拆分<code>multiply(1)(2)(3)</code>便于理解<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> multiply1 <span class="token operator">=</span> <span class="token function">multiplytiply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> multiply2 <span class="token operator">=</span> <span class="token function">multiply1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> multiply3 <span class="token operator">=</span> <span class="token function">multiply2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>multiply3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是柯里化&quot;&gt;&lt;a href=&quot;#什么是柯里化&quot; class=&quot;headerlink&quot; title=&quot;什么是柯里化&quot;&gt;&lt;/a&gt;什么是柯里化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;柯里化就是把一个多参数的函数转换为一系列只带单个参数的函数&lt;h2 id=&quot;未柯里化前的函数&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="函数" scheme="http://damao2250.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令速查表</title>
    <link href="http://damao2250.com/2021/04/15/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>http://damao2250.com/2021/04/15/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/</id>
    <published>2021-04-15T01:25:00.000Z</published>
    <updated>2021-10-04T04:18:21.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><table><thead><tr><th align="left">Tips</th><th></th></tr></thead><tbody><tr><td align="left">master：</td><td>默认开发分支</td></tr><tr><td align="left">origin：</td><td>默认远程版本库</td></tr></tbody></table><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><table><thead><tr><th align="left">创建版本库</th><th></th></tr></thead><tbody><tr><td align="left">$ git clone <url></td><td>#克隆远程版本库</td></tr><tr><td align="left">$ git init</td><td>#初始化本地版本库</td></tr></tbody></table><h1 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h1><table><thead><tr><th align="left">修改和提交</th><th></th></tr></thead><tbody><tr><td align="left">$ git status</td><td>#查看当前修改状况</td></tr><tr><td align="left">$ git diff</td><td>#查看变更的内容</td></tr><tr><td align="left">$ git add .</td><td>#把所有修改的文件添加到缓存（跟踪文件）</td></tr><tr><td align="left">$ git add <file></td><td>#把指定的文件添加到缓存</td></tr><tr><td align="left">$ git mv <old_file> <new_file></td><td>#修改文件名</td></tr><tr><td align="left">$ git rm <file></td><td>#删除文件</td></tr><tr><td align="left">$ git rm –cached <file></td><td>#停止跟踪文件但不删除</td></tr><tr><td align="left">$ git commit -m “message”</td><td>#提交所有更新过的文件</td></tr><tr><td align="left">$ git commit –amend</td><td>#修改最后一次提交</td></tr></tbody></table><h1 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h1><table><thead><tr><th align="left">查看提交历史</th><th></th></tr></thead><tbody><tr><td align="left">$ git log</td><td>#查看提交历史</td></tr><tr><td align="left">$ git log -p <file></td><td>#查看指定文件提交历史</td></tr><tr><td align="left">$ git blame <file></td><td>#以列表的方式查看指定文件提交历史</td></tr></tbody></table><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><table><thead><tr><th align="left">撤销</th><th></th></tr></thead><tbody><tr><td align="left">$ git reset –hard HEAD</td><td>#撤销工作目录中所有未提交文件的修改内容</td></tr><tr><td align="left">$ git checkout HEAD <file></td><td>#撤销指定未提交文件的修改内容</td></tr><tr><td align="left">$ git revert <commit></td><td>#撤销指定的提交</td></tr></tbody></table><h1 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h1><table><thead><tr><th align="left">分支与标签</th><th></th></tr></thead><tbody><tr><td align="left">$ git branch</td><td>#显示所有本地分支</td></tr><tr><td align="left">$ git branch -r</td><td>#显示所有远程分支</td></tr><tr><td align="left">$ git branch -a</td><td>#显示所有本地和远程分支</td></tr><tr><td align="left">$ git checkout &lt;branch/tag&gt;</td><td>#切换到指定分支或标签</td></tr><tr><td align="left">$ git branch <new_branch></td><td>#创建新分支</td></tr><tr><td align="left">$ git checkout -b <new_branch></td><td>#创建并切换到新分支</td></tr><tr><td align="left">$ git branch -d <branch></td><td>#删除本地分支</td></tr><tr><td align="left">$ git tag</td><td>#显示所有本地标签</td></tr><tr><td align="left">$ git tag <tagname></td><td>#基于最新提交创建标签</td></tr><tr><td align="left">$ git tag -d <tagname></td><td>#删除标签</td></tr></tbody></table><h1 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h1><table><thead><tr><th align="left">合并与衍合</th><th></th></tr></thead><tbody><tr><td align="left">$ git merge <branch></td><td>#合并指定分支到当前分支</td></tr><tr><td align="left">$ git rebase <branch></td><td>#衍合指定分支到当前分支</td></tr></tbody></table><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><table><thead><tr><th align="left">远程操作</th><th></th></tr></thead><tbody><tr><td align="left">$ git remote -v</td><td>#查看远程版本库信息</td></tr><tr><td align="left">$ git remote show <remote></td><td>#查看指定远程版本库信息</td></tr><tr><td align="left">$ git remote add <remote> <url></td><td>#添加远程版本库</td></tr><tr><td align="left">$ git fetch <remote></td><td>#从远程库获取代码</td></tr><tr><td align="left">$ git pull <remote> <branch></td><td>#从远程库拉去代码并快速合并</td></tr><tr><td align="left">$ git push <remote> <branch></td><td>#上传代码到远程库并快速合并</td></tr><tr><td align="left">$ git push <remote> -d &lt;branch/tag&gt;</td><td>#删除远程分支或标签</td></tr><tr><td align="left">$ git push –tags</td><td>#上传所有标签</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Tips&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;</summary>
      
    
    
    
    <category term="版本控制工具" scheme="http://damao2250.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>用Element-Ui封装一个滑动组件</title>
    <link href="http://damao2250.com/2021/04/08/%E7%94%A8Element-Ui%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://damao2250.com/2021/04/08/%E7%94%A8Element-Ui%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E7%BB%84%E4%BB%B6/</id>
    <published>2021-04-08T01:25:00.000Z</published>
    <updated>2021-10-04T04:14:56.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件"><a href="#基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件" class="headerlink" title="基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件"></a>基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件</h2><ul><li>主要用于登录验证</li><li>纯前端验证（滑着过瘾）目前无法与后端进行校验</li><li>封装还可以优化</li><li>直接看代码吧<h3 id="slider组件"><a href="#slider组件" class="headerlink" title="slider组件"></a>slider组件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// slider/index.vue'</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bar"</span> ref<span class="token operator">=</span><span class="token string">"bar"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>slider      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"slider"</span>      ref<span class="token operator">=</span><span class="token string">"slider"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span>      <span class="token operator">:</span>show<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"false"</span>      @change<span class="token operator">=</span><span class="token string">"sliderChange"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"sliderDisabled"</span>    <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>slider<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"slider-text-before"</span> ref<span class="token operator">=</span><span class="token string">"barText"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"noReset?'run run-no-slider':'run'"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"!isSuccess"</span><span class="token operator">></span>拖动滑块验证<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">else</span> style<span class="token operator">=</span><span class="token string">"color:#fff;"</span><span class="token operator">></span>验证通过<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"slider"</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    reset<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    noReset<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      isSuccess<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      sliderDisabled<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sliderReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">noReset</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"no-slider"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"no-slider"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>slider<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button<span class="token punctuation">)</span>    <span class="token comment">// this.$refs.slider.$refs.button1.$refs.button.style = ""</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>slider<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>      <span class="token string">"&lt;i class='el-icon-d-arrow-right icon-arrow-right'>&lt;/i>"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sliderChange</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sliderSucceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sliderReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">sliderSucceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>slider<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>        <span class="token string">"&lt;i class='el-icon-success icon-success'>&lt;/i>"</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sliderDisabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">sliderReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sliderDisabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:reset"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>slider<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>button<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>        <span class="token string">"&lt;i class='el-icon-d-arrow-right icon-arrow-right'>&lt;/i>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span>$color<span class="token operator">:</span> #<span class="token number">67</span>c23a<span class="token punctuation">;</span><span class="token comment">// $color: #409EFF;</span>$slider_button_width<span class="token operator">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>$slider_button_height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">.</span>bar <span class="token punctuation">&#123;</span>  position<span class="token operator">:</span> relative<span class="token punctuation">;</span>  width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #e4e7ed<span class="token punctuation">;</span>  border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>  <span class="token punctuation">.</span>slider<span class="token operator">-</span>text<span class="token operator">-</span>before <span class="token punctuation">&#123;</span>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>    left<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    top<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    transform<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    letter<span class="token operator">-</span>spacing<span class="token operator">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>    user<span class="token operator">-</span>select<span class="token operator">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">.</span>run <span class="token punctuation">&#123;</span>      padding<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>      <span class="token operator">-</span>moz<span class="token operator">-</span>user<span class="token operator">-</span>select<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>user<span class="token operator">-</span>select<span class="token operator">:</span> none<span class="token punctuation">;</span>      user<span class="token operator">-</span>select<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token operator">-</span>o<span class="token operator">-</span>user<span class="token operator">-</span>select<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token operator">-</span>ms<span class="token operator">-</span>user<span class="token operator">-</span>select<span class="token operator">:</span> none<span class="token punctuation">;</span>      background<span class="token operator">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span><span class="token function">gradient</span><span class="token punctuation">(</span>        linear<span class="token punctuation">,</span>        left top<span class="token punctuation">,</span>        right top<span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> #<span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> #<span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> #fff<span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> #<span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> #<span class="token number">333</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>background<span class="token operator">-</span>clip<span class="token operator">:</span> text<span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>text<span class="token operator">-</span>fill<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>text<span class="token operator">-</span>size<span class="token operator">-</span>adjust<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>animation<span class="token operator">:</span> slidetounlock <span class="token number">3</span>s infinite<span class="token punctuation">;</span>      animation<span class="token operator">:</span> slidetounlock <span class="token number">3</span>s infinite<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>run<span class="token operator">-</span>no<span class="token operator">-</span>slider<span class="token punctuation">&#123;</span>      background<span class="token operator">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span><span class="token function">gradient</span><span class="token punctuation">(</span>        linear<span class="token punctuation">,</span>        left top<span class="token punctuation">,</span>        right top<span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> #<span class="token constant">F56C6C</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> #<span class="token constant">F56C6C</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> #fff<span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> #<span class="token constant">F56C6C</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        color<span class="token operator">-</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> #<span class="token constant">F56C6C</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>background<span class="token operator">-</span>clip<span class="token operator">:</span> text<span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>text<span class="token operator">-</span>fill<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>text<span class="token operator">-</span>size<span class="token operator">-</span>adjust<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>animation<span class="token operator">:</span> slidetounlock <span class="token number">3</span>s infinite<span class="token punctuation">;</span>      animation<span class="token operator">:</span> slidetounlock <span class="token number">3</span>s infinite<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>slider<span class="token operator">-</span>text<span class="token operator">-</span>after <span class="token punctuation">&#123;</span>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>    left<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    top<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    transform<span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>    color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>slider <span class="token punctuation">&#123;</span>    width<span class="token operator">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">%</span> <span class="token operator">-</span> #<span class="token punctuation">&#123;</span>$slider_button_width<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>el<span class="token operator">-</span>slider__runway <span class="token punctuation">&#123;</span>      margin<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>el<span class="token operator">-</span>slider__bar <span class="token punctuation">&#123;</span>      height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>      background<span class="token operator">-</span>color<span class="token operator">:</span> $color<span class="token punctuation">;</span>      border<span class="token operator">-</span>top<span class="token operator">-</span>left<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      border<span class="token operator">-</span>bottom<span class="token operator">-</span>left<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>el<span class="token operator">-</span>slider__runway <span class="token punctuation">&#123;</span>      height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>el<span class="token operator">-</span>slider__button<span class="token operator">-</span>wrapper <span class="token punctuation">&#123;</span>      top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      width<span class="token operator">:</span> $slider_button_width<span class="token punctuation">;</span>      height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>      margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token punctuation">(</span>$slider_button_width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>        transform<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>el<span class="token operator">-</span>slider__button <span class="token punctuation">&#123;</span>      width<span class="token operator">:</span> $slider_button_width<span class="token punctuation">;</span>      height<span class="token operator">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>      border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      border<span class="token operator">-</span>color<span class="token operator">:</span> #dcdfe6<span class="token punctuation">;</span>      <span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>        transform<span class="token operator">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>el<span class="token operator">-</span>slider__button<span class="token punctuation">.</span>dragging<span class="token punctuation">,</span>    <span class="token punctuation">.</span>el<span class="token operator">-</span>slider__button<span class="token punctuation">.</span>hover<span class="token punctuation">,</span>    <span class="token punctuation">.</span>el<span class="token operator">-</span>slider__button<span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>      <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token operator">:</span> none <span class="token operator">!</span>important<span class="token punctuation">;</span>      transform<span class="token operator">:</span> none <span class="token operator">!</span>important<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>el<span class="token operator">-</span>slider__runway<span class="token punctuation">.</span>disabled <span class="token punctuation">.</span>el<span class="token operator">-</span>slider__button<span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>      cursor<span class="token operator">:</span> grab <span class="token operator">!</span>important<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>icon<span class="token operator">-</span>arrow<span class="token operator">-</span>right <span class="token punctuation">&#123;</span>      line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token punctuation">(</span>$slider_button_height <span class="token operator">-</span> <span class="token number">4</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>      font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>      color<span class="token operator">:</span> #<span class="token number">4</span>c4c4c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">deep</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span>icon<span class="token operator">-</span>success <span class="token punctuation">&#123;</span>      line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token punctuation">(</span>$slider_button_height <span class="token operator">-</span> <span class="token number">4</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>      font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      color<span class="token operator">:</span> $color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>@<span class="token operator">-</span>webkit<span class="token operator">-</span>keyframes slidetounlock <span class="token punctuation">&#123;</span>  from <span class="token punctuation">&#123;</span>    background<span class="token operator">-</span>position<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">70</span>px <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  to <span class="token punctuation">&#123;</span>    background<span class="token operator">-</span>position<span class="token operator">:</span> <span class="token number">80</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>no<span class="token operator">-</span>slider<span class="token punctuation">&#123;</span>  animation<span class="token operator">:</span> shake <span class="token number">800</span>ms ease<span class="token operator">-</span><span class="token keyword">in</span><span class="token operator">-</span>out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@keyframes shake <span class="token punctuation">&#123;</span>    <span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span> transform<span class="token operator">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span>px<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token number">20</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span> transform<span class="token operator">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">2</span>px<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token number">30</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span> transform<span class="token operator">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span>px<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token number">40</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span> transform<span class="token operator">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">4</span>px<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token number">50</span><span class="token operator">%</span> <span class="token punctuation">&#123;</span> transform<span class="token operator">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span>px<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入</span><span class="token keyword">import</span> slider <span class="token keyword">from</span> <span class="token string">'./slider'</span><span class="token comment">// 使用</span> <span class="token operator">&lt;</span>slider v<span class="token operator">-</span>bind<span class="token operator">:</span>reset<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">"isResetSlider"</span> <span class="token operator">:</span>noReset<span class="token operator">=</span><span class="token string">"isNoReset"</span> @value<span class="token operator">=</span><span class="token string">"sliderValue"</span> @success<span class="token operator">=</span><span class="token string">"sliderSuccess"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slider<span class="token operator">></span>components<span class="token operator">:</span><span class="token punctuation">&#123;</span>  slider<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    isResetSlider<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    isSeccess<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    sliderVal<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    isNoReset<span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 滑动验证</span>  <span class="token function">sliderSuccess</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isSeccess <span class="token operator">=</span> val  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">sliderValue</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sliderVal <span class="token operator">=</span> val  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sliderVal <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isNoReset <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isNoReset <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isSeccess<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isResetSlider <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isSeccess <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请滑动滑块验证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>效果截图</li><li>滑动验证-未滑动</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-%E6%9C%AA%E6%BB%91%E5%8A%A8.jpg" alt="滑动验证-未滑动"><br>滑动验证-未滑动</p><ul><li>滑动验证-滑动中</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-%E6%BB%91%E5%8A%A8%E4%B8%AD.jpg" alt="滑动验证-滑动中"><br>滑动验证-滑动中</p><ul><li>滑动验证-滑动成功</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-%E6%BB%91%E5%8A%A8%E6%88%90%E5%8A%9F.jpg" alt="滑动验证-滑动成功"><br>滑动验证-滑动成功</p><ul><li>滑动验证GIF</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81-DIF.gif" alt="滑动验证GIF"><br>滑动验证GIF</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件&quot;&gt;&lt;a href=&quot;#基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件&quot; class=&quot;headerlink&quot; title=&quot;基于Element-Ui的“</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="Element-ui" scheme="http://damao2250.com/tags/Element-ui/"/>
    
  </entry>
  
  <entry>
    <title>移动端1px问题</title>
    <link href="http://damao2250.com/2021/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/"/>
    <id>http://damao2250.com/2021/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-08T01:25:00.000Z</published>
    <updated>2021-10-04T04:14:18.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么会出现？"><a href="#为什么会出现？" class="headerlink" title="为什么会出现？"></a>为什么会出现？</h1><ul><li><p>首先了解两个像素：设备的 物理像素[设备像素] &amp; 虚拟像素[CSS像素] &amp; 逻辑像素[设备独立像素]</p><ul><li>物理像素：移动设备出厂时，不同设备的屏幕自带的不同屏幕像素，也称硬件像素；</li><li>虚拟像素：即css中记录的像素</li><li>逻辑像素：计算机坐标系统中的一个点，是由程序使用的虚拟像素(比如: CSS 像素)，这个点没有固定大小，越小越清晰，可由相关系统转换为物理像素</li></ul></li><li><p>devicePixelRatio（DPR）：反应css中的像素与设备的像素比</p><ul><li>DPR为设备像素（物理像素）和设备独立像素（逻辑像素）的比例</li><li>DPR = 物理像素 / 独立设备像素</li></ul></li><li><p>1px变粗的原因：</p><ul><li>viewport的设置和屏幕物理分辨率是按比例而不是相同的. 移动端window对象有个devicePixelRatio属性,它表示设备物理像素和css像素的比例, 在retina屏的iphone手机上, 这个值为2或3,css里写的1px长度映射到物理像素上就有2px或3px那么长<h1 id="如何解决（最佳解决方案）？"><a href="#如何解决（最佳解决方案）？" class="headerlink" title="如何解决（最佳解决方案）？"></a>如何解决（最佳解决方案）？</h1></li></ul></li><li><p>transform: scale(0.5) 方案</p><ul><li>设置height: 1px，根据媒体查询结合transform缩放为相应尺寸<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span>1px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span>0 0<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用::after和::befor,设置border-bottom：1px solid #000,然后在缩放-webkit-transform: scaleY(0.5);可以实现两根边线的需求<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div::after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span>1px solid #000<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用::after设置border：1px solid #000; width:200%; height:200%,然后再缩放scaleY(0.5); 优点可以实现圆角，京东就是这么实现的，缺点是按钮添加active比较麻烦<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.div::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #bfbfbf<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">,</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">,</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> top left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>媒体查询 + transfrom<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 2倍屏 */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span> 2.0<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.border-bottom::after</span> <span class="token punctuation">&#123;</span>        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 3倍屏 */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span> 3.0<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.border-bottom::after</span> <span class="token punctuation">&#123;</span>        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.33<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.33<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么会出现？&quot;&gt;&lt;a href=&quot;#为什么会出现？&quot; class=&quot;headerlink&quot; title=&quot;为什么会出现？&quot;&gt;&lt;/a&gt;为什么会出现？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先了解两个像素：设备的 物理像素[设备像素] &amp;amp; 虚拟像素[CSS像素]</summary>
      
    
    
    
    <category term="移动端" scheme="http://damao2250.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="移动端1px" scheme="http://damao2250.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px/"/>
    
  </entry>
  
  <entry>
    <title>如何快速给类、函数和变量命名</title>
    <link href="http://damao2250.com/2021/03/26/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%BB%99%E7%B1%BB%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D/"/>
    <id>http://damao2250.com/2021/03/26/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%BB%99%E7%B1%BB%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D/</id>
    <published>2021-03-26T01:25:00.000Z</published>
    <updated>2021-10-04T04:05:52.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-HC-LC-命名法"><a href="#A-HC-LC-命名法" class="headerlink" title="A/HC/LC 命名法"></a>A/HC/LC 命名法</h1><h2 id="P-A-HC-LC是什么"><a href="#P-A-HC-LC是什么" class="headerlink" title="(P)A/HC/LC是什么"></a>(P)A/HC/LC是什么</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">prefix<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">action</span> <span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">+</span> high <span class="token function">context</span> <span class="token punctuation">(</span><span class="token constant">HC</span><span class="token punctuation">)</span> <span class="token operator">+</span> low context<span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">LC</span><span class="token punctuation">)</span><span class="token comment">// 前缀 + 动作 + 高语境 + 低语境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h3><ul><li>prefix（前缀）增加函数的可读性<h3 id="is-是什么"><a href="#is-是什么" class="headerlink" title="- is (是什么)"></a>- is (是什么)</h3></li><li>描述当前上下文（语境）的特征或状态,通常为布尔值。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token keyword">const</span> isBlue <span class="token operator">=</span> <span class="token punctuation">(</span> color <span class="token operator">===</span> <span class="token string">'blue'</span> <span class="token punctuation">)</span> <span class="token comment">// 特征</span><span class="token keyword">const</span> isPresent <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 状态</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isBlue <span class="token operator">&amp;&amp;</span> isPresent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>‘Blue is present’<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="has-有什么"><a href="#has-有什么" class="headerlink" title="- has (有什么)"></a>- has (有什么)</h3></li><li>描述当前上下文（语境）是否具有某个特定的值或状态，通常为布尔值<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* Bad */</span><span class="token keyword">const</span> isProductsExist <span class="token operator">=</span> <span class="token punctuation">(</span>productsCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> areProductsPresent <span class="token operator">=</span> <span class="token punctuation">(</span>productsCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">/* Good */</span><span class="token keyword">const</span> hasProducts <span class="token operator">=</span> <span class="token punctuation">(</span>productsCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="should-应该做什么"><a href="#should-应该做什么" class="headerlink" title="- should (应该做什么)"></a>- should (应该做什么)</h3></li><li>映射具有明确动作的条件语句，通常为布尔值<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shouldUpdateUrl</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> expectedUrl</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>url <span class="token operator">!==</span> expectedUrl<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="函数的核心是-Actions"><a href="#函数的核心是-Actions" class="headerlink" title="函数的核心是 Actions"></a>函数的核心是 <code>Actions</code></h2><ul><li>Actions（动作），是函数名的动词部分，描述这个函数要做什么</li></ul><h3 id="get-获取数据"><a href="#get-获取数据" class="headerlink" title="- get (获取数据)"></a>- get (获取数据)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 快速获取内部数据</span><span class="token keyword">function</span> <span class="token function">getFruitsCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fruits<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-设置数据"><a href="#set-设置数据" class="headerlink" title="- set (设置数据)"></a>- set (设置数据)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 将某个变量的值由A变为B</span><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">setFruits</span><span class="token punctuation">(</span><span class="token parameter">nextFruits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fruits <span class="token operator">=</span> nextFruits<span class="token punctuation">&#125;</span><span class="token function">setFruits</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reset-还原数据"><a href="#reset-还原数据" class="headerlink" title="- reset (还原数据)"></a>- reset (还原数据)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 将某个变量的值设为其初始值或状态</span><span class="token keyword">let</span> initialFruits <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">let</span> fruits <span class="token operator">=</span> initialFruits<span class="token function">setFruits</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token keyword">function</span> <span class="token function">resetFruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fruits <span class="token operator">=</span> initialFruits<span class="token punctuation">&#125;</span><span class="token function">resetFruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fetch-请求数据"><a href="#fetch-请求数据" class="headerlink" title="- fetch (请求数据)"></a>- fetch (请求数据)</h3><ul><li>通常为一个比较耗时的操作，如：异步请求<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token parameter">postCount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>‘https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>dev<span class="token operator">/</span>posts'<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>…<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="remove-移除数据"><a href="#remove-移除数据" class="headerlink" title="- remove (移除数据)"></a>- remove (移除数据)</h3><ul><li>逻辑上的删除，数据可能只是被移动某个特定的地方了</li><li>假设页面有个搜索过滤器，可以通过 <code>removeFilter</code> 来移除过滤器的某个值，而不是 <code>deleteFilter</code><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">removeFilter</span><span class="token punctuation">(</span><span class="token parameter">filterName<span class="token punctuation">,</span> filters</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> filters<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=></span> name <span class="token operator">!==</span> filterName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> selectedFilters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token string">'availability'</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">]</span><span class="token function">removeFilter</span><span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">,</span> selectedFilters<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="delete-删除数据"><a href="#delete-删除数据" class="headerlink" title="- delete (删除数据)"></a>- delete (删除数据)</h3></li><li>将某个数据彻底删除, 是物理上的删除.</li><li>假设你是一个文章审核员, 看到一篇不合规的文章, 当你想彻底删除这篇文章并点击 删除文章 按钮的时候, 执行的应该是一个 deletePost 的删除动作, 而不是 removePost<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deletePost</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> database<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="compose-组合数据"><a href="#compose-组合数据" class="headerlink" title="- compose (组合数据)"></a>- compose (组合数据)</h3></li><li>基于现有的数据来创建一个新的数据, 适用于字符串、对象和函数<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">composePageUrl</span><span class="token punctuation">(</span><span class="token parameter">pageName<span class="token punctuation">,</span> pageId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> $<span class="token punctuation">&#123;</span>pageName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>$<span class="token punctuation">&#123;</span>pageId<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="handle-处理数据"><a href="#handle-处理数据" class="headerlink" title="- handle (处理数据)"></a>- handle (处理数据)</h3><ul><li>处理某个动作, 通常用来声明一个回调函数<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">handleLinkClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Clicked a link!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleLinkClick<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最后是-Context"><a href="#最后是-Context" class="headerlink" title="最后是 Context"></a>最后是 Context</h2></li><li>context 是一个域, 指代当前函数的执行环境</li><li>函数通常是处理某件事的一个动作, 所以注明函数所属的域, 或者至少注明一个预期的数据类型是很重要的<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 基于内置方法的纯函数 */</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">predicate<span class="token punctuation">,</span> list</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/* 确切的表明这个函数是处理 posts 的 */</span><span class="token keyword">function</span> <span class="token function">getRecentPosts</span><span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">filter</span><span class="token punctuation">(</span>posts<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> post<span class="token punctuation">.</span>date <span class="token operator">===</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>一些编程语言允许你省略 context, 比如在 JavaScript 中 filter 方法只存在于数组上, 所以没必要给函数添加 context.</li></ul><h2 id="综上总结"><a href="#综上总结" class="headerlink" title="综上总结"></a>综上总结</h2><table><thead><tr><th align="left">Name</th><th>Prefix</th><th>Action(A)</th><th>High context(HC)</th><th>Low context(LC)</th></tr></thead><tbody><tr><td align="left">getPost</td><td></td><td>get</td><td>Post</td><td></td></tr><tr><td align="left">getPostData</td><td></td><td>get</td><td>Post</td><td>Data</td></tr><tr><td align="left">handleClickOutside</td><td></td><td>handle</td><td>Click</td><td>Outside</td></tr><tr><td align="left">shouldDisplayMessage</td><td>should</td><td>Display</td><td>Message</td><td></td></tr></tbody></table><h2 id="提高代码可读性的变量命名技巧参考"><a href="#提高代码可读性的变量命名技巧参考" class="headerlink" title="提高代码可读性的变量命名技巧参考"></a>提高代码可读性的变量命名技巧参考</h2><ol><li>遵循 S-I-D 原则<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* Bad */</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// "a" 没有什么含义</span><span class="token keyword">const</span> isPaginatable <span class="token operator">=</span> <span class="token punctuation">(</span>postsCount <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// "Paginatable" 听起来很不自然</span><span class="token keyword">const</span> shouldPaginatize <span class="token operator">=</span> <span class="token punctuation">(</span>postsCount <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// "Paginatize" 编造一个动词更加荒谬!</span><span class="token comment">/* Good */</span><span class="token keyword">const</span> postsCount <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">const</span> hasPagination <span class="token operator">=</span> <span class="token punctuation">(</span>postsCount <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">const</span> shouldDisplayPagination <span class="token operator">=</span> <span class="token punctuation">(</span>postsCount <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// alternatively</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>避免缩写</li><li>不要使用缩写形式, 这会降低代码可读性. 起一个简短并且语义化的名称可能有点难度, 但是不要让这成为你使用缩写的借口<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* Bad */</span><span class="token keyword">const</span> <span class="token function-variable function">onItmClk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Good */</span><span class="token keyword">const</span> <span class="token function-variable function">onItemClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>避免重复的上下文</li><li>如果命名中的 context 存在与否不会降低其可读性的话, 最好还是移除它:<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MenuItem</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 命名中的 "MenuItem" 与类名的域重复 */</span>  <span class="token function-variable function">handleMenuItemClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>  <span class="token comment">/* 去掉 "MenuItem", 看起来更简洁 */</span>  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>应该映射预期结果<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* Bad */</span><span class="token keyword">const</span> isEnabled <span class="token operator">=</span> <span class="token punctuation">(</span>itemsCount <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>Button disabled<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">!</span>isEnabled<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment">/* Good */</span><span class="token keyword">const</span> isDisabled <span class="token operator">=</span> <span class="token punctuation">(</span>itemsCount <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>Button disabled<span class="token operator">=</span><span class="token punctuation">&#123;</span>isDisabled<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>考虑单数和复数形式</li><li>因为一个变量可能拥有单个或多个值, 所以命名的时候也要考虑单数和复数形式.</li></ul><h2 id="参考原文链接"><a href="#参考原文链接" class="headerlink" title="参考原文链接"></a><a href="https://betterprogramming.pub/a-useful-framework-for-naming-your-classes-functions-and-variables-e7d186e3189f">参考原文链接</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-HC-LC-命名法&quot;&gt;&lt;a href=&quot;#A-HC-LC-命名法&quot; class=&quot;headerlink&quot; title=&quot;A/HC/LC 命名法&quot;&gt;&lt;/a&gt;A/HC/LC 命名法&lt;/h1&gt;&lt;h2 id=&quot;P-A-HC-LC是什么&quot;&gt;&lt;a href=&quot;#P-A-H</summary>
      
    
    
    
    <category term="项目规范" scheme="http://damao2250.com/categories/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="项目规范" scheme="http://damao2250.com/tags/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Nginx基本功能及配置</title>
    <link href="http://damao2250.com/2021/02/26/Nginx%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://damao2250.com/2021/02/26/Nginx%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%8F%8A%E9%85%8D%E7%BD%AE/</id>
    <published>2021-02-26T01:25:00.000Z</published>
    <updated>2021-10-04T06:04:46.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx的基本功能及配置"><a href="#Nginx的基本功能及配置" class="headerlink" title="Nginx的基本功能及配置"></a>Nginx的基本功能及配置</h1><h2 id="查找-Nginx-安装目录"><a href="#查找-Nginx-安装目录" class="headerlink" title="查找 Nginx 安装目录"></a>查找 Nginx 安装目录</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">ps aux | grep Nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="默认的-nginx-配置文件-nginx-conf-内容"><a href="#默认的-nginx-配置文件-nginx-conf-内容" class="headerlink" title="默认的 nginx 配置文件 nginx.conf 内容"></a>默认的 nginx 配置文件 nginx.conf 内容</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#user  nobody;worker_processes  1;#error_log  logs&#x2F;error.log;#error_log  logs&#x2F;error.log  notice;#error_log  logs&#x2F;error.log  info;#pid        logs&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       mime.types;    default_type  application&#x2F;octet-stream;    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    #access_log  logs&#x2F;access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server &#123;        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs&#x2F;host.access.log  main;        location &#x2F; &#123;            root   html;            index  index.html index.htm;        &#125;        #error_page  404              &#x2F;404.html;        # redirect server error pages to the static page &#x2F;50x.html        #        error_page   500 502 503 504  &#x2F;50x.html;        location &#x3D; &#x2F;50x.html &#123;            root   html;        &#125;        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ &#123;        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;        #&#125;        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ &#123;        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;        #    include        fastcgi_params;        #&#125;        # deny access to .htaccess files, if Apache&#39;s document root        # concurs with nginx&#39;s one        #        #location ~ &#x2F;\.ht &#123;        #    deny  all;        #&#125;    &#125;    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server &#123;    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location &#x2F; &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;    # HTTPS server    #    #server &#123;    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location &#x2F; &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nginx-文件结构"><a href="#nginx-文件结构" class="headerlink" title="nginx 文件结构"></a>nginx 文件结构</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">...              #全局块events &#123;         #events块  ...&#125;http      #http块&#123;    ...   #http全局块    server        #server块    &#123;         ...       #server全局块        location [PATTERN]   #location块        &#123;            ...        &#125;        location [PATTERN]         &#123;            ...        &#125;    &#125;    server    &#123;      ...    &#125;    ...     #http全局块&#125;### 1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。### 2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。### 3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。### 4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。### 5、location块：配置请求的路由，以及各种页面的处理情况。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx的基本功能及配置&quot;&gt;&lt;a href=&quot;#Nginx的基本功能及配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx的基本功能及配置&quot;&gt;&lt;/a&gt;Nginx的基本功能及配置&lt;/h1&gt;&lt;h2 id=&quot;查找-Nginx-安装目录&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Linux" scheme="http://damao2250.com/categories/Linux/"/>
    
    
    <category term="Nginx" scheme="http://damao2250.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>关于typescript改造旧项目的一些坑</title>
    <link href="http://damao2250.com/2021/02/26/%E5%85%B3%E4%BA%8Etypescript%E6%94%B9%E9%80%A0%E6%97%A7%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://damao2250.com/2021/02/26/%E5%85%B3%E4%BA%8Etypescript%E6%94%B9%E9%80%A0%E6%97%A7%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</id>
    <published>2021-02-26T01:25:00.000Z</published>
    <updated>2021-10-03T17:11:53.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="‘-‘-引入组件报红问题"><a href="#‘-‘-引入组件报红问题" class="headerlink" title="‘@/‘ 引入组件报红问题"></a>‘@/‘ 引入组件报红问题</h2><ul><li>使用 ‘@/xxx/xxx’ 引入组件，vetur报红 找不到module，但是可以正常运行问题</li><li>解决办法：1.把项目目录放工作区根目录；2.项目一定排列在第一位<h2 id="引入第三方包报红"><a href="#引入第三方包报红" class="headerlink" title="引入第三方包报红"></a>引入第三方包报红</h2></li><li>引入第三方库 报红找不到module，无法正常使用包，如qs、jQuery</li><li>解决办法1：使用@types进行包管理，然后正常引入<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm i @types<span class="token operator">/</span>qs<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>解决办法2：有些包不能用@types管理，自己写声明 XX.d.ts  不推荐</li></ul><h2 id="router配置里引入component组件的时候必须添加-vue后缀"><a href="#router配置里引入component组件的时候必须添加-vue后缀" class="headerlink" title="router配置里引入component组件的时候必须添加.vue后缀"></a>router配置里引入component组件的时候必须添加.vue后缀</h2><h2 id="Element表单验证报红问题"><a href="#Element表单验证报红问题" class="headerlink" title="Element表单验证报红问题"></a>Element表单验证报红问题</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 报错信息如下</span><span class="token comment">// Property 'validate' does not exist on type 'Vue | Element | Vue[] | Element[]'.</span><span class="token comment">// Property 'validate' does not exist on type 'Vue'.</span><span class="token comment">// 解决办法</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Form <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>loginForm <span class="token keyword">as</span> Form <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">valid<span class="token operator">:</span> boolean</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果不引入Form，把Form换成any也可以，但是typescript会报警告⚠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用axios封装的请求，然后解构请求结果报错<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 报错信息</span><span class="token comment">// Property 'XXX' does not exist on type 'AxiosResponse&lt;any>'</span><span class="token comment">// 解决办法</span><span class="token comment">// 新建axios.d.ts文案，添加如下内容，重启项目</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>declare module <span class="token string">'axios'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">AxiosInstance</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>@typescript<span class="token operator">/</span>esline 报错 xxx_x is not <span class="token keyword">in</span> camel <span class="token keyword">case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关闭esline驼峰校验"><a href="#关闭esline驼峰校验" class="headerlink" title="关闭esline驼峰校验"></a>关闭esline驼峰校验</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在.eslinetrc.js中配置如下：</span>rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token string">'@typescript-eslint/camelcase'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TS使用”require”报错"><a href="#TS使用”require”报错" class="headerlink" title="TS使用”require”报错"></a>TS使用”require”报错</h2></li><li>提示报错信息：Cannot find name ‘require’. Do you need to install type definitions for node? Try ‘npm i –save-dev @types/node’</li><li>解决方案：<ul><li>1.安装@types/node，npm i –save-dev @types/node；</li><li>2.在tsconfig.json中的compilerOptions中的types添加”node”；</li><li>3.在使用require前面添加declare var require:any<h2 id="TS使用”this-xxx”报错"><a href="#TS使用”this-xxx”报错" class="headerlink" title="TS使用”this.xxx”报错"></a>TS使用”this.xxx”报错</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用"this.$router.push("/xxx")" => Property '$router' does not exist on type 'Experiment'.</span><span class="token comment">// 解决：</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/xxx"</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span><span class="token parameter">mainVideo</span> <span class="token operator">=></span> Property <span class="token string">'clientWidth'</span> does not exist on type <span class="token string">'Vue | Element | Vue[] | Element[]'</span><span class="token punctuation">.</span><span class="token comment">// Property 'clientWidth' does not exist on type 'Vue'</span><span class="token comment">// 解决：</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mainVideo <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>clientWidth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;‘-‘-引入组件报红问题&quot;&gt;&lt;a href=&quot;#‘-‘-引入组件报红问题&quot; class=&quot;headerlink&quot; title=&quot;‘@/‘ 引入组件报红问题&quot;&gt;&lt;/a&gt;‘@/‘ 引入组件报红问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 ‘@/xxx/xxx’ 引入组件，ve</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="typescript" scheme="http://damao2250.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3的setup函数</title>
    <link href="http://damao2250.com/2020/12/30/Vue3%E7%9A%84setup%E5%87%BD%E6%95%B0/"/>
    <id>http://damao2250.com/2020/12/30/Vue3%E7%9A%84setup%E5%87%BD%E6%95%B0/</id>
    <published>2020-12-30T01:25:00.000Z</published>
    <updated>2021-10-04T06:08:57.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a>setup函数</h1><ul><li>setup用于定义变量和方法</li><li>ref用于声明简单数据类型，如：String Number Boolean</li><li>reactive用来声明复杂数据类型，如：Array Objec</li><li>是使用Composition API的入口<ul><li>Composition API的主要思想，将它们定义为从新的setup函数返回的JavaScript变量，而不是从组件的功能（如：data、methods、computed等）定义为对象的属性</li><li>Composition API 代替 Vue Mixins （解决命名冲突、隐式依赖、代码重用等问题）</li></ul></li><li>在生命周期beforeCreate前被调用（执行setup时，组件实例尚未被创建）</li><li>可以返回一个对象，这个对象的属性会被合并到渲染上下文，可以在模板中直接使用</li><li>也可以返回一个渲染函数，如：return () =&gt; h(‘div’, [count.value, object.foo])</li><li>在setup中没有this</li><li>接收props作为第一个参数，如果props为对象，可通过watchEffect监视其变化</li><li>接收context作为第二个参数，这个对象包含attrs、slots、emit三个属性</li><li>context非响应式，可以直接解构使用 setup(props,{attr,slots,emit}){}</li><li>执行setup函数时可以访问：props、attrs、slots、emit，不可以访问：data、computed、methods<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> toRefs<span class="token punctuation">,</span> isRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> defalut <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> String  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span> <span class="token parameter">props<span class="token punctuation">,</span> context</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不能直接解构</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 声明简单数据类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>valeu<span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否为ref创建出来的对象</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 声明复杂数据类型</span>    <span class="token keyword">let</span> <span class="token function-variable function">addOne</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span> <span class="token comment">// 想改变或获取值 必须 xxx.value</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Attribute(非响应式对象)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>    <span class="token comment">// 插槽(非响应式对象)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>slots<span class="token punctuation">)</span>    <span class="token comment">// 触发时间（方法）</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>emit<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 必须返回 模板中才能使用</span>      count<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> addOne    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;setup函数&quot;&gt;&lt;a href=&quot;#setup函数&quot; class=&quot;headerlink&quot; title=&quot;setup函数&quot;&gt;&lt;/a&gt;setup函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;setup用于定义变量和方法&lt;/li&gt;
&lt;li&gt;ref用于声明简单数据类型，如：Stri</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="Vue3" scheme="http://damao2250.com/tags/Vue3/"/>
    
    <category term="setup" scheme="http://damao2250.com/tags/setup/"/>
    
  </entry>
  
</feed>
