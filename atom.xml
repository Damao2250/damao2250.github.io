<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damao</title>
  
  <subtitle>乐躬耕于陇亩兮，吾爱吾庐。聊寄傲于琴书兮，以待天时。</subtitle>
  <link href="http://damao2250.com/atom.xml" rel="self"/>
  
  <link href="http://damao2250.com/"/>
  <updated>2022-03-16T08:35:02.603Z</updated>
  <id>http://damao2250.com/</id>
  
  <author>
    <name>Damao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我喜欢你，一如心念心</title>
    <link href="http://damao2250.com/2022/03/16/%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0%EF%BC%8C%E4%B8%80%E5%A6%82%E5%BF%83%E5%BF%B5%E5%BF%83/"/>
    <id>http://damao2250.com/2022/03/16/%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0%EF%BC%8C%E4%B8%80%E5%A6%82%E5%BF%83%E5%BF%B5%E5%BF%83/</id>
    <published>2022-03-16T02:30:04.000Z</published>
    <updated>2022-03-16T08:35:02.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我喜欢你，一如心念心"><a href="#我喜欢你，一如心念心" class="headerlink" title="我喜欢你，一如心念心"></a>我喜欢你，一如心念心</h1><p>“生活啥子时候给过我十八岁</p><p>我奋力以赴的终点，还不如你的起点</p><p>喜欢一个人的时候，哪个又不是烂命一条</p><p>河里的虾和海里的虾能生活在一起吗</p><p>我喜欢你！！是同学之间的喜欢，是同桌之间的喜欢，也是十七十八岁的时候真心实意的喜欢！！我喜欢你，那你呢？”</p><p>看到<a href="https://foamzou.com/2020/11/29/%e9%a3%8e%e7%8a%ac%e5%b0%91%e5%b9%b4%e7%9a%84%e5%a4%a9%e7%a9%ba-%e5%96%9c%e6%ac%a2%e7%9a%84%e8%af%ad%e5%bd%95/">这篇文章</a>的开头突然有点感慨</p><p>喜欢是什么？总不能是乍见之欢，在我的经历里，喜欢是一座城市通往另一座城市的公交车，是那一段漫长但又觉得短暂的路程上美好的设想及路上景色，是两杯星巴克以及一个因为矜持而没有吃完的小cake，是一张留下瞬间回忆并时不时拿出来回味的照片，是三言两语的闲聊，是场喜欢的电影…</p><p>在大多数人的认知里，十八岁应该是青春最好的时刻，小的时候一直幻想自己的十八岁，但记忆里已全然不记得自己幻想的模样了。但此时，自己的十八已经远离自己好些个年头了，印象中那年还在奋力准备高考吧，是一个奋斗的时刻，但后来结果也不尽人意，虽然淡然面对，心里却也是有一丝丝愧意。</p><p>其实二十岁开头那几年，可能才是青春该有的样子，前无忧后无虑，去走走向往的地方，去看看喜欢的人，去学想学的东西，去做想做的事情，也喜欢漫无目的地走，去看喜欢的书，去温习看了无数遍的电影，体验过早出晚归却很充实的日子。匆匆而过的日子，像是刻画在小册子上的漫画，不经意间翻动，竟发现许多感动自己的情节。</p><p>在往后的那些日子与喜欢的你同在，生活的每一刻，都在感动着我们，在奋力前行，期许不辜负日子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我喜欢你，一如心念心&quot;&gt;&lt;a href=&quot;#我喜欢你，一如心念心&quot; class=&quot;headerlink&quot; title=&quot;我喜欢你，一如心念心&quot;&gt;&lt;/a&gt;我喜欢你，一如心念心&lt;/h1&gt;&lt;p&gt;“生活啥子时候给过我十八岁&lt;/p&gt;
&lt;p&gt;我奋力以赴的终点，还不如你的起点&lt;</summary>
      
    
    
    
    <category term="碎碎念" scheme="http://damao2250.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="http://damao2250.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>利用Chrome开发者工具进行网页长截图</title>
    <link href="http://damao2250.com/2022/03/10/%E5%88%A9%E7%94%A8Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/"/>
    <id>http://damao2250.com/2022/03/10/%E5%88%A9%E7%94%A8Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/</id>
    <published>2022-03-10T03:37:33.000Z</published>
    <updated>2022-03-10T03:49:48.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用Chrome开发者工具进行网页长截图"><a href="#利用Chrome开发者工具进行网页长截图" class="headerlink" title="利用Chrome开发者工具进行网页长截图"></a>利用Chrome开发者工具进行网页长截图</h1><h2 id="打开开发者工具（F12）"><a href="#打开开发者工具（F12）" class="headerlink" title="打开开发者工具（F12）"></a>打开开发者工具（F12）</h2><h2 id="按下-Ctrl-Shift-P"><a href="#按下-Ctrl-Shift-P" class="headerlink" title="按下 Ctrl + Shift + P"></a>按下 Ctrl + Shift + P</h2><ul><li><p>输入命令：Capture full size screenshot</p></li><li><p>敲下回车，Chrome就会自动截取整个网页内容并保存至本地（网页过长的时候需要等一会儿）</p></li><li><p>输入命令：Capture area screenshot</p></li><li><p>敲下回车，可以框选想截屏的区域</p></li><li><p>输入命令：Capture后，会提示更多截屏的方式，可根据需要进行选择</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;利用Chrome开发者工具进行网页长截图&quot;&gt;&lt;a href=&quot;#利用Chrome开发者工具进行网页长截图&quot; class=&quot;headerlink&quot; title=&quot;利用Chrome开发者工具进行网页长截图&quot;&gt;&lt;/a&gt;利用Chrome开发者工具进行网页长截图&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="小技巧" scheme="http://damao2250.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Chrome网页长截图" scheme="http://damao2250.com/tags/Chrome%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>2021-年终总结</title>
    <link href="http://damao2250.com/2021/12/31/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://damao2250.com/2021/12/31/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T07:18:46.000Z</published>
    <updated>2022-01-10T10:36:50.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么写？"><a href="#为什么写？" class="headerlink" title="为什么写？"></a>为什么写？</h2><ul><li>History does not repeat itself, but it does often rhyme.</li><li>这句话不知道该怎么翻译才好，看了很多翻译，总觉得get不到那个点，我觉得倒不如翻译成这样：不重来的旅程，却有着重样的境遇。境遇好与坏，岂敢断言？如果不回顾旅程，细数好坏，那明天是否也会走同样的路？好的一样好，坏的同样再继续。其实人真正的成长，可能就在一瞬间，在那么一个你不经意的瞬间，“嗖”的一下，就成长了，可能你还没察觉，可能你也不知道。但所谓的“成长”，没有什么严明的界定，大概是你懂得了某件事情，也大概是你潜意识里多了一个念想。但是当你没有回顾自己的过去时，你不知道过去的好与坏，更不知道其实成长就在不经意的瞬间。2021年，是一个欢与悲共存的得一年，人生百态，尽显其中，所以趁着这个2021的最后几天，总结一下2021的得与失，总结经验之余，同样盼望未来的路会走得更加顺畅。（其实写的时候心情很复杂，时而沉重，时而欢快，如果您觉得看起来比较困难，那您大可以看到这儿就结束了，虽然我知道没人看，但是还是要温馨提示一下，haha…）</li><li>老实说，决定提笔前也是想了很多，思绪万千，情绪也是很纠结，该不该写？该怎么写？写给谁看？写了自己就能得到什么吗？其实大概率是并没有！只是情感刚好到达了某个点，就想写点东西慰藉自己，以至于不让自己觉得一整天都在浑浑噩噩地过日子，一整天都在想些已经发生却又不尽人意的事情，一整天都在无心向上的样子。所以，所谓的“总结”不一定是总结，可能在某种程度上来说是一种倾诉，从未奢望“总结”能给自己带来意外的收获，但是希望能让自己“倾诉”出来，让更多的思绪趋向于积极向上。</li></ul><h2 id="回顾预告（2021-12-23，微信朋友圈）"><a href="#回顾预告（2021-12-23，微信朋友圈）" class="headerlink" title="回顾预告（2021-12-23，微信朋友圈）"></a>回顾预告（2021-12-23，微信朋友圈）</h2><ul><li>夫风生于地，起于青蘋之末。着实慵懒了，抓住2021的尾巴来个年度总结吧！读《掌控习惯》时，作者James Clear提到他的年终总结是回答了三个问题：1.今年什么事做得比较好； 2.今年哪些事做得不太好； 3.我学到了什么。那就来个预告吧，12月31日damao2250.github.io见！</li></ul><h2 id="总结正文"><a href="#总结正文" class="headerlink" title="总结正文"></a>总结正文</h2><ul><li><p>似乎这一整年的话题都离不开COVID-19，不知不觉“抗疫运动”已经持续了两年，还记得最初的记忆是2019年香港出现暴乱，随后2019年末就出现疫情，所有药店口罩被“疯抢”，库存清零。曾经很反感带口罩的我，也渐渐习惯了出门就带口罩，健康码、行程码在生活中也担起重要角色，核酸检测更是少不了。可能对很多人来说，这一场疫情是机遇和挑战，但同样对大部分人来说，是一场生死存亡的竞速。但对于我来说，可能好坏比较均衡，因为这一整个过程还算是比较均衡，没有什么突出亮点，也没有什么“恨铁不成钢”，趋向于平稳，不过似乎时间跑赢了一点点。为什么这么说？其实没有什么具体事项，而是自我的整体感觉：一样的成绩，花费了更多的时间。</p><h3 id="先说两件能让我喜上眉梢的两件事"><a href="#先说两件能让我喜上眉梢的两件事" class="headerlink" title="先说两件能让我喜上眉梢的两件事"></a>先说两件能让我喜上眉梢的两件事</h3><ul><li>第一件就是2021年初（印象中应该是年初五了）我家和女朋友家两个家庭的人首次相聚，其实我想都没想过要这么快就到来了，感觉什么准备都没有就要父母相见了，甚至激动得有点睡不着。于是开始着手准备些礼物，毕竟大过年的，而且是第一次举家去女朋友家里。烟酒茶这些自然是少不了的了，让我印象最深的是买烟的事，为了图个吉利，那会儿就是要买“红双喜”牌的烟，但是恰逢过年，镇上所有的商店、批发部基本都卖完了，要么就只剩下散装，眼看着第二天就要去女朋友家了，所有礼品都准备好了，就还差烟。各种打电话、发微信，但凡认识跟烟有关的人都问了一遍，还是没有着落，忙活了一下午。无奈之下只能去区里看看了，心想着镇上没有，区里总该有了吧。于是我爸带着我往区里赶，先问几个大超市，再问几个批发部，得到的结果都是没有，那时天已经渐渐变暗了，还有些落日的余晖，似乎在暗示着“还有希望”，正好此时我爸想去一条小巷子里买个红包皮，然后顺便就问了下，结果居然有一条红双喜的烟，远远看到他脸上的笑容，他正向我招了一下手，我就知道有希望了。看到他拿了一个大红色得塑料袋装着烟健步走来，那种喜出望外的感觉，别提心里有多开心。他很笑着说：“我在那边买了一条烟”，然后又沉重的补了一句：“但是还差一条啊”。于是我俩“兵分两路”，穿梭在大街小巷里，逢店必问。最后我在大路边的一个小批发部找到了希望，顺利买到了第二条烟。此时天已经黑了，但是掩盖不住我们脸上的喜悦，买完后就赶紧往家的方向飞驰回去了。第二天早上，我早早就醒来了，看了下时间凌晨五点多，但是我已经睡不着了，起来收拾点自己的东西，因为我是打算去女朋友家住几天，然后跟她一起去广州的。但是爸妈他们此时还在睡梦中，此时的我已经在蹑手蹑脚的收拾自己的东西了，不敢发出太大动静，生怕这么早就吵醒他们。但没想到的是，没过多久他们也都起床了，他们也希望能出发早一点，于是天微亮，我们就已经出发了。至于女朋友那边，看得出来他们也是一大早的，忙前忙后的为我们的到来做了很多准备，每个人都很热情。那种其乐融融的氛围，可能是我这辈子也无法忘掉的一番景象。本来我还预想着会不会有那种尬聊的场景，但是看到他们茶前饭后的交谈，就大可不必担心了。两个家庭短短小半天的相聚，却汇聚了无数的情感跟欢乐，每次回想起来当时的情景，都是满满的幸福感。</li></ul><br /><ul><li>第二件就是五一的阳江之旅，说来其实算是四个家庭的户外活动了，我一家、我女朋友一家、我妹她男朋友一家、我哥他们一家，虽说这可能是我妹跟她男朋友的主场，但是一整个旅行下来，大家都还算玩得虽然没有比较尽兴的，但也还算勉强能过得去，除了路途有些遥远跟有些堵车外。其实这一次除了玩之外，我觉得最重要的一点就是大家这么多人能有机会聚在一起，特别是在疫情还存在的情况下，非常难得。期间最快乐的应该就是要返程那天的下午了，因为三天的路程中有大半时间是浪费在路上的，还有小部分时间是下雨天，而回程的那天下午天气还算是可以的，然后我们的目的地是海边。一开始的时候大家还很矜持，没有下海去玩，但后来逐渐放开之后，大家就开始一起慢慢“海上冲浪”了，玩得可起劲了。让我感觉开心的还有件事，就是带上了李思祈，这个小不点，欢乐也是挺多的，让我提前体检了“做家长”的感觉。</li></ul><h3 id="再说两件让我透骨酸心的事"><a href="#再说两件让我透骨酸心的事" class="headerlink" title="再说两件让我透骨酸心的事"></a>再说两件让我透骨酸心的事</h3><ul><li>2021-07-15，也就是六月初六的傍晚，一个让我久久不能接受的现实，奶奶与世长辞了。在这的前几天，看得出来每个人的心里都做着准备了，可是怎么办，多希望能帮奶奶分担点痛苦，每次看到她苍老的容颜，以前跟她聊天的种种场景浮现在眼前，以前还小的时候她对我的叮嘱，似乎有回响在耳旁。记得刚从广州赶回来的那晚，回到已是晚上十一点多，伯伯们怕我们饿，已经提前为我们热好饭菜，可是哪儿来的心思呀，一下车飞奔到奶奶那间熟悉的屋子，怎么就这样了，前几天看到她在视频里还帮我哥带着小孩呢，怎么一摔倒说起不来就起不来了呢！我轻轻的在她身旁叫了声奶奶，看着她用尽了全力回应了一生：“嗯”，很快又松了一口气，顿时眼角就湿润了，握着她皮包骨的双手，陪伴了她一会儿，她稍微安静了下来，没有反反复复的翻身，然后我才出去整理了下容装。此时最好的方式可能就剩下陪伴了，默默的坐在她床边，不知道做什么，也不能做点什么。持续到凌晨一点多，这是爸妈才赶回来到，看到他们焦脆的样子，估计心里也是很担心的了，回来从我妈的嘴里得知，我爸一路从广东开车赶回来，连休息都不舍得休息，有好几次自己边开车还边落着泪，我妈看不下去了，就找各种其他话题跟他聊，心里的牵挂在拉扯着他的心。那一晚，直到凌晨四点多我才回去眯了一会儿，一大早六点，天刚微亮，又起来了，只想着能多陪陪奶奶。可最后那一天还是来了，刚好六月初六，是我们那里重要的节日，每年的这一天都会宴请好多亲朋好友来家里做客，可今年我们做了个决定，取消宴请客人。可是这天依然来了很多人，但是他们都不是来做客的，都是看看望奶奶的。但大家都看得出来此时的奶奶已经没有什么意识了，翻来覆去，看着她很是痛苦的样子，感觉到很心酸。大家依然会说“没事的，会好转的，不用太担心”。持续到旁晚，客人也都走了，恢复了冷清清的。我在大门口坐着，思绪很凌乱，还没持续多久，突然大家都往奶奶的房间里跑，我也赶忙的转身跑进去，但此时已经绷不住了，我在人群外看到宁静而又慈祥的面孔，渐渐泪水迷糊了双眼，用上所有的劲咬住自己的嘴唇，没敢哭出声，久久没能平静。愿您在另一个世界里一起都安好！</li></ul><br /><ul><li>时间定格在十二月份（2021-12-14），事发前其实也是有些预感的，但可能只是巧合，因为我从来没有试过回到家还没看到她就感到很着急很着急，着急到要打电话那种。其实这个世界上，再怎么经久不衰的爱情，都离不开物质基础的支撑，但每个人的满足欲都不一样，所以会看到有些在我们眼里看来不怎好的，但是他们也是过得其乐融融。在我身上也终归逃不过这一劫。现在的情形就是，想要结婚就必须先买房，其中的原因这里就不再阐述。可是谈及买房，若是老家还好说，可是老家的房子我们完全派不上用场啊，但是广州的房子，一时间就要买，又谈何容易呢。财富都是慢慢积累的，出身贫寒家庭也不是我所能决定的，陷入了有心无力的情景。理想与现实的执拗，现实太骨感，就算你深爱着她，她也不得不面临着这样的抉择，毕竟谁不希望自己的未来能更好。我们两个未来的路如何，没人敢去拽测，但我已经为最坏的打算做好了准备。但我更希望的是我们未来的路越走越好，也希望我是那个能陪伴你走到最后的那个人。我虽然不够好，但我会努力给你更好。</li></ul></li></ul><br ><ul><li><p>说了这么多，其实无谓“总结”，权且当作是记录吧，记录自己“两进两出”之情绪变迁，世事无常，谁会意料到明天会发生什么事，回到最初的意愿，那就像《掌控习惯》作者所说的那样，回答三个问题吧。</p><h3 id="1-今年什么事做得比较好；"><a href="#1-今年什么事做得比较好；" class="headerlink" title="1. 今年什么事做得比较好；"></a>1. 今年什么事做得比较好；</h3><ul><li>几经波折，终于把自己的户口转移到广州了，定居广州的信念也更加增强了</li><li>成功地更换了新的工作，虽然新的工作也不咋地，但是相比原来的工作，还是稍稍有些提升的</li><li>坚持更新博客，今年总共坚持写27篇博文包含一些学习心得，相比去年的16篇提升了30%，平均每个月两篇多一点</li><li>更换了自己感觉比较好的租房，之前的住房虽然也不算太差，但不是自己租的，总觉得住得不够肆意</li></ul><h3 id="2-今年哪些事做得不太好；"><a href="#2-今年哪些事做得不太好；" class="headerlink" title="2. 今年哪些事做得不太好；"></a>2. 今年哪些事做得不太好；</h3><ul><li>曾经有一份很高的工作排在我面前，但是最后是关于履历时间不一致的谎话，擦肩而过</li><li>没有很认真的看及复习，英语的等级考试没过，还差几分</li><li>关于自己的性格没有完全的认识，也没有改进（软弱？没有主见？得过且过？遇事总是沉默？）</li><li>把go跟flutter都荒废了，都是刚学了一半，没有去写真实的项目，也没有坚持练习巩固</li></ul><h3 id="3-我学到了什么；"><a href="#3-我学到了什么；" class="headerlink" title="3. 我学到了什么；"></a>3. 我学到了什么；</h3><ul><li>学习了TypeScript，并在项目中实践了，总体的感觉还是比较好的，严谨，就是有些繁琐了</li><li>备份博文，说多了都是泪，意外的把电脑重装系统了，本来只是想格式化C盘的，结果连D盘也干没了，自然之前写好的博文只剩hexo打包过后的格式了，md格式没有了，一把心酸一把泪地把博文又重新复制一遍，重要的事说三遍：记得多备份！记得多备份！记得多备份！（包括自己大多数的重要数据）</li><li>重新认识了git版本控制工具，现在算是可以走一个比较完整的版本控制流程了</li><li>学习了自动化部署的一些相关知识，及docker的一些命令</li><li>把Nginx相关的知识点及反向代理原理理解了</li></ul></li></ul><h2 id="Best-buy"><a href="#Best-buy" class="headerlink" title="Best buy"></a>Best buy</h2><ul><li>买了一本书：《原则》</li><li>买了一台手机：iPhone 13</li><li>买了一个手表：Apple Watch Series 7</li></ul><h2 id="新的一年想做的（flag）"><a href="#新的一年想做的（flag）" class="headerlink" title="新的一年想做的（flag）"></a>新的一年想做的（flag）</h2><ul><li>来一次登山之旅</li><li>读《原则》</li><li>过英语等级考试</li><li>至少办一件大事（…）</li></ul><h2 id="分享一些东西"><a href="#分享一些东西" class="headerlink" title="分享一些东西"></a>分享一些东西</h2><ul><li><p>关于认知的50种偏差</p></li><li><p>马斯克说：“Should be taught to all at a young age”。这张图还是有点意思的，但是是翻译版本，有些翻译可能不太准确，但不影响理解，喜欢的话可以去看马克思的推文—&gt;<a href="https://twitter.com/elonmusk/status/1472647410568642564">https://twitter.com/elonmusk/status/1472647410568642564</a></p></li><li><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%85%B3%E4%BA%8E%E8%AE%A4%E7%9F%A5%E5%BE%9750%E7%A7%8D%E5%81%8F%E5%B7%AE.jpg" alt="关于认知的50种偏差(翻译版)"></p></li><li><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/FG_lAyfXIAIduQo.jfif" alt="关于认知的50种偏差(英文版)"></p></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>冰冻三尺非一日之寒，继续努力，加油Damao(ง •_•)ง</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么写？&quot;&gt;&lt;a href=&quot;#为什么写？&quot; class=&quot;headerlink&quot; title=&quot;为什么写？&quot;&gt;&lt;/a&gt;为什么写？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;History does not repeat itself, but it does often rh</summary>
      
    
    
    
    <category term="总结" scheme="http://damao2250.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="2021" scheme="http://damao2250.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>关于js宏任务和微任务的理解</title>
    <link href="http://damao2250.com/2021/12/30/%E5%85%B3%E4%BA%8Ejs%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://damao2250.com/2021/12/30/%E5%85%B3%E4%BA%8Ejs%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2021-12-30T07:05:09.000Z</published>
    <updated>2021-12-30T07:09:14.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js的宏任务和微任务（作者：老司机）"><a href="#js的宏任务和微任务（作者：老司机）" class="headerlink" title="js的宏任务和微任务（作者：老司机）"></a>js的宏任务和微任务（作者：老司机）</h1><h2 id="一、前提（随便过一下）"><a href="#一、前提（随便过一下）" class="headerlink" title="一、前提（随便过一下）"></a>一、前提（随便过一下）</h2><ol><li>同步与异步</li></ol><ul><li>异步代码，如通过事件注册的回调，调用时，特点是调用后立即返回，到没有得到结果（后续通过回调函数获取）</li><li>同步代码，逐行执行的代码，特点是调用后，要等待该调用执行完毕，否则不会往下执行（调用返回后，结果也拿到了），如全局代码、非回调函数</li></ul><ol start="2"><li>事件循环：js是单线程语言（单线程执行代码），通过该机制高效执行代码</li><li>调用栈：当调用函数时，就会开辟内存空间（压栈），调用完毕后就会释放内存</li><li>队列：当某个事件有结果后，该事件所注册的回调函数被推入队列中，等待读入主线程执行（主线程空闲后就会执行该步骤）</li></ol><h2 id="二、宏任务"><a href="#二、宏任务" class="headerlink" title="二、宏任务"></a>二、宏任务</h2><ul><li>在调用栈中直接执行的代码，如：全局代码、定时器（setInterval）、延迟器（setTimeout）、promise、function（一般的函数）等，其中一个函数可认为是一个宏任务</li></ul><h2 id="三、微任务"><a href="#三、微任务" class="headerlink" title="三、微任务"></a>三、微任务</h2><ul><li>微任务是在执行某些宏任务时产生的，它们会在执行下一个宏任务之前执行，如：Promise.then等</li></ul><h2 id="四、示例代码"><a href="#四、示例代码" class="headerlink" title="四、示例代码"></a>四、示例代码</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * - 事件循环第一轮：执行宏任务1【testPromise()、setTimeout()、console.log(123)】 * 其中，testPromise().then()生成了一个微任务，两个setTimeout()注册了两个回调函数，执行完毕后，开始执行本轮事件循环产生的微任务then() * - 事件循环第二轮：（假如已经在某一刻将回调函数推入队列）读取一个延迟器注册的函数到主线程执行，该轮事件循环没有微任务 * - 事件循环第三轮：读取一个延迟器注册的回调到主线程执行... */</span><span class="token keyword">function</span> <span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"----> Promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----> setTimeout 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----> setTimeout 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js的宏任务和微任务（作者：老司机）&quot;&gt;&lt;a href=&quot;#js的宏任务和微任务（作者：老司机）&quot; class=&quot;headerlink&quot; title=&quot;js的宏任务和微任务（作者：老司机）&quot;&gt;&lt;/a&gt;js的宏任务和微任务（作者：老司机）&lt;/h1&gt;&lt;h2 id=&quot;一</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="js" scheme="http://damao2250.com/tags/js/"/>
    
    <category term="宏任务" scheme="http://damao2250.com/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="微任务" scheme="http://damao2250.com/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>通过canvas生成水印方案</title>
    <link href="http://damao2250.com/2021/12/27/%E9%80%9A%E8%BF%87canvas%E7%94%9F%E6%88%90%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/"/>
    <id>http://damao2250.com/2021/12/27/%E9%80%9A%E8%BF%87canvas%E7%94%9F%E6%88%90%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/</id>
    <published>2021-12-27T07:21:59.000Z</published>
    <updated>2021-12-27T07:34:40.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过自定义指令生成canvas水印原理"><a href="#通过自定义指令生成canvas水印原理" class="headerlink" title="通过自定义指令生成canvas水印原理"></a>通过自定义指令生成canvas水印原理</h2><ul><li>水印（watermark）是一种容易识别、被夹于纸内，能够透过光线穿过从而显现出各种不同阴影的技术。<br>实现</li><li>前端实现的水印基本都是不安全的，可被破解的</li><li>使用canvas生成base64格式的图片文件，并将其设置为对应元素的背景图片，从而产生水印效果</li><li>通过绑定vue自定义指令，可以快速实现页面或组件局部水印效果</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>创建<code>directives.js</code>文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 添加水印</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'watermark'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">addWaterMarker</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span> font<span class="token punctuation">,</span> textColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 水印文字，父元素，字体，文字颜色</span>    <span class="token keyword">var</span> can <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>can<span class="token punctuation">)</span><span class="token punctuation">;</span>    can<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    can<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    can<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cans <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>font <span class="token operator">=</span> font <span class="token operator">||</span> <span class="token string">"16px PingFang SC"</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> textColor <span class="token operator">||</span> <span class="token string">"rgba(180, 180, 180, 0.3)"</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">'Middle'</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> can<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> can<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token string">"url("</span> <span class="token operator">+</span> can<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addWaterMarker</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>text<span class="token punctuation">,</span> el<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>font<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>textColor<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>main.js 引入directives.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span>  <span class="token string">'@/utils/directives'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div v<span class="token operator">-</span>watermark<span class="token operator">=</span><span class="token string">"&#123;text:'水印',textColor:'rgba(180, 180, 180, 0.3)'&#125;"</span><span class="token operator">></span>    这里是内容区域！  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通过自定义指令生成canvas水印原理&quot;&gt;&lt;a href=&quot;#通过自定义指令生成canvas水印原理&quot; class=&quot;headerlink&quot; title=&quot;通过自定义指令生成canvas水印原理&quot;&gt;&lt;/a&gt;通过自定义指令生成canvas水印原理&lt;/h2&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://damao2250.com/tags/Vue/"/>
    
    <category term="Canvas" scheme="http://damao2250.com/tags/Canvas/"/>
    
    <category term="水印" scheme="http://damao2250.com/tags/%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS中的递归示例</title>
    <link href="http://damao2250.com/2021/11/24/JS%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%A4%BA%E4%BE%8B/"/>
    <id>http://damao2250.com/2021/11/24/JS%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-11-24T13:48:32.000Z</published>
    <updated>2021-11-24T13:55:42.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment">// 一级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'root00'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'总区域'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'-1'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 二级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'root00'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'B-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'B区域-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'root00'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 三级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'A-01'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01-02'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01-02'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'A-01'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 四级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01-01-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01-01-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'A-01-01'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createTree</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> parentIndex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> treeData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentIndex <span class="token operator">==</span> item<span class="token punctuation">.</span>parentIndexCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      item<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">.</span>indexCode<span class="token punctuation">)</span><span class="token punctuation">;</span>      treeData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> treeData<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归结果"><a href="#递归结果" class="headerlink" title="递归结果"></a>递归结果</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">'root00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">"A-01"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"A区域-01"</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">"root00"</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        indexCode<span class="token operator">:</span> <span class="token string">"A-01-01"</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"A区域-01-01"</span><span class="token punctuation">,</span>        parentIndexCode<span class="token operator">:</span> <span class="token string">"A-01"</span><span class="token punctuation">,</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            indexCode<span class="token operator">:</span> <span class="token string">"A-01-01-01"</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">"A区域-01-01-01"</span><span class="token punctuation">,</span>            parentIndexCode<span class="token operator">:</span> <span class="token string">"A-01-01"</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        indexCode<span class="token operator">:</span> <span class="token string">"A-01-02"</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"A区域-01-02"</span><span class="token punctuation">,</span>        parentIndexCode<span class="token operator">:</span> <span class="token string">"A-01"</span><span class="token punctuation">,</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">"B-01"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"B区域-01"</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">"root00"</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原始数据&quot;&gt;&lt;a href=&quot;#原始数据&quot; class=&quot;headerlink&quot; title=&quot;原始数据&quot;&gt;&lt;/a&gt;原始数据&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code cl</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="递归" scheme="http://damao2250.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Nginx编译安装配置</title>
    <link href="http://damao2250.com/2021/11/19/Nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://damao2250.com/2021/11/19/Nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2021-11-19T03:52:08.000Z</published>
    <updated>2021-11-19T06:13:27.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-编译安装配置"><a href="#Nginx-编译安装配置" class="headerlink" title="Nginx 编译安装配置"></a>Nginx 编译安装配置</h1><h2 id="一、安装编译需要的软件依赖"><a href="#一、安装编译需要的软件依赖" class="headerlink" title="一、安装编译需要的软件依赖"></a>一、安装编译需要的软件依赖</h2><ul><li>gcc和gcc-c++<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">yum install -y gcc gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="二、安装Nginx依赖"><a href="#二、安装Nginx依赖" class="headerlink" title="二、安装Nginx依赖"></a>二、安装Nginx依赖</h2><ul><li>pcre-devel、openssl-devel、zlib-devel<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">yum install -y pcre pcre-devel openssl openssl-devel zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="三、创建Nginx用户"><a href="#三、创建Nginx用户" class="headerlink" title="三、创建Nginx用户"></a>三、创建Nginx用户</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">useradd -s &#x2F;bin&#x2F;false -M nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、下载Nginx源码"><a href="#四、下载Nginx源码" class="headerlink" title="四、下载Nginx源码"></a>四、下载Nginx源码</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.0.tar.gztar -zxf nginx-1.12.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、Nginx编译安装"><a href="#五、Nginx编译安装" class="headerlink" title="五、Nginx编译安装"></a>五、Nginx编译安装</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">## 生成make文件.&#x2F;configure --user&#x3D;nginx --group&#x3D;nginx --prefix&#x3D;&#x2F;etc&#x2F;nginx-1.12.0 --with-http_v2_module --withhttp_ssl_module --with-http_sub_module --with-http_stub_status_module --withhttp_gzip_static_module --with-pcre## 编译并安装make &amp;&amp; make install## 添加软连接ln -s &#x2F;etc&#x2F;nginx-1.12.0&#x2F; &#x2F;etc&#x2F;nginx## 添加环境变量ln -s &#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;* &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、Nginx目录介绍"><a href="#六、Nginx目录介绍" class="headerlink" title="六、Nginx目录介绍"></a>六、Nginx目录介绍</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">├── conf #配置文件目录│ ├── fastcgi.conf│ ├── fastcgi.conf.default│ ├── fastcgi_params│ ├── fastcgi_params.default #fastcgi *配合php│ ├── koi-utf│ ├── koi-win│ ├── mime.types #mime 媒体类型│ ├── mime.types.default│ ├── nginx.conf #nginx主配置文件│ ├── nginx.conf.default│ ├── scgi_params│ ├── scgi_params.default│ ├── uwsgi_params│ ├── uwsgi_params.default│ └── win-utf├── html #默认站点目录│ ├── 50x.html│ └── index.html├── logs #访问日志、错误日志、pid文件目录│ ├── access.log #访问日志│ ├── error.log #错误日志│ └── nginx.pid #pid文件└── sbin #命令目录└── nginx #nginx命令文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Nginx-配置文件详解"><a href="#七、Nginx-配置文件详解" class="headerlink" title="七、Nginx 配置文件详解"></a>七、Nginx 配置文件详解</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#定义Nginx运行的用户和用户组user www www;#nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log info;#进程pid文件pid &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid;#指定进程可以打开的最大描述符：数目#工作模式与连接数上限#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。worker_rlimit_nofile 65535;events&#123;    #参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型    #是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。    #补充说明：    #与apache相类，nginx针对不同的操作系统，有不同的事件模型    #A）标准事件模型    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll    #B）高效事件模型    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。    #Epoll：使用于Linux内核2.6版本及以后的系统。    #&#x2F;dev&#x2F;poll：使用于Solaris 7 11&#x2F;99+，HP&#x2F;UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。    use epoll;    #单个进程最大连接数（最大连接数&#x3D;连接数*进程数）    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。    worker_connections 65535;    #keepalive超时时间。    keepalive_timeout 60;    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。    #分页大小可以用命令getconf PAGESIZE 取得。    #[root@web001 ~]# getconf PAGESIZE    #4096    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。    client_header_buffer_size 4k;    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。    open_file_cache max&#x3D;65535 inactive&#x3D;60s;    #这个是指多长时间检查一次缓存的有效信息。    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server,location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.    open_file_cache_valid 80s;    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.    open_file_cache_min_uses 1;    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server,location 这个指令指定是否在搜索一个文件是记录cache错误.    open_file_cache_errors on;&#125;#设定http服务器，利用它的反向代理功能提供负载均衡支持http&#123;    #文件扩展名与文件类型映射表    include mime.types;    #默认文件类型    default_type application&#x2F;octet-stream;    #默认编码    #charset utf-8;    #服务器名字的hash表大小    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.    server_names_hash_bucket_size 128;    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。    client_header_buffer_size 32k;    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。    large_client_header_buffers 4 64k;    #设定通过nginx上传文件的大小    client_max_body_size 8m;    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。    sendfile on;    #开启目录列表访问，合适下载服务器，默认关闭。    autoindex on;    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用    tcp_nopush on;    tcp_nodelay on;    #长连接超时时间，单位是秒    keepalive_timeout 120;    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。    fastcgi_connect_timeout 300;    fastcgi_send_timeout 300;    fastcgi_read_timeout 300;    fastcgi_buffer_size 64k;    fastcgi_buffers 4 64k;    fastcgi_busy_buffers_size 128k;    fastcgi_temp_file_write_size 128k;    #gzip模块设置    gzip on; #开启gzip压缩输出    gzip_min_length 1k; #最小压缩文件大小    gzip_buffers 4 16k; #压缩缓冲区    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）    gzip_comp_level 2; #压缩等级    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml; #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。    gzip_vary on;    #开启限制IP连接数的时候需要使用    #limit_zone crawler $binary_remote_addr 10m;    #负载均衡配置    upstream carlosxiao.cc &#123;        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。        server 192.168.13.43:8080 weight&#x3D;3;        server 192.168.13.44:8080 weight&#x3D;2;        #nginx的upstream目前支持4种方式的分配        #1、轮询（默认）        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。        #2、weight        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。        #例如：        #upstream bakend &#123;        # server 192.168.0.14 weight&#x3D;10;        # server 192.168.0.15 weight&#x3D;10;        #&#125;        #2、ip_hash        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。        #例如：        #upstream bakend &#123;        # ip_hash;        # server 192.168.0.14:88;        # server 192.168.0.15:80;        #&#125;        #3、fair（第三方）        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。        #upstream backend &#123;        # server server1;        # server server2;        # fair;        #&#125;        #4、url_hash（第三方）        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法        #upstream backend &#123;        # server squid1:3128;        # server squid2:3128;        # hash $request_uri;        # hash_method crc32;        #&#125;        #tips:        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;        # ip_hash;        # server 127.0.0.1:9090 down;        # server 127.0.0.1:8080 weight&#x3D;2;        # server 127.0.0.1:6060;        # server 127.0.0.1:7070 backup;        #&#125;        #在需要使用负载均衡的server中增加 proxy_pass http:&#x2F;&#x2F;bakend&#x2F;;        #每个设备的状态设置为:        #1.down表示单前的server暂时不参与负载        #2.weight为weight越大，负载的权重就越大。        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误        #4.fail_timeout:max_fails次失败后，暂停的时间。        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡    &#125;    #虚拟主机的配置    server    &#123;        #监听端口        listen 80;        #域名可以有多个，用空格隔开        server_name www.carlosxiao.cc carlosxiao.cc;        index index.html index.htm index.php;        root &#x2F;data&#x2F;www;        #对******进行负载均衡        location ~ .*.(php|php5)?$        &#123;            fastcgi_pass 127.0.0.1:9000;            fastcgi_index index.php;            include fastcgi.conf;        &#125;        #图片缓存时间设置        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$        &#123;            expires 10d;        &#125;        #JS和CSS缓存时间设置        location ~ .*.(js|css)?$        &#123;            expires 1h;        &#125;        #日志格式设定        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；        #$remote_user：用来记录客户端用户名称；        #$time_local： 用来记录访问时间与时区；        #$request： 用来记录请求的url与http协议；        #$status： 用来记录请求状态；成功是200，        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；        #$http_referer：用来记录从那个页面链接访问过来的；        #$http_user_agent：记录客户浏览器的相关信息；        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。        log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;        &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;        &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;        #定义本虚拟主机的访问日志        access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host.access.log main;        access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host.access.404.log log404;        #对 &quot;&#x2F;&quot; 启用反向代理        location &#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            #以下是一些反向代理的配置，可选。            proxy_set_header Host $host;            #允许客户端请求的最大单文件字节数            client_max_body_size 10m;            #缓冲区代理缓冲用户端请求的最大字节数，            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误            client_body_buffer_size 128k;            #表示使nginx阻止HTTP应答代码为400或者更高的应答。            proxy_intercept_errors on;            #后端服务器连接的超时时间_发起握手等候响应超时时间            #nginx跟后端服务器连接超时时间(代理连接超时)            proxy_connect_timeout 90;            #后端服务器数据回传时间(代理发送超时)            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据            proxy_send_timeout 90;            #连接成功后，后端服务器响应时间(代理接收超时)            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）            proxy_read_timeout 90;            #设置代理服务器（nginx）保存用户头信息的缓冲区大小            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小            proxy_buffer_size 4k;            #proxy_buffers缓冲区，网页平均在32k以下的设置            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k            proxy_buffers 4 32k;            #高负荷下缓冲大小（proxy_buffers*2）            proxy_busy_buffers_size 64k;            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长            #设定缓存文件夹大小，大于这个值，将从upstream服务器传            proxy_temp_file_write_size 64k;        &#125;        #设定查看Nginx状态的地址        location &#x2F;NginxStatus &#123;            stub_status on;            access_log on;            auth_basic &quot;NginxStatus&quot;;            auth_basic_user_file confpasswd;            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。        &#125;        #本地动静分离反向代理配置        #所有jsp的页面均交由tomcat或resin处理        location ~ .(jsp|jspx|do)?$ &#123;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;        &#125;        #所有静态文件由nginx直接读取不经过tomcat或resin        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|        pdf|xls|mp3|wma)$        &#123;            expires 15d;        &#125;        location ~ .*.(js|css)?        &#123;            expires 1h;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="location匹配模式以及顺序"><a href="#location匹配模式以及顺序" class="headerlink" title="location匹配模式以及顺序"></a>location匹配模式以及顺序</h3><ul><li>location = /uri  =开头表示精确匹配，只有完全匹配上才能生效</li><li>location ^~ /uri  ^~ 开头对URL路径进行前缀匹配，并且在正则之前</li><li>location ~ pattern  ~开头表示区分大小写的正则匹配</li><li>location ~* pattern  ~*开头表示不区分大小写的正则匹配</li><li>location /uri  不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</li><li>location /  通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default</li></ul><h2 id="八、Nginx常用命令"><a href="#八、Nginx常用命令" class="headerlink" title="八、Nginx常用命令"></a>八、Nginx常用命令</h2><h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指定其他配置文件启动nginx"><a href="#指定其他配置文件启动nginx" class="headerlink" title="指定其他配置文件启动nginx"></a>指定其他配置文件启动nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">nginx -c file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">## 快速停止nginxnginx -s stop## 平滑停止nginxnginx -s quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">## 平滑重载所有配置nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="九、配置示例"><a href="#九、配置示例" class="headerlink" title="九、配置示例"></a>九、配置示例</h2><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#user nobody;worker_processes auto;#worker_cpu_affinity auto;worker_rlimit_nofile 655350;#pid logs&#x2F;nginx.pid;error_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;error.log error;events &#123;    use epoll;    worker_connections 655350;&#125;http &#123;    include mime.types;    default_type application&#x2F;octet-stream;    charset utf-8;    log_format main &#39;$remote_addr $server_addr $remote_user [$time_local] $host &#39;                    &#39;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#39;                    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;                    access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access.log main;        sendfile on;    keepalive_timeout 90000;    server_names_hash_max_size 1024;    server_names_hash_bucket_size 512;    client_header_buffer_size 16k;    large_client_header_buffers 4 64k;    client_header_timeout 300m;    client_body_timeout 300m;    send_timeout 300m;    tcp_nopush on;    tcp_nodelay on;    client_max_body_size 100M;    client_body_buffer_size 50m;    proxy_connect_timeout 5;    proxy_send_timeout 15;    proxy_read_timeout 15;    proxy_buffer_size 256k;    proxy_buffers 8 256k;    proxy_busy_buffers_size 256k;    proxy_temp_file_write_size 256k;    proxy_intercept_errors on;    proxy_headers_hash_max_size 512;    proxy_headers_hash_bucket_size 256;    variables_hash_max_size 512;    variables_hash_bucket_size 128;    gzip on;    gzip_min_length 1100;    gzip_buffers 4 8k;    gzip_comp_level 3;    gzip_http_version 1.0;    gzip_types text&#x2F;plain application&#x2F;x-javascript application&#x2F;json application&#x2F;javascript    text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;    output_buffers 1 32k;    postpone_output 1460;    gzip_vary on;    map_hash_max_size 102400;    map_hash_bucket_size 256;    fastcgi_intercept_errors on;    server &#123;        listen 80;        server_name carlosxiao.cc;        location &#x2F; &#123;            root &#x2F;data&#x2F;www;            index index.html index.htm;        &#125;        access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;carlosxiao.log;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#user nobody;worker_processes auto;#worker_cpu_affinity auto;worker_rlimit_nofile 655350;#pid logs&#x2F;nginx.pid;error_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;error.log error;events &#123;    use epoll;    worker_connections 655350;&#125;http &#123;    include mime.types;    default_type application&#x2F;octet-stream;    charset utf-8;    log_format main &#39;$remote_addr $server_addr $remote_user [$time_local] $host &#39;                    &#39;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#39;                    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;                    access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access.log main;        sendfile on;    keepalive_timeout 90000;    server_names_hash_max_size 1024;    server_names_hash_bucket_size 512;    client_header_buffer_size 16k;    large_client_header_buffers 4 64k;    client_header_timeout 300m;    client_body_timeout 300m;    send_timeout 300m;    tcp_nopush on;    tcp_nodelay on;    client_max_body_size 100M;    client_body_buffer_size 50m;    proxy_connect_timeout 5;    proxy_send_timeout 15;    proxy_read_timeout 15;    proxy_buffer_size 256k;    proxy_buffers 8 256k;    proxy_busy_buffers_size 256k;    proxy_temp_file_write_size 256k;    proxy_intercept_errors on;    proxy_headers_hash_max_size 512;    proxy_headers_hash_bucket_size 256;    variables_hash_max_size 512;    variables_hash_bucket_size 128;    gzip on;    gzip_min_length 1100;    gzip_buffers 4 8k;    gzip_comp_level 3;    gzip_http_version 1.0;    gzip_types text&#x2F;plain application&#x2F;x-javascript application&#x2F;json application&#x2F;javascript    text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;    output_buffers 1 32k;    postpone_output 1460;    gzip_vary on;    map_hash_max_size 102400;    map_hash_bucket_size 256;    fastcgi_intercept_errors on;    upstream carlosxiao.cc&#123;        server 192.168.13.43:8080;        server 192.168.13.44:8080;        check interval&#x3D;3000 rise&#x3D;2 fall&#x3D;3 timeout&#x3D;3000 type&#x3D;http;    &#125;    server &#123;        listen 80;        server_name carlosxiao.cc;        location &#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;carlosxiao.cc;            proxy_set_header Host $host;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_connect_timeout 60;            proxy_read_timeout 600;            proxy_send_timeout 600;        &#125;        access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;carlosxiao.log;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#user nobody;worker_processes auto;#worker_cpu_affinity auto;worker_rlimit_nofile 655350;#pid logs&#x2F;nginx.pid;error_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;error.log error;events &#123;    use epoll;    worker_connections 655350;&#125;http &#123;    include mime.types;    default_type application&#x2F;octet-stream;    charset utf-8;    log_format main &#39;$remote_addr $server_addr $remote_user [$time_local] $host &#39;                    &#39;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#39;                    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;                    access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access.log main;    sendfile on;    keepalive_timeout 90000;    server_names_hash_max_size 1024;    server_names_hash_bucket_size 512;    client_header_buffer_size 16k;    large_client_header_buffers 4 64k;    client_header_timeout 300m;    client_body_timeout 300m;    send_timeout 300m;    tcp_nopush on;    tcp_nodelay on;    client_max_body_size 100M;    client_body_buffer_size 50m;    proxy_connect_timeout 5;    proxy_send_timeout 15;    proxy_read_timeout 15;    proxy_buffer_size 256k;    proxy_buffers 8 256k;    proxy_busy_buffers_size 256k;    proxy_temp_file_write_size 256k;    proxy_intercept_errors on;    proxy_headers_hash_max_size 512;    proxy_headers_hash_bucket_size 256;    variables_hash_max_size 512;    variables_hash_bucket_size 128;    gzip on;    gzip_min_length 1100;    gzip_buffers 4 8k;    gzip_comp_level 3;    gzip_http_version 1.0;    gzip_types text&#x2F;plain application&#x2F;x-javascript application&#x2F;json application&#x2F;javascript    text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;    output_buffers 1 32k;    postpone_output 1460;    gzip_vary on;    map_hash_max_size 102400;    map_hash_bucket_size 256;    fastcgi_intercept_errors on;    upstream carlosxiao.cc&#123;        server 127.0.0.1:10179;    &#125;    server &#123;        listen 80;        server_name carlosxiao.cc;        location &#x2F;api &#123;            proxy_pass http:&#x2F;&#x2F;carlosxiao.cc;            proxy_set_header Host $host;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_connect_timeout 60;            proxy_read_timeout 600;            proxy_send_timeout 600;        &#125;        location ~ .(jsp|jspx|do)?$ &#123;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_pass http:&#x2F;&#x2F;carlosxiao.cc;        &#125;        #所有静态文件由nginx直接读取不经过tomcat或resin        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|        pdf|xls|mp3|wma)$        &#123;            expires 15d;        &#125;                location ~ .*.(js|css)?$        &#123;            expires 1h;        &#125;        access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;carlosxiao.log;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx-编译安装配置&quot;&gt;&lt;a href=&quot;#Nginx-编译安装配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx 编译安装配置&quot;&gt;&lt;/a&gt;Nginx 编译安装配置&lt;/h1&gt;&lt;h2 id=&quot;一、安装编译需要的软件依赖&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Linux" scheme="http://damao2250.com/categories/Linux/"/>
    
    
    <category term="Nginx" scheme="http://damao2250.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>css画梯形</title>
    <link href="http://damao2250.com/2021/11/10/css%E7%94%BB%E6%A2%AF%E5%BD%A2/"/>
    <id>http://damao2250.com/2021/11/10/css%E7%94%BB%E6%A2%AF%E5%BD%A2/</id>
    <published>2021-11-10T05:38:12.000Z</published>
    <updated>2021-11-10T05:45:19.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用html-css画出梯形"><a href="#使用html-css画出梯形" class="headerlink" title="使用html+css画出梯形"></a>使用html+css画出梯形</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a1,.a2</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ccff66<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a3,.a4</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ccff66<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a1</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a2</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a3</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -15px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a4</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 50px    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><style type="text/css">    .box {        position: relative;        margin: 50px;        height: 100px;    }    .a1,.a2 {        width: 15px;        height: 50px;        position: absolute;        background: #ccff66;        display: inline-block;    }    .a3,.a4 {        width: 50px;        height: 15px;        position: absolute;        background: #ccff66;        display: inline-block;    }    .a1 {        transform: perspective(14px) rotateY(25deg);        left: 0;        top: 0;    }    .a2 {        transform: perspective(14px) rotateY(-25deg);        left: 65px;        top: 0;    }    .a3 {        transform: perspective(14px) rotateX(-25deg);        left: 15px;        top: -15px;    }    .a4 {        transform: perspective(14px) rotateX(25deg);        left: 15px;        top: 50px    }</style><div class="box">    <a class="a1"></a>    <a class="a2"></a>    <a class="a3"></a>    <a class="a4"></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用html-css画出梯形&quot;&gt;&lt;a href=&quot;#使用html-css画出梯形&quot; class=&quot;headerlink&quot; title=&quot;使用html+css画出梯形&quot;&gt;&lt;/a&gt;使用html+css画出梯形&lt;/h2&gt;&lt;pre class=&quot;line-numbers </summary>
      
    
    
    
    <category term="CSS" scheme="http://damao2250.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://damao2250.com/tags/CSS/"/>
    
    <category term="HTML" scheme="http://damao2250.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Vue自定义组件的v-model例子</title>
    <link href="http://damao2250.com/2021/11/08/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84v-model%E4%BE%8B%E5%AD%90/"/>
    <id>http://damao2250.com/2021/11/08/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84v-model%E4%BE%8B%E5%AD%90/</id>
    <published>2021-11-08T02:58:33.000Z</published>
    <updated>2021-11-08T03:07:59.476Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框或者其他自定义组件等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>父元素的formData<span class="token punctuation">.</span>msg<span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> formData<span class="token punctuation">.</span>msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>父元素的formData<span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>son v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"formData.msg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">"./son.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span> son <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      formData<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        msg<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>formData<span class="token punctuation">.</span>msg<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>这里是子元素<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>子元素的msg<span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"onClick"</span><span class="token operator">></span>子元素的msg<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"son"</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  model<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    prop<span class="token operator">:</span> <span class="token string">"msg"</span><span class="token punctuation">,</span>    event<span class="token operator">:</span> <span class="token string">"change"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框或者其他自定义组件等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="v-model" scheme="http://damao2250.com/tags/v-model/"/>
    
  </entry>
  
  <entry>
    <title>异步函数</title>
    <link href="http://damao2250.com/2021/10/18/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/"/>
    <id>http://damao2250.com/2021/10/18/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-18T05:05:41.000Z</published>
    <updated>2021-10-18T05:07:36.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><ul><li>async 变体 (async(异步) 函数总是返回 Promises )<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 异步函数声明</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 异步函数表达式</span><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 异步函数定义</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token keyword">async</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 异步箭头函数 </span><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// async(异步) 函数的 Promise 完成状态</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span><span class="token comment">// async(异步) 函数的 Promise 拒绝状态</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Problem!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Problem!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"helloAsync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//await后面可以是Promise对象么 也可以是字符串，布尔值，数值以及普通函数</span><span class="token keyword">function</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"helloAsync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// await针对所跟的表达式不同，有两种处理方式：</span><span class="token comment">// 1、对于Promise对象，await会阻塞主函数的执行，等待 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果，然后继续执行主函数接下来的代码。</span><span class="token comment">// 2、对于非Promise对象，await等待函数或者直接量的返回，而不是等待其执行结果。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await并行-串行触发"><a href="#async-await并行-串行触发" class="headerlink" title="async/await并行/串行触发"></a>async/await并行/串行触发</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAwait1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">testAwait2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"testTime"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> pramiseFn1 <span class="token operator">=</span> <span class="token function">testAwait1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> pramiseFn2 <span class="token operator">=</span> <span class="token function">testAwait2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> pramiseFn1<span class="token punctuation">;</span>  <span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> pramiseFn2<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"两个promise并行执行，done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"testTime"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"test1Time"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAwait1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAwait2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"两个promise串行执行，done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"test1Time"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await在for循环中使用"><a href="#async-await在for循环中使用" class="headerlink" title="async/await在for循环中使用"></a>async/await在for循环中使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> promises <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token operator">=></span><span class="token function">testAwait</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> promise <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> promise    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise结果："</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"for循环promise，done"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await捕获异常"><a href="#async-await捕获异常" class="headerlink" title="async/await捕获异常"></a>async/await捕获异常</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await与Generator"><a href="#async-await与Generator" class="headerlink" title="async/await与Generator"></a>async/await与Generator</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Generator函数，可以多次返回</span><span class="token comment">// yield暂停执行，next恢复执行</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token string">'11111111'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'22222222'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'33333333'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: '11111111', done: false&#125;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: '22222222', done: false&#125;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: '33333333', done: true&#125;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: undefined, done: true&#125;</span><span class="token comment">// async是Generator函数的语法糖</span><span class="token comment">// async函数就是将Generator函数的星号(*)替换成async，将yield替换成await</span><span class="token comment">// async函数自带执行器，而Generator函数需要每次都调用next()来执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;async&quot;&gt;&lt;a href=&quot;#async&quot; class=&quot;headerlink&quot; title=&quot;async&quot;&gt;&lt;/a&gt;async&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;async 变体 (async(异步) 函数总是返回 Promises )&lt;pre class=&quot;lin</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="async" scheme="http://damao2250.com/tags/async/"/>
    
    <category term="await" scheme="http://damao2250.com/tags/await/"/>
    
    <category term="promise" scheme="http://damao2250.com/tags/promise/"/>
    
    <category term="Generator" scheme="http://damao2250.com/tags/Generator/"/>
    
  </entry>
  
  <entry>
    <title>简易的发布订阅模式</title>
    <link href="http://damao2250.com/2021/10/09/%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://damao2250.com/2021/10/09/%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-10-09T03:10:42.000Z</published>
    <updated>2021-10-09T06:46:27.363Z</updated>
    
    <content type="html"><![CDATA[<ul><li>购买者订阅是否有库存商品<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> storeObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 定义发布者</span>storeObj<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 缓存列表，存放订阅的回调函数</span><span class="token comment">// 添加订阅者</span>storeObj<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此时this指向storeObj</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 发布消息</span>storeObj<span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// arguments为类数组</span>    <span class="token comment">// shift() 方法用于把数组的第一个元素从其中删除,并返回第一个元素的值</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn<span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// fn.apply(this, arguments)</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 订阅</span>storeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您订阅的尺码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>size<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，有库存了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>storeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'小张'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您订阅的尺码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>size<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，有库存了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 取消订阅</span>storeObj<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>_fn <span class="token operator">==</span> fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>storeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span>storeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>封装<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        listen<span class="token punctuation">,</span>        trigger<span class="token punctuation">,</span>        remove<span class="token punctuation">;</span>    <span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">let</span> fns <span class="token operator">=</span> list<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn<span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// fn.apply(this, arguments)</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fns <span class="token operator">=</span> list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>_fn <span class="token operator">==</span> fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;购买者订阅是否有库存商品&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/spa</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="发布订阅" scheme="http://damao2250.com/tags/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目中应用TypeScript</title>
    <link href="http://damao2250.com/2021/10/08/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript/"/>
    <id>http://damao2250.com/2021/10/08/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript/</id>
    <published>2021-10-08T02:27:00.000Z</published>
    <updated>2021-10-08T03:29:54.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>在VUE项目中应用typescript，我们需要引入一个库<code>vue-property-decorator</code>，</li><li><code>vue-property-decorator</code>是基于<code>vue-class-component</code>库而来，这个库vue官方推出的一个支持使用class方式来开发vue单文件组件的库</li><li>主要的功能如下：<ul><li>methods 可以直接声明为类的成员方法</li><li>计算属性可以被声明为类的属性访问器</li><li>初始化的 data 可以被声明为类属性</li><li>data、render 以及所有的 Vue 生命周期钩子可以直接作为类的成员方法</li><li>所有其他属性，需要放在装饰器中</li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><code>vue-property-decorator</code> 主要提供了以下装饰器<ul><li>@Prop</li><li>@PropSync</li><li>@Model</li><li>@Watch</li><li>@Provide</li><li>@Inject</li><li>@ProvideReactive</li><li>@InjectReactive</li><li>@Emit</li><li>@Ref</li><li>@Component (由 <code>vue-class-component</code> 提供)</li><li>Mixins (由 <code>vue-class-component</code> 提供)<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3></li></ul></li><li>Component装饰器它注明了此类为一个Vue组件，因此即使没有设置选项也不能省略</li><li>如果需要定义比如 name、components、filters、directives以及自定义属性，就可以在Component装饰器中定义，如下：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">,</span>Vue<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>componentA<span class="token punctuation">,</span>componentB<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/components'</span><span class="token punctuation">;</span> @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    components<span class="token operator">:</span><span class="token punctuation">&#123;</span>        componentA<span class="token punctuation">,</span>        componentB<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    directives<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        focus<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 指令的定义</span>            <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">YourCompoent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span><span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="computed、data、methods"><a href="#computed、data、methods" class="headerlink" title="computed、data、methods"></a>computed、data、methods</h3></li><li>这里取消了组件的data和methods属性，以往data返回对象中的属性、methods中的方法需要直接定义在Class中，当做类的属性和方法<pre class="line-numbers language-js" data-language="js"><code class="language-js">@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 类属性相当于以前的 data</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span> <span class="token comment">// 类方法就是以前的方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取计算属性</span>    <span class="token keyword">get</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置计算属性</span>    <span class="token keyword">set</span> <span class="token function">total</span><span class="token punctuation">(</span>param<span class="token operator">:</span>number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> param    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="props"><a href="#props" class="headerlink" title="@props"></a>@props</h3></li><li>组件接收属性的装饰器，如下使用：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">,</span>Vue<span class="token punctuation">,</span>Prop<span class="token punctuation">&#125;</span> from vue<span class="token operator">-</span>property<span class="token operator">-</span>decorator<span class="token punctuation">;</span>@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">YourComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">Prop</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>    propA<span class="token operator">:</span>string<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">[</span>String<span class="token punctuation">,</span>Number<span class="token punctuation">]</span><span class="token punctuation">)</span>    propB<span class="token operator">:</span>string<span class="token operator">|</span>number<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     type<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// type: [String , Number]</span>     <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'default value'</span><span class="token punctuation">,</span> <span class="token comment">// 一般为String或Number</span>      <span class="token comment">//如果是对象或数组的话。默认值从一个工厂函数中返回</span>      <span class="token comment">// defatult: () => &#123;</span>      <span class="token comment">//     return ['a','b']</span>      <span class="token comment">// &#125;</span>     required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>          <span class="token string">'InProcess'</span><span class="token punctuation">,</span>          <span class="token string">'Settled'</span>        <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    propC<span class="token operator">:</span>string<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch"><a href="#watch" class="headerlink" title="@watch"></a>@watch</h3></li><li>实际就是Vue中的监听器，如下：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Vue<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span>@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">YourComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span>  <span class="token function">onChildChanged</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> string<span class="token punctuation">,</span> oldVal<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">onPersonChanged1</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> Person<span class="token punctuation">,</span> oldVal<span class="token operator">:</span> Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span>  <span class="token function">onPersonChanged2</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> Person<span class="token punctuation">,</span> oldVal<span class="token operator">:</span> Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emit"><a href="#emit" class="headerlink" title="@emit"></a>@emit</h3></li><li>vue-property-decorator 提供的 @Emit 装饰器就是代替Vue中的事件的触发$emit，如下：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Vue<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Emit<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Some</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span><span class="token punctuation">&#123;</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'emit-todo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitTodo</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        @<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">emitTodo</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在VUE项目中应用typescript，我们需要引入一个库&lt;code&gt;vue-property-decorator&lt;/code&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="TypeScript" scheme="http://damao2250.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>js中的this</title>
    <link href="http://damao2250.com/2021/10/07/js%E4%B8%AD%E7%9A%84this/"/>
    <id>http://damao2250.com/2021/10/07/js%E4%B8%AD%E7%9A%84this/</id>
    <published>2021-10-07T08:00:41.000Z</published>
    <updated>2021-10-07T13:01:05.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何区别JavaScript中的this指向"><a href="#如何区别JavaScript中的this指向" class="headerlink" title="如何区别JavaScript中的this指向"></a>如何区别JavaScript中的this指向</h1><h2 id="类型一：在函数中直接调用的"><a href="#类型一：在函数中直接调用的" class="headerlink" title="类型一：在函数中直接调用的"></a>类型一：在函数中直接调用的</h2><ul><li>直接调用的函数this指向window<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span><span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型二：函数作为对象的方法被调用的"><a href="#类型二：函数作为对象的方法被调用的" class="headerlink" title="类型二：函数作为对象的方法被调用的"></a>类型二：函数作为对象的方法被调用的</h2></li><li>谁调用函数，函数的this就指向谁<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">笑着向你说：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>text<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张三笑着向你说：Hello</span>person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张三笑着向你说：Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2></li><li>打印结果是什么？<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> fun <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token number">333</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>say <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>打印结果<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 不要使用let</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> fun <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 222  -> fun.call(window)</span>a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 111 a.say.call(a)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token number">333</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 222  -> fn.call(window)    此处传参a.say给fn()并执行，等价于  (a.say)()  也就是fn.call(window)</span>b<span class="token punctuation">.</span>say <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 333  -> b.say.call(b)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h2><ul><li>箭头函数内部没有绑定this机制，即箭头函数没有this，导致箭头函数的this指向外层代码块的this<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    x<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11    -> this指向外层的window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    x<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22    -> this指向外层的obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何区别JavaScript中的this指向&quot;&gt;&lt;a href=&quot;#如何区别JavaScript中的this指向&quot; class=&quot;headerlink&quot; title=&quot;如何区别JavaScript中的this指向&quot;&gt;&lt;/a&gt;如何区别JavaScript中的this</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="this" scheme="http://damao2250.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>tsconfig.json配置项详解</title>
    <link href="http://damao2250.com/2021/10/06/tsconfig-json%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%A6%E8%A7%A3/"/>
    <id>http://damao2250.com/2021/10/06/tsconfig-json%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-10-06T13:24:46.000Z</published>
    <updated>2021-11-19T01:35:58.381Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token string">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"allowUnreachableCode"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不报告执行不到的代码错误</span>    <span class="token string">"allowUnusedLabels"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不报告未使用的标签错误</span>    <span class="token string">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 以严格模式解析并为每个源文件生成 "use strict"语句</span>    <span class="token string">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token comment">// 工作根目录</span>    <span class="token string">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用实验性的ES装饰器</span>    <span class="token string">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token comment">// 在 .tsx文件里支持JSX</span>    <span class="token string">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否生成map文件</span>    <span class="token string">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span> <span class="token comment">// 指定生成哪个模块系统代码</span>    <span class="token string">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否默认禁用 any</span>    <span class="token string">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否移除注释</span>    <span class="token string">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//指定引入的类型声明文件，默认是自动引入所有声明文件，一旦指定该选项，则会禁用自动引入，改为只引入指定的类型声明文件，如果指定空数组[]则不引用任何文件</span>      <span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token comment">// 引入 node 的类型声明</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 指定模块的路径，和baseUrl有关联，和webpack中resolve.alias配置一样</span>      <span class="token string">"src"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//指定后可以在文件之直接 import * from 'src';</span>        <span class="token string">"./src"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"target"</span><span class="token operator">:</span> <span class="token string">"ESNext"</span><span class="token punctuation">,</span> <span class="token comment">// 编译的目标是什么版本的</span>    <span class="token string">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span> <span class="token comment">// 输出目录</span>    <span class="token string">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否自动创建类型声明文件</span>    <span class="token string">"declarationDir"</span><span class="token operator">:</span> <span class="token string">"./lib"</span><span class="token punctuation">,</span> <span class="token comment">// 类型声明文件的输出目录</span>    <span class="token string">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许编译javascript文件。</span>    <span class="token string">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 编译过程中需要引入的库文件的列表</span>      <span class="token string">"es5"</span><span class="token punctuation">,</span>      <span class="token string">"es2015"</span><span class="token punctuation">,</span>      <span class="token string">"es2016"</span><span class="token punctuation">,</span>      <span class="token string">"es2017"</span><span class="token punctuation">,</span>      <span class="token string">"es2018"</span><span class="token punctuation">,</span>      <span class="token string">"dom"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span>  <span class="token string">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"src/**/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 指定一个排除列表（include的反向操作）</span>  <span class="token string">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"demo.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span>  <span class="token string">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"demo.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
  &lt;span cla</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="TS" scheme="http://damao2250.com/tags/TS/"/>
    
    <category term="tsconfig" scheme="http://damao2250.com/tags/tsconfig/"/>
    
  </entry>
  
  <entry>
    <title>git之多SSH-key配置</title>
    <link href="http://damao2250.com/2021/09/13/git%E4%B9%8B%E5%A4%9ASSH-key%E9%85%8D%E7%BD%AE/"/>
    <id>http://damao2250.com/2021/09/13/git%E4%B9%8B%E5%A4%9ASSH-key%E9%85%8D%E7%BD%AE/</id>
    <published>2021-09-13T01:25:00.000Z</published>
    <updated>2021-10-20T10:19:14.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生成SSH-Key"><a href="#1-生成SSH-Key" class="headerlink" title="1. 生成SSH-Key"></a>1. 生成SSH-Key</h1><ul><li>Windows系统请使用Git bash操作<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成第一个SSH-Key</span>$ ssh-keygen -t rsa -C <span class="token string">"你的邮箱” -f ~/.ssh/id_rsa_one# 生成第二个SSH-Key$ ssh-keygen -t rsa -C "</span>"你的邮箱”” -f ~/.ssh/id_rsa_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>创建完成之后 我们在.ssh的根目录下可以看到文件<ul><li>C:\Users\Administrator.ssh 或者 C:\Users\电脑用户名.ssh</li></ul></li></ul><h1 id="2-添加私钥"><a href="#2-添加私钥" class="headerlink" title="2. 添加私钥"></a>2. 添加私钥</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在终端中执行</span>$ ssh-add ~/.ssh/id_rsa_gitlab$ ssh-add ~/.ssh/id_rsa_github<span class="token comment"># 如果执行ssh-add时提示 Could not open a connection to your authentication agent</span><span class="token comment"># 可以先执行命令:</span>$ ssh-agent <span class="token function">bash</span><span class="token comment"># 然后再重新运行ssh-add命令即可</span><span class="token comment"># 添加成功会出现提示：</span><span class="token comment"># Identity added 等字样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-查看私钥列表是否存在"><a href="#3-查看私钥列表是否存在" class="headerlink" title="3. 查看私钥列表是否存在"></a>3. 查看私钥列表是否存在</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add -l<span class="token comment"># 当我们可以看到2条私钥的时候就证明安装成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4-修改配置文件config"><a href="#4-修改配置文件config" class="headerlink" title="4. 修改配置文件config"></a>4. 修改配置文件config</h1><ul><li>若.ssh目录(就是私钥所在的文件夹)下无config文件，那就需要自己创建config文件（可用vs code创建）</li><li>创建后添加一下内容：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># giglab</span>Host giglab.comHostName giglab.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_gitlab<span class="token comment"># github</span>Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_github<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="5-在gitlab、github网站中设置SSH-keys"><a href="#5-在gitlab、github网站中设置SSH-keys" class="headerlink" title="5. 在gitlab、github网站中设置SSH keys"></a>5. 在gitlab、github网站中设置SSH keys</h1><ul><li>在gitlab、github网站中找到用户设置，找到SSH keys</li><li>在.ssh的根目录中找到对应网站的.pub结尾的文件，用记事本打开，然后复制内容到对应网站保存即可</li></ul><h1 id="6-用ssh命令测试验证"><a href="#6-用ssh命令测试验证" class="headerlink" title="6. 用ssh命令测试验证"></a>6. 用ssh命令测试验证</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@gitlab.com$ <span class="token function">ssh</span> -T git@github.com<span class="token comment"># 如果出现 Are you sure you want to continue connecting? </span><span class="token comment"># 直接输入 yes</span><span class="token comment"># 然后重复上面的命令</span><span class="token comment"># 验证通过会有类似“Welconme”或者“Hi”的欢迎字样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-清空私钥列表"><a href="#7-清空私钥列表" class="headerlink" title="7. 清空私钥列表"></a>7. 清空私钥列表</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-生成SSH-Key&quot;&gt;&lt;a href=&quot;#1-生成SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;1. 生成SSH-Key&quot;&gt;&lt;/a&gt;1. 生成SSH-Key&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Windows系统请使用Git bash操作&lt;pre</summary>
      
    
    
    
    <category term="版本控制工具" scheme="http://damao2250.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://damao2250.com/2021/08/31/docker%E8%B5%B7%E6%AD%A5%E6%95%99%E7%A8%8B/"/>
    <id>http://damao2250.com/2021/08/31/docker%E8%B5%B7%E6%AD%A5%E6%95%99%E7%A8%8B/</id>
    <published>2021-08-31T01:25:00.000Z</published>
    <updated>2021-10-04T04:16:23.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装docker</span>yum <span class="token function">install</span> docker -y<span class="token comment"># 查看docker版本</span>docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自动部署时需要的Dockerfile"><a href="#自动部署时需要的Dockerfile" class="headerlink" title="自动部署时需要的Dockerfile"></a>自动部署时需要的Dockerfile</h1><ul><li>编写Dockerfile时文件名就为Dockerfile，不需要要任何后缀，编写完后放到项目根目录下</li><li>版本1<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>node<span class="token operator">:</span><span class="token number">10</span><span class="token operator">-</span>frontend<span class="token operator">-</span><span class="token number">0.01</span><span class="token constant">WORKDIR</span> <span class="token operator">/</span>app<span class="token constant">ADD</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token constant">RUN</span> npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span>repository<span class="token operator">/</span>npm <span class="token operator">&amp;&amp;</span> npm i <span class="token operator">&amp;&amp;</span> npm run build<span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>nginx<span class="token operator">:</span><span class="token number">1.17</span><span class="token constant">ENV</span> <span class="token constant">TZ</span><span class="token operator">=</span>Asia<span class="token operator">/</span>Shanghai<span class="token constant">WORKDIR</span> <span class="token operator">/</span>www<span class="token constant">COPY</span> –from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>dist <span class="token operator">/</span>www<span class="token constant">COPY</span> –from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>conf<span class="token constant">EXPOSE</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>版本2（嘉熙版本）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>node<span class="token operator">:</span><span class="token number">14</span><span class="token constant">WORKDIR</span> <span class="token operator">/</span>app<span class="token constant">COPY</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token constant">RUN</span> npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span>repository<span class="token operator">/</span>npm<span class="token operator">/</span> \  <span class="token operator">&amp;&amp;</span> npm config <span class="token keyword">set</span> sass_binary_site https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>node<span class="token operator">-</span>sass<span class="token operator">/</span> \  <span class="token operator">&amp;&amp;</span> npm i <span class="token operator">&amp;&amp;</span> npm run build<span class="token constant">FROM</span> docker<span class="token punctuation">.</span>dm<span class="token operator">-</span>ai<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>nginx<span class="token operator">:</span><span class="token number">1.17</span><span class="token constant">ENV</span> <span class="token constant">TZ</span><span class="token operator">=</span>Asia<span class="token operator">/</span>Shanghai<span class="token constant">COPY</span> <span class="token operator">--</span>from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>dist <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token constant">COPY</span> <span class="token operator">--</span>from<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span>app<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>conf<span class="token constant">EXPOSE</span> <span class="token number">80</span><span class="token constant">CMD</span> nginx <span class="token operator">-</span>g <span class="token string">"daemon off;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>npm config set registry <a href="https://xxx/">https://xxx</a> —&gt; 设置镜像源地址</li><li>COPY –from=0 &lt;源路径&gt; &lt;目标路径&gt; —&gt; 从指定目录复制文件到指定路径</li><li>EXPOSE —&gt; 声明端口</li><li>使用nginx -g “daemon off;”启动nginx容器的原因<ul><li>背景：Docker 容器启动时，默认会把容器内部第一个进程，也就是pid=1的程序，作为docker容器是否正在运行的依据，如果 docker 容器pid=1的进程挂了，那么docker容器便会直接退出。</li><li>原因：nginx默认是以后台模式启动的，Docker未执行自定义的CMD之前，nginx的pid是1，执行到CMD之后，nginx就在后台运行，bash或sh脚本的pid变成了1。所以一旦执行完自定义CMD，nginx容器也就退出了。为了保持nginx的容器不退出，应该关闭nginx后台运行</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-lang</summary>
      
    
    
    
    <category term="Linux" scheme="http://damao2250.com/categories/Linux/"/>
    
    
    <category term="docker" scheme="http://damao2250.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Git分支建立及提交规范</title>
    <link href="http://damao2250.com/2021/08/20/Git%E5%88%86%E6%94%AF%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <id>http://damao2250.com/2021/08/20/Git%E5%88%86%E6%94%AF%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</id>
    <published>2021-08-20T01:25:00.000Z</published>
    <updated>2021-11-10T05:43:08.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支建立规范"><a href="#分支建立规范" class="headerlink" title="分支建立规范"></a>分支建立规范</h1><h2 id="Git主要分支说明："><a href="#Git主要分支说明：" class="headerlink" title="Git主要分支说明："></a>Git主要分支说明：</h2><ul><li>Master<ul><li>主分支，维护发布产品的代码，存储了正式发布的历史</li></ul></li><li>Develop<ul><li>开发分支，作为功能的集成分支，维护开发中的代码，代码最终要合入Master分支</li></ul></li><li>Feature<ul><li>开自Develop分支，主要用于开发新功能，开发者根据自己负责模块自行维护，模块开发完成并自测通过后，代码合入Develop分支，新功能提交应该从不直接与master分支交互</li><li>命名规范为：feature/#…，每一个功能都应对应一个issue，…即为issue号</li><li>开发中的合并代码采用rebase方法（可以使分支的提交历史看上去更简洁，详细可见rebase与merge的对比），具体方法如下：<ul><li>新建feature分支：git checkout develop， git branch feature/#…， git checkout feature/#…</li><li>feature分支开发一段功能后：git add.， git commit -m “…”， git checkout develop， git pull origin develop， git checkout feature/#…， git rebase develop（代码依次为提交本次代码，添加提交信息，切换到develop分支并拉取最新分支，切换回feature分支，rebase develop分支）</li><li>在rebase develop分支时，可能会产生conflict，此时仍在rebase过程中，这时需要手动修改代码解决冲突，然后解决完该次冲突（rebase会对比每次未合入develop分支的提交，可能每次提交都会有冲突）后，再执行git add.，git rebase –continue命令，rebase完成后，即可push代码。</li><li>多个分支同时开发时，应当频繁地将测试后可运行的feature分支更新到dev分支，每次更新dev分支时通知其他开发人员，拉取最新的dev分支，将自己正在开发的分支rebase dev分支。这样可以避免较长时间没有进行rebase而导致的冲突较多问题。</li></ul></li></ul></li><li>Bugfix<ul><li>开自Develop分支或者Release分支，主要用于修复当前开发中的功能的已知bug；每一个已发现的bug都应该在gitlab中记录issue，并定期更新当前解决进展，如有有价值的思考或独特的解决方法，可以在issue中评论并在wiki的技术知识库或个人空间博文中进行记录。</li><li>命名规范为：bugfix/#…</li></ul></li><li>Hotfix<ul><li>开自Master分支，主要用于修复当前已发布版本的已知bug；解决bug时注意事项参考Bugfix。这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。为Bug修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把它想成是一个直接在master分支上处理的临时发布。</li><li>命名规范为：hotfix/#…</li></ul></li><li>Release<ul><li>开自Develop分支，主要用于发布版本，一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做Bug修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，执行以下三个操作：</li><li>合并Release分支到Master；</li><li>给Master打上对应版本的标签tag；</li><li>Release回归，这些从新建发布分支以来的做的修改要合并回develop分支。</li><li>命名规范为：release/…，…即为版本号</li></ul></li></ul><h1 id="代码提交规范"><a href="#代码提交规范" class="headerlink" title="代码提交规范"></a>代码提交规范</h1><ul><li>建议经常用命令git status查看当前所在分支并用git log查看当前分支记录，每次提交前与checkout分支时都先查看当前分支再进行下一步操作</li><li>提交信息的说明，禁止无意义的日志语言，如modify，修改xxx文件等，任何修改都应该简要说明</li><li>Commit message格式 <type>: <subject> 注意冒号后面有空格</li><li>type 用于说明 commit 的类别，只允许使用下面7个标识<ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></li><li>subject<ul><li>subject是 commit 目的的简短描述，不超过50个字符，且结尾不加句号（.）。</li><li>提交分支合并请求之前的基础原则，如本地编译通过、手工或者自动化验收的测试通过</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分支建立规范&quot;&gt;&lt;a href=&quot;#分支建立规范&quot; class=&quot;headerlink&quot; title=&quot;分支建立规范&quot;&gt;&lt;/a&gt;分支建立规范&lt;/h1&gt;&lt;h2 id=&quot;Git主要分支说明：&quot;&gt;&lt;a href=&quot;#Git主要分支说明：&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="版本控制工具" scheme="http://damao2250.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JS实现杨辉三角</title>
    <link href="http://damao2250.com/2021/07/26/JS%E5%AE%9E%E7%8E%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    <id>http://damao2250.com/2021/07/26/JS%E5%AE%9E%E7%8E%B0%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</id>
    <published>2021-07-26T01:25:00.000Z</published>
    <updated>2021-10-04T06:01:11.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h1><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92.png" alt="杨辉三角"></p><h2 id="给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的第n行"><a href="#给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的第n行" class="headerlink" title="给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的第n行"></a>给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的第n行</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">triangle</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log('arr1',arr1);</span>        arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// console.log('arr2', arr2);</span>    arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">triangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的前n行"><a href="#给定一个函数-function-triangle-n-实现输入n就返回杨辉三角的前n行" class="headerlink" title="给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的前n行"></a>给定一个函数 function triangle(n){} ,实现输入n就返回杨辉三角的前n行</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">triangle</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(`数组共有$&#123;n&#125;行：`);</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//按照杨辉三角的特性，将数填入二维数字中。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// console.log(arr);</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// console.log(arr[i]);</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">triangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;杨辉三角&quot;&gt;&lt;a href=&quot;#杨辉三角&quot; class=&quot;headerlink&quot; title=&quot;杨辉三角&quot;&gt;&lt;/a&gt;杨辉三角&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Damao2250/FileTran</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="杨辉三角" scheme="http://damao2250.com/tags/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>Taro与uni-app对比</title>
    <link href="http://damao2250.com/2021/07/25/Taro%E4%B8%8Euni-app%E5%AF%B9%E6%AF%94/"/>
    <id>http://damao2250.com/2021/07/25/Taro%E4%B8%8Euni-app%E5%AF%B9%E6%AF%94/</id>
    <published>2021-07-25T01:25:00.000Z</published>
    <updated>2021-10-04T06:08:08.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Taro和uni-app的介绍"><a href="#Taro和uni-app的介绍" class="headerlink" title="Taro和uni-app的介绍"></a>Taro和uni-app的介绍</h1><h2 id="Taro的介绍"><a href="#Taro的介绍" class="headerlink" title="Taro的介绍"></a>Taro的介绍</h2><ul><li>Taro 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发 微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ 小程序 / H5 / RN 等应用。</li><li>官方文档：<a href="https://nervjs.github.io/taro">https://nervjs.github.io/taro</a></li><li>Github地址：<a href="https://github.com/nervjs/taro">https://github.com/nervjs/taro</a><h2 id="uni-app的介绍"><a href="#uni-app的介绍" class="headerlink" title="uni-app的介绍"></a>uni-app的介绍</h2></li><li>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。</li><li>官方文档：<a href="https://uniapp.dcloud.io/">https://uniapp.dcloud.io</a></li><li>Github地址：<a href="https://github.com/dcloudio/uni-app">https://github.com/dcloudio/uni-app</a><h1 id="两者的对比"><a href="#两者的对比" class="headerlink" title="两者的对比"></a>两者的对比</h1><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2></li><li>两者都是用主流框架开发的</li><li>都能支持微信、百度、支付宝、今日头条等小程序，H5，以及iOS和Android的App</li><li>均支持使用npm/yarn安装管理第三方依赖</li><li>均支持使用ES6甚至更新的ES规范</li><li>均支持使用less/scss/ts等预编译器</li><li>均支持进行应用状态管理，taro支持Redux，uni-app支持vuex<h2 id="差异点"><a href="#差异点" class="headerlink" title="差异点"></a>差异点</h2></li></ul><table><thead><tr><th align="left"></th><th align="left">Taro</th><th align="left">uni-app</th></tr></thead><tbody><tr><td align="left">开发技术栈</td><td align="left">React框架开发</td><td align="left">Vue框架开发</td></tr><tr><td align="left">开发工具</td><td align="left">官方未特别推荐IDE</td><td align="left">官方推荐HBuilderX,开发工具可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs</td></tr><tr><td align="left">跨端程度</td><td align="left">微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ 小程序 / H5 / RN</td><td align="left">微信/支付宝/百度/头条/QQ/钉钉/淘宝小程序、快应用、iOS、Android、Web（响应式）</td></tr><tr><td align="left">版本升级差异</td><td align="left">1.X与2.X之间没有做平滑升级，版本差异太大，升级版本会导致各种不兼容的bug；3.X则属于开放式架构的改动，采用了重运行时的架构</td><td align="left">无版本升级影响</td></tr><tr><td align="left">物料市场</td><td align="left">NutUI、Taro UI；物料市场活跃度低，更新速度慢</td><td align="left">uni-ui、uView UI、mui；插件市场活跃度高，插件数量多，更新速度快</td></tr><tr><td align="left">社区活跃度</td><td align="left">GitHub Issuse、Discussions</td><td align="left">GitHub Issuse、官网社区问答</td></tr><tr><td align="left">学习维护成本</td><td align="left">高</td><td align="left">低</td></tr><tr><td align="left">云开发支持</td><td align="left">无</td><td align="left">uniCloud</td></tr></tbody></table><h2 id="Taro-amp-amp-DCloud-amp-amp-uni-app-amp-amp-微信小程序诞生节点"><a href="#Taro-amp-amp-DCloud-amp-amp-uni-app-amp-amp-微信小程序诞生节点" class="headerlink" title="Taro &amp;&amp; DCloud &amp;&amp; uni-app &amp;&amp; 微信小程序诞生节点"></a>Taro &amp;&amp; DCloud &amp;&amp; uni-app &amp;&amp; 微信小程序诞生节点</h2><ul><li>Taro 2018年4月8日发布0.0.1版本<ul><li><a href="https://github.com/NervJS/taro/releases?after=v0.0.5">https://github.com/NervJS/taro/releases?after=v0.0.5</a></li></ul></li><li>DCloud于2012年开始研发小程序技术，优化webview的功能和性能，并加入W3C和HTML5中国产业联盟，推出了HBuilder开发工具，为后续产业化做准备<ul><li><a href="https://uniapp.dcloud.io/history">https://uniapp.dcloud.io/history</a></li></ul></li><li>uni-app 2019年1月11日发布1.4.0.20181227 版本<ul><li><a href="https://github.com/dcloudio/uni-app/releases?after=1.8.0.20190330">https://github.com/dcloudio/uni-app/releases?after=1.8.0.20190330</a></li></ul></li><li>微信团队于2016年初决定上线小程序业务，但其没有接入联盟标准，而是订制了自己的标准。2017年1月9日，张小龙在2017微信公开课Pro上发布的微信小程序正式上线<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/e1fd563ba0301f44e923d9b9ae67b59.png" alt="微信小程序上线"></li></ul><h1 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h1><h2 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 全局安装 @tarojs&#x2F;cli$ npm install -g @tarojs&#x2F;cli# 创建 taro 项目$ taro init myApp# 进入项目目录$ cd myApp# 运行到微信小程序，调试模式$ npm run dev:weapp# 发行到微信小程序$ npm run build:weapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 全局安装 vue-cli$ npm install -g @vue&#x2F;cli# 创建uni-app项目$ vue create -p dcloudio&#x2F;uni-preset-vue my-project# 进入项目目录$ cd my-project# 运行到微信小程序，调试模式$ npm run dev:mp-weixin# 发行到微信小程序$ npm run build:mp-weixin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>或者直接通过HBuilderX可视化界面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Taro和uni-app的介绍&quot;&gt;&lt;a href=&quot;#Taro和uni-app的介绍&quot; class=&quot;headerlink&quot; title=&quot;Taro和uni-app的介绍&quot;&gt;&lt;/a&gt;Taro和uni-app的介绍&lt;/h1&gt;&lt;h2 id=&quot;Taro的介绍&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="小程序" scheme="http://damao2250.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="Taro" scheme="http://damao2250.com/tags/Taro/"/>
    
    <category term="uni-app" scheme="http://damao2250.com/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>JS中的call()、apply()、bind()的用法</title>
    <link href="http://damao2250.com/2021/07/09/JS%E4%B8%AD%E7%9A%84call()%E3%80%81apply()%E3%80%81bind()%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://damao2250.com/2021/07/09/JS%E4%B8%AD%E7%9A%84call()%E3%80%81apply()%E3%80%81bind()%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2021-07-09T01:25:00.000Z</published>
    <updated>2021-10-04T06:03:14.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="少罗嗦，直接看代码"><a href="#少罗嗦，直接看代码" class="headerlink" title="少罗嗦，直接看代码"></a>少罗嗦，直接看代码</h1><ul><li><p>其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！</p></li><li><p>先看明白下面：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例1</span><span class="token comment">// 注意是var不是let  如果使用let的话，obj.objAge 为undefined</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>  objAge<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>  <span class="token function-variable function">myFun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">年龄</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>objAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//17</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小张年龄undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例2</span><span class="token keyword">var</span> fav <span class="token operator">=</span> <span class="token string">'盲僧'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fav<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//盲僧　</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>比较一下这两者this 的差别，第一个打印里面的this 指向obj，第二个全局声明的shows()函数 this 是window</p></li></ul><h3 id="1-call-、apply-、bind-都是用来重定义-this-这个对象的！"><a href="#1-call-、apply-、bind-都是用来重定义-this-这个对象的！" class="headerlink" title="1. call()、apply()、bind()都是用来重定义 this 这个对象的！"></a>1. call()、apply()、bind()都是用来重定义 this 这个对象的！</h3><p>  如：<br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>objAge<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token function-variable function">myFun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">年龄</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'玛丽'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　<span class="token comment">//玛丽年龄18</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　 <span class="token comment">//玛丽年龄18</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　<span class="token comment">//玛丽年龄18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ul><li>以上出了bind 方法后面多了个()外 ，结果返回都一致</li><li>由此得出结论，bind返回的是一个新的函数，你必须调用它才会被执行</li></ul><h3 id="2-对比call、bind、apply传参情况下"><a href="#2-对比call、bind、apply传参情况下" class="headerlink" title="2. 对比call、bind、apply传参情况下"></a>2. 对比call、bind、apply传参情况下</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>objAge<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token function-variable function">myFun</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span>v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">年龄</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -> 来自</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>k<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">去往</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>v<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'玛丽'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　      <span class="token comment">// 玛丽年龄18 -> 来自广州去往上海</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 玛丽年龄18 -> 来自广州去往上海</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 玛丽年龄18 -> 来自广州去往上海</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　     <span class="token comment">// 玛丽年龄18 -> 来自广州,上海去往undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>微妙的差距</p></li><li><p>从上面四个结果不难看出 call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：</p><ul><li>call的参数是直接放进去的，第二第三第n个参数全都用逗号分隔，直接放到后面obj.myFun.call(db,’成都’, … ,’string’);</li><li>apply的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,[‘成都’, …, ‘string’ ]);</li><li>bind除了返回是函数以外，它 的参数和call 一样</li></ul></li><li><p>当然，三者的参数不限定是string类型，允许是各种类型，包括函数、object等等</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;少罗嗦，直接看代码&quot;&gt;&lt;a href=&quot;#少罗嗦，直接看代码&quot; class=&quot;headerlink&quot; title=&quot;少罗嗦，直接看代码&quot;&gt;&lt;/a&gt;少罗嗦，直接看代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！&lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="call" scheme="http://damao2250.com/tags/call/"/>
    
    <category term="apply" scheme="http://damao2250.com/tags/apply/"/>
    
    <category term="bind" scheme="http://damao2250.com/tags/bind/"/>
    
  </entry>
  
</feed>
