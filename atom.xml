<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damao</title>
  
  <subtitle>乐躬耕于陇亩兮，吾爱吾庐。聊寄傲于琴书兮，以待天时。</subtitle>
  <link href="http://damao2250.com/atom.xml" rel="self"/>
  
  <link href="http://damao2250.com/"/>
  <updated>2021-09-22T01:33:37.903Z</updated>
  <id>http://damao2250.com/</id>
  
  <author>
    <name>Damao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://damao2250.com/2021/10/03/hello-world/"/>
    <id>http://damao2250.com/2021/10/03/hello-world/</id>
    <published>2021-10-03T03:02:58.833Z</published>
    <updated>2021-09-22T01:33:37.903Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>_posts</title>
    <link href="http://damao2250.com/2021/10/03/index/"/>
    <id>http://damao2250.com/2021/10/03/index/</id>
    <published>2021-10-03T03:02:30.000Z</published>
    <updated>2021-10-03T03:02:30.758Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>关于React&#39;三千问&#39;</title>
    <link href="http://damao2250.com/2021/07/08/%E5%85%B3%E4%BA%8EReact&#39;%E4%B8%89%E5%8D%83%E9%97%AE&#39;/"/>
    <id>http://damao2250.com/2021/07/08/%E5%85%B3%E4%BA%8EReact&#39;%E4%B8%89%E5%8D%83%E9%97%AE&#39;/</id>
    <published>2021-07-08T01:25:00.000Z</published>
    <updated>2021-10-03T17:07:50.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何理解React？有哪些新特性？"><a href="#如何理解React？有哪些新特性？" class="headerlink" title="如何理解React？有哪些新特性？"></a>如何理解React？有哪些新特性？</h1><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><ul><li><p>React，用于构建用户界面的 JavaScript 库，提供了 UI 层面的解决方案</p></li><li><p>遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效</p></li><li><p>使用虚拟DOM来有效地操作真实DOM，遵循从高阶组件到低阶组件的单向数据流</p></li><li><p>帮助我们将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面</p></li><li><p>React 类组件使用一个名为 render() 的方法或者函数组件return，接收输入的数据并返回需要展示的内容</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">HelloMessage</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        Hello <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>HelloMessage name<span class="token operator">=</span><span class="token string">"Taylor"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hello-example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h2><p>React特性有很多，如：</p></li><li><p>JSX语法</p></li><li><p>单向数据绑定</p></li><li><p>虚拟DOM</p></li><li><p>声明式编程</p></li><li><p>Component</p></li></ul><p>着重介绍下声明式编程及Component</p><h3 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h3><ul><li><p>声明式编程是一种编程范式，它关注的是你要做什么，而不是如何做</p></li><li><p>它表达逻辑而不显式地定义步骤。这意味着我们需要根据逻辑的计算来声明要显示的组件</p></li><li><p>如实现一个标记的地图：</p></li><li><p>通过命令式创建地图、创建标记、以及在地图上添加的标记的步骤如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建地图</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token punctuation">.</span>map</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'map'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    zoom<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    center<span class="token operator">:</span> <span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span>lng<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建标记</span><span class="token keyword">const</span> marker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token punctuation">.</span>marker</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    position<span class="token operator">:</span> <span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">'Hello Marker'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 地图上添加标记</span>marker<span class="token punctuation">.</span><span class="token function">setMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而用React实现上述功能则如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Map zoom<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span> center<span class="token operator">=</span><span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">&#125;</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Marker position<span class="token operator">=</span><span class="token punctuation">&#123;</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">&#125;</span> title<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Hello Marker'</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Map<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>声明式编程方式使得React组件很容易使用，最终的代码简单易于维护</p></li></ul><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><ul><li><p>在React 中，一切皆为组件。通常将应用程序的整个逻辑分解为小的单个部分。我们将每个单独的部分称为组件</p></li><li><p>组件可以是一个函数或者是一个类，接受数据输入，处理它并返回在UI中呈现的React元素</p></li><li><p>函数式组件（无状态组件）如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Jumbotron style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>backgroundColor<span class="token operator">:</span><span class="token string">'orange'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token constant">TODO</span> App<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Jumbotron<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类组件（有状态组件）如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Dashboard</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"dashboard"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>ToDoForm <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ToDolist <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个组件该有的特点如下：</p></li><li><p>可组合：个组件易于和其它组件一起使用，或者嵌套在另一个组件内部</p></li><li><p>可重用：每个组件都是具有独立功能的，它可以被使用在多个UI场景</p></li><li><p>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</p><h2 id="三、优势"><a href="#三、优势" class="headerlink" title="三、优势"></a>三、优势</h2></li><li><p>通过上面的初步了解，可以感受到React存在的优势：</p><ul><li>高效灵活</li><li>声明式的设计，简单使用</li><li>组件式开发，提高代码复用率</li><li>单向响应的数据流会比双向绑定的更安全，速度更快<h1 id="Real-DOM-与-Virtual-DOM-的区别？有何优缺点？"><a href="#Real-DOM-与-Virtual-DOM-的区别？有何优缺点？" class="headerlink" title="Real DOM 与 Virtual DOM 的区别？有何优缺点？"></a>Real DOM 与 Virtual DOM 的区别？有何优缺点？</h1><h2 id="一、是什么-1"><a href="#一、是什么-1" class="headerlink" title="一、是什么"></a>一、是什么</h2></li></ul></li><li><p>Real DOM，真实DOM， 意思为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构，如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello world<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Virtual Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述</p></li><li><p>创建虚拟DOM目的就是为了更好将虚拟的节点渲染到页面视图中，虚拟DOM对象的节点与真实DOM的属性一一照应</p></li><li><p>在React中，JSX是其一大特性，可以让你在JS中通过使用XML的方式去直接声明界面的DOM结构</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vDom <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> <span class="token comment">// 创建h1标签，右边千万不能加引号</span><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token comment">// 找到&lt;div id="root">&lt;/div>节点</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>vDom<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token comment">// 把创建的h1标签渲染到root节点上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>上述中，ReactDOM.render()用于将你创建好的虚拟DOM节点插入到某个真实节点上，并渲染到页面上</p></li><li><p>JSX实际是一种语法糖，在使用过程中会被babel进行编译转化成JS代码，上述VDOM转化为如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vDom <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">'h1'</span>，   <span class="token punctuation">&#123;</span> className<span class="token operator">:</span> <span class="token string">'hClass'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">'hId'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">'hello world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以看到，JSX就是为了简化直接调用React.createElement() 方法：</p></li><li><p>第一个参数是标签名，例如h1、span、table…</p></li><li><p>第二个参数是个对象，里面存着标签的一些属性，例如id、class等</p></li><li><p>第三个参数是节点中的文本</p></li><li><p>通过console.log(VDOM)，则能够得到虚拟VDOM消息</p></li><li><p>所以可以得到，JSX通过babel的方式转化成React.createElement执行，返回值是一个对象，也就是虚拟DOM</p></li></ul><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><ul><li><p>两者的区别如下：</p><ul><li>虚拟DOM不会进行排版与重绘操作，而真实DOM会频繁重排与重绘</li><li>虚拟DOM的总损耗是“虚拟DOM增删改 + 真实DOM差异增删改+排版与重绘”，真实DOM的总损耗是“真实DOM完全增删改+排版与重绘”</li></ul></li><li><p>传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程</p></li><li><p>当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程</p></li><li><p>而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算</p></li></ul><h2 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h2><ul><li>真实DOM的优势：<ul><li>易用</li></ul></li><li>缺点：<ul><li>效率低，解析速度慢，内存占用量过高</li><li>性能差：频繁操作真实DOM，易于导致重绘与回流</li></ul></li><li>使用虚拟DOM的优势如下：<ul><li>简单方便：如果使用手动操作真实DOM来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难</li><li>性能方面：使用Virtual DOM，能够有效避免真实DOM数频繁更新，减少多次引起重绘与回流，提高性能</li><li>跨平台：React借助虚拟DOM， 带来了跨平台的能力，一套代码多端运行</li></ul></li><li>缺点：<ul><li>在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化</li><li>首次渲染大量DOM时，由于多了一层虚拟DOM的计算，速度比正常稍慢<h1 id="React生命周期有哪些不同的阶段？每个阶段对应的方法是？"><a href="#React生命周期有哪些不同的阶段？每个阶段对应的方法是？" class="headerlink" title="React生命周期有哪些不同的阶段？每个阶段对应的方法是？"></a>React生命周期有哪些不同的阶段？每个阶段对应的方法是？</h1><h1 id="对State-和-Porps的理解？有何区别？"><a href="#对State-和-Porps的理解？有何区别？" class="headerlink" title="对State 和 Porps的理解？有何区别？"></a>对State 和 Porps的理解？有何区别？</h1><h1 id="super-和-super-props-有何区别？"><a href="#super-和-super-props-有何区别？" class="headerlink" title="super() 和 super(props) 有何区别？"></a>super() 和 super(props) 有何区别？</h1><h1 id="React中的setState执行机制？"><a href="#React中的setState执行机制？" class="headerlink" title="React中的setState执行机制？"></a>React中的setState执行机制？</h1><h1 id="对React的执行机制如何理解？"><a href="#对React的执行机制如何理解？" class="headerlink" title="对React的执行机制如何理解？"></a>对React的执行机制如何理解？</h1><h1 id="React事件绑定方式有哪些？有何区别？"><a href="#React事件绑定方式有哪些？有何区别？" class="headerlink" title="React事件绑定方式有哪些？有何区别？"></a>React事件绑定方式有哪些？有何区别？</h1><h1 id="React构建组件的方式有哪些？有何区别？"><a href="#React构建组件的方式有哪些？有何区别？" class="headerlink" title="React构建组件的方式有哪些？有何区别？"></a>React构建组件的方式有哪些？有何区别？</h1><h1 id="React中组件通信方式有哪些？"><a href="#React中组件通信方式有哪些？" class="headerlink" title="React中组件通信方式有哪些？"></a>React中组件通信方式有哪些？</h1><h1 id="React中的key有什么作用？"><a href="#React中的key有什么作用？" class="headerlink" title="React中的key有什么作用？"></a>React中的key有什么作用？</h1><h1 id="对React-refs的理解？有何应用场景？"><a href="#对React-refs的理解？有何应用场景？" class="headerlink" title="对React refs的理解？有何应用场景？"></a>对React refs的理解？有何应用场景？</h1><h1 id="对React中类组件和函数组件的理解？有何区别？"><a href="#对React中类组件和函数组件的理解？有何区别？" class="headerlink" title="对React中类组件和函数组件的理解？有何区别？"></a>对React中类组件和函数组件的理解？有何区别？</h1></li></ul></li></ul><p><a href="#">来源：JS每日一题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何理解React？有哪些新特性？&quot;&gt;&lt;a href=&quot;#如何理解React？有哪些新特性？&quot; class=&quot;headerlink&quot; title=&quot;如何理解React？有哪些新特性？&quot;&gt;&lt;/a&gt;如何理解React？有哪些新特性？&lt;/h1&gt;&lt;h2 id=&quot;一、是什么</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="React" scheme="http://damao2250.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>关于typescript改造旧项目的一些坑</title>
    <link href="http://damao2250.com/2021/02/26/%E5%85%B3%E4%BA%8Etypescript%E6%94%B9%E9%80%A0%E6%97%A7%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://damao2250.com/2021/02/26/%E5%85%B3%E4%BA%8Etypescript%E6%94%B9%E9%80%A0%E6%97%A7%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</id>
    <published>2021-02-26T01:25:00.000Z</published>
    <updated>2021-10-03T17:11:53.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="‘-‘-引入组件报红问题"><a href="#‘-‘-引入组件报红问题" class="headerlink" title="‘@/‘ 引入组件报红问题"></a>‘@/‘ 引入组件报红问题</h2><ul><li>使用 ‘@/xxx/xxx’ 引入组件，vetur报红 找不到module，但是可以正常运行问题</li><li>解决办法：1.把项目目录放工作区根目录；2.项目一定排列在第一位<h2 id="引入第三方包报红"><a href="#引入第三方包报红" class="headerlink" title="引入第三方包报红"></a>引入第三方包报红</h2></li><li>引入第三方库 报红找不到module，无法正常使用包，如qs、jQuery</li><li>解决办法1：使用@types进行包管理，然后正常引入<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm i @types<span class="token operator">/</span>qs<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>解决办法2：有些包不能用@types管理，自己写声明 XX.d.ts  不推荐</li></ul><h2 id="router配置里引入component组件的时候必须添加-vue后缀"><a href="#router配置里引入component组件的时候必须添加-vue后缀" class="headerlink" title="router配置里引入component组件的时候必须添加.vue后缀"></a>router配置里引入component组件的时候必须添加.vue后缀</h2><h2 id="Element表单验证报红问题"><a href="#Element表单验证报红问题" class="headerlink" title="Element表单验证报红问题"></a>Element表单验证报红问题</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 报错信息如下</span><span class="token comment">// Property 'validate' does not exist on type 'Vue | Element | Vue[] | Element[]'.</span><span class="token comment">// Property 'validate' does not exist on type 'Vue'.</span><span class="token comment">// 解决办法</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Form <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>loginForm <span class="token keyword">as</span> Form <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">valid<span class="token operator">:</span> boolean</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果不引入Form，把Form换成any也可以，但是typescript会报警告⚠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用axios封装的请求，然后解构请求结果报错<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 报错信息</span><span class="token comment">// Property 'XXX' does not exist on type 'AxiosResponse&lt;any>'</span><span class="token comment">// 解决办法</span><span class="token comment">// 新建axios.d.ts文案，添加如下内容，重启项目</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>declare module <span class="token string">'axios'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">AxiosInstance</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>@typescript<span class="token operator">/</span>esline 报错 xxx_x is not <span class="token keyword">in</span> camel <span class="token keyword">case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关闭esline驼峰校验"><a href="#关闭esline驼峰校验" class="headerlink" title="关闭esline驼峰校验"></a>关闭esline驼峰校验</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在.eslinetrc.js中配置如下：</span>rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token string">'@typescript-eslint/camelcase'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TS使用”require”报错"><a href="#TS使用”require”报错" class="headerlink" title="TS使用”require”报错"></a>TS使用”require”报错</h2></li><li>提示报错信息：Cannot find name ‘require’. Do you need to install type definitions for node? Try ‘npm i –save-dev @types/node’</li><li>解决方案：<ul><li>1.安装@types/node，npm i –save-dev @types/node；</li><li>2.在tsconfig.json中的compilerOptions中的types添加”node”；</li><li>3.在使用require前面添加declare var require:any<h2 id="TS使用”this-xxx”报错"><a href="#TS使用”this-xxx”报错" class="headerlink" title="TS使用”this.xxx”报错"></a>TS使用”this.xxx”报错</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用"this.$router.push("/xxx")" => Property '$router' does not exist on type 'Experiment'.</span><span class="token comment">// 解决：</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/xxx"</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span><span class="token parameter">mainVideo</span> <span class="token operator">=></span> Property <span class="token string">'clientWidth'</span> does not exist on type <span class="token string">'Vue | Element | Vue[] | Element[]'</span><span class="token punctuation">.</span><span class="token comment">// Property 'clientWidth' does not exist on type 'Vue'</span><span class="token comment">// 解决：</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mainVideo <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>clientWidth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;‘-‘-引入组件报红问题&quot;&gt;&lt;a href=&quot;#‘-‘-引入组件报红问题&quot; class=&quot;headerlink&quot; title=&quot;‘@/‘ 引入组件报红问题&quot;&gt;&lt;/a&gt;‘@/‘ 引入组件报红问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 ‘@/xxx/xxx’ 引入组件，ve</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="typescript" scheme="http://damao2250.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>基于Element-Ui的select二次封装的下拉搜索组件</title>
    <link href="http://damao2250.com/2020/11/09/%E5%9F%BA%E4%BA%8EElement-Ui%E7%9A%84select%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%9A%84%E4%B8%8B%E6%8B%89%E6%90%9C%E7%B4%A2%E7%BB%84%E4%BB%B6/"/>
    <id>http://damao2250.com/2020/11/09/%E5%9F%BA%E4%BA%8EElement-Ui%E7%9A%84select%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%9A%84%E4%B8%8B%E6%8B%89%E6%90%9C%E7%B4%A2%E7%BB%84%E4%BB%B6/</id>
    <published>2020-11-09T01:25:00.000Z</published>
    <updated>2021-10-03T17:14:26.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="少了罗嗦，直接看代码"><a href="#少了罗嗦，直接看代码" class="headerlink" title="少了罗嗦，直接看代码"></a>少了罗嗦，直接看代码</h2><ul><li>注意代码不能直接使用，只是提供一种封装思路，其中 dSearchList 及样式需要自己重新写, dCountryList 来自 dropListMixin</li><li>还有很多方法并未加进来，可根据实际自行添加<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// select/index.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>select      <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"value"</span>      <span class="token operator">:</span>placeholder<span class="token operator">=</span><span class="token string">"placeholder"</span>      <span class="token operator">:</span>filterable<span class="token operator">=</span><span class="token string">"true"</span>      <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"customStyle"</span>      <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"customClass"</span>      <span class="token operator">:</span>remote<span class="token operator">=</span><span class="token string">"true"</span>      <span class="token operator">:</span>size<span class="token operator">=</span><span class="token string">"size"</span>      <span class="token operator">:</span>remote<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"dSearchList('countryList')"</span>      <span class="token operator">:</span>loading<span class="token operator">=</span><span class="token string">"dLoading"</span>      <span class="token operator">:</span>clearable<span class="token operator">=</span><span class="token string">"true"</span>      @input<span class="token operator">=</span><span class="token string">"onChange($event)"</span>      @change<span class="token operator">=</span><span class="token string">"(val) => onSelectChange(val)"</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>option        v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in dCountryList"</span>        <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item[optionKey]"</span>        <span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">"item[optionLabel]"</span>        <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"item[optionValue]"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"d-f f-jc-sb"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>code <span class="token operator">||</span> <span class="token string">""</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">""</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>numCode <span class="token operator">||</span> <span class="token string">""</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> dropListMixin <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/mixins/drop_list_mixin"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>dropListMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    placeholder<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"请输入"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    customStyle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"width: 100%;"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    customClass<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    clearable<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    size<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"small"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    optionKey<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    optionLabel<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    optionValue<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dInit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"countryList"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onSelectChange</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"selectChange"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//   使用示例 </span>  <span class="token operator">&lt;</span>country<span class="token operator">-</span>select <span class="token operator">:</span>size<span class="token operator">=</span><span class="token string">"medium"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"formData.countryCode"</span> @selectChange<span class="token operator">=</span><span class="token string">"val => onCountrySelect(val,'countryCode')"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>country<span class="token operator">-</span>select<span class="token operator">></span> <span class="token comment">//   使用示例 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;少了罗嗦，直接看代码&quot;&gt;&lt;a href=&quot;#少了罗嗦，直接看代码&quot; class=&quot;headerlink&quot; title=&quot;少了罗嗦，直接看代码&quot;&gt;&lt;/a&gt;少了罗嗦，直接看代码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注意代码不能直接使用，只是提供一种封装思路，其中 dSearch</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="Element-ui" scheme="http://damao2250.com/tags/Element-ui/"/>
    
    <category term="UI框架" scheme="http://damao2250.com/tags/UI%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>关于js中对小数的计算</title>
    <link href="http://damao2250.com/2020/10/03/%E5%85%B3%E4%BA%8Ejs%E4%B8%AD%E5%AF%B9%E5%B0%8F%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
    <id>http://damao2250.com/2020/10/03/%E5%85%B3%E4%BA%8Ejs%E4%B8%AD%E5%AF%B9%E5%B0%8F%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/</id>
    <published>2020-10-03T01:25:00.000Z</published>
    <updated>2021-10-03T17:07:58.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul><li><p>在js的小数计算中，0.1+0.2=0.30000000000000004</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num1 <span class="token operator">+</span> num2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.30000000000000004 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1></li><li><p>为什么出现这样的结果，我们把小数转换成计算机能读得懂的二进制就比较明了了</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 0.1 -> 0.1.toString(2) -> 0.0001100110011001100110011001100110011001100110011001101(无限循环…)</span><span class="token comment">// 0.2 -> 0.1.toString(2) -> 0.001100110011001100110011001100110011001100110011001101(无限循环…)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>双精度浮点数的小数部分最多支持 52 位，所以两者相加之后得到这么一串 </p><ul><li>0.0100110011001100110011001100110011001100110011001100 </li></ul></li><li><p>因浮点数小数位的限制而截断的二进制数字，这时候，我们再把它转换为十进制，就成了 0.30000000000000004</p></li></ul><h1 id="如何处理此类问题？"><a href="#如何处理此类问题？" class="headerlink" title="如何处理此类问题？"></a>如何处理此类问题？</h1><ul><li>为了避免产生精度差异，我们要把需要计算的数字乘以 10 的 n 次幂，换算成计算机能够精确识别的整数，然后再除以 10 的 n 次幂，大部分编程语言都是这样处理精度差异的，我们就借用过来处理一下 JS 中的浮点数精度误差。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">formatNum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">num<span class="token punctuation">,</span> digit</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> m <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> digit <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span> num <span class="token operator">*</span> m<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token operator">/</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> num1 <span class="token operator">+</span> num2 <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">formatNum</span><span class="token punctuation">(</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tips:</span><span class="token comment">// pow() 方法可返回 x 的 y 次幂的值。</span><span class="token comment">// parseInt() 函数可解析一个字符串，并返回一个整数。（第二个参数取值2-36，省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在js的小数计算中，0.1+0.2=0.30000000000000004&lt;/p&gt;
&lt;pre class=&quot;line-nu</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://damao2250.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React Native for Windows 0.61 起步</title>
    <link href="http://damao2250.com/2020/05/14/01-React-Native-Windows%E4%B9%8B%E8%B5%B7%E6%AD%A5/"/>
    <id>http://damao2250.com/2020/05/14/01-React-Native-Windows%E4%B9%8B%E8%B5%B7%E6%AD%A5/</id>
    <published>2020-05-14T01:25:00.000Z</published>
    <updated>2021-10-02T09:08:04.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><ul><li><p>Windows 10</p><h1 id="开发依赖"><a href="#开发依赖" class="headerlink" title="开发依赖"></a>开发依赖</h1></li><li><p>安装 Visual Studio 2019</p></li><li><p>安装 Visual Studio 2019 的这些选项</p><ul><li>工作负载 -&gt; 通用 Windows 平台开发 -&gt; 勾选可选项里的 “C++ (v141)通用 Windows 平台工具”</li><li>工作负载 -&gt; 使用 C++ 的桌面开发</li><li>单个组件 -&gt; 编译器、生成工具和运行时 -&gt; MSVC v141 – VS 2017 C++ x64/x86 生成工具(v14.16)</li><li>单个组件 -&gt; 编译器、生成工具和运行时 -&gt; MSVC v141 – VS 2017 C++ ARM64 生成工具(v14.16)</li><li>单个组件 -&gt; 开发活动 -&gt; Node.js 开发工具</li><li>预计安装所需空间大小：21.64GB<h1 id="安装-React-Native-的开发依赖"><a href="#安装-React-Native-的开发依赖" class="headerlink" title="安装 React Native 的开发依赖"></a>安装 React Native 的开发依赖</h1></li></ul></li><li><p>安装标准的 React Native 开发依赖，中文文档</p></li><li><p>安装 node.js，确保node的版本是12.9.1或是更高，12.9.1是构建 React Native for Windows 推荐的版本</p></li><li><p>安装 Chrome，用于调式JS,可选</p></li><li><p>安装 Yarn，可选安装，如果你想为 react-native-windows 添砖加瓦则续安装</p><h1 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h1></li><li><p>如果在运行应用程序后，打包程序未更新或应用程序未显示 React Native 内容-请关闭打包程序命令提示符窗口，并确保该应用程序已打开，然后运行 yarn start 并再次从 Visual Studio 运行该应用程序。</p></li><li><p>如果您在UWP应用程序窗口中看到带有错误消息：的红色错误框，请 ERROR: Instance failed to start. A connection with the server cannot be established 确保您正在使用打包 yarn start 程序运行，然后再次运行该应用程序。</p><h1 id="安装-React-Native-for-Windows"><a href="#安装-React-Native-for-Windows" class="headerlink" title="安装 React Native for Windows"></a>安装 React Native for Windows</h1></li><li><p>在需要创建项目的目录下面执行 <code>react-native init</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">npx react<span class="token operator">-</span>native init <span class="token operator">&lt;</span>project name<span class="token operator">></span> <span class="token operator">--</span>version <span class="token operator">^</span><span class="token number">0.61</span><span class="token number">.5</span><span class="token comment">// npx 还能避免全局安装的模块,安装模块时会下载到一个临时目录，使用以后再删除</span><span class="token comment">// –version ^0.61.5 指定版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="安装-Windows-扩展"><a href="#安装-Windows-扩展" class="headerlink" title="安装 Windows 扩展"></a>安装 Windows 扩展</h1></li><li><p>安装 React Native for Windows 软件包</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">cd <span class="token operator">&lt;</span>project name<span class="token operator">></span> npx react<span class="token operator">-</span>native<span class="token operator">-</span>windows<span class="token operator">-</span>init <span class="token operator">--</span>overwrite<span class="token comment">// 切换到创建项目的目录下面然后安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="运行-React-Native-Windows-应用"><a href="#运行-React-Native-Windows-应用" class="headerlink" title="运行 React Native Windows 应用"></a>运行 React Native Windows 应用</h1></li><li><p>运行前确保浏览器已经打开</p></li><li><p>在 VS Code 中运行</p><ul><li>安装 VS Code 插件： React Native Tools</li><li>在应用程根目录创建文件 .vscode/launch.json，并粘贴如下内容<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token string">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"Debug Windows"</span><span class="token punctuation">,</span>            <span class="token string">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"reactnative"</span><span class="token punctuation">,</span>            <span class="token string">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token string">"platform"</span><span class="token operator">:</span> <span class="token string">"windows"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js">npx react<span class="token operator">-</span>native run<span class="token operator">-</span>windows<span class="token comment">// 第一次启动会有点慢，安装后会淡出一个命令提示符窗口，请按回车以继续</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>按 “r” 键可以重载应用</p></li></ul><h1 id="在-Visual-Studio-中运行"><a href="#在-Visual-Studio-中运行" class="headerlink" title="在 Visual Studio 中运行"></a>在 Visual Studio 中运行</h1><ul><li>在 Visual Studio 中打开解决方案文件（如：”\windowsAppDemo\windows\windowsAppDemo.sln”）</li><li>如果 Visual Studio 显示无法加载，可以关闭 Visual Studio 然后重新打开</li><li>在项目目录项目下打开命令行提示符运行yarn start</li><li>在 Visual Studio 中的菜单下面选 Debug -&gt; x64 -&gt; 本地计算机（点击绿色三角按钮启动）<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/welcome-react-native-for-windows.png" alt="应用运行成功截图"><!-- 应用运行成功截图 --></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统要求&quot;&gt;&lt;a href=&quot;#系统要求&quot; class=&quot;headerlink&quot; title=&quot;系统要求&quot;&gt;&lt;/a&gt;系统要求&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows 10&lt;/p&gt;
&lt;h1 id=&quot;开发依赖&quot;&gt;&lt;a href=&quot;#开发依赖&quot; class=&quot;h</summary>
      
    
    
    
    <category term="React" scheme="http://damao2250.com/categories/React/"/>
    
    
    <category term="React Native" scheme="http://damao2250.com/tags/React-Native/"/>
    
    <category term="React-Native-Windows" scheme="http://damao2250.com/tags/React-Native-Windows/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="http://damao2250.com/2020/05/14/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://damao2250.com/2020/05/14/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-05-14T01:25:00.000Z</published>
    <updated>2021-10-02T14:28:15.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匹配数字或版本号"><a href="#匹配数字或版本号" class="headerlink" title="匹配数字或版本号"></a>匹配数字或版本号</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// a.b（eg: 1.0, 1.100, 甚至 1.1000）</span><span class="token comment">// a.b.c (eg: 1.1.1, 1.12.1, 甚至 1.121.1)</span><span class="token comment">// a（a可能>5位）</span><span class="token comment">// 不限长度版本</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d+$|^\d+\.\d+$|^\d+(\.\d+)&#123;1,2&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">// 限制长度（每一位版本号应该是一位数）</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d$|^\d\.\d$|^\d(\.\d)&#123;1,2&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="正数的正则表达式"><a href="#正数的正则表达式" class="headerlink" title="正数的正则表达式"></a>正数的正则表达式</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 正数的正则表达式(包括0，小数保留两位)：</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((0&#123;1&#125;\.\d&#123;1,2&#125;)|([1-9]\d*\.&#123;1&#125;\d&#123;1,2&#125;)|([1-9]+\d*)|0)$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 正数的正则表达式(不包括0，小数保留两位)：</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((0&#123;1&#125;\.\d&#123;1,2&#125;)|([1-9]\d*\.&#123;1&#125;\d&#123;1,2&#125;)|([1-9]+\d*))$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 正整数的正则表达式(包括0)：</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[+]&#123;0,1&#125;(\d+)$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 正整数的正则表达式(不包括0)：</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9]\d*$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="折扣正则表达式"><a href="#折扣正则表达式" class="headerlink" title="折扣正则表达式"></a>折扣正则表达式</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 折扣（0-1）的小数的正则表达式(包括1)：</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0\.\d+|1)$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 折扣（0-1）的小数的正则表达式(不包括1)：</span><span class="token keyword">var</span> Reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0\.\d+)$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;匹配数字或版本号&quot;&gt;&lt;a href=&quot;#匹配数字或版本号&quot; class=&quot;headerlink&quot; title=&quot;匹配数字或版本号&quot;&gt;&lt;/a&gt;匹配数字或版本号&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-langua</summary>
      
    
    
    
    <category term="正则" scheme="http://damao2250.com/categories/%E6%AD%A3%E5%88%99/"/>
    
    
    <category term="正则表达式" scheme="http://damao2250.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>抽象组件实现节流/防抖</title>
    <link href="http://damao2250.com/2020/05/04/%E6%8A%BD%E8%B1%A1%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81and%E9%98%B2%E6%8A%96/"/>
    <id>http://damao2250.com/2020/05/04/%E6%8A%BD%E8%B1%A1%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81and%E9%98%B2%E6%8A%96/</id>
    <published>2020-05-04T01:25:00.000Z</published>
    <updated>2021-10-03T17:05:41.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="节流-防抖"><a href="#节流-防抖" class="headerlink" title="节流/防抖"></a>节流/防抖</h1><ul><li>节流：<ul><li>一个函数执行一行后，只有大于设定的执行周期后才会被执行第二次(点击事件)</li><li>有个需要频繁触发的函数，出于优化性能角度，在规定时间内，只让函数触发的第一次生效后面不生效</li></ul></li><li>防抖：<ul><li>一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面不生效<h1 id="Vue实现函数防抖组件"><a href="#Vue实现函数防抖组件" class="headerlink" title="Vue实现函数防抖组件"></a>Vue实现函数防抖组件</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 组件</span><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> isDebounce<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer  <span class="token keyword">let</span> lastCall <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDebounce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> params<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastCall <span class="token operator">&lt;</span> wait<span class="token punctuation">)</span> <span class="token keyword">return</span>      lastCall <span class="token operator">=</span> now      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> params<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"Throttle"</span><span class="token punctuation">,</span>  abstract<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    time<span class="token operator">:</span> Number<span class="token punctuation">,</span>    events<span class="token operator">:</span> String<span class="token punctuation">,</span>    isDebounce<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventKeys <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>originMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>throttledMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventKeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> target <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>originMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throttledMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throttledMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>originMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> target        <span class="token keyword">this</span><span class="token punctuation">.</span>throttledMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isDebounce<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>        vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throttledMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> vnode  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 通过第三个参数 isDebounce来控制切换防抖节流</span><span class="token comment">// 在 main.js 引入</span><span class="token keyword">import</span> Throttle <span class="token keyword">from</span> <span class="token string">"./Throttle"</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"Throttle"</span><span class="token punctuation">,</span> Throttle<span class="token punctuation">)</span><span class="token comment">// 使用</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Throttle <span class="token operator">:</span>timer<span class="token operator">=</span><span class="token string">"1000"</span> events<span class="token operator">=</span><span class="token string">"click"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>botton @click<span class="token operator">=</span><span class="token string">"onClick($event, 1)"</span><span class="token operator">></span>click <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>botton<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Throttle<span class="token operator">></span>  <span class="token operator">&lt;</span>Throttle <span class="token operator">:</span>timer<span class="token operator">=</span><span class="token string">"1000"</span> events<span class="token operator">=</span><span class="token string">"click"</span> <span class="token operator">:</span>isDebounce<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>botton @click<span class="token operator">=</span><span class="token string">"onAdd"</span><span class="token operator">></span>click <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>botton<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Throttle<span class="token operator">></span>  <span class="token operator">&lt;</span>Throttle <span class="token operator">:</span>timer<span class="token operator">=</span><span class="token string">"3300"</span> events<span class="token operator">=</span><span class="token string">"mouseleave"</span> <span class="token operator">:</span>isDebounce<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>botton @mouseleave<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"onAdd"</span><span class="token operator">></span>click <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>botton<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Throttle<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      val<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">$ev<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">onAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">+=</span> <span class="token number">3</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现一个防抖函数"><a href="#实现一个防抖函数" class="headerlink" title="实现一个防抖函数"></a>实现一个防抖函数</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在第一次触发事件时，不立即执行，而是在给定的时间值后，如果没有再次触发就执行，如果触发了，就取消当前的计时，然后重新计时</span><span class="token comment">/** *  * @param &#123;Function&#125; fn 需要防抖的函数 * @param &#123;Number&#125; delay 毫秒，防抖时间值 */</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">300</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="实现一个节流函数"><a href="#实现一个节流函数" class="headerlink" title="实现一个节流函数"></a>实现一个节流函数</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 类似控制阀门定期开放的函数，即让函数执行一次后，在间隔的时间里暂时失效不能再次执行，等过了间隔时间又重新激活（相当于冷却时间）</span><span class="token comment">/** *  * @param &#123;Function&#125; fn 需要节流的函数 * @param &#123;Number&#125; delay 毫秒，节流间隔时间值 */</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">300</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 休息时间，不执行函数</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 工作时间，执行函数，并且在间隔期间内把状态设为无效</span>    valid <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      valid <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;节流-防抖&quot;&gt;&lt;a href=&quot;#节流-防抖&quot; class=&quot;headerlink&quot; title=&quot;节流/防抖&quot;&gt;&lt;/a&gt;节流/防抖&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;节流：&lt;ul&gt;
&lt;li&gt;一个函数执行一行后，只有大于设定的执行周期后才会被执行第二次(点击事件)&lt;/li</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="节流/防抖" scheme="http://damao2250.com/tags/%E8%8A%82%E6%B5%81-%E9%98%B2%E6%8A%96/"/>
    
  </entry>
  
</feed>
