<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damao</title>
  
  <subtitle>乐躬耕于陇亩兮，吾爱吾庐。聊寄傲于琴书兮，以待天时。</subtitle>
  <link href="http://damao2250.com/atom.xml" rel="self"/>
  
  <link href="http://damao2250.com/"/>
  <updated>2022-12-07T08:25:36.090Z</updated>
  <id>http://damao2250.com/</id>
  
  <author>
    <name>Damao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github向开源项目提交PR步骤</title>
    <link href="http://damao2250.com/2022/12/07/Github%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4PR%E6%AD%A5%E9%AA%A4/"/>
    <id>http://damao2250.com/2022/12/07/Github%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4PR%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-12-07T07:58:38.000Z</published>
    <updated>2022-12-07T08:25:36.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向开源项目提交PR步骤"><a href="#向开源项目提交PR步骤" class="headerlink" title="向开源项目提交PR步骤"></a>向开源项目提交PR步骤</h2><h3 id="Fork原项目到自己的仓库中"><a href="#Fork原项目到自己的仓库中" class="headerlink" title="Fork原项目到自己的仓库中"></a>Fork原项目到自己的仓库中</h3><ul><li><code>fork</code>是’分叉’、’复制’的意思，<code>fork</code>可以复制出一个仓库的新拷贝，包含了原有库中的所有提交记录</li><li><code>fork</code>后这个代码库是完全独立的，可以在自己的库中做任何修改，也可以向原来的库提交合并请求</li></ul><h3 id="clone自己仓库中的项目到本地"><a href="#clone自己仓库中的项目到本地" class="headerlink" title="clone自己仓库中的项目到本地"></a>clone自己仓库中的项目到本地</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ git clone 自己仓库中fork过来的项目地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h3 id="创建修改分支"><a href="#创建修改分支" class="headerlink" title="创建修改分支"></a>创建修改分支</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建并切换到自己要修改的分支，一般修改分支名应为：bugfix/xxx</span>$ git checkout <span class="token operator">-</span>b 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h3 id="修改相应内容"><a href="#修改相应内容" class="headerlink" title="修改相应内容"></a>修改相应内容</h3><ul><li>修正错误内容</li></ul><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ git add <span class="token punctuation">.</span>$ git commit <span class="token operator">-</span>m <span class="token string">"fix：xxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h3 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h3><pre><code><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ git push <span class="token operator">-</span>u origin bugfix<span class="token operator">/</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><h3 id="创建PR"><a href="#创建PR" class="headerlink" title="创建PR"></a>创建PR</h3><ul><li>GitHub仓库上方 <code>Compare &amp; pull request</code> 按钮，创建一个PR</li><li>打开pull request页面可以给该项目作者留言说明，然后点击<code>Create pull request</code>按钮</li><li>等作者同意并<code>Merge pull request</code>之后，就完成一个PR了</li></ul><h3 id="关于PR"><a href="#关于PR" class="headerlink" title="关于PR"></a>关于PR</h3><ul><li>怎么理解<code>Pull requests</code>？字面意思：拉取请求，合并请求</li><li>一个有趣知乎的回答说：我改了你们的代码，你们拉回去看看吧</li><li>大概 To request you to pull my code, is called <code>pull request</code>（求拉！）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;向开源项目提交PR步骤&quot;&gt;&lt;a href=&quot;#向开源项目提交PR步骤&quot; class=&quot;headerlink&quot; title=&quot;向开源项目提交PR步骤&quot;&gt;&lt;/a&gt;向开源项目提交PR步骤&lt;/h2&gt;&lt;h3 id=&quot;Fork原项目到自己的仓库中&quot;&gt;&lt;a href=&quot;#For</summary>
      
    
    
    
    <category term="Github" scheme="http://damao2250.com/categories/Github/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
    <category term="Pull request" scheme="http://damao2250.com/tags/Pull-request/"/>
    
  </entry>
  
  <entry>
    <title>JS中常用的小工具</title>
    <link href="http://damao2250.com/2022/12/07/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://damao2250.com/2022/12/07/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-12-07T06:15:20.000Z</published>
    <updated>2022-12-07T07:28:50.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个最简单的服务器框架（Node）"><a href="#一个最简单的服务器框架（Node）" class="headerlink" title="一个最简单的服务器框架（Node）"></a>一个最简单的服务器框架（Node）</h2><ul><li>通过 <code>node server.js</code> 进行启动服务器<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 导入模块 （yarn add express 或 npm i express 安装）</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实例化对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义端口号</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment">// 设置路由</span><span class="token comment">/** * 当访问根路径时返回Hello World */</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听端口</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server running at  http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一个最简单的服务器框架（Node）&quot;&gt;&lt;a href=&quot;#一个最简单的服务器框架（Node）&quot; class=&quot;headerlink&quot; title=&quot;一个最简单的服务器框架（Node）&quot;&gt;&lt;/a&gt;一个最简单的服务器框架（Node）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过 &lt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="工具" scheme="http://damao2250.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>转：86张脑图，一口气看完React</title>
    <link href="http://damao2250.com/2022/12/02/%E8%BD%AC%EF%BC%9A86%E5%BC%A0%E8%84%91%E5%9B%BE%EF%BC%8C%E4%B8%80%E5%8F%A3%E6%B0%94%E7%9C%8B%E5%AE%8CReact/"/>
    <id>http://damao2250.com/2022/12/02/%E8%BD%AC%EF%BC%9A86%E5%BC%A0%E8%84%91%E5%9B%BE%EF%BC%8C%E4%B8%80%E5%8F%A3%E6%B0%94%E7%9C%8B%E5%AE%8CReact/</id>
    <published>2022-12-02T03:26:45.000Z</published>
    <updated>2022-12-02T03:31:55.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><ul><li><a href="https://juejin.cn/post/7085145274200358949">https://juejin.cn/post/7085145274200358949</a></li><li><a href="https://aqingya.cn/articl/bf557b10.html">https://aqingya.cn/articl/bf557b10.html</a></li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><div id="post">  <article class="post-content" id="article-container">    <h2 id="1、安装">      <a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装    </h2>    <p>      <a href="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png"        data-thumb="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png">        <img src="https://s2.loli.net/2022/07/06/ibg5tGe6UCnf9Kv.png">      </a>    </p>    <h2 id="2、核心概念">      <a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念    </h2>    <h3 id="2-1JSX-简介">      <a href="#2-1JSX-简介" class="headerlink" title="2.1JSX 简介"></a>2.1JSX 简介    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png"        data-thumb="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png">        <img src="https://s2.loli.net/2022/07/06/6pnyHWwPxGI2brE.png">      </a>    </p>    <h3 id="2-2元素渲染">      <a href="#2-2元素渲染" class="headerlink" title="2.2元素渲染"></a>2.2 元素渲染    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png"        data-thumb="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png">        <img src="https://s2.loli.net/2022/07/06/Oxd9LI6TRQcyEs3.png">      </a>    </p>    <h3 id="2-3组件-amp-Props">      <a href="#2-3组件-amp-Props" class="headerlink" title="2.3组件 &amp; Props"></a>2.3 组件 &amp;      Props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png"        data-thumb="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png">        <img src="https://s2.loli.net/2022/07/06/MPANLXBt4EHzGax.png">      </a>    </p>    <h3 id="2-4-1State-amp-生命周期">      <a href="#2-4-1State-amp-生命周期" class="headerlink" title="2.4.1State &amp; 生命周期"></a>2.4.1State &amp; 生命周期    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png"        data-thumb="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png">        <img src="https://s2.loli.net/2022/07/06/qdPTbJ4QiZfhX5v.png">      </a>    </p>    <h3 id="2-4-2数据流和正确使用State">      <a href="#2-4-2数据流和正确使用State" class="headerlink" title="2.4.2数据流和正确使用State"></a>2.4.2      数据流和正确使用 State    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png"        data-thumb="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png">        <img src="https://s2.loli.net/2022/07/06/q4BIn6CKxEbuZcJ.png">      </a>    </p>    <h3 id="2-5事件处理">      <a href="#2-5事件处理" class="headerlink" title="2.5事件处理"></a>2.5 事件处理    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png"        data-thumb="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png">        <img src="https://s2.loli.net/2022/07/06/lLS2XNqm71r4De5.png">      </a>    </p>    <h3 id="2-6条件渲染">      <a href="#2-6条件渲染" class="headerlink" title="2.6条件渲染"></a>2.6 条件渲染    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png"        data-thumb="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png">        <img src="https://s2.loli.net/2022/07/06/O92NUePCmp17XhG.png">      </a>    </p>    <h3 id="2-7列表-amp-Key">      <a href="#2-7列表-amp-Key" class="headerlink" title="2.7列表 &amp; Key"></a>2.7 列表 &amp; Key    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png"        data-thumb="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png">        <img src="https://s2.loli.net/2022/07/06/7Z1KYi6Pcqkv8Xu.png">      </a>    </p>    <h3 id="2-8表单">      <a href="#2-8表单" class="headerlink" title="2.8表单"></a>2.8 表单    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png"        data-thumb="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png">        <img src="https://s2.loli.net/2022/07/06/hfZ8tkEpKnP4IX5.png">      </a>    </p>    <h3 id="2-9状态提升">      <a href="#2-9状态提升" class="headerlink" title="2.9状态提升"></a>2.9 状态提升    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png"        data-thumb="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png">        <img src="https://s2.loli.net/2022/07/06/6z8U51HolrcgXS4.png">      </a>    </p>    <h3 id="2-10组合-vs-继承">      <a href="#2-10组合-vs-继承" class="headerlink" title="2.10组合 vs 继承"></a>2.10      组合 vs 继承    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png"        data-thumb="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png">        <img src="https://s2.loli.net/2022/07/06/jpulnBDtJcHVETU.png">      </a>    </p>    <h3 id="2-11React-哲学">      <a href="#2-11React-哲学" class="headerlink" title="2.11React 哲学"></a>2.11React 哲学    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png"        data-thumb="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png">        <img src="https://s2.loli.net/2022/07/06/4d1qE9INO6rv3us.png">      </a>    </p>    <h2 id="3-高级指引">      <a href="#3-高级指引" class="headerlink" title="3. 高级指引"></a>3. 高级指引    </h2>    <h3 id="3-1无障碍辅助功能">      <a href="#3-1无障碍辅助功能" class="headerlink" title="3.1无障碍辅助功能"></a>3.1 无障碍辅助功能    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png"        data-thumb="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png">        <img src="https://s2.loli.net/2022/07/06/8Vpjsal4AUqKnbv.png">      </a>    </p>    <h3 id="3-2代码分割">      <a href="#3-2代码分割" class="headerlink" title="3.2代码分割"></a>3.2 代码分割    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png"        data-thumb="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png">        <img src="https://s2.loli.net/2022/07/06/tTJCiaExH4kMe2v.png">      </a>    </p>    <h3 id="3-3-1Context">      <a href="#3-3-1Context" class="headerlink" title="3.3.1Context"></a>3.3.1Context    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png"        data-thumb="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png">        <img src="https://s2.loli.net/2022/07/06/zkgRICsW84VZcot.png">      </a>    </p>    <h3 id="3-3-2Context-API">      <a href="#3-3-2Context-API" class="headerlink" title="3.3.2Context API"></a>3.3.2Context      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png"        data-thumb="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png">        <img src="https://s2.loli.net/2022/07/06/Jb1zgLGERfsx795.png">      </a>    </p>    <h3 id="3-4错误边界">      <a href="#3-4错误边界" class="headerlink" title="3.4错误边界"></a>3.4 错误边界    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png" data-caption="3.4错误边界"        data-thumb="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png">        <img src="https://s2.loli.net/2022/07/06/aFlYvoVPxLDTshS.png" alt="3.4错误边界"></a>    <div class="img-alt is-center">3.4 错误边界</div>    </p>    <h3 id="3-5Refs-转发">      <a href="#3-5Refs-转发" class="headerlink" title="3.5Refs 转发"></a>3.5Refs 转发    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png"        data-thumb="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png">        <img src="https://s2.loli.net/2022/07/06/FvDnNsMyHkpm6Rq.png">      </a>    </p>    <h3 id="3-6Fragments">      <a href="#3-6Fragments" class="headerlink" title="3.6Fragments"></a>3.6Fragments    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png"        data-thumb="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png">        <img src="https://s2.loli.net/2022/07/06/DmJkZEFg5TxwNhd.png">      </a>    </p>    <h3 id="3-7高阶组件">      <a href="#3-7高阶组件" class="headerlink" title="3.7高阶组件"></a>3.7 高阶组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png"        data-thumb="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png">        <img src="https://s2.loli.net/2022/07/06/iupVNHclMmInCJK.png">      </a>    </p>    <h3 id="3-8-1集成带有-DOM-操作的插件">      <a href="#3-8-1集成带有-DOM-操作的插件" class="headerlink" title="3.8.1集成带有 DOM 操作的插件"></a>3.8.1 集成带有 DOM 操作的插件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png"        data-thumb="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png">        <img src="https://s2.loli.net/2022/07/06/TfSOd8YkAluW2i7.png">      </a>    </p>    <h3 id="3-8-2与其他第三方库协同">      <a href="#3-8-2与其他第三方库协同" class="headerlink" title="3.8.2与其他第三方库协同"></a>3.8.2 与其他第三方库协同    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png"        data-thumb="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png">        <img src="https://s2.loli.net/2022/07/06/ZwaCKDyPVlxTI9f.png">      </a>    </p>    <h3 id="3-9-1JSX-本质">      <a href="#3-9-1JSX-本质" class="headerlink" title="3.9.1JSX 本质"></a>3.9.1JSX      本质    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png"        data-thumb="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png">        <img src="https://s2.loli.net/2022/07/06/Xi4PKCthsU15Lby.png">      </a>    </p>    <h3 id="3-9-2JSX-指定-React-元素类型">      <a href="#3-9-2JSX-指定-React-元素类型" class="headerlink" title="3.9.2JSX 指定 React 元素类型"></a>3.9.2JSX 指定 React 元素类型    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png"        data-thumb="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png">        <img src="https://s2.loli.net/2022/07/06/dSYGz3Z5npDTFQJ.png">      </a>    </p>    <h3 id="3-9-3JSX-中指定-props">      <a href="#3-9-3JSX-中指定-props" class="headerlink" title="3.9.3JSX 中指定 props"></a>3.9.3JSX 中指定 props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png"        data-thumb="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png">        <img src="https://s2.loli.net/2022/07/06/rFs3Mfd4bVN65Jk.png">      </a>    </p>    <h3 id="3-9-4JSX-中的子元素">      <a href="#3-9-4JSX-中的子元素" class="headerlink" title="3.9.4JSX 中的子元素"></a>3.9.4JSX 中的子元素    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png"        data-thumb="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png">        <img src="https://s2.loli.net/2022/07/06/IY9d1ESqiyWB7m6.png">      </a>    </p>    <h3 id="3-10-1性能优化之生产版本">      <a href="#3-10-1性能优化之生产版本" class="headerlink" title="3.10.1性能优化之生产版本"></a>3.10.1      性能优化之生产版本    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png"        data-thumb="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png">        <img src="https://s2.loli.net/2022/07/06/JbQm5lqAZCnxyT4.png">      </a>    </p>    <h3 id="3-10-2使用-Chrome-Performance-标签分析组件">      <a href="#3-10-2使用-Chrome-Performance-标签分析组件" class="headerlink"        title="3.10.2使用 Chrome Performance 标签分析组件"></a>3.10.2 使用 Chrome Performance 标签分析组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png"        data-thumb="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png">        <img src="https://s2.loli.net/2022/07/06/ZMHAahjsfiJtQE9.png">      </a>    </p>    <h3 id="3-10-3使用开发者工具中的分析器对组件进行分析">      <a href="#3-10-3使用开发者工具中的分析器对组件进行分析" class="headerlink" title="3.10.3使用开发者工具中的分析器对组件进行分析"></a>3.10.3      使用开发者工具中的分析器对组件进行分析    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png"        data-thumb="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png">        <img src="https://s2.loli.net/2022/07/06/5tCScaGKkTm2qEA.png">      </a>    </p>    <h3 id="3-10-4其他优化">      <a href="#3-10-4其他优化" class="headerlink" title="3.10.4其他优化"></a>3.10.4 其他优化    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png"        data-thumb="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png">        <img src="https://s2.loli.net/2022/07/06/38gvUkJfnYPE4cZ.png">      </a>    </p>    <h3 id="3-11Portals">      <a href="#3-11Portals" class="headerlink" title="3.11Portals"></a>3.11Portals    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png"        data-thumb="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png">        <img src="https://s2.loli.net/2022/07/06/aezPsWSnDACFbKH.png">      </a>    </p>    <h3 id="3-12Profiler-API">      <a href="#3-12Profiler-API" class="headerlink" title="3.12Profiler API"></a>3.12Profiler      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png"        data-thumb="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png">        <img src="https://s2.loli.net/2022/07/06/7q9wDNcHhJ4ofYm.png">      </a>    </p>    <h3 id="3-13不使用-ES6">      <a href="#3-13不使用-ES6" class="headerlink" title="3.13不使用 ES6"></a>3.13 不使用      ES6    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png"        data-thumb="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png">        <img src="https://s2.loli.net/2022/07/06/E6wetpGISDZzm4B.png">      </a>    </p>    <h3 id="3-14不使用-JSX">      <a href="#3-14不使用-JSX" class="headerlink" title="3.14不使用 JSX"></a>3.14 不使用      JSX    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png"        data-thumb="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png">        <img src="https://s2.loli.net/2022/07/06/joxhbYvmOIMk6GN.png">      </a>    </p>    <h3 id="3-15协调">      <a href="#3-15协调" class="headerlink" title="3.15协调"></a>3.15 协调    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png"        data-thumb="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png">        <img src="https://s2.loli.net/2022/07/06/izXp5yWtmZgJkc6.png">      </a>    </p>    <h3 id="3-16Refs-amp-DOM">      <a href="#3-16Refs-amp-DOM" class="headerlink" title="3.16Refs &amp; DOM"></a>3.16Refs      &amp; DOM    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png"        data-thumb="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png">        <img src="https://s2.loli.net/2022/07/06/lGgAUoNaL7jPHVT.png">      </a>    </p>    <h3 id="3-17Render-Props">      <a href="#3-17Render-Props" class="headerlink" title="3.17Render Props"></a>3.17Render      Props    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png"        data-thumb="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png">        <img src="https://s2.loli.net/2022/07/06/6aBM45Gx8jWNt3L.png">      </a>    </p>    <h3 id="3-18-1静态类型检查之Flow">      <a href="#3-18-1静态类型检查之Flow" class="headerlink" title="3.18.1静态类型检查之Flow"></a>3.18.1      静态类型检查之 Flow    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png"        data-thumb="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png">        <img src="https://s2.loli.net/2022/07/06/k2b5eKTO9fzmvU6.png">      </a>    </p>    <h3 id="3-18-2静态类型检查之TypeScript">      <a href="#3-18-2静态类型检查之TypeScript" class="headerlink" title="3.18.2静态类型检查之TypeScript"></a>3.18.2 静态类型检查之      TypeScript    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png"        data-thumb="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png">        <img src="https://s2.loli.net/2022/07/06/QIfcROPhJ2aKg5U.png">      </a>    </p>    <h3 id="3-18-2静态类型检查之其他">      <a href="#3-18-2静态类型检查之其他" class="headerlink" title="3.18.2静态类型检查之其他"></a>3.18.2      静态类型检查之其他    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png"        data-thumb="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png">        <img src="https://s2.loli.net/2022/07/06/AE9wl6h84HtbYyr.png">      </a>    </p>    <h3 id="3-19严格模式">      <a href="#3-19严格模式" class="headerlink" title="3.19严格模式"></a>3.19 严格模式    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png"        data-thumb="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png">        <img src="https://s2.loli.net/2022/07/06/D2RTmX95Jo3I4bL.png">      </a>    </p>    <h3 id="3-20使用-PropTypes-进行类型检查">      <a href="#3-20使用-PropTypes-进行类型检查" class="headerlink" title="3.20使用 PropTypes 进行类型检查"></a>3.20 使用 PropTypes      进行类型检查    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png"        data-thumb="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png">        <img src="https://s2.loli.net/2022/07/06/Zfp6uHTFBswJWdN.png">      </a>    </p>    <h3 id="3-21非受控组件">      <a href="#3-21非受控组件" class="headerlink" title="3.21非受控组件"></a>3.21 非受控组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png"        data-thumb="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png">        <img src="https://s2.loli.net/2022/07/06/IoGaPmxtqHXQfY3.png">      </a>    </p>    <h3 id="3-22Web-Components">      <a href="#3-22Web-Components" class="headerlink" title="3.22Web Components"></a>3.22Web Components    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png"        data-thumb="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png">        <img src="https://s2.loli.net/2022/07/06/2IG9mSRigZNTAFj.png">      </a>    </p>    <h2 id="4-API-参考">      <a href="#4-API-参考" class="headerlink" title="4. API 参考"></a>4. API 参考    </h2>    <h3 id="4-1-1React-顶层-API之概览">      <a href="#4-1-1React-顶层-API之概览" class="headerlink" title="4.1.1React 顶层 API之概览"></a>4.1.1React 顶层 API 之概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png"        data-thumb="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png">        <img src="https://s2.loli.net/2022/07/06/knHycXqgxuj8ls4.png">      </a>    </p>    <h3 id="4-1-2React-顶层-API之参考">      <a href="#4-1-2React-顶层-API之参考" class="headerlink" title="4.1.2React 顶层 API之参考"></a>4.1.2React 顶层 API 之参考    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png"        data-thumb="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png">        <img src="https://s2.loli.net/2022/07/06/qdP9rcDvsNhnC5w.png">      </a>    </p>    <h3 id="4-1-3React-顶层-API之参考2">      <a href="#4-1-3React-顶层-API之参考2" class="headerlink" title="4.1.3React 顶层 API之参考2"></a>4.1.3React 顶层 API 之参考 2    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png"        data-thumb="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png">        <img src="https://s2.loli.net/2022/07/06/lYxfSmKdZG2MFDX.png">      </a>    </p>    <h3 id="4-2-1React-Component之概述">      <a href="#4-2-1React-Component之概述" class="headerlink" title="4.2.1React.Component之概述"></a>4.2.1React.Component      之概述    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png"        data-thumb="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png">        <img src="https://s2.loli.net/2022/07/06/dwZN6heRsPGb7xL.png">      </a>    </p>    <h3 id="4-2-2常用的生命周期方法">      <a href="#4-2-2常用的生命周期方法" class="headerlink" title="4.2.2常用的生命周期方法"></a>4.2.2 常用的生命周期方法    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png"        data-thumb="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png">        <img src="https://s2.loli.net/2022/07/06/dwtOcxmsz3b2CPD.png">      </a>    </p>    <h3 id="4-2-3不常用的生命周期方法">      <a href="#4-2-3不常用的生命周期方法" class="headerlink" title="4.2.3不常用的生命周期方法"></a>4.2.3      不常用的生命周期方法    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png"        data-thumb="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png">        <img src="https://s2.loli.net/2022/07/06/r9Xm8TFj7HY63xO.png">      </a>    </p>    <h3 id="4-2-4其他-API">      <a href="#4-2-4其他-API" class="headerlink" title="4.2.4其他 API"></a>4.2.4 其他      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png"        data-thumb="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png">        <img src="https://s2.loli.net/2022/07/06/8xaY67ovAgGhjCJ.png">      </a>    </p>    <h3 id="4-2-5Class-属性和实例属性">      <a href="#4-2-5Class-属性和实例属性" class="headerlink" title="4.2.5Class 属性和实例属性"></a>4.2.5Class 属性和实例属性    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png"        data-thumb="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png">        <img src="https://s2.loli.net/2022/07/06/QyvBpDfOKjVxTJR.png">      </a>    </p>    <h3 id="4-3ReactDOM">      <a href="#4-3ReactDOM" class="headerlink" title="4.3ReactDOM"></a>4.3ReactDOM    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png"        data-thumb="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png">        <img src="https://s2.loli.net/2022/07/06/Gp7dZkshETjVXWF.png">      </a>    </p>    <h3 id="4-4ReactDOMClient">      <a href="#4-4ReactDOMClient" class="headerlink" title="4.4ReactDOMClient"></a>4.4ReactDOMClient    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png"        data-thumb="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png">        <img src="https://s2.loli.net/2022/07/06/GjNziFwn9kegs41.png">      </a>    </p>    <h3 id="4-5ReactDOMServer">      <a href="#4-5ReactDOMServer" class="headerlink" title="4.5ReactDOMServer"></a>4.5ReactDOMServer    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png"        data-thumb="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png">        <img src="https://s2.loli.net/2022/07/06/phWHotfsDImaYGS.png">      </a>    </p>    <h3 id="4-6DOM-元素">      <a href="#4-6DOM-元素" class="headerlink" title="4.6DOM 元素"></a>4.6DOM 元素    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png"        data-thumb="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png">        <img src="https://s2.loli.net/2022/07/06/jK7FDwdc4kNy6LM.png">      </a>    </p>    <h3 id="4-7-1合成事件">      <a href="#4-7-1合成事件" class="headerlink" title="4.7.1合成事件"></a>4.7.1 合成事件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png"        data-thumb="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png">        <img src="https://s2.loli.net/2022/07/06/r4UpPF69WDbt2IK.png">      </a>    </p>    <h3 id="4-7-2支持的事件">      <a href="#4-7-2支持的事件" class="headerlink" title="4.7.2支持的事件"></a>4.7.2 支持的事件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png"        data-thumb="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png">        <img src="https://s2.loli.net/2022/07/06/k9a2Ccx5jlr8gGY.png">      </a>    </p>    <h3 id="4-7-3支持的事件2">      <a href="#4-7-3支持的事件2" class="headerlink" title="4.7.3支持的事件2"></a>4.7.3      支持的事件 2    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png"        data-thumb="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png">        <img src="https://s2.loli.net/2022/07/06/MtFRwaT7AgHXGL2.png">      </a>    </p>    <h3 id="4-7-4支持的事件3">      <a href="#4-7-4支持的事件3" class="headerlink" title="4.7.4支持的事件3"></a>4.7.4      支持的事件 3    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png"        data-thumb="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png">        <img src="https://s2.loli.net/2022/07/06/zUaA2CkOG7DftP9.png">      </a>    </p>    <h3 id="4-8Test-Utilities">      <a href="#4-8Test-Utilities" class="headerlink" title="4.8Test Utilities"></a>4.8Test      Utilities    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png"        data-thumb="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png">        <img src="https://s2.loli.net/2022/07/06/ToJYLEd2K34NFPX.png">      </a>    </p>    <h3 id="4-9Test-Renderer">      <a href="#4-9Test-Renderer" class="headerlink" title="4.9Test Renderer"></a>4.9Test      Renderer    </h3>    <p>      <a href="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png"        data-thumb="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png">        <img src="https://s2.loli.net/2022/07/06/pHGaqdWsgX9KIjF.png">      </a>    </p>    <h3 id="4-10JS-环境要求">      <a href="#4-10JS-环境要求" class="headerlink" title="4.10JS 环境要求"></a>4.10JS      环境要求    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png"        data-thumb="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png">        <img src="https://s2.loli.net/2022/07/07/6jklXM4KtBfIrEY.png">      </a>    </p>    <h3 id="4-11React-术语词">      <a href="#4-11React-术语词" class="headerlink" title="4.11React 术语词"></a>4.11React 术语词    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png"        data-thumb="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png">        <img src="https://s2.loli.net/2022/07/07/B13s4ZJfRYWGpED.png">      </a>    </p>    <h2 id="5-Hook">      <a href="#5-Hook" class="headerlink" title="5. Hook"></a>5. Hook    </h2>    <h3 id="5-1Hook-简介">      <a href="#5-1Hook-简介" class="headerlink" title="5.1Hook 简介"></a>5.1Hook 简介    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png"        data-thumb="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png">        <img src="https://s2.loli.net/2022/07/07/eumWDnL6wCt23gS.png">      </a>    </p>    <h3 id="5-2Hook-概览">      <a href="#5-2Hook-概览" class="headerlink" title="5.2Hook 概览"></a>5.2Hook 概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png"        data-thumb="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png">        <img src="https://s2.loli.net/2022/07/07/p8cKBZJRAkOU5zY.png">      </a>    </p>    <h3 id="5-3使用-State-Hook">      <a href="#5-3使用-State-Hook" class="headerlink" title="5.3使用 State Hook"></a>5.3 使用 State      Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png"        data-thumb="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png">        <img src="https://s2.loli.net/2022/07/07/MHGlBonjrs24qmR.png">      </a>    </p>    <h3 id="5-4使用-Effect-Hook">      <a href="#5-4使用-Effect-Hook" class="headerlink" title="5.4使用 Effect Hook"></a>5.4 使用      Effect Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png"        data-thumb="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png">        <img src="https://s2.loli.net/2022/07/07/HgRmuSMxUe3Y12E.png">      </a>    </p>    <h3 id="5-5Hook-规则">      <a href="#5-5Hook-规则" class="headerlink" title="5.5Hook 规则"></a>5.5Hook 规则    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png"        data-thumb="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png">        <img src="https://s2.loli.net/2022/07/07/Rmbcd5OzNGYjS2Q.png">      </a>    </p>    <h3 id="5-6自定义">      <a href="#5-6自定义" class="headerlink" title="5.6自定义"></a>5.6 自定义    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png"        data-thumb="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png">        <img src="https://s2.loli.net/2022/07/07/WXtaFvQofPUJ3Hk.png">      </a>    </p>    <h3 id="5-7Hook-API">      <a href="#5-7Hook-API" class="headerlink" title="5.7Hook API"></a>5.7Hook      API    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png"        data-thumb="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png">        <img src="https://s2.loli.net/2022/07/07/MVK9dgQy1OIBuD4.png">      </a>    </p>    <h3 id="5-8-1Hooks-FAQ之采纳策略">      <a href="#5-8-1Hooks-FAQ之采纳策略" class="headerlink" title="5.8.1Hooks FAQ之采纳策略"></a>5.8.1Hooks FAQ 之采纳策略    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png"        data-thumb="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png">        <img src="https://s2.loli.net/2022/07/07/TvEBO6AuMCp2Uwy.png">      </a>    </p>    <h3 id="5-8-2Hooks-FAQ之从-Class-迁移到-Hook">      <a href="#5-8-2Hooks-FAQ之从-Class-迁移到-Hook" class="headerlink"        title="5.8.2Hooks FAQ之从 Class 迁移到 Hook"></a>5.8.2Hooks FAQ 之从 Class 迁移到 Hook    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png"        data-thumb="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png">        <img src="https://s2.loli.net/2022/07/07/uoihTqj4SO1K9UN.png">      </a>    </p>    <h3 id="5-8-3Hooks-FAQ之性能优化">      <a href="#5-8-3Hooks-FAQ之性能优化" class="headerlink" title="5.8.3Hooks FAQ之性能优化"></a>5.8.3Hooks FAQ 之性能优化    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png"        data-thumb="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png">        <img src="https://s2.loli.net/2022/07/07/eRvnLQ4AHTwJDUP.png">      </a>    </p>    <h3 id="5-8-4Hooks-FAQ之底层原理">      <a href="#5-8-4Hooks-FAQ之底层原理" class="headerlink" title="5.8.4Hooks FAQ之底层原理"></a>5.8.4Hooks FAQ 之底层原理    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png"        data-thumb="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png">        <img src="https://s2.loli.net/2022/07/07/c81SjgKBle92kpW.png">      </a>    </p>    <h2 id="6-测试">      <a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试    </h2>    <h3 id="6-1测试概览">      <a href="#6-1测试概览" class="headerlink" title="6.1测试概览"></a>6.1 测试概览    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png"        data-thumb="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png">        <img src="https://s2.loli.net/2022/07/07/8I3ZNProt6eBSub.png">      </a>    </p>    <h3 id="6-2测试技巧">      <a href="#6-2测试技巧" class="headerlink" title="6.2测试技巧"></a>6.2 测试技巧    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png"        data-thumb="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png">        <img src="https://s2.loli.net/2022/07/07/NPWwKa43jET2XH6.png">      </a>    </p>    <h3 id="6-3测试环境">      <a href="#6-3测试环境" class="headerlink" title="6.3测试环境"></a>6.3 测试环境    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png"        data-thumb="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png">        <img src="https://s2.loli.net/2022/07/07/J8a3oih4WzeF6Cw.png">      </a>    </p>    <h2 id="7-FAQ">      <a href="#7-FAQ" class="headerlink" title="7. FAQ"></a>7. FAQ    </h2>    <h3 id="7-1AJAX-及-APIs">      <a href="#7-1AJAX-及-APIs" class="headerlink" title="7.1AJAX 及 APIs"></a>7.1AJAX 及 APIs    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png"        data-thumb="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png">        <img src="https://s2.loli.net/2022/07/07/B8uIxFpnVSeOCsW.png">      </a>    </p>    <h3 id="7-2Babel，JSX-及构建过程">      <a href="#7-2Babel，JSX-及构建过程" class="headerlink" title="7.2Babel，JSX 及构建过程"></a>7.2Babel，JSX 及构建过程    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png"        data-thumb="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png">        <img src="https://s2.loli.net/2022/07/07/EH3csd1Dtb87lBr.png">      </a>    </p>    <h3 id="7-3传递函数给组件">      <a href="#7-3传递函数给组件" class="headerlink" title="7.3传递函数给组件"></a>7.3 传递函数给组件    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png" data-caption="7.3传递函数给组件"        data-thumb="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png">        <img src="https://s2.loli.net/2022/07/07/L4HCXGqMQkNzoZF.png" alt="7.3传递函数给组件"></a>    <div class="img-alt is-center">7.3 传递函数给组件</div>    </p>    <h3 id="7-4组件状态">      <a href="#7-4组件状态" class="headerlink" title="7.4组件状态"></a>7.4 组件状态    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png"        data-thumb="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png">        <img src="https://s2.loli.net/2022/07/07/UoDZaA5KtbYTM2w.png">      </a>    </p>    <h3 id="7-5样式与-CSS">      <a href="#7-5样式与-CSS" class="headerlink" title="7.5样式与 CSS"></a>7.5 样式与 CSS    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png"        data-thumb="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png">        <img src="https://s2.loli.net/2022/07/07/oIDp5y2ULrT67FJ.png">      </a>    </p>    <h3 id="7-6项目文件结构">      <a href="#7-6项目文件结构" class="headerlink" title="7.6项目文件结构"></a>7.6 项目文件结构    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png" data-caption="7.6项目文件结构"        data-thumb="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png">        <img src="https://s2.loli.net/2022/07/07/Ju2EclspFOLWH9K.png" alt="7.6项目文件结构"></a>    <div class="img-alt is-center">7.6 项目文件结构</div>    </p>    <h3 id="7-7Virtual-DOM-及内核">      <a href="#7-7Virtual-DOM-及内核" class="headerlink" title="7.7Virtual DOM 及内核"></a>7.7Virtual DOM 及内核    </h3>    <p>      <a href="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png"        data-thumb="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png">        <img src="https://s2.loli.net/2022/07/07/4uCl7DVbfTYHU3X.png">      </a>    </p>  </article></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7085145274200358949&quot;&gt;https://jue</summary>
      
    
    
    
    <category term="React" scheme="http://damao2250.com/categories/React/"/>
    
    
    <category term="React" scheme="http://damao2250.com/tags/React/"/>
    
    <category term="转载与记录" scheme="http://damao2250.com/tags/%E8%BD%AC%E8%BD%BD%E4%B8%8E%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>JS跳出循环</title>
    <link href="http://damao2250.com/2022/12/02/JS%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF/"/>
    <id>http://damao2250.com/2022/12/02/JS%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF/</id>
    <published>2022-12-02T01:29:28.000Z</published>
    <updated>2022-12-02T03:29:56.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for循环-for-in循环"><a href="#for循环-for-in循环" class="headerlink" title="for循环/for-in循环"></a>for循环/for-in循环</h2><ul><li><code>for</code>/<code>for-in</code> 循环可以使用 <code>break</code>/<code>continue</code> 跳出循环</li><li><code>break</code> 是终止当前循环</li><li><code>continue</code> 是结束本次循环，后面的循环会继续执行<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// break或continue</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// break 输出（）</span><span class="token number">1</span><span class="token number">2</span><span class="token comment">// continue 输出</span><span class="token number">1</span><span class="token number">2</span><span class="token number">4</span><span class="token number">5</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'whh'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">'male'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span>name whhsex male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h2><ul><li><p>利用 <code>return</code> 在特定时机跳出当前循环，后面的循环会继续执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 输出</span><span class="token number">1</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用 <code>try…catch</code> 在特定时机抛出异常达到跳出整个循环的效果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      key <span class="token operator">=</span> item<span class="token punctuation">;</span> <span class="token comment">// 记录跳出循环时机</span>      <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 跳出循环后要做的操作</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳出循环时机：'</span><span class="token operator">+</span><span class="token operator">:</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果</span><span class="token number">1</span><span class="token number">2</span>跳出循环时机：<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><table><thead><tr><th align="left">序号</th><th>方法</th><th>break</th><th>continue</th><th>return</th><th>return true</th><th>return false</th></tr></thead><tbody><tr><td align="left">1</td><td>for循环</td><td>成功</td><td>跳出本次循环</td><td>不合法</td><td>不合法</td><td>不合法</td></tr><tr><td align="left">2</td><td>Array.forEach()</td><td>不合法</td><td>不合法</td><td>跳出本次循环</td><td>跳出本次循环</td><td>跳出本次循环</td></tr><tr><td align="left">3</td><td>for…in</td><td>成功</td><td>跳出本次循环</td><td>不合法</td><td>不合法</td><td>不合法</td></tr><tr><td align="left">4</td><td>Array.map()</td><td>不合法</td><td>不合法</td><td>跳出本次循环</td><td>跳出本次循环</td><td>跳出本次循环</td></tr><tr><td align="left">5</td><td>Array.some()</td><td>不合法</td><td>不合法</td><td>跳出本次循环</td><td>成功</td><td>跳出本次循环</td></tr><tr><td align="left">6</td><td>Array.every()</td><td>不合法</td><td>不合法</td><td>成功</td><td>跳出本次循环</td><td>成功</td></tr><tr><td align="left">7</td><td>Array.filter()</td><td>不合法</td><td>不合法</td><td>跳出本次循环</td><td>跳出本次循环</td><td>跳出本次循环</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;for循环-for-in循环&quot;&gt;&lt;a href=&quot;#for循环-for-in循环&quot; class=&quot;headerlink&quot; title=&quot;for循环/for-in循环&quot;&gt;&lt;/a&gt;for循环/for-in循环&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://damao2250.com/tags/JS/"/>
    
    <category term="循环" scheme="http://damao2250.com/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>JS中的二进制：File、Blob、FileReader、ArrayBuffer、Base64</title>
    <link href="http://damao2250.com/2022/11/03/JS%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%9AFile%E3%80%81Blob%E3%80%81FileReader%E3%80%81ArrayBuffer%E3%80%81Base64/"/>
    <id>http://damao2250.com/2022/11/03/JS%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%9AFile%E3%80%81Blob%E3%80%81FileReader%E3%80%81ArrayBuffer%E3%80%81Base64/</id>
    <published>2022-11-03T01:19:07.000Z</published>
    <updated>2022-11-03T04:13:10.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><ul><li>JavaScript 提供了一些 API 来处理文件或原始文件数据，例如：File、Blob、FileReader、ArrayBuffer、base64 等，他们之间的区别和联系如下：<br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/029482d0-30b8-45d5-a87a-b293c2961dd6-1665453051934.png" alt="File、Blob、FileReader、ArrayBuffer、base64"></li></ul><h2 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h2><ul><li>Blob 全称为 binary large object ，即二进制大对象，它是 JavaScript 中的一个对象，表示原始的类似文件的数据。</li><li>实际上，Blob 对象是包含有只读原始数据的类文件对象。简单来说，Blob 对象就是一个不可修改的二进制文件。</li></ul><h3 id="Blob-创建"><a href="#Blob-创建" class="headerlink" title="Blob 创建"></a>Blob 创建</h3><pre><code><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建时需要传入两个参数：array, options</span><span class="token comment">//    array：由 ArrayBuffer、ArrayBufferView、Blob、DOMString 等对象构成的</span><span class="token comment">//    options：可选的 BlobPropertyBag 字典，它可能会指定如下两个属性</span><span class="token comment">//        type：默认值为 ""，表示将会被放入到 blob 中的数组内容的 MIME 类型</span><span class="token comment">//        endings：默认值为"transparent"，用于指定包含行结束符\n的字符串如何被写入，不常用</span><span class="token comment">// 例如：</span><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Hello World"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Blob &#123;size: 11, type: 'text/plain'&#125;</span><span class="token comment">// 可以使用 URL.createObjectURL() 方法将将其转化为一个 URL，如果是图片类型可以直接引用url，文本类型可以直接在iframe中加载</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><ul><li><p>常见的MIME类型</p><table><thead><tr><th align="left">MIME类型</th><th>描述</th></tr></thead><tbody><tr><td align="left">text/plain</td><td>纯文本文档</td></tr><tr><td align="left">text/html</td><td>HTML文档</td></tr><tr><td align="left">text/javascript</td><td>JavaScript文件</td></tr><tr><td align="left">text/css</td><td>CSS文件</td></tr><tr><td align="left">application/json</td><td>JSON文件</td></tr><tr><td align="left">application/pdf</td><td>PDF文件</td></tr><tr><td align="left">application/xml</td><td>XML文件</td></tr><tr><td align="left">image/jpeg</td><td>JPEG图像</td></tr><tr><td align="left">image/png</td><td>PNG图像</td></tr><tr><td align="left">image/gif</td><td>GIF图像</td></tr><tr><td align="left">image/svg+xml</td><td>SVG图像</td></tr><tr><td align="left">audio/mpeg</td><td>MP3文件</td></tr><tr><td align="left">video/mpeg</td><td>MP4文件</td></tr></tbody></table></li></ul><h3 id="Blob-分片"><a href="#Blob-分片" class="headerlink" title="Blob 分片"></a>Blob 分片</h3><ul><li>Blob 对象内置了 slice() 方法用来将 blob 对象分片<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> blob <span class="token operator">=</span> instanceOfBlob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">[</span>start <span class="token punctuation">[</span><span class="token punctuation">,</span> end <span class="token punctuation">[</span><span class="token punctuation">,</span> contentType<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// start：设置切片的起点，即切片开始位置。默认值为 0</span><span class="token comment">// end：设置切片的结束点，会对该位置之前的数据进行切片。默认值为blob.size</span><span class="token comment">// contentType：设置新 blob 的 MIME 类型。如果省略 type，则默认为 blob 的原始值</span><span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Hello World"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> subBlob <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>subBlob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时页面会显示"Hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><ul><li>文件（File）接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容。实际上，File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。Blob 的属性和方法都可以用于 File 对象</li><li>注意：File 对象中只存在于浏览器环境中，在 Node.js 环境中不存在</li><li>在 JavaScript 中，主要有两种方法来获取 File 对象<ul><li><code>&lt;input&gt;</code> 元素上选择文件后返回的 FileList 对象</li><li>文件拖放操作生成的 DataTransfer 对象</li></ul></li></ul><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><pre><code><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileInput<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fileInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileInput<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出一个 FileList 数组</span><span class="token punctuation">&#125;</span><span class="token comment">// 每个 File 对象都包含文件的一些属性，这些属性都继承自 Blob 对象：</span><span class="token comment">//   lastModified：引用文件最后修改日期，为自1970年1月1日0:00以来的毫秒数</span><span class="token comment">//   lastModifiedDate：引用文件的最后修改日期</span><span class="token comment">//   name：引用文件的文件名</span><span class="token comment">//   size：引用文件的文件大小</span><span class="token comment">//   type：文件的媒体类型（MIME）</span><span class="token comment">//   webkitRelativePath：文件的路径或 URL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h3 id="文件拖放"><a href="#文件拖放" class="headerlink" title="文件拖放"></a>文件拖放</h3><ul><li>这种获取 File 对象的方式就是通过 ondrop 和 ondragover 两个拖放 API 实现的<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 定义拖放区域 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drop-zone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> dropZone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"drop-zone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dropZone<span class="token punctuation">.</span><span class="token function-variable function">ondragover</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止默认事件</span><span class="token punctuation">&#125;</span>dropZone<span class="token punctuation">.</span><span class="token function-variable function">ondrop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止默认事件</span>    <span class="token keyword">const</span> files <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出FileList数组</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ul><li>FileReader 是一个异步 API，用于读取文件并提取其内容以供进一步使用。FileReader 可以将 Blob 读取为不同的格式</li><li>注意：FileReader 仅用于以安全的方式从用户（远程）系统读取文件内容，不能用于从文件系统中按路径名简单地读取文件<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对象常用属性：error(读取文件错误)、result(返回文件内容)、readyState(状态)</span><span class="token comment">// FileReader 对象提供了以下方法来加载文件：</span><span class="token comment">//     reader.readAsArrayBuffer()：读取指定 Blob 中的内容，完成之后，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象</span><span class="token comment">//     reader.readAsBinaryString()：读取指定 Blob 中的内容，完成之后，result 属性中将包含所读取文件的原始二进制数据</span><span class="token comment">//     reader.readAsDataURL()：读取指定 Blob 中的内容，完成之后，result 属性中将包含一个data: URL 格式的 Base64 字符串以表示所读取文件的内容</span><span class="token comment">//     reader.readAsText()：读取指定 Blob 中的内容，完成之后，result 属性中将包含一个字符串以表示所读取的文件内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3></li><li>FileReader 对象常用的事件如下：<ul><li>abort：该事件在读取操作被中断时触发</li><li>error：该事件在读取操作发生错误时触发</li><li>load：该事件在读取操作完成时触发</li><li>progress：该事件在读取 Blob 时触发</li></ul></li><li>这些方法可以加上前置 on 后在HTML元素上使用，比如onload、onerror、onabort、onprogress</li><li>由于FileReader对象继承自EventTarget，因此还可以使用 addEventListener() 监听上述事件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>读取文本文档（如.txt文件）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 首先创建了一个 FileReader 对象，当文件上传成功时，使用 readAsText() 方法读取 File 对象，当读取操作完成时打印读取结果</span><span class="token keyword">const</span> fileInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileInput<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印文本内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>读取二进制文件（如图片、pdf）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fileInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileInput<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印base64编码的 URL</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当上传大文件时，可以通过 progress 事件来监控文件的读取进度<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> percent <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>loaded <span class="token operator">/</span> event<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">上传进度: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> %</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// progress 事件提供了两个属性：loaded（已读取量）和total（需读取总量）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h2></li></ul><ul><li><p>ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuffer 的内容不能直接操作，只能通过 DataView 对象或 TypedArrray 对象来访问。这些对象用于读取和写入缓冲区内容。</p><ul><li>TypedArray：用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图。</li><li>DataViews：用来生成内存的视图，可以自定义格式和字节序。</li></ul><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/f57432a5-a7f8-4f84-a561-2fdd60f358f9-1665453060547.png" alt="ArrayBuffer"></p></li><li><p>TypedArray视图和 DataView视图的区别主要是字节序，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。</p></li><li><p>ArrayBuffer 与 Blob 有啥区别呢？根据 ArrayBuffer 和 Blob 的特性，Blob 作为一个整体文件，适合用于传输；当需要对二进制数据进行操作时（比如要修改某一段数据时），就可以使用 ArrayBuffer</p></li></ul><h3 id="ArrayBuffer的方法和属性"><a href="#ArrayBuffer的方法和属性" class="headerlink" title="ArrayBuffer的方法和属性"></a>ArrayBuffer的方法和属性</h3><ul><li> new ArrayBuffer()<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>bytelength<span class="token punctuation">)</span><span class="token comment">// 参数：它接受一个参数，即 bytelength，表示要创建数组缓冲区的大小（以字节为单位。）；</span><span class="token comment">// 返回值：返回一个新的指定大小的ArrayBuffer对象，内容初始化为0。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li> ArrayBuffer.isView()<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ArrayBuffer 上有一个 isView()方法，它的返回值是一个布尔值，如果参数是 ArrayBuffer 的视图实例则返回 true，例如类型数组对象或 DataView 对象；否则返回 false。简单来说，这个方法就是用来判断参数是否是 TypedArray 实例或者 DataView 实例</span><span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayBuffer<span class="token punctuation">.</span><span class="token function">isView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>   <span class="token comment">// false</span><span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayBuffer<span class="token punctuation">.</span><span class="token function">isView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>     <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="TypedArray的属性和方法"><a href="#TypedArray的属性和方法" class="headerlink" title="TypedArray的属性和方法"></a>TypedArray的属性和方法</h3><ul><li>TypedArray 对象一共提供 9 种类型的视图，每一种视图都是一种构造函数，如上图</li><li>这些构造函数生成的对象统称为 TypedArray 对象。它们和正常的数组很类似，都有length 属性，都能用索引获取数组元素，所有数组的方法都可以在类型化数组上面使用</li><li>使用 new TypedArray() 方式<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span>typedArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span>buffer <span class="token punctuation">[</span><span class="token punctuation">,</span> byteOffset <span class="token punctuation">[</span><span class="token punctuation">,</span> length<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataView的属性和方法"><a href="#DataView的属性和方法" class="headerlink" title="DataView的属性和方法"></a>DataView的属性和方法</h3></li><li>DataView 视图是一个可以从 二进制 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题</li><li>DataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的</li><li>new DataView()<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer <span class="token punctuation">[</span><span class="token punctuation">,</span> byteOffset <span class="token punctuation">[</span><span class="token punctuation">,</span> byteLength<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// buffer：一个已经存在的 ArrayBuffer 对象，DataView 对象的数据源。</span><span class="token comment">// byteOffset：可选，此 DataView 对象的第一个字节在 buffer 中的字节偏移。如果未指定，则默认从第一个字节开始。</span><span class="token comment">// byteLength：可选，此 DataView 对象的字节长度。如果未指定，这个视图的长度将匹配 buffer 的长度。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Object-URL"><a href="#Object-URL" class="headerlink" title="Object URL"></a>Object URL</h2><ul><li><p>Object URL（MDN定义名称）又称Blob URL（W3C定义名称），是HTML5中的新标准。它是一个用来表示File Object 或Blob Object 的URL</p></li><li><p>其实 Blob URL/Object URL 是一种伪协议，允许将 Blob 和 File 对象用作图像、二进制数据下载链接等的 URL 源。</p></li><li><p>对于 Blob/File 对象，可以使用 URL构造函数的 createObjectURL() 方法创建将给出的对象的 URL。这个 URL 对象表示指定的 File 对象或 Blob 对象。我们可以在<code>&lt;img&gt;</code>、<code>&lt;script&gt; </code>标签中或者 <code>&lt;a&gt;</code> 和 <code>&lt;link&gt;</code> 标签的 href 属性中使用这个 URL</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileInput<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preview<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用 URL.createObjectURL() 将File 对象转化为一个 URL</span><span class="token keyword">const</span> fileInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> preview <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"preview"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileInput<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  preview<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>preview<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用createObjectURL()方法创建一个data URL 时，就需要使用revokeObjectURL()方法从内存中清除它来释放内存</span><span class="token comment">// 虽然浏览器会在文档卸载时自动释放 Data URL，但为了提高性能，我们应该使用revokeObjectURL()来手动释放它</span><span class="token comment">// revokeObjectURL()方法接受一个Data URL 作为其参数，返回undefined</span><span class="token keyword">const</span> objUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>objUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><ul><li>Base64 是一种基于64个可打印字符来表示二进制数据的表示方法。Base64 编码普遍应用于需要通过被设计为处理文本数据的媒介上储存和传输二进制数据而需要编码该二进制数据的场景。这样是为了保证数据的完整并且不用在传输过程中修改这些数据</li><li>在 JavaScript 中，有两个函数被分别用来处理解码和编码 base64 字符串：<ul><li>atob()：解码，解码一个 Base64 字符串</li><li>btoa()：编码，从一个字符串或者二进制数据编码一个 Base64 字符串<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">)</span>       <span class="token comment">// 'SmF2YVNjcmlwdA=='</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">'SmF2YVNjcmlwdA=='</span><span class="token punctuation">)</span> <span class="token comment">// 'JavaScript'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>使用<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用toDataURL()方法把 canvas 画布内容生成 base64 编码格式的图片</span><span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dataUrl <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileInput<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preview<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用readAsDataURL()方法把上传的文件转为base64格式的data URI，比如上传头像展示</span><span class="token keyword">const</span> fileInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> preview <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"preview"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fileInput<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  preview<span class="token punctuation">.</span>src <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一些小的图片都可以使用 base64 格式进行展示，img标签和background的 url 属性都支持使用base64 格式的图片，这样做也可以减少 HTTP 请求</li></ul><h2 id="格式转化"><a href="#格式转化" class="headerlink" title="格式转化"></a>格式转化</h2><ul><li><p>ArrayBuffer → blob</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> byteOffset<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>ArrayBuffer → base64</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> base64 <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>base64 → blob</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">base64toBlob</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">base64Data<span class="token punctuation">,</span> contentType<span class="token punctuation">,</span> sliceSize</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> byteCharacters <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> byteArrays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> byteCharacters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> offset <span class="token operator">+=</span> sliceSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> slice <span class="token operator">=</span> byteCharacters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> offset <span class="token operator">+</span> sliceSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> byteNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slice<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      byteNumbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> byteArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>byteNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>    byteArrays<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>byteArrays<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>type<span class="token operator">:</span> contentType<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> blob<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>blob → ArrayBuffer</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">blobToArrayBuffer</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      reader<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> reject<span class="token punctuation">;</span>      reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>blob → base64</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">blobToBase64</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function-variable function">onloadend</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>blob → Object URL</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> objectUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关系图&quot;&gt;&lt;a href=&quot;#关系图&quot; class=&quot;headerlink&quot; title=&quot;关系图&quot;&gt;&lt;/a&gt;关系图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaScript 提供了一些 API 来处理文件或原始文件数据，例如：File、Blob、FileReader、Ar</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="File" scheme="http://damao2250.com/tags/File/"/>
    
    <category term="Blob" scheme="http://damao2250.com/tags/Blob/"/>
    
    <category term="FileReader" scheme="http://damao2250.com/tags/FileReader/"/>
    
    <category term="ArrayBuffer" scheme="http://damao2250.com/tags/ArrayBuffer/"/>
    
    <category term="Base64" scheme="http://damao2250.com/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>TS类型定义示例</title>
    <link href="http://damao2250.com/2022/10/26/TS%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%A4%BA%E4%BE%8B/"/>
    <id>http://damao2250.com/2022/10/26/TS%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89%E7%A4%BA%E4%BE%8B/</id>
    <published>2022-10-26T00:46:25.000Z</published>
    <updated>2022-10-26T01:25:55.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通类型"><a href="#普通类型" class="headerlink" title="普通类型"></a>普通类型</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>myFavoriteNumber <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="接口（Interfaces）定义类型"><a href="#接口（Interfaces）定义类型" class="headerlink" title="接口（Interfaces）定义类型"></a>接口（Interfaces）定义类型</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span>string<span class="token punctuation">;</span>  age<span class="token operator">:</span>number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token operator">:</span>Person<span class="token operator">=</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><ul><li>可选属性的含义是该属性可以不存在，但是仍然不允许添加未定义的属性<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    age<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3><ul><li>使用 [propName: string] 定义了任意属性取 string 类型的值。</li><li>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span>string<span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span>number<span class="token punctuation">;</span>  <span class="token punctuation">[</span>proppName<span class="token operator">:</span>string<span class="token punctuation">]</span><span class="token operator">:</span>any<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token operator">:</span>Person <span class="token operator">=</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span>  gender<span class="token operator">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  readonly id<span class="token operator">:</span> number<span class="token punctuation">;</span>  name<span class="token operator">:</span> string<span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token punctuation">[</span>propName<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">89757</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>  gender<span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM类型"><a href="#DOM类型" class="headerlink" title="DOM类型"></a>DOM类型</h2><h3 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById()"></a>document.getElementById()</h3><ul><li>document.getElementById 方法的返回类型为 HTMLElement | null 。 如果 DOM 中不存在具有提供的 id 的元素，则该方法返回 null 值。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLInputElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLDivElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token operator">?.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLButtonElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>button <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>button<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><ul><li>定义入参类型、返回结果类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span>y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number <span class="token operator">|</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数表达式-1"><a href="#函数表达式-1" class="headerlink" title="函数表达式"></a>函数表达式</h3><ul><li>定义入参类型、返回结果类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">mySum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 上面的代码只对等号右侧的匿名函数进行了类型定义</span><span class="token comment">// 等号左边的 mySum，是通过赋值操作进行类型推论而推断出来的</span><span class="token comment">// 如果需要我们手动给 mySum 添加类型，则应该是这样：</span><span class="token keyword">let</span> <span class="token function-variable function">mySum</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span>y<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 注意不要混淆了 TypeScript 中的 => 和 ES6 中的 =></span><span class="token comment">// 在 TypeScript 的类型定义中，=> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="返回类型区别"><a href="#返回类型区别" class="headerlink" title="返回类型区别"></a>返回类型区别</h3><ul><li>注意返回结果 number[] 与 [number, number]的区别，number[]：[1,2,3…]，[number, number]：[1,2]<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 自动推断类型为number[]</span><span class="token keyword">function</span> <span class="token function">getTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 类型为[number, number]</span><span class="token keyword">function</span> <span class="token function">getTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="用接口定义函数"><a href="#用接口定义函数" class="headerlink" title="用接口定义函数"></a>用接口定义函数</h3><ul><li>定义入参类型、返回结果类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>source<span class="token operator">:</span>string<span class="token punctuation">,</span> subString<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> mySearch<span class="token operator">:</span>SearchFunc<span class="token punctuation">;</span><span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source<span class="token operator">:</span> string<span class="token punctuation">,</span>subString<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><ul><li>ES6 中，可以使用 …rest 的方式获取函数中的剩余参数（rest 参数）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span><span class="token operator">...</span>items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 事实上，items 是一个数组。所以我们可以用数组的类型来定义它。</span><span class="token comment">// 注意，rest 参数只能是最后一个参数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数返回类型为元组（Tuple）类型"><a href="#函数返回类型为元组（Tuple）类型" class="headerlink" title="函数返回类型为元组（Tuple）类型"></a>函数返回类型为元组（Tuple）类型</h3><ul><li>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 命名函数返回元组</span><span class="token keyword">function</span> <span class="token function">getTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用箭头函数返回元组</span><span class="token keyword">const</span> getTuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> string<span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> getTuple3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 使用 type 关键字</span>type Numbers <span class="token operator">=</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getTuple4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Numbers <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;普通类型&quot;&gt;&lt;a href=&quot;#普通类型&quot; class=&quot;headerlink&quot; title=&quot;普通类型&quot;&gt;&lt;/a&gt;普通类型&lt;/h2&gt;&lt;h3 id=&quot;联合类型&quot;&gt;&lt;a href=&quot;#联合类型&quot; class=&quot;headerlink&quot; title=&quot;联合类型&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="TypeScript" scheme="http://damao2250.com/categories/TypeScript/"/>
    
    
    <category term="TS" scheme="http://damao2250.com/tags/TS/"/>
    
    <category term="TypeScript" scheme="http://damao2250.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3使用highlight.js进行代码高</title>
    <link href="http://damao2250.com/2022/10/25/Vue3%E4%BD%BF%E7%94%A8highlight-js%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%AB%98/"/>
    <id>http://damao2250.com/2022/10/25/Vue3%E4%BD%BF%E7%94%A8highlight-js%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%AB%98/</id>
    <published>2022-10-25T03:19:11.000Z</published>
    <updated>2022-10-25T03:51:17.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>需要安装两个依赖highlight.js、@highlightjs/vue-plugin</li></ul><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">## 基础依赖npm install --save highlight.js## 支持vue3的依赖npm install --save @highlightjs&#x2F;vue-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在main-js引入和注册highlight"><a href="#在main-js引入和注册highlight" class="headerlink" title="在main.js引入和注册highlight"></a>在main.js引入和注册highlight</h2><ul><li>引入需要引入：样式、依赖包、支持组件</li><li>在main主入口引入样式为全局统一都使用这个样式，也可以在单独的页面引入你想要的样式，样式效果参考官网：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a><br>更改 import ‘highlight.js/styles/atom-one-dark.css’, 把’atom-one-dark’改成官网提供的theme样式即可</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// src/main.js </span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token string">'highlight.js/styles/atom-one-dark.css'</span> <span class="token comment">// 样式 </span><span class="token keyword">import</span> <span class="token string">'highlight.js/lib/common'</span> <span class="token comment">// 依赖包</span><span class="token keyword">import</span> hljsVuePlugin <span class="token keyword">from</span> <span class="token string">'@highlightjs/vue-plugin'</span> <span class="token comment">// 支持vue3的组件</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>hljsVuePlugin<span class="token punctuation">)</span> <span class="token comment">// 引入代码高亮，并进行全局注册</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用高亮插件"><a href="#使用高亮插件" class="headerlink" title="使用高亮插件"></a>使用高亮插件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 把数据绑定到 `code` 属性</span><span class="token operator">&lt;</span>highlightjs autodetect <span class="token operator">:</span>code<span class="token operator">=</span><span class="token string">"highlightCode"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 或者直接将显示的代码写到 `code`中</span><span class="token operator">&lt;</span>highlightjs language<span class="token operator">=</span><span class="token string">'javascript'</span> code<span class="token operator">=</span><span class="token string">"console.log('test');"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 特别注意：代码中存在'&lt;script>&lt;/script>'时，需用反斜杠转义：'&lt;script>&lt;\/script>'</span><span class="token comment">// 使用language指定具体的语言，如javascript、xml，省略时highlightjs会自动识别对应的语言</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需要安装两个依赖highlight.js、@highlightjs/vue-plugin&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="Vue3" scheme="http://damao2250.com/tags/Vue3/"/>
    
    <category term="highlight.js" scheme="http://damao2250.com/tags/highlight-js/"/>
    
  </entry>
  
  <entry>
    <title>一个有趣的css背景效果</title>
    <link href="http://damao2250.com/2022/10/13/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84css%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C/"/>
    <id>http://damao2250.com/2022/10/13/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84css%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C/</id>
    <published>2022-10-13T07:54:06.000Z</published>
    <updated>2022-10-13T08:27:30.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个背景镂空虚化的背景效果"><a href="#一个背景镂空虚化的背景效果" class="headerlink" title="一个背景镂空虚化的背景效果"></a>一个背景镂空虚化的背景效果</h2><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E9%95%82%E7%A9%BA%E8%99%9A%E5%8C%96%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C1.jpg" alt="镂空虚化背景效果1"><br><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E9%95%82%E7%A9%BA%E8%99%9A%E5%8C%96%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C2.jpg" alt="镂空虚化背景效果2"></p><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">    <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>短文两篇<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">*</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.content</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>      <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #dcdfe6<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.head</span> <span class="token punctuation">&#123;</span>      <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #dcdfe6<span class="token punctuation">;</span>      <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.06<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>transparent 1px<span class="token punctuation">,</span> #fff 1px<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">background-size</span><span class="token punctuation">:</span> 4px 4px<span class="token punctuation">;</span>      <span class="token property">backdrop-filter</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span> <span class="token function">blur</span><span class="token punctuation">(</span>4px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">p</span> <span class="token punctuation">&#123;</span>      <span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      《短文两篇》    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>1.渔夫买马<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        二渔夫居海滨久矣，欲上岸而从商。既从商，需马也。然二人不知马之贵贱优劣，请于乡间布衣，布衣言“困马之黑屋三日，断水粮，肆出，泥水干草饲之。”言已毕，布衣急远矣。二渔夫依之，然两马待出，一马立食之，一不食，再困三日，仍不食，非净水精粮不食之。二惑。一言“前食者，乃能屈能伸，耐劳吃苦可活于困境，从商路途艰险，此乃好马也”。一言“非净水精粮不食着，血统贵也，有原则而守，忠烈之性，从商路途艰险，此乃好马也”问何马可为良驹也？问于伯乐，伯乐曰“马如人也”，遂止。今世，能抉之者难也。      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>2.10 of the most legendary rulers from ancient history<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A lot of people can be rather dismissive of ancient history, even using the term to refer to past events so        remote as to be irrelevant. Nothing could be further from the truth, as the events and decisions made in        antiquity continue to influence us to this day. To explore this, we’ll look at 10 of the most legendary rulers        of ancient history, what they did, and why their decisions still matter.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>For our purposes, “legendary” means “awesome” rather than “potentially not real.” A few kings and queens of old        who may not have been real people, such as Gilgamesh, The Yellow Emperor, and the Queen of Sheba, are not        included.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Additionally, what passes for “ancient” varies based on what area you’re talking about, so while all of the        people on our list are long dead, a few of them were on the scene much more recently than others.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一个背景镂空虚化的背景效果&quot;&gt;&lt;a href=&quot;#一个背景镂空虚化的背景效果&quot; class=&quot;headerlink&quot; title=&quot;一个背景镂空虚化的背景效果&quot;&gt;&lt;/a&gt;一个背景镂空虚化的背景效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.gith</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows与iPhone之间使用SMB服务共享文件</title>
    <link href="http://damao2250.com/2022/10/12/Windows%E4%B8%8EiPhone%E4%B9%8B%E9%97%B4%E4%BD%BF%E7%94%A8SMB%E6%9C%8D%E5%8A%A1%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
    <id>http://damao2250.com/2022/10/12/Windows%E4%B8%8EiPhone%E4%B9%8B%E9%97%B4%E4%BD%BF%E7%94%A8SMB%E6%9C%8D%E5%8A%A1%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</id>
    <published>2022-10-12T00:33:52.000Z</published>
    <updated>2022-10-12T00:59:59.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SMB"><a href="#什么是SMB" class="headerlink" title="什么是SMB"></a>什么是SMB</h2><ul><li>SMB（Server Message Block）通信协议是微软（Microsoft）和英特尔(Intel)在1987年制定的协议，主要是作为Microsoft网络的通讯协议。SMB 是在会话层（session layer）和表示层（presentation layer）以及小部分应用层（application layer）的协议。</li><li>SMB使用了NetBIOS的应用程序接口 （Application Program Interface，简称API）。另外，它是一个开放性的协议，允许了协议扩展——使得它变得更大而且复杂；大约有65个最上层的作业，而每个作业都超过120个函数，甚至Windows NT也没有全部支持到，最近微软又把 SMB 改名为 CIFS（Common Internet File System），并且加入了许多新的特色。</li></ul><h2 id="SMB作用"><a href="#SMB作用" class="headerlink" title="SMB作用"></a>SMB作用</h2><ul><li>Windows与其他设备（iPhone、Mac）进行文件共享</li></ul><h2 id="Windows如何打开SMB"><a href="#Windows如何打开SMB" class="headerlink" title="Windows如何打开SMB"></a>Windows如何打开SMB</h2><ul><li>打开“启用或关闭 Windows 功能” - 选择 SMB 1.0/CIFS 文件共享支持’、‘SMB 直通’</li><li>选择指定文件夹 - 右键 - ‘属性’ - ‘共享’ - ‘共享(S)…’ - 下拉框下拉选择‘Everyone’ - 点击 ‘添加’ - 点击‘共享(H)’</li><li>选择指定文件夹 - 右键 - ‘属性’ - ‘共享’ - ‘高级共享(D)…’ - 勾选‘共享此文件夹(S)’ - 共享名为文件夹名字即可 - ‘确定’</li></ul><h2 id="iPhone如何连接SMB"><a href="#iPhone如何连接SMB" class="headerlink" title="iPhone如何连接SMB"></a>iPhone如何连接SMB</h2><ul><li>打开 ‘文件’ - 点击右上角选择‘连接服务器’ - 输入SMB服务地址：smb://+IP地址+/+共享文件夹名字，例如：smb://192.168.1.100/shareFiles - 点击‘连接’即可</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是SMB&quot;&gt;&lt;a href=&quot;#什么是SMB&quot; class=&quot;headerlink&quot; title=&quot;什么是SMB&quot;&gt;&lt;/a&gt;什么是SMB&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SMB（Server Message Block）通信协议是微软（Microsoft）和英特尔(</summary>
      
    
    
    
    <category term="Windows" scheme="http://damao2250.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://damao2250.com/tags/Windows/"/>
    
    <category term="SMB" scheme="http://damao2250.com/tags/SMB/"/>
    
  </entry>
  
  <entry>
    <title>java问题记录</title>
    <link href="http://damao2250.com/2022/10/10/java%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://damao2250.com/2022/10/10/java%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-10-10T02:05:30.000Z</published>
    <updated>2022-10-17T09:03:21.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 包括：数据库、redis、swagger...</span><span class="token comment">// module/src/main/resources/application-xxx.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查找启动类"><a href="#查找启动类" class="headerlink" title="查找启动类"></a>查找启动类</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// module/src/main/java/org.xxx/xxxSystemApplication</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置文件路径&quot;&gt;&lt;a href=&quot;#配置文件路径&quot; class=&quot;headerlink&quot; title=&quot;配置文件路径&quot;&gt;&lt;/a&gt;配置文件路径&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://damao2250.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://damao2250.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JS实用技巧</title>
    <link href="http://damao2250.com/2022/08/23/JS%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://damao2250.com/2022/08/23/JS%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2022-08-23T06:13:49.000Z</published>
    <updated>2022-08-23T06:35:01.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滚动到页面顶部"><a href="#滚动到页面顶部" class="headerlink" title="滚动到页面顶部"></a>滚动到页面顶部</h2><ul><li>使用 window.scrollTo() 平滑滚动到页面顶部<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">scrollToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> behavior<span class="token operator">:</span> <span class="token string">"smooth"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="滚动到页面底部"><a href="#滚动到页面底部" class="headerlink" title="滚动到页面底部"></a>滚动到页面底部</h2><ul><li>知道页面的高度，也可以平滑滚动到页面底部<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">scrollToBottom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    top<span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>    left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    behavior<span class="token operator">:</span> <span class="token string">"smooth"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="滚动元素到可见区域"><a href="#滚动元素到可见区域" class="headerlink" title="滚动元素到可见区域"></a>滚动元素到可见区域</h2><ul><li>使用 scrollIntoView 将元素滚动到可见区域<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">smoothScroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    behavior<span class="token operator">:</span> <span class="token string">"smooth"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="全屏显示元素"><a href="#全屏显示元素" class="headerlink" title="全屏显示元素"></a>全屏显示元素</h2><ul><li>在浏览器中全屏打开某个元素，常用于视频全屏播放<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">goToFullScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  element <span class="token operator">=</span> element <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>requestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    element<span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>mozRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    element<span class="token punctuation">.</span><span class="token function">mozRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>msRequestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    element<span class="token punctuation">.</span><span class="token function">msRequestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>webkitRequestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    element<span class="token punctuation">.</span><span class="token function">webkitRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="退出浏览器全屏状态"><a href="#退出浏览器全屏状态" class="headerlink" title="退出浏览器全屏状态"></a>退出浏览器全屏状态</h2><ul><li>这个和全屏显示元素一起使用，退出浏览器全屏状态<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">goExitFullscreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>exitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">exitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>msExitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">msExitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>mozCancelFullScreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">mozCancelFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>webkitExitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">webkitExitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="获取数据类型"><a href="#获取数据类型" class="headerlink" title="获取数据类型"></a>获取数据类型</h2><ul><li>获取变量的数据类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"> (\w+)]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>  <span class="token keyword">return</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// object</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// array</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// number</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">'fatfish'</span><span class="token punctuation">)</span> <span class="token comment">// string</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// boolean</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">fatfish</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// regexp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="停止冒泡事件"><a href="#停止冒泡事件" class="headerlink" title="停止冒泡事件"></a>停止冒泡事件</h2><ul><li>防止事件冒泡的方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">stopPropagation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="深拷贝一个对象"><a href="#深拷贝一个对象" class="headerlink" title="深拷贝一个对象"></a>深拷贝一个对象</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> deepCopy <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> allDesc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> allDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>  hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="确定设备类型"><a href="#确定设备类型" class="headerlink" title="确定设备类型"></a>确定设备类型</h2><ul><li>通过识别浏览器的 userAgent 来确定设备类型<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isMobile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(iPhone|iPod|Android|ios|iOS|iPad|Backerry|WebOS|Symbian|Windows Phone|Phone)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="判断设备是安卓还是IOS"><a href="#判断设备是安卓还是IOS" class="headerlink" title="判断设备是安卓还是IOS"></a>判断设备是安卓还是IOS</h2><ul><li>除了区分是移动端还是PC端，很多时候我们还需要区分当前设备是Android还是IOS<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isAndroid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">android</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">isIOS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">iPhone|iPad|iPod|iOS|Macintosh</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="获取浏览器类型及其版本"><a href="#获取浏览器类型及其版本" class="headerlink" title="获取浏览器类型及其版本"></a>获取浏览器类型及其版本</h2><ul><li>获取浏览器的类型和版本<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">getExplorerInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> t <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"msie"</span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//ie &lt; 11</span>        type<span class="token operator">:</span> <span class="token string">"IE"</span><span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">msie ([\d]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">trident\/.+?rv:(([\d.]+))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ie 11</span>        type<span class="token operator">:</span> <span class="token string">"IE"</span><span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"edge"</span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"Edge"</span><span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">edge\/([\d]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"firefox"</span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"Firefox"</span><span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">firefox\/([\d]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"chrome"</span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"Chrome"</span><span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">chrome\/([\d]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"opera"</span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"Opera"</span><span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">opera.([\d]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Safari"</span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"Safari"</span><span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">version\/([\d]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> t<span class="token punctuation">,</span>        version<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="设置cookies"><a href="#设置cookies" class="headerlink" title="设置cookies"></a>设置cookies</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">setCookie</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expire</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  d<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expire<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取-cookie"><a href="#获取-cookie" class="headerlink" title="获取 cookie"></a>获取 cookie</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">getCookie</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cookieStr <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> cookieStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cookieValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cookieValue <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> cookieValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除cookies"><a href="#删除cookies" class="headerlink" title="删除cookies"></a>删除cookies</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">delCookie</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">randomString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">len</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> chars <span class="token operator">=</span> <span class="token string">"ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789"</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> strLen <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> randomStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    randomStr <span class="token operator">+=</span> chars<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> strLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> randomStr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// pfkMfjEJ6x</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// ce6tEx1km4idRNMtym2S</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串首字母大写"><a href="#字符串首字母大写" class="headerlink" title="字符串首字母大写"></a>字符串首字母大写</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fistLetterUpper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fistLetterUpper</span><span class="token punctuation">(</span><span class="token string">'fatfish'</span><span class="token punctuation">)</span> <span class="token comment">// Fatfish</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成指定范围内的随机数"><a href="#生成指定范围内的随机数" class="headerlink" title="生成指定范围内的随机数"></a>生成指定范围内的随机数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">randomNum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 6</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打乱数组的顺序"><a href="#打乱数组的顺序" class="headerlink" title="打乱数组的顺序"></a>打乱数组的顺序</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">shuffleArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0.5</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token function">shuffleArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [5, -1, 10, 1]</span><span class="token function">shuffleArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 10, -1, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从数组中获取随机值"><a href="#从数组中获取随机值" class="headerlink" title="从数组中获取随机值"></a>从数组中获取随机值</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">getRandomValue</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=></span> array<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">const</span> prizes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'$100'</span><span class="token punctuation">,</span> <span class="token string">'🍫'</span><span class="token punctuation">,</span> <span class="token string">'🍔'</span> <span class="token punctuation">]</span><span class="token function">getRandomValue</span><span class="token punctuation">(</span>prizes<span class="token punctuation">)</span> <span class="token comment">// 🍫</span><span class="token function">getRandomValue</span><span class="token punctuation">(</span>prizes<span class="token punctuation">)</span> <span class="token comment">// 🍔</span><span class="token function">getRandomValue</span><span class="token punctuation">(</span>prizes<span class="token punctuation">)</span> <span class="token comment">// 🍫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="格式化货币"><a href="#格式化货币" class="headerlink" title="格式化货币"></a>格式化货币</h2><ul><li>格式化货币的方式有很多，比如这两种方式<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一种方法</span><span class="token keyword">const</span> <span class="token function-variable function">formatMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">money</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> money<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(?!^)(?=(\\d&#123;3&#125;)+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>money<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'\\.'</span> <span class="token operator">:</span> <span class="token string">'$'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token string">'123456789'</span><span class="token punctuation">)</span> <span class="token comment">// '123,456,789'</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token string">'123456789.123'</span><span class="token punctuation">)</span> <span class="token comment">// '123,456,789.123'</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment">// '123'</span><span class="token comment">// 第二种方式</span><span class="token comment">// 正则表达式让我们很头疼，不是吗？所以我们需要找到一种更简单的方式来格式化货币。</span><span class="token keyword">const</span> <span class="token function-variable function">formatMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">money</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> money<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span> <span class="token comment">// '123,456,789'</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token number">123456789.123</span><span class="token punctuation">)</span> <span class="token comment">// '123,456,789.123'</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// '123'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p><a href="https://javascript.plainenglish.io/20-simple-but-useful-javascript-coding-techniques-that-you-should-use-23f33bd45325">原文链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;滚动到页面顶部&quot;&gt;&lt;a href=&quot;#滚动到页面顶部&quot; class=&quot;headerlink&quot; title=&quot;滚动到页面顶部&quot;&gt;&lt;/a&gt;滚动到页面顶部&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 window.scrollTo() 平滑滚动到页面顶部&lt;pre class=&quot;li</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://damao2250.com/tags/JS/"/>
    
    <category term="实用技巧" scheme="http://damao2250.com/tags/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JS中0.1+0.2</title>
    <link href="http://damao2250.com/2022/08/12/JS%E4%B8%AD0.1+0.2/"/>
    <id>http://damao2250.com/2022/08/12/JS%E4%B8%AD0.1+0.2/</id>
    <published>2022-08-12T06:00:04.000Z</published>
    <updated>2022-08-12T06:10:13.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js中0-1-0-2的问题（作者：老司机）"><a href="#js中0-1-0-2的问题（作者：老司机）" class="headerlink" title="js中0.1+0.2的问题（作者：老司机）"></a>js中0.1+0.2的问题（作者：老司机）</h1><h2 id="一、前提："><a href="#一、前提：" class="headerlink" title="一、前提："></a>一、前提：</h2><ul><li><p>0.1或0.2等一些小数，转换为二进制格式时，是一个无限循环的小数，因此最终得到的结果是一个近似值（保留52位小数），在计算过程中，有可能会发生位数的变化，在进行舍取的过程中，导致精度丢失</p></li><li><p>js的浮点数在计算机底层的存储格式为：符号位（1） + 阶码（11）+ 尾数（52）</p></li><li><p>符号位：0表示正数，1表示负数</p></li><li><p>阶码：指数+1023（最后转为二进制格式，若不足11位，则在前面补0）</p></li><li><p>1023称为偏移量：2 ^ (位数-1) - 1，此处js浮点数的阶码位数为11，所以：2 ^ 10 - 1 = 1023</p></li><li><p>以0.1为例：</p><ul><li>科学记数法格式（乘二取整，顺序排序）：1.1 00110011 00110011 00110011 00110011 00110011 00110011 010 x 2 ^ -4</li><li>二进制格式：0 01111111011 1001100110011001100110011001100110011001100110011010【省略了整数1，作为一个隐藏位】</li></ul></li></ul><h2 id="二、实现-0-1-0-2-0-3"><a href="#二、实现-0-1-0-2-0-3" class="headerlink" title="二、实现 0.1+0.2===0.3"></a>二、实现 0.1+0.2===0.3</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">binaryStrToNum</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 1、获取符号位</span>    <span class="token keyword">let</span> sign <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、获取阶码（1~11【包含11】）</span>    <span class="token keyword">let</span> exponent <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3、获取小数位</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 注意：在尾数中，计算是从第一位开始的，一共有52位，其实还包含一个隐藏位（上面已经提了），这个隐藏位的计算结果始终是1（计算方式：1 * 2 ^ 0），这个也必须累加到计算结果中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> c <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 4、计算结果，公式为：-1 ^ 符号 * 2 ^ (阶码-1023) * sum</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">+</span>sign<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>exponent<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1023</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 《0.1》</span><span class="token comment">// const r1 = binaryStrToNum("0011111110111001100110011001100110011001100110011001100110011010");</span><span class="token comment">// console.log(r1);</span><span class="token comment">// 《0.2》</span><span class="token comment">// 1.1 00110011 00110011 00110011 00110011 00110011 00110011 010 x 2 ^ -3 = 0 01111111100 1001100110011001100110011001100110011001100110011010</span><span class="token comment">// const r2 = binaryStrToNum("0011111111001001100110011001100110011001100110011001100110011010");</span><span class="token comment">// console.log(r2);</span><span class="token comment">/** *《0.1 + 0.2》 * 先对其进行计算（保留52位，第53位为0时，舍弃；为1时，进1）： * 0.00011 00110011 00110011 00110011 00110011 00110011 00110011 010 + 0.00110 01100110 01100110 01100110 01100110 01100110 01100110 10 * = 0.01001 10011001 10011001 10011001 10011001 10011001 10011001 110 * = 1.001 10011001 10011001 10011001 10011001 10011001 10011001 110 x 2 ^ -2【在此次计算中，尾数变成了53位，因此要进行舍取】 * = 1.001 10011001 10011001 10011001 10011001 10011001 10011010 0 x 2 ^ -2【取小数52位】 * 转为二进制格式 =>：0 01111111101 0011001100110011001100110011001100110011001100110100 */</span><span class="token keyword">const</span> r3 <span class="token operator">=</span> <span class="token function">binaryStrToNum</span><span class="token punctuation">(</span><span class="token string">"0011111111010011001100110011001100110011001100110011001100110100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js中0-1-0-2的问题（作者：老司机）&quot;&gt;&lt;a href=&quot;#js中0-1-0-2的问题（作者：老司机）&quot; class=&quot;headerlink&quot; title=&quot;js中0.1+0.2的问题（作者：老司机）&quot;&gt;&lt;/a&gt;js中0.1+0.2的问题（作者：老司机）&lt;/</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="js" scheme="http://damao2250.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vue3组合式API使用示例</title>
    <link href="http://damao2250.com/2022/08/08/Vue3%E7%BB%84%E5%90%88%E5%BC%8FAPI%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://damao2250.com/2022/08/08/Vue3%E7%BB%84%E5%90%88%E5%BC%8FAPI%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</id>
    <published>2022-08-08T09:32:42.000Z</published>
    <updated>2022-08-10T07:54:23.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API一览"><a href="#API一览" class="headerlink" title="API一览"></a>API一览</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><h3 id="响应式-核心"><a href="#响应式-核心" class="headerlink" title="响应式: 核心"></a>响应式: 核心</h3><ul><li>ref() - 接受一个内部值，返回一个响应式的、可更改的 ref 对象</li><li>computed () - 接受一个 getter 函数，返回一个只读的响应式 ref 对象(计算属性)</li><li>reactive() - 返回一个对象的响应式代理</li><li>readonly() - 接受一个对象 (不论是响应式还是普通的) 或是一个 ref，返回一个原值的只读代理</li><li>watchEffect() - 立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行</li><li>watchPostEffect() - watchEffect() 使用 flush: ‘post’ 选项时的别名</li><li>watchSyncEffect() - watchEffect() 使用 flush: ‘sync’ 选项时的别名</li><li>watch() - 侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数<h3 id="响应式-工具"><a href="#响应式-工具" class="headerlink" title="响应式: 工具"></a>响应式: 工具</h3></li><li>isRef() - 检查某个值是否为 ref</li><li>unref() - 如果参数是 ref，则返回内部值，否则返回参数本身</li><li>toRef() - 基于响应式对象上的一个属性，创建一个对应的 ref</li><li>toRefs() - 将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的 ref</li><li>isProxy() - 检查一个对象是否是由 reactive()、readonly()、shallowReactive() 或 shallowReadonly() 创建的代理</li><li>isReactive() - 检查一个对象是否是由 reactive() 或 shallowReactive() 创建的代理</li><li>isReadonly() - 检查一个对象是否是由 readonly() 或 shallowReadonly() 创建的代理<h3 id="响应式-进阶"><a href="#响应式-进阶" class="headerlink" title="响应式: 进阶"></a>响应式: 进阶</h3></li><li>shallowRef() - ref() 的浅层作用形式</li><li>triggerRef() - 强制触发依赖于一个浅层 ref 的副作用，这通常在对浅引用的内部值进行深度变更后使用</li><li>customRef() - 创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式</li><li>shallowReactive() - reactive() 的浅层作用形式</li><li>shallowReadonly() - readonly() 的浅层作用形式</li><li>toRaw() - 根据一个 Vue 创建的代理返回其原始对象</li><li>markRaw() - 将一个对象标记为不可被转为代理。返回该对象本身</li><li>effectScope() - 创建一个 effect 作用域，可以捕获其中所创建的响应式副作用 (即计算属性和侦听器)，这样捕获到的副作用可以一起处理</li><li>getCurrentScope() - 如果有的话，返回当前活跃的 effect 作用域</li><li>onScopeDispose() - 在当前活跃的 effect 作用域上注册一个处理回调函数<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3></li><li>onMounted() - 组件挂载完成后执行</li><li>onUpdated() - 更新 DOM 树之后调用</li><li>onUnmounted() - 组件实例被卸载之后调用</li><li>onBeforeMount() - 组件被挂载之前被调用</li><li>onBeforeUpdate() - 更新 DOM 树之前调用</li><li>onBeforeUnmount() - 组件实例被卸载之前调用</li><li>onErrorCaptured() - 捕获了后代组件传递的错误时调用</li><li>onRenderTracked() - 组件渲染过程中追踪到响应式依赖时调用</li><li>onRenderTriggered() - 响应式依赖的变更触发了组件渲染时调用</li><li>onActivated() - 若组件实例是 <KeepAlive> 缓存树的一部分，当组件被插入到 DOM 中时调用</li><li>onDeactivated() - 若组件实例是 <KeepAlive> 缓存树的一部分，当组件从 DOM 中被移除时调用</li><li>onServerPrefetch() - 组件实例在服务器上被渲染之前调用<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3></li><li>provide() - 提供一个值，可以被后代组件注入</li><li>inject() - 注入一个由祖先组件或整个应用 (通过 app.provide()) 提供的值</li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><pre class="line-numbers language-Vue" data-language="Vue"><code class="language-Vue">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;  import &#123; ref, Ref, reactive, isRef, unref, toRef, computed &#125; from &#39;vue&#39;;  const msg &#x3D; ref(&quot;Hello World&quot;);  const initial &#x3D; ref(10);  const count &#x3D; ref(0);  &#x2F;&#x2F; 更新 ref  function update(value) &#123;    count.value &#x3D; value;  &#125;  &#x2F;&#x2F; 检查&#96;count&#96;是否为一个 ref 对象  console.log(isRef(count) ? &#39;是ref对象&#39; : &#39;非ref对象&#39;);  &#x2F;&#x2F; 如果参数是一个ref，则返回内部值，否则返回参数本身  function initialCount(value: number | Ref&lt;number&gt;) &#123;    console.log(unref(value) &#x3D;&#x3D;&#x3D; 10); &#x2F;&#x2F; 打印true  &#125;  initialCount(initial);  &#x2F;**   * 为源响应式对象上的某个 &#96;property&#96; 新创建一个 &#96;ref&#96;。   * 然后,&#96;ref&#96; 可以被传递，它会保持对其源&#96;property&#96;的响应式连接。   * 确保以下输出为true   *&#x2F;  const state &#x3D; reactive(&#123;    foo: 1,    bar: 2,  &#125;);  const fooRef &#x3D; toRef(state, &#39;foo&#39;);  &#x2F;&#x2F; 修改引用将更新原引用  fooRef.value++;  console.log(state.foo &#x3D;&#x3D;&#x3D; 2); &#x2F;&#x2F; 打印true  &#x2F;&#x2F; 修改原引用也会更新&#96;ref&#96;  state.foo++;  console.log(fooRef.value &#x3D;&#x3D;&#x3D; 3); &#x2F;&#x2F; 打印true  &#x2F;&#x2F;computed 接受一个具有 get 和 set 函数的对象，用来创建可写的 ref 对象。  const plusOne &#x3D; computed(&#123;    get: ()&#x3D;&gt;&#123;    return count.value + 1;    &#125;,    set: val&#x3D;&gt;&#123;     count.value ++;    &#125;  &#125;)  plusOne.value++;&lt;&#x2F;script&gt;&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;    &lt;p&gt;      &lt;span @click&#x3D;&quot;update(count - 1)&quot;&gt;-&lt;&#x2F;span&gt;      &#123;&#123; count &#125;&#125;      &lt;span @click&#x3D;&quot;update(count + 1)&quot;&gt;+&lt;&#x2F;span&gt;    &lt;&#x2F;p&gt;    &lt;p&gt;      count：&#123;&#123; count &#125;&#125;，plusOne：&#123;&#123; plusOne &#125;&#125;    &lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;API一览&quot;&gt;&lt;a href=&quot;#API一览&quot; class=&quot;headerlink&quot; title=&quot;API一览&quot;&gt;&lt;/a&gt;API一览&lt;/h2&gt;&lt;h3 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;set</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="Vue3" scheme="http://damao2250.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>史蒂夫·乔布斯在斯坦福大学的演讲</title>
    <link href="http://damao2250.com/2022/07/25/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%BC%94%E8%AE%B2/"/>
    <id>http://damao2250.com/2022/07/25/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%BC%94%E8%AE%B2/</id>
    <published>2022-07-25T02:59:30.000Z</published>
    <updated>2022-07-25T03:11:43.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="史蒂夫·乔布斯在斯坦福大学的演讲"><a href="#史蒂夫·乔布斯在斯坦福大学的演讲" class="headerlink" title="史蒂夫·乔布斯在斯坦福大学的演讲"></a>史蒂夫·乔布斯在斯坦福大学的演讲</h2><p>Stanford Report, June 14, 2005</p><p>‘You’ve got to find what you love,’ Jobs says</p><p>This is the text of the Commencement address by Steve Jobs, CEO of Apple Computer and of Pixar Animation Studios, delivered on June 12, 2005.</p><p>  【演讲词】</p><p>I am honored to be with you today at your commencement from one of the finest universities in the world. Truth be told, I never graduated from college, and this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><p>　　我今天很荣幸能和你们一起参加毕业典礼，斯坦福大学是世界上最好的大学之一。我从来没有从大学中毕业。说实话,今天也许是在我的生命中离大学毕业最近的一天了。今天我想向你们讲述我生活中的三个故事。不是什么大不了的事情,只是三个故事而已。</p><p>The first story is about connecting the dots.</p><p>　　第一个故事是关于如何把生命中的点点滴滴串连起来。</p><p>I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out？</p><p>　　我在Reed大学读了六个月之后就退学了,但是在十八个月以后——我真正的作出退学决定之前,我还经常去学校。我为什么要退学呢？</p><p>It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl.</p><p>　　故事从我出生的时候讲起。我的亲生母亲是一个年轻的,没有结婚的大学毕业生。她决定让别人收养我, 她十分想让我被大学毕业生收养。所以在我出生的时候，她已经做好了一切的准备工作，能使得我被一个律师和他的妻子所收养。但是她没有料到,当我出生之后, 律师夫妇突然决定他们想要一个女孩。</p><p>So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him？” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.</p><p>　　所以我的生养父母(他们还在我亲生父母的观察名单上)突然在半夜接到了一个电话:“我们现在这儿有一个不小心生出来的男婴,你们想要他吗？”他们回答道:“当然!”但是我亲生母亲随后发现，我的养母从来没有上过大学,我的父亲甚至从没有读过高中。她拒绝签这个收养合同。只是在几个月以后,我的父母答应她一定要让我上大学,那个时候她才同意。</p><p>And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out.</p><p>　　在十七岁那年,我真的上了大学。但是我很愚蠢的选择了一个几乎和你们斯坦福大学一样贵的学校, 我父母还处于蓝领阶层，他们几乎把所有积蓄都花在了我的学费上面。在六个月后, 我已经看不到其中的价值所在。我不知道我想要在生命中做什么,我也不知道大学能帮助我找到怎样的答案。</p><p>And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting.</p><p>　　但是在这里，我几乎花光了我父母这一辈子的所有积蓄。所以我决定要退学,我觉得这是个正确的决定。不能否认,我当时确实非常的害怕, 但是现在回头看看,那的确是我这一生中最棒的一个决定。在我做出退学决定的那一刻, 我终于可以不必去读那些令我提不起丝毫兴趣的课程了。然后我还可以去修那些看起来有点意思的课程。</p><p>It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><p>　　但是这并不是那么罗曼蒂克。我失去了我的宿舍,所以我只能在朋友房间的地板上面睡觉,我去捡5美分的可乐瓶子，仅仅为了填饱肚子, 在星期天的晚上,我需要走七英里的路程，穿过这个城市到Hare Krishna寺庙(注：位于纽约Brooklyn下城),只是为了能吃上饭——这个星期唯一一顿好一点的饭。但是我喜欢这样。我跟着我的直觉和好奇心走, 遇到的很多东西,此后被证明是无价之宝。让我给你们举一个例子吧：</p><p>Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this.</p><p>Reed大学在那时提供也许是全美最好的美术字课程。在这个大学里面的每个海报, 每个抽屉的标签上面全都是漂亮的美术字。因为我退学了, 没有受到正规的训练, 所以我决定去参加这个课程，去学学怎样写出漂亮的美术字。</p><p>I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><p>　　我学到了san serif 和serif字体, 我学会了怎么样在不同的字母组合之中改变空格的长度, 还有怎么样才能作出最棒的印刷式样。那是一种科学永远不能捕捉到的、美丽的、真实的艺术精妙, 我发现那实在是太美妙了。</p><p>None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts.</p><p>　　当时看起来这些东西在我的生命中，好像都没有什么实际应用的可能。但是十年之后,当我们在设计第一台Macintosh电脑的时候,就不是那样了。我把当时我学的那些家伙全都设计进了Mac。那是第一台使用了漂亮的印刷字体的电脑。</p><p>And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><p>　　如果我当时没有退学, 就不会有机会去参加这个我感兴趣的美术字课程, Mac就不会有这么多丰富的字体，以及赏心悦目的字体间距。那么现在个人电脑就不会有现在这么美妙的字型了。当然我在大学的时候，还不可能把从前的点点滴 滴串连起来,但是当我十年后回顾这一切的时候,真的豁然开朗了。</p><p>Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><p>再次强调，没人可以未卜先知，事与事间的因和果，往往只在回首时显现。你得相信，因和果会在未来生活中联系起来。人总要有些信仰才行，直觉也好，命运也罢，因果轮回，不管什么，去相信因与果的联系，会给你信心去跟从自己的意愿，哪怕离经叛道，也绝不止步，只有这样，才能有所成就。</p><p>My second story is about love and loss.</p><p>　　我的第二个故事是关于爱和损失的。</p><p>I was lucky – I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30.</p><p>　　我非常幸运, 因为我在很早的时候就找到了我钟爱的东西。Woz和我在二十岁的时候就在父母的车库里面开创了苹果公司。我们工作得很努力, 十年之后, 这个公司从那两个车库中的穷光蛋发展到了超过四千名的雇员、价值超过二十亿的大公司。在公司成立的第九年,我们刚刚发布了最好的产品,那就是 Macintosh。我也快要到三十岁了。</p><p>And then I got fired. How can you get fired from a company you started？ Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><p>　　在那一年, 我被炒了鱿鱼。你怎么可能被你自己创立的公司炒了鱿鱼呢？ 嗯,在苹果快速成长的时候，我们雇用了一个很有天分的家伙和我一起管理这个公司, 在最初的几年,公司运转的很好。但是后来我们对未来的看法发生了分歧, 最终我们吵了起来。当争吵不可开交的时候, 董事会站在了他的那一边。所以在三十岁的时候, 我被炒了。在这么多人的眼皮下我被炒了。在而立之年，我生命的全部支柱离自己远去, 这真是毁灭性的打击。</p><p>I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly.</p><p>　　在最初的几个月里，我真是不知道该做些什么。我把从前的创业激情给丢了, 我觉得自己让与我一同创业的人都很沮丧。我和David Pack和Bob Boyce见面，并试图向他们道歉。</p><p>I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><p>　　我把事情弄得糟糕透顶了。但是我渐渐发现了曙光, 我仍然喜爱我从事的这些东西。苹果公司发生的这些事情丝毫的没有改变这些, 一点也没有。我被驱逐了,但是我仍然钟爱它。所以我决定从头再来。</p><p>I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><p>　　我当时没有觉察, 但是事后证明, 从苹果公司被炒是我这辈子发生的最棒的事情。因为，作为一个成功者的沉重感觉被作为一个创业者的轻松感觉所重新代替: 对任何事情都不那么特别看重。这让我觉得如此自由, 进入了我生命中最有创造力的一个阶段。</p><p>During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world.</p><p>　　在接下来的五年里, 我创立了一个名叫NeXT的公司, 还有一个叫Pixar的公司, 然后和一个后来成为我妻子的优雅女人相识。Pixar 制作了世界上第一个用电脑制作的动画电影——“玩具总动员”,Pixar现在也是世界上最成功的电脑制作工作室。</p><p>In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><p>　　在后来的一系列运转中,Apple收购了NeXT, 然后我又回到了Apple公司。我们在NeXT发展的技术在Apple的复兴之中发挥了关键的作用。我还和Laurence 一起建立了一个幸福的家庭。</p><p>I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><p>　　我可以非常肯定,如果我不被Apple开除的话, 这其中一件事情也不会发生的。这个良药的味道实在是太苦了,但是我想病人需要这个药。有时候生活会给你迎头一击，不要灰心丧气。我坚信，唯一可以让我坚持下去的，就是我对自己事业的热爱。你必须去寻找自己所爱，无论是工作还是爱情，都是如此。工作是生活中很主要的部分，真正获得满足感，就必须做你相信是有价值的工作。要做有价值的事业，你就必须热爱你做的事业，如果你还没找到，千万不要放弃，要继续寻找，只要倾听你的心声，当你真的发现时你就会感到，就像任何伟大的感情关系一样，岁月的更迭只会让这份情愈发深刻，所以千万不要放弃，要继续寻找。</p><p>My third story is about death.</p><p>　　我的第三个故事是关于死亡的。</p><p>When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today？” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><p>　　当我十七岁的时候, 我读到了一句话:“如果你把每一天都当作生命中最后一天去生活的话,那么有一天你会发现你是正确的。”这句话给我留下了深刻的印象。从那时开始,过了33 年,我在每天早晨都会对着镜子问自己:“如果今天是我生命中的最后一天, 你会不会完成你今天想做的事情呢？”当答案连续很多次被给予“不是”的时候, 我知道自己需要改变某些事情了。</p><p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><p>　　提醒自己人的生命有限，令我一生都受益非常，令我能在人生重大问题上做出抉择。因为一切的一切，一切追求，一切荣耀，一切惶恐，一些挫折，在死亡面前都会显得微不足道 ，剩下的才是最重要的事情。记住自己总会死去是避免自己被种种担心所羁绊的最好方法，既然将一无所有，还有什么理由不追随自己的内心。</p><p>About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><p>　　大概一年以前, 我被诊断出癌症。我在早晨七点半做了一个检查, 检查清楚的显示在我的胰腺有一个肿瘤。我当时都不知道胰腺是什么东西。医生告诉我那很可能是一种无法治愈的癌症, 我还有三到六个月的时间活在这个世界上。我的医生叫我回家, 然后整理好我的一切, 那就是医生准备死亡的程序。那意味着你将要把未来十年对你小孩说的话在几个月里面说完.;那意味着把每件事情都搞定, 让你的家人会尽可能轻松的生活;那意味着你要说“再见了”。</p><p>I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><p>　　我整天和那个诊断书一起生活。后来有一天早上我作了一个活切片检查，医生将一个内窥镜从我的喉咙伸进去,通过我的胃, 然后进入我的肠子, 用一根针在我的胰腺上的肿瘤上取了几个细胞。我当时很镇静,因为我被注射了镇定剂。但是我的妻子在那里, 后来告诉我，当医生在显微镜地下观察这些细胞的时候他们开始尖叫, 因为这些细胞最后竟然是一种非常罕见的可以用手术治愈的胰腺癌症。我做了这个手术, 现在我痊愈了。</p><p>This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:</p><p>　　那是我最接近死亡的时候, 我还希望这也是以后的几十年最接近的一次。从死亡线上又活了过来, 死亡对我来说，只是一个有用但是纯粹是知识上的概念的时候，我可以更肯定一点地对你们说：</p><p>No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><p>　　没有人愿意死, 即使人们想上天堂, 人们也不会为了去那里而死。但是死亡是我们每个人共同的终点。从来没有人能够逃脱它。也应该如此。 因为死亡就是生命中最好的一个发明。它将旧的清除以便给新的让路。你们现在是新的, 但是从现在开始不久以后, 你们将会逐渐的变成旧的然后被清除。我很抱歉这很戏剧性, 但是这十分的真实。</p><p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><p>　　人生有限，所以不要把时间浪费在重复其他人的生活上;不要被教条束缚，那只是根据别人的思维结果而生活，不要让他人的喧嚣纷繁，淹没了自己内心的声音。最重要的是，你要有勇气去跟随你的直觉和心灵，因为它们在某种程度上已经知道你想要成为什么样子，所有其他的事情都是次要的。</p><p>When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.</p><p>　　在我年轻的时候，有本很棒的叫全球目录的杂志。被我们那代人奉为经典。它是由斯图尔特·布兰德在这附近的Menlo公园创办的。他把自己的文艺气质融汇其中。那是六十年代后期。那时还没有个人电脑。全用打字机，剪刀和宝丽来照相机。它就好比是三十五年前的简装版的谷歌。充满理想主义色彩。该书简洁实用，见解独到。</p><p>Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><p>Stay Hungry. Stay Foolish.</p><p>Thank you all very much.</p><p>　　斯图尔特团队出版了几期的全球目录。当它后来要停刊的时候，他们出来最后一版。那是七十年代中期，我就像你们这么大。杂志最后一期的封底上，是一幅清晨乡村公路的照片。是那种搭车旅行玩冒险时会遇到的村路，照片下面有这样一段话：求知若渴，虚心若愚。这是他们停刊的告别语。求知若渴，虚心若愚。我一直以此激励自己。在你们即将毕业开始崭新旅程的时刻，我希望你们也能做到：</p><p>求知若渴，虚心若愚。</p><p>谢谢大家！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;史蒂夫·乔布斯在斯坦福大学的演讲&quot;&gt;&lt;a href=&quot;#史蒂夫·乔布斯在斯坦福大学的演讲&quot; class=&quot;headerlink&quot; title=&quot;史蒂夫·乔布斯在斯坦福大学的演讲&quot;&gt;&lt;/a&gt;史蒂夫·乔布斯在斯坦福大学的演讲&lt;/h2&gt;&lt;p&gt;Stanford Repor</summary>
      
    
    
    
    <category term="文摘" scheme="http://damao2250.com/categories/%E6%96%87%E6%91%98/"/>
    
    
    <category term="史蒂夫·乔布斯" scheme="http://damao2250.com/tags/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF/"/>
    
    <category term="Steve Jobs" scheme="http://damao2250.com/tags/Steve-Jobs/"/>
    
  </entry>
  
  <entry>
    <title>TS内置工具类型使用</title>
    <link href="http://damao2250.com/2022/06/24/TS%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/"/>
    <id>http://damao2250.com/2022/06/24/TS%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-24T08:09:33.000Z</published>
    <updated>2022-10-26T00:46:59.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h1><ul><li>[√] <code>Partial&lt;Type&gt;</code></li><li>[√] <code>Required&lt;Type&gt;</code></li><li>[√] <code>Readonly&lt;Type&gt;</code></li><li>[√] <code>Record&lt;Keys, Type&gt;</code></li><li>[√] <code>Pick&lt;Type, Keys&gt;</code></li><li>[√] <code>Omit&lt;Type, Keys&gt;</code></li><li>[√] <code>Exclude&lt;UnionType, ExcludedMembers&gt;</code></li><li>[√] <code>Extract&lt;Type, Union&gt;</code></li><li>[√] <code>NonNullable&lt;Type&gt;</code></li><li>[√] <code>Parameters&lt;Type&gt;</code></li><li>[√] <code>ConstructorParameters&lt;Type&gt;</code></li><li>[√] <code>ReturnType&lt;Type&gt;</code></li><li>[√] <code>InstanceType&lt;Type&gt;</code></li><li>[√] <code>ThisParameterType&lt;Type&gt;</code></li><li>[√] <code>OmitThisParameter&lt;Type&gt;</code></li><li>[√] <code>ThisType&lt;Type&gt;</code></li><li>[√] <code>Uppercase&lt;StringType&gt;</code></li><li>[√] <code>Lowercase&lt;StringType&gt;</code></li><li>[√] <code>Capitalize&lt;StringType&gt;</code></li><li>[√] <code>Uncapitalize&lt;StringType&gt;</code></li></ul><h1 id="Utility-Types"><a href="#Utility-Types" class="headerlink" title="Utility Types"></a>Utility Types</h1><h2 id="Partial-lt-Type-gt"><a href="#Partial-lt-Type-gt" class="headerlink" title="Partial&lt;Type&gt;"></a><code>Partial&lt;Type&gt;</code></h2><ul><li>将接口类型中定义的属性变成可选的(Optional)</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Partial&lt;T&gt; &#x3D; &#123; [P in keyof T]?: T[P] | undefined; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;  description: string;&#125;function updateTodo(todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;) &#123;  return &#123; ...todo, ...fieldsToUpdate &#125;;&#125;const todo1 &#x3D; &#123;  title: &quot;organize desk&quot;,  description: &quot;clear clutter&quot;,&#125;;const todo2 &#x3D; updateTodo(todo1, &#123;  description: &quot;throw out trash&quot;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Required-lt-Type-gt"><a href="#Required-lt-Type-gt" class="headerlink" title="Required&lt;Type&gt;"></a><code>Required&lt;Type&gt;</code></h2><ul><li>将接口类型中定义的属性变成必选项，与<code>Partial&lt;Type&gt;</code>相反</li><li>即使在之前先将它们设为可选的，Required也会使所有符合条件的属性成为必需的，如果省略掉属性的话TypeScript将会引发错误</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Required&lt;T&gt; &#x3D; &#123; [P in keyof T]-?: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Props &#123;  a?: number;  b?: string;&#125;const obj: Props &#x3D; &#123; a: 5 &#125;;const obj2: Required&lt;Props&gt; &#x3D; &#123; a: 5 &#125;;&#x2F;&#x2F; Property &#39;b&#39; is missing in type &#39;&#123; a: number; &#125;&#39; but required in type &#39;Required&lt;Props&gt;&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Readonly-lt-Type-gt"><a href="#Readonly-lt-Type-gt" class="headerlink" title="Readonly&lt;Type&gt;"></a><code>Readonly&lt;Type&gt;</code></h2><ul><li>所有属性设置为只读的类型，不能给类型的属性重新赋值</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Readonly&lt;T&gt; &#x3D; &#123; readonly [P in keyof T]: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;&#125;const todo: Readonly&lt;Todo&gt; &#x3D; &#123;  title: &quot;Delete inactive users&quot;,&#125;;todo.title &#x3D; &quot;Hello&quot;;&#x2F;&#x2F; Cannot assign to &#39;title&#39; because it is a read-only property.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Record-lt-Keys-Type-gt"><a href="#Record-lt-Keys-Type-gt" class="headerlink" title="Record&lt;Keys, Type&gt;"></a><code>Record&lt;Keys, Type&gt;</code></h2><ul><li><p>用于生成以联合类型为键名（Keys），键值类型为Type的新接口，即把Keys的每个键值拿出来，类型规定为Type</p></li><li><p>接收两个泛型参数，构造一个对象类型，键为keys，值为type，用于将一个类型的属性映射到另一个类型</p></li><li><p>源码实现</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Record&lt;K extends string | number | symbol, T&gt; &#x3D; &#123; [P in K]: T; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>例子</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface CatInfo &#123;  age: number;  breed: string;&#125;type CatName &#x3D; &quot;miffy&quot; | &quot;boris&quot; | &quot;mordred&quot;;const cats: Record&lt;CatName, CatInfo&gt; &#x3D; &#123;  miffy: &#123; age: 10, breed: &quot;Persian&quot; &#125;,  boris: &#123; age: 5, breed: &quot;Maine Coon&quot; &#125;,  mordred: &#123; age: 16, breed: &quot;British Shorthair&quot; &#125;,&#125;;cats.boris;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Pick-lt-Type-Keys-gt"><a href="#Pick-lt-Type-Keys-gt" class="headerlink" title="Pick&lt;Type, Keys&gt;"></a><code>Pick&lt;Type, Keys&gt;</code></h2><ul><li>选择一组属性Keys来构造类型Type，即从对象中挑选部分</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Pick&lt;T, K extends keyof T&gt; &#x3D; &#123; [P in K]: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;  description: string;  completed: boolean;&#125;type TodoPreview &#x3D; Pick&lt;Todo, &quot;title&quot; | &quot;completed&quot;&gt;;const todo: TodoPreview &#x3D; &#123;  title: &quot;Clean room&quot;,  completed: false,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Omit-lt-Type-Keys-gt"><a href="#Omit-lt-Type-Keys-gt" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a><code>Omit&lt;Type, Keys&gt;</code></h2><ul><li>Omit与Pick相反，它从类型Type中删除属性Keys，即是排除部分</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Omit&lt;T, K extends string | number | symbol&gt; &#x3D; &#123; [P in Exclude&lt;keyof T, K&gt;]: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;  description: string;  completed: boolean;  createdAt: number;&#125;type TodoPreview &#x3D; Omit&lt;Todo, &quot;description&quot;&gt;;const todo: TodoPreview &#x3D; &#123;  title: &quot;Clean room&quot;,  completed: false,  createdAt: 1615544252770,&#125;;type TodoInfo &#x3D; Omit&lt;Todo, &quot;completed&quot; | &quot;createdAt&quot;&gt;;const todoInfo: TodoInfo &#x3D; &#123;  title: &quot;Pick up kids&quot;,  description: &quot;Kindergarten closes at 5pm&quot;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Exclude-lt-UnionType-ExcludedMembers-gt"><a href="#Exclude-lt-UnionType-ExcludedMembers-gt" class="headerlink" title="Exclude&lt;UnionType, ExcludedMembers&gt;"></a><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code></h2><ul><li>从UnionType(待筛选列表)中剔除ExcludedMembers(筛选条件)的所有属性</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Exclude&lt;T, U&gt; &#x3D; T extends U ? never : T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot;&gt;;&#x2F;&#x2F; type T0 &#x3D; &quot;b&quot; | &quot;c&quot;  type T1 &#x3D; Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot; | &quot;b&quot;&gt;;&#x2F;&#x2F; type T1 &#x3D; &quot;c&quot;type T2 &#x3D; Exclude&lt;string | number | (() &#x3D;&gt; void), Function&gt;;&#x2F;&#x2F; type T2 &#x3D; string | number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Extract-lt-Type-Union-gt"><a href="#Extract-lt-Type-Union-gt" class="headerlink" title="Extract&lt;Type, Union&gt;"></a><code>Extract&lt;Type, Union&gt;</code></h2><ul><li>Extract与Exclude相反，从Type(待筛选列表)中保留Union(筛选条件)的所有属性，Union不存在的属性全部剔除</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Extract&lt;T, U&gt; &#x3D; T extends U ? T : never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; Extract&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot; | &quot;f&quot;&gt;;&#x2F;&#x2F; type T0 &#x3D; &quot;a&quot;type T1 &#x3D; Extract&lt;string | number | (() &#x3D;&gt; void), Function&gt;; &#x2F;&#x2F; type T1 &#x3D; () &#x3D;&gt; void<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="NonNullable-lt-Type-gt"><a href="#NonNullable-lt-Type-gt" class="headerlink" title="NonNullable&lt;Type&gt;"></a><code>NonNullable&lt;Type&gt;</code></h2><ul><li>从Type中排除null和undefined</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type NonNullable&lt;T&gt; &#x3D; T extends null | undefined ? never : T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; NonNullable&lt;string | number | undefined&gt;;&#x2F;&#x2F; type T0 &#x3D; string | numbertype T1 &#x3D; NonNullable&lt;string[] | null | undefined&gt;;&#x2F;&#x2F; type T1 &#x3D; string[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Parameters-lt-Type-gt"><a href="#Parameters-lt-Type-gt" class="headerlink" title="Parameters&lt;Type&gt;"></a><code>Parameters&lt;Type&gt;</code></h2><ul><li>以元组的方式获得函数的入参Type的类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Parameters&lt;T extends (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends (...args: infer P) &#x3D;&gt; any ? P : never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare function f1(arg: &#123; a: number; b: string &#125;): void;type T0 &#x3D; Parameters&lt;() &#x3D;&gt; string&gt;;&#x2F;&#x2F; type T0 &#x3D; []type T1 &#x3D; Parameters&lt;(s: string) &#x3D;&gt; void&gt;;&#x2F;&#x2F; type T1 &#x3D; [s: string]type T2 &#x3D; Parameters&lt;&lt;T&gt;(arg: T) &#x3D;&gt; T&gt;;&#x2F;&#x2F; type T2 &#x3D; [arg: unknown]type T3 &#x3D; Parameters&lt;typeof f1&gt;;&#x2F;&#x2F; type T3 &#x3D; [arg: &#123;&#x2F;&#x2F;     a: number;&#x2F;&#x2F;     b: string;&#x2F;&#x2F; &#125;]type T4 &#x3D; Parameters&lt;any&gt;;&#x2F;&#x2F; type T4 &#x3D; unknown[]type T5 &#x3D; Parameters&lt;never&gt;;&#x2F;&#x2F; type T5 &#x3D; nevertype T6 &#x3D; Parameters&lt;string&gt;;&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; type T6 &#x3D; nevertype T7 &#x3D; Parameters&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.&#x2F;&#x2F; type T7 &#x3D; never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ConstructorParameters-lt-Type-gt"><a href="#ConstructorParameters-lt-Type-gt" class="headerlink" title="ConstructorParameters&lt;Type&gt;"></a><code>ConstructorParameters&lt;Type&gt;</code></h2><ul><li>以元组的方式获得构造函数的入参Type的类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ConstructorParameters&lt;T extends abstract new (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends abstract new (...args: infer P) &#x3D;&gt; any ? P : never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; ConstructorParameters&lt;ErrorConstructor&gt;;&#x2F;&#x2F; type T0 &#x3D; [message?: string]type T1 &#x3D; ConstructorParameters&lt;FunctionConstructor&gt;;&#x2F;&#x2F; type T1 &#x3D; string[]type T2 &#x3D; ConstructorParameters&lt;RegExpConstructor&gt;;&#x2F;&#x2F; type T2 &#x3D; [pattern: string | RegExp, flags?: string]type T3 &#x3D; ConstructorParameters&lt;any&gt;;&#x2F;&#x2F; type T3 &#x3D; unknown[]type T4 &#x3D; ConstructorParameters&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.&#x2F;&#x2F; type T4 &#x3D; never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ReturnType-lt-Type-gt"><a href="#ReturnType-lt-Type-gt" class="headerlink" title="ReturnType&lt;Type&gt;"></a><code>ReturnType&lt;Type&gt;</code></h2><ul><li>用于获取函数的返回类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ReturnType&lt;T extends (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends (...args: any) &#x3D;&gt; infer R ? R : any<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare function f1(): &#123; a: number; b: string &#125;;type T0 &#x3D; ReturnType&lt;() &#x3D;&gt; string&gt;;&#x2F;&#x2F; type T0 &#x3D; stringtype T1 &#x3D; ReturnType&lt;(s: string) &#x3D;&gt; void&gt;;&#x2F;&#x2F; type T1 &#x3D; voidtype T2 &#x3D; ReturnType&lt;&lt;T&gt;() &#x3D;&gt; T&gt;;&#x2F;&#x2F; type T2 &#x3D; unknowntype T3 &#x3D; ReturnType&lt;&lt;T extends U, U extends number[]&gt;() &#x3D;&gt; T&gt;;&#x2F;&#x2F; type T3 &#x3D; number[]type T4 &#x3D; ReturnType&lt;typeof f1&gt;;&#x2F;&#x2F; type T4 &#x3D; &#123;&#x2F;&#x2F;     a: number;&#x2F;&#x2F;     b: string;&#x2F;&#x2F; &#125;type T5 &#x3D; ReturnType&lt;any&gt;;&#x2F;&#x2F; type T5 &#x3D; anytype T6 &#x3D; ReturnType&lt;never&gt;;&#x2F;&#x2F; type T6 &#x3D; nevertype T7 &#x3D; ReturnType&lt;string&gt;;&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; type T7 &#x3D; anytype T8 &#x3D; ReturnType&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.&#x2F;&#x2F; type T8 &#x3D; any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="InstanceType-lt-Type-gt"><a href="#InstanceType-lt-Type-gt" class="headerlink" title="InstanceType&lt;Type&gt;"></a><code>InstanceType&lt;Type&gt;</code></h2><ul><li>推断/获得构造函数返回值的类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type InstanceType&lt;T extends abstract new (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends abstract new (...args: any) &#x3D;&gt; infer R ? R : any<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class C &#123;  x &#x3D; 0;  y &#x3D; 0;&#125;type T0 &#x3D; InstanceType&lt;typeof C&gt;;&#x2F;&#x2F; type T0 &#x3D; Ctype T1 &#x3D; InstanceType&lt;any&gt;;&#x2F;&#x2F; type T1 &#x3D; anytype T2 &#x3D; InstanceType&lt;never&gt;;&#x2F;&#x2F; type T2 &#x3D; nevertype T3 &#x3D; InstanceType&lt;string&gt;;&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; type T3 &#x3D; anytype T4 &#x3D; InstanceType&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.&#x2F;&#x2F; type T4 &#x3D; any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ThisParameterType-lt-Type-gt"><a href="#ThisParameterType-lt-Type-gt" class="headerlink" title="ThisParameterType&lt;Type&gt;"></a><code>ThisParameterType&lt;Type&gt;</code></h2><ul><li>提取函数Type的this参数生成一个新的Type，若函数类型并没有此参数，则提取为unknown类型。</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ThisParameterType&lt;T&gt; &#x3D; T extends (this: infer U, ...args: never) &#x3D;&gt; any ? U : unknown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function toHex(this: Number) &#123;  return this.toString(16);&#125;function numberToString(n: ThisParameterType&lt;typeof toHex&gt;) &#123;  return toHex.apply(n);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="OmitThisParameter-lt-Type-gt"><a href="#OmitThisParameter-lt-Type-gt" class="headerlink" title="OmitThisParameter&lt;Type&gt;"></a><code>OmitThisParameter&lt;Type&gt;</code></h2><ul><li>创建一个OmitThisParameter类型，从函数类型Type中移除this参数，即忽略函数Type的this参数，生成一个新的函数Type</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type OmitThisParameter&lt;T&gt; &#x3D; unknown extends ThisParameterType&lt;T&gt; ? T : T extends (...args: infer A) &#x3D;&gt; infer R ? (...args: A) &#x3D;&gt; R : T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function toHex(this: Number) &#123;  return this.toString(16);&#125;const fiveToHex: OmitThisParameter&lt;typeof toHex&gt; &#x3D; toHex.bind(5);console.log(fiveToHex());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ThisType-lt-Type-gt"><a href="#ThisType-lt-Type-gt" class="headerlink" title="ThisType&lt;Type&gt;"></a><code>ThisType&lt;Type&gt;</code></h2><ul><li>ThisType不返回转换后的类型，只是给对象标记this接口。注意，要使用ThisType，必须启用noImplicitThis</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ThisType&lt;T&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ObjectDescriptor&lt;D, M&gt; &#x3D; &#123;  data?: D;  methods?: M &amp; ThisType&lt;D &amp; M&gt;; &#x2F;&#x2F; Type of &#39;this&#39; in methods is D &amp; M&#125;;function makeObject&lt;D, M&gt;(desc: ObjectDescriptor&lt;D, M&gt;): D &amp; M &#123;  let data: object &#x3D; desc.data || &#123;&#125;;  let methods: object &#x3D; desc.methods || &#123;&#125;;  return &#123; ...data, ...methods &#125; as D &amp; M;&#125;let obj &#x3D; makeObject(&#123;  data: &#123; x: 0, y: 0 &#125;,  methods: &#123;    moveBy(dx: number, dy: number) &#123;      this.x +&#x3D; dx; &#x2F;&#x2F; Strongly typed this      this.y +&#x3D; dy; &#x2F;&#x2F; Strongly typed this    &#125;,  &#125;,&#125;);obj.x &#x3D; 10;obj.y &#x3D; 20;obj.moveBy(5, 5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="Intrinsic-String-Manipulation-Types"><a href="#Intrinsic-String-Manipulation-Types" class="headerlink" title="Intrinsic String Manipulation Types"></a><code>Intrinsic String Manipulation Types</code></h1><ul><li><p>TypeScript的一些类型可以用于字符操作，这些类型处于性能的考虑被内置在编译器中，你不能在.d.ts文件里找到它们。如：<code>Uppercase&lt;StringType&gt;</code>、<code>Lowercase&lt;StringType&gt;</code>、<code>Capitalize&lt;StringType&gt;</code>、<code>Uncapitalize&lt;StringType&gt;</code>、</p><h2 id="Uppercase-lt-StringType-gt"><a href="#Uppercase-lt-StringType-gt" class="headerlink" title="Uppercase&lt;StringType&gt;"></a><code>Uppercase&lt;StringType&gt;</code></h2><ul><li>把每个字符转为大写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Uppercase&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Greeting &#x3D; &quot;Hello, world&quot;type ShoutyGreeting &#x3D; Uppercase&lt;Greeting&gt;&#x2F;&#x2F; type ShoutyGreeting &#x3D; &quot;HELLO, WORLD&quot;type ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;ID-$&#123;Uppercase&lt;Str&gt;&#125;&#96;type MainID &#x3D; ASCIICacheKey&lt;&quot;my_app&quot;&gt;&#x2F;&#x2F; type MainID &#x3D; &quot;ID-MY_APP&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Lowercase-lt-StringType-gt"><a href="#Lowercase-lt-StringType-gt" class="headerlink" title="Lowercase&lt;StringType&gt;"></a><code>Lowercase&lt;StringType&gt;</code></h2><ul><li>把每个字符转为小写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Lowercase&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Greeting &#x3D; &quot;Hello, world&quot;type QuietGreeting &#x3D; Lowercase&lt;Greeting&gt;&#x2F;&#x2F; type QuietGreeting &#x3D; &quot;hello, world&quot;type ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;id-$&#123;Lowercase&lt;Str&gt;&#125;&#96;type MainID &#x3D; ASCIICacheKey&lt;&quot;MY_APP&quot;&gt;&#x2F;&#x2F; type MainID &#x3D; &quot;id-my_app&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Capitalize-lt-StringType-gt"><a href="#Capitalize-lt-StringType-gt" class="headerlink" title="Capitalize&lt;StringType&gt;"></a><code>Capitalize&lt;StringType&gt;</code></h2><ul><li>把字符串的第一个字符转为大写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Capitalize&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type LowercaseGreeting &#x3D; &quot;hello, world&quot;;type Greeting &#x3D; Capitalize&lt;LowercaseGreeting&gt;;&#x2F;&#x2F; type Greeting &#x3D; &quot;Hello, world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Uncapitalize-lt-StringType-gt"><a href="#Uncapitalize-lt-StringType-gt" class="headerlink" title="Uncapitalize&lt;StringType&gt;"></a><code>Uncapitalize&lt;StringType&gt;</code></h2><ul><li>把字符串的第一个字符转换为小写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Uncapitalize&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type UppercaseGreeting &#x3D; &quot;HELLO WORLD&quot;;type UncomfortableGreeting &#x3D; Uncapitalize&lt;UppercaseGreeting&gt;;&#x2F;&#x2F; type UncomfortableGreeting &#x3D; &quot;hELLO WORLD&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="工具分类一览"><a href="#工具分类一览" class="headerlink" title="工具分类一览"></a>工具分类一览</h1><ul><li>全量修饰接口：<code>Partial</code> <code>Readonly(Immutable)</code> <code>Mutable</code> <code>Required</code></li><li>裁剪接口：<code>Pick</code> <code>Omit</code> <code>PickByValueType</code> <code>OmitByValueType</code></li><li>基于 infer：<code>ReturnType`` ParamType</code> <code>PromiseType</code></li><li>获取指定条件字段：<code>FunctionKeys</code> <code>OptionalKeys</code> <code>RequiredKeys</code> </li><li>内置字符操作类型：<code>Uppercase&lt;StringType&gt;</code> <code>Lowercase&lt;StringType&gt;</code> <code>Capitalize&lt;StringType&gt;</code> <code>Uncapitalize&lt;StringType&gt;</code></li></ul><h1 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h1><ul><li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">https://www.typescriptlang.org/docs/handbook/utility-types.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工具列表&quot;&gt;&lt;a href=&quot;#工具列表&quot; class=&quot;headerlink&quot; title=&quot;工具列表&quot;&gt;&lt;/a&gt;工具列表&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;[√] &lt;code&gt;Partial&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[√] &lt;code&gt;</summary>
      
    
    
    
    <category term="TypeScript" scheme="http://damao2250.com/categories/TypeScript/"/>
    
    
    <category term="TS" scheme="http://damao2250.com/tags/TS/"/>
    
    <category term="TypeScript" scheme="http://damao2250.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>git远程已经删除的分支本地环境仍能看到远程分支</title>
    <link href="http://damao2250.com/2022/06/11/git%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E4%BB%8D%E8%83%BD%E7%9C%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
    <id>http://damao2250.com/2022/06/11/git%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E4%BB%8D%E8%83%BD%E7%9C%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</id>
    <published>2022-06-11T01:39:58.000Z</published>
    <updated>2022-06-11T01:47:37.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git远程已经删除的分支，在本地环境仍能看到远程分支"><a href="#git远程已经删除的分支，在本地环境仍能看到远程分支" class="headerlink" title="git远程已经删除的分支，在本地环境仍能看到远程分支"></a>git远程已经删除的分支，在本地环境仍能看到远程分支</h2><ol><li><p>使用命令查看本地分支及远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> bransh -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看remote远程分支，还有本地分支与之对应的关系</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote show origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>远程不存在的分支会提示：<code> stale (use &#39;git remote prune&#39; to remove)</code></li></ul><ol start="3"><li>在本地删除远程不存在的分支<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote prune origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>or<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote prune origin <span class="token operator">&lt;</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;git远程已经删除的分支，在本地环境仍能看到远程分支&quot;&gt;&lt;a href=&quot;#git远程已经删除的分支，在本地环境仍能看到远程分支&quot; class=&quot;headerlink&quot; title=&quot;git远程已经删除的分支，在本地环境仍能看到远程分支&quot;&gt;&lt;/a&gt;git远程已经删</summary>
      
    
    
    
    <category term="版本控制工具" scheme="http://damao2250.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>css实现打字效果</title>
    <link href="http://damao2250.com/2022/06/09/css%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/"/>
    <id>http://damao2250.com/2022/06/09/css%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/</id>
    <published>2022-06-09T01:11:51.000Z</published>
    <updated>2022-06-09T01:44:01.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css实现打字效果"><a href="#css实现打字效果" class="headerlink" title="css实现打字效果"></a>css实现打字效果</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 中文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.typing-cn</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 15.1em<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 2px solid transparent<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> typing 3.0s <span class="token function">steps</span><span class="token punctuation">(</span>15<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">,</span> blink-caret .75s step-end infinite<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* 打印效果 */</span>  <span class="token atrule"><span class="token rule">@keyframes</span> typing</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 15.1em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* 光标 */</span>  <span class="token atrule"><span class="token rule">@keyframes</span> blink-caret</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from, to</span> <span class="token punctuation">&#123;</span> <span class="token property">box-shadow</span><span class="token punctuation">:</span> 1px 0 0 0 transparent<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span> <span class="token property">box-shadow</span><span class="token punctuation">:</span> 1px 0 0 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typing-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>简易中文打字效果，简易打字效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 英文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.typing-en</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 22ch<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> monospace<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> typing 2s <span class="token function">steps</span><span class="token punctuation">(</span>22<span class="token punctuation">)</span> infinite<span class="token punctuation">,</span> effect .5s step-end infinite alternate<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> typing</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> effect</span> <span class="token punctuation">&#123;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span> <span class="token property">border-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typing-en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Typing effect for text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><style type="text/css">  .typing-cn {    width: 15.1em;    white-space: nowrap;    border-right: 2px solid transparent;    animation: typing 3.5s steps(15, end), blink-caret .75s step-end infinite;    overflow: hidden;  }  /* 打印效果 */  @keyframes typing {    from { width: 0; }    to { width: 15.1em; }  }  /* 光标 */  @keyframes blink-caret {    from, to { box-shadow: 1px 0 0 0 transparent; }    50% { box-shadow: 1px 0 0 0; }  }</style><div class="typing-cn">简易中文打字效果，简易打字效果</div><style type="text/css">  .typing-en {    width: 23ch;    white-space: nowrap;    overflow: hidden;    border-right: 3px solid;    font-family: monospace;    font-size: 2em;    animation: typing1 2s steps(23) infinite, effect .5s step-end infinite alternate;  }  @keyframes typing1 {    from { width: 0; }  }  @keyframes effect {    50% { border-color: transparent; }  }</style><div class="typing-en">Typing effect for text </div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;css实现打字效果&quot;&gt;&lt;a href=&quot;#css实现打字效果&quot; class=&quot;headerlink&quot; title=&quot;css实现打字效果&quot;&gt;&lt;/a&gt;css实现打字效果&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-html&quot; data-</summary>
      
    
    
    
    <category term="CSS" scheme="http://damao2250.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://damao2250.com/tags/CSS/"/>
    
    <category term="HTML" scheme="http://damao2250.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>青龙面板搭建</title>
    <link href="http://damao2250.com/2022/04/27/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/"/>
    <id>http://damao2250.com/2022/04/27/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-27T02:53:20.000Z</published>
    <updated>2022-11-01T06:11:12.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="青龙"><a href="#青龙" class="headerlink" title="青龙"></a>青龙</h2><ul><li>支持python3、javaScript、shell、typescript 的定时任务管理面板（A timed task management panel that supports typescript, javaScript, python3, and shell）</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://github.com/whyour/qinglong">青龙Github</a></li></ul><h2 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h2><ul><li>青龙正版docker镜像: <code>whyour/qinglong:latest</code></li></ul><ol><li>docker 安装<ul><li>确保docker已经安装，详细安装docker看<a href="https://damao2250.github.io/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/">docker的简易使用</a></li></ul></li><li>拉取并启动容器 <pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker run -dit \  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \  -p 5700:5700 \  --name qinglong \  --hostname qinglong \  --restart always \  whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="项目指南"><a href="#项目指南" class="headerlink" title="项目指南"></a>项目指南</h2><ol><li>拉取镜像/更新镜像<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker pull whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除镜像<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker rmi whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动容器 </li></ol><ul><li>普通服务器<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker run -dit \  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \  -p 5700:5700 \  --name qinglong \  --hostname qinglong \  --restart always \  whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>n1等路由器<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker run -dit \  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \  --net host \  --name qinglong \  --hostname qinglong \  --restart always \  whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>删除容器 <pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker rm -f qinglong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>初次登陆(网页访问)</li></ol><ul><li>初次访问 http://&lt;自己ip&gt;:5700</li><li>使用 admin/adminadmin 登陆，提示已初始化密码</li><li>去自己映射目录config下找 auth.json，查看里面的 password<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong cat &#x2F;ql&#x2F;config&#x2F;auth.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>===================== 京东脚本参考==========================================</p><ul><li>第五步初始密码后<ul><li>在面板选择 定时任务-新建任务-填写如下（命令可自行github查找）</li><li>名称：自定义填写    命令：ql repo <a href="https://ghproxy.com/https://github.com/shufflewzc/faker2.git">https://ghproxy.com/https://github.com/shufflewzc/faker2.git</a> “jd_|jx_|getJDCookie” “activity|backUp” “^jd[^_]|USER|ZooFaker_Necklace”      定时规则：可填写0    </li><li>填写完后点击“运行”，运行完后刷新就可以看到所有的任务列表</li></ul></li><li>获取京东cookie<ul><li>网页打开京东手机版：m.jd.com，打开F12，切换手机模式，使用验证码登录京东账号</li><li>在Application出找到Cookie，找到pt_key和pt_pin，复制相应的值，然后手动拼接如下：pt_key=xxxx;pt_pin=xxxx;  (xxxx为对应的值)</li></ul></li><li>回到青龙面板<ul><li>环境变量-新建环境变量</li><li>名称：JD_COOKIE    （注意名称不能变）   自动拆分：否    值：pt_key=xxxx;pt_pin=xxxx;</li><li>定时任务-勾选任务执行测试是否成功</li></ul></li></ul><p>===================== 只做京东的一下可不理会 ================================</p><ol start="6"><li>Cookie管理</li></ol><ul><li>登陆成功进入Cookie管理页面，右上角新增Cookie(最新版已加Cookie格式验证)</li><li>添加成功，可在Cookie列表更新Cookie，删除Cookie</li></ul><ol start="7"><li>基本命令</li></ol><ul><li>(容器内执行或者新建定时任务时忽略docker exec -it qinglong)</li><li>更新青龙<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>更新青龙并编译<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>拉取自定义仓库<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">&lt;!-- 示例 --&gt;docker exec -it qinglong ql repo https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;github.com&#x2F;whyour&#x2F;hundun.git &quot;quanx&quot; &quot;tokens|caiyun|didi|donate|fold|Env&quot;&lt;!-- 可用 --&gt;docker exec -it qinglong ql repo https:&#x2F;&#x2F;github.com&#x2F;6dylan6&#x2F;jdpro.git &quot;jd_|jx_|jddj_&quot; &quot;backUp&quot; &quot;^jd[^_]|USER|JD|function|sendNotify&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>拉取单个脚本<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql raw https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;moposmall&#x2F;Script&#x2F;main&#x2F;Me&#x2F;jx_cfd.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除7天前的所有日志<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql rmlog 7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动bot<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql bot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>导出互助码<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>通知测试<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong notify test test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>立即执行脚本<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong task test.js now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>并行执行脚本<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong task test.js conc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>利用谷歌浏览器获取京东Cookie抓取，cookie值千万不能泄露，设置环境变量，环境变量—&gt;添加变量</p><h1 id="tg机器人获取通知"><a href="#tg机器人获取通知" class="headerlink" title="tg机器人获取通知"></a>tg机器人获取通知</h1><h2 id="生成tg机器人"><a href="#生成tg机器人" class="headerlink" title="生成tg机器人"></a>生成tg机器人</h2><ul><li>搜索<code>@BotFather</code>，进入对话框输入<code>/newbot</code>，输入机器人呢称，输入机器人username（以bot结尾）</li><li>生成机器人成功后会发送 user token ，类似：539****961:AAgVexxxxxxxxxqfa</li><li>在搜索栏搜索<code>@userinfobot</code>,点击 Start,第二行Id即为您的UserID（telegramBotUserId）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;青龙&quot;&gt;&lt;a href=&quot;#青龙&quot; class=&quot;headerlink&quot; title=&quot;青龙&quot;&gt;&lt;/a&gt;青龙&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持python3、javaScript、shell、typescript 的定时任务管理面板（A timed task man</summary>
      
    
    
    
    <category term="Linux" scheme="http://damao2250.com/categories/Linux/"/>
    
    
    <category term="青龙面板" scheme="http://damao2250.com/tags/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>docker的简易使用</title>
    <link href="http://damao2250.com/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/"/>
    <id>http://damao2250.com/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-01T03:37:54.000Z</published>
    <updated>2022-04-06T06:00:38.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在CentOS上使用Docker"><a href="#在CentOS上使用Docker" class="headerlink" title="在CentOS上使用Docker"></a>在CentOS上使用Docker</h1><h2 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h2><ul><li>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</li><li>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ sudo yum install -y yum-utils \  device-mapper-persistent-data \  lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>设置完之后，根据需求指定稳定的仓库地址（建议使用国内源）<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 官方源地址$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo# 国内源地址# 阿里云$ sudo yum-config-manager \    --add-repo \    http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo    # 清华大学源$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 按安装最新版docker$ sudo yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 启动 Docker (启动守护进程)$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker ps# or 查看所有$ docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker start &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker stop &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重启一个容器"><a href="#重启一个容器" class="headerlink" title="重启一个容器"></a>重启一个容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker restart &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 退出时容器停止$ docker attach &lt;CONTAINER ID&gt;# 退出时容器不停止（推荐）$ docker exec &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h2><ul><li>删除安装包<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ yum remove docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除镜像、容器、配置文件等内容<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ rm -rf &#x2F;var&#x2F;lib&#x2F;docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="使用docker安装nginx"><a href="#使用docker安装nginx" class="headerlink" title="使用docker安装nginx"></a>使用docker安装nginx</h2><ul><li><p>获取nginx镜像列表</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker search nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拉取nginx镜像到本地，使用第一个默认的’nginx’</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看拉取到本地的nginx镜像</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker images nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建并启动nginx容器</p><ul><li>-d 指定容器以守护进程方式在后台运行</li><li>–name 指定容器名称，此处我指定的是docker_nginx</li><li>-p 指定主机与容器内部的端口号映射关系，格式 -p</li><li><code>[宿主机端口号]:[容器内部端口]</code>，此处使用主机80端口，映射容器80端口</li><li>1276 是nginx的镜像IMAGE ID前4位<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker run -d --name docker_nginx -p 80:80 1276<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>查看到正在运行的容器</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="修改nginx的配置文件"><a href="#修改nginx的配置文件" class="headerlink" title="修改nginx的配置文件"></a>修改nginx的配置文件</h3><ul><li>1、每次都进入到nginx容器内部修改<ul><li>执行 <code>docker exec -it xxxx /bin/bash</code> 进入到nginx容器内部<ul><li>exec 命令代表附着到运行着的容器内部</li><li>-it 是 -i 与 -t两个参数合并写法，-i -t 标志着为我们指定的容器创建了TTY并捕捉了STDIN</li><li>xxxx 是我们要进入的容器Id的前4位</li><li>/bin/bash 指定了执行命令的shell</li></ul></li><li>进入到nginx容器内部后，我们可以cd /etc/nginx，可以看到相关的nginx配置文件都在/etc/nginx目录下</li><li>而nginx容器内的默认首页html文件目录为/usr/share/nginx/html</li><li>日志文件位于/var/log/nginx</li><li>nginx容器内默认没有vim编辑器<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ apt-get update$ apt-get install vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>容器内编辑nginx.conf配置文件</li><li>执行exit命令我们可以从容器内部退出</li></ul></li><li>2、将nginx容器内部配置文件挂载到主机<ul><li>有这个需求说明频繁改动，可直接安装到服务器</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在CentOS上使用Docker&quot;&gt;&lt;a href=&quot;#在CentOS上使用Docker&quot; class=&quot;headerlink&quot; title=&quot;在CentOS上使用Docker&quot;&gt;&lt;/a&gt;在CentOS上使用Docker&lt;/h1&gt;&lt;h2 id=&quot;设置仓库&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Docker" scheme="http://damao2250.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://damao2250.com/tags/Docker/"/>
    
    <category term="CentOS" scheme="http://damao2250.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Windows常用软件列表</title>
    <link href="http://damao2250.com/2022/03/30/Windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/"/>
    <id>http://damao2250.com/2022/03/30/Windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</id>
    <published>2022-03-30T06:27:47.000Z</published>
    <updated>2022-12-07T06:32:19.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows常用软件列表"><a href="#Windows常用软件列表" class="headerlink" title="Windows常用软件列表"></a>Windows常用软件列表</h1><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ul><li><a href="http://www.7-zip.org/">7-Zip</a> - 支持 7z、ZIP、GZIP、BZIP2 和 TAR 格式，其他格式可以解压。开源软件 免费软件</li><li><a href="https://www.bandisoft.com/bandizip/">Bandizip</a> - 轻量级、快速且免费的多合一 Zip 存档器。免费软件</li><li><a href="http://www.rarlab.com/">WinRAR</a> - 一个强大的存档管理器。它可以备份您的数据并减少电子邮件附件的大小，解压缩 RAR、ZIP 和其他文件。</li></ul><h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><ul><li><a href="http://www.telerik.com/fiddler">Fiddler</a> - 强大的抓包工具</li><li><a href="https://filezilla-project.org/">FileZilla</a> - FTP、FTPS 和 SFTP 客户端。开源软件 免费软件</li><li><a href="https://git-scm.com/downloads">Git</a> - Git是一个开源的分布式版本控制系统。开源软件 免费软件</li><li><a href="https://mremoteng.org/">mRemoteNG</a> - mRemoteNG是一款用于Windows开源、多协议的远程连接管理器（<a href="https://github.com/mRemoteNG/mRemoteNG">github地址</a>）。开源软件 免费软件</li></ul><h2 id="办公套件"><a href="#办公套件" class="headerlink" title="办公套件"></a>办公套件</h2><ul><li><a href="https://www.freeoffice.com/zh/">FreeOffice</a> - FreeOffice 是一个完整的办公套件，带有文字处理器、电子表格应用程序和演示程序——所有这些都与 Microsoft Office 中的同类产品兼容。免费软件</li><li><a href="http://www.office.com/">Microsoft Office</a> - 微软的办公生产力套件。收费</li><li><a href="http://www.sumatrapdfreader.org/free-pdf-reader.html">Sumatra PDF</a> - PDF、ePub、MOBI、CHM、XPS、DjVu、CBZ、CBR 阅读器。开源软件 免费软件</li></ul><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><ul><li><a href="https://atom.io/">Atom</a> - Atom 是 Github 专门为程序员推出的一个跨平台文本编辑器。开源软件 免费软件</li><li><a href="http://brackets.io/">Brackets</a> - 一个现代的、开源的文本编辑器，可以理解网页设计。开源软件 免费软件</li><li><a href="http://www.vim.org/download.php#pc">GVim</a> - (G)Vim 是一个高度可配置的文本编辑器，旨在实现高效的文本编辑。开源软件 免费软件</li><li><a href="http://lighttable.com/">Light Table</a> - 一个可定制的编辑器，具有即时反馈并显示数据值在您的代码中流动。开源软件 免费软件</li><li><a href="https://neovim.io/">Neovim</a> - 从字面上看是 vim 的未来开源软件 免费软件</li><li><a href="https://notepad-plus-plus.org/">Notepad++</a> - 支持多种编程语言的源代码编辑器。开源软件 免费软件</li><li><a href="http://www.flos-freeware.ch/notepad2.html">Notepad2</a> - 具有许多有用功能的小巧快速的记事本替换。开源软件 免费软件</li><li><a href="http://onivim.io/">Oni</a> - 现代模态编辑 - 由 Neovim 提供支持开源软件 免费软件</li><li><a href="https://spacevim.org/">SpaceVim</a> - 社区驱动的 vim 发行版开源软件 免费软件</li><li><a href="http://www.sublimetext.com/3">Sublime Text 3</a> - 是一款跨平台代码编辑器软件。</li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a> - 构建和调试现代 Web 和云应用程序。开源软件 免费软件</li></ul><h2 id="生产率"><a href="#生产率" class="headerlink" title="生产率"></a>生产率</h2><ul><li><a href="http://ditto-cp.sourceforge.net/">Ditto</a> - 剪贴板管理器。</li><li><a href="http://www.voidtools.com/">Everything</a> - 按名称最快的文件/文件夹搜索工具。</li></ul><h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><ul><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Clash</a> - Clash 是一款使用 Go 语言编写的代理工具，支持规则分流。 免费软件</li><li><a href="https://github.com/2dust/v2rayN/releases">v2rayN</a> - v2rayN是基于v2ray核心的简洁好用、功能强大的v2ray客户端,支持Vmess、Shadowsocks、Socks5等多种协议,也支持服务器订阅</li><li><a href="https://potplayer.daum.net/?lang=zh_CN">PotPlayer</a> - 功能强大的多媒体播放器，内置解码器</li><li><a href="https://www.disktool.cn/recovery/winfr.html">WinFR</a> - 傲梅科技开发的WinFR是Windows文件恢复（微软命令行程序）的免费图形界面，帮助用户快速从Windows 10/11中恢复已删除的文件</li><li><a href="https://github.com/microsoft/PowerToys/releases">PowerToys</a> - PowerToys 是微软出品的工具合集软件，支持的功能包括：始终置顶、颜色选择器、图像大小调整器、文本提取器、屏幕标尺、鼠标实用工具、键盘管理器、文件资源管理器加载项、快捷键指南、窗口管理器 、应用搜索启动 、批量重命名</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/FTPServer.exe">FTPServer</a> - FTPServer 是一个FTP文件传输协议的工具，支持上传、下载功能</li><li><a href="https://molunerfinn.com/PicGo">PicGo</a> - PicGo 是一个用于快速上传图片并获取图片URL链接的图床上传工具</li></ul><h2 id="绿色软件"><a href="#绿色软件" class="headerlink" title="绿色软件"></a>绿色软件</h2><ul><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/pdfelement_58150.zip">Wondershare PDFelement</a> - Wondershare PDFelementv7.6.0.4878免安装版，是一款非常受欢迎的PDF编辑工具。该软件主要为用户提供了强大的编辑功能，也支持强大的OCR光学识别引擎，是最好用的专业pdf编辑软件之一</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/navicat_premium.zip">Navicat Premium</a> - Navicat premium是一款数据库管理工具,是一个可多重连线资料库的管理工具，它可以让你以单一程式同时连线到 MySQL、SQLite、Oracle 及 PostgreSQL 资料库，让管理不同类型的资料库更加的方便</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/debut.zip">Debut Video Capture Software</a> - Debut Video Capture Software是一款简单易用的屏幕录制软件，可以捕捉你的屏幕和摄像头</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/ii3-Setup.zip">iRead</a> - iRead是一款阅读器、电子书制作工具和读书平台，支持txt、pdf、epub、ib3等多种文件格式（<a href="http://www.ireadhome.com/">iRead官方</a>不再提供在线服务，可以继续离线功能）</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/CCleaner%20Professional%206.06.10144%20(x64)%20Multilingual.zip">CCleaner</a> - CCleaner是一款小型，快速，专业的系统清理和隐私保护工具</li></ul><h2 id="Mac-软件下载常见站点（未甄别）"><a href="#Mac-软件下载常见站点（未甄别）" class="headerlink" title="Mac 软件下载常见站点（未甄别）"></a>Mac 软件下载常见站点（未甄别）</h2><ul><li>MacApp分享频道  <a href="https://macapp.org.cn/">https://macapp.org.cn/</a></li><li>Digit77  <a href="https://www.digit77.com/">https://www.digit77.com</a></li><li>Mac玩儿法  <a href="https://www.waerfa.com/">https://www.waerfa.com/</a></li><li>Xclient  <a href="https://xclient.info/">https://xclient.info/</a></li><li>马可菠萝  <a href="https://www.macbl.com/">https://www.macbl.com/</a></li><li>MacPedia  <a href="https://macpedia.xyz/">https://macpedia.xyz/</a></li><li>未来Mac下载  <a href="https://mac.orsoon.com/">https://mac.orsoon.com/</a></li><li>玩机手册  <a href="https://www.rjsos.com/mac">https://www.rjsos.com/mac</a></li><li>麦氪派  <a href="https://www.waitsun.com/topics/os">https://www.waitsun.com/topics/os</a></li><li>潘多拉盒子  <a href="https://www.inpandora.com/">https://www.inpandora.com/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows常用软件列表&quot;&gt;&lt;a href=&quot;#Windows常用软件列表&quot; class=&quot;headerlink&quot; title=&quot;Windows常用软件列表&quot;&gt;&lt;/a&gt;Windows常用软件列表&lt;/h1&gt;&lt;h2 id=&quot;压缩&quot;&gt;&lt;a href=&quot;#压缩&quot; cla</summary>
      
    
    
    
    <category term="Windows" scheme="http://damao2250.com/categories/Windows/"/>
    
    
    <category term="下载" scheme="http://damao2250.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
    <category term="软件" scheme="http://damao2250.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
</feed>
