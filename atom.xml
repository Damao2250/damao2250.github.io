<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damao</title>
  
  <subtitle>乐躬耕于陇亩兮，吾爱吾庐。聊寄傲于琴书兮，以待天时。</subtitle>
  <link href="http://damao2250.com/atom.xml" rel="self"/>
  
  <link href="http://damao2250.com/"/>
  <updated>2022-07-25T03:11:43.026Z</updated>
  <id>http://damao2250.com/</id>
  
  <author>
    <name>Damao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>史蒂夫·乔布斯在斯坦福大学的演讲</title>
    <link href="http://damao2250.com/2022/07/25/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%BC%94%E8%AE%B2/"/>
    <id>http://damao2250.com/2022/07/25/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%BC%94%E8%AE%B2/</id>
    <published>2022-07-25T02:59:30.000Z</published>
    <updated>2022-07-25T03:11:43.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="史蒂夫·乔布斯在斯坦福大学的演讲"><a href="#史蒂夫·乔布斯在斯坦福大学的演讲" class="headerlink" title="史蒂夫·乔布斯在斯坦福大学的演讲"></a>史蒂夫·乔布斯在斯坦福大学的演讲</h2><p>Stanford Report, June 14, 2005</p><p>‘You’ve got to find what you love,’ Jobs says</p><p>This is the text of the Commencement address by Steve Jobs, CEO of Apple Computer and of Pixar Animation Studios, delivered on June 12, 2005.</p><p>  【演讲词】</p><p>I am honored to be with you today at your commencement from one of the finest universities in the world. Truth be told, I never graduated from college, and this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><p>　　我今天很荣幸能和你们一起参加毕业典礼，斯坦福大学是世界上最好的大学之一。我从来没有从大学中毕业。说实话,今天也许是在我的生命中离大学毕业最近的一天了。今天我想向你们讲述我生活中的三个故事。不是什么大不了的事情,只是三个故事而已。</p><p>The first story is about connecting the dots.</p><p>　　第一个故事是关于如何把生命中的点点滴滴串连起来。</p><p>I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out？</p><p>　　我在Reed大学读了六个月之后就退学了,但是在十八个月以后——我真正的作出退学决定之前,我还经常去学校。我为什么要退学呢？</p><p>It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl.</p><p>　　故事从我出生的时候讲起。我的亲生母亲是一个年轻的,没有结婚的大学毕业生。她决定让别人收养我, 她十分想让我被大学毕业生收养。所以在我出生的时候，她已经做好了一切的准备工作，能使得我被一个律师和他的妻子所收养。但是她没有料到,当我出生之后, 律师夫妇突然决定他们想要一个女孩。</p><p>So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him？” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.</p><p>　　所以我的生养父母(他们还在我亲生父母的观察名单上)突然在半夜接到了一个电话:“我们现在这儿有一个不小心生出来的男婴,你们想要他吗？”他们回答道:“当然!”但是我亲生母亲随后发现，我的养母从来没有上过大学,我的父亲甚至从没有读过高中。她拒绝签这个收养合同。只是在几个月以后,我的父母答应她一定要让我上大学,那个时候她才同意。</p><p>And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out.</p><p>　　在十七岁那年,我真的上了大学。但是我很愚蠢的选择了一个几乎和你们斯坦福大学一样贵的学校, 我父母还处于蓝领阶层，他们几乎把所有积蓄都花在了我的学费上面。在六个月后, 我已经看不到其中的价值所在。我不知道我想要在生命中做什么,我也不知道大学能帮助我找到怎样的答案。</p><p>And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting.</p><p>　　但是在这里，我几乎花光了我父母这一辈子的所有积蓄。所以我决定要退学,我觉得这是个正确的决定。不能否认,我当时确实非常的害怕, 但是现在回头看看,那的确是我这一生中最棒的一个决定。在我做出退学决定的那一刻, 我终于可以不必去读那些令我提不起丝毫兴趣的课程了。然后我还可以去修那些看起来有点意思的课程。</p><p>It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><p>　　但是这并不是那么罗曼蒂克。我失去了我的宿舍,所以我只能在朋友房间的地板上面睡觉,我去捡5美分的可乐瓶子，仅仅为了填饱肚子, 在星期天的晚上,我需要走七英里的路程，穿过这个城市到Hare Krishna寺庙(注：位于纽约Brooklyn下城),只是为了能吃上饭——这个星期唯一一顿好一点的饭。但是我喜欢这样。我跟着我的直觉和好奇心走, 遇到的很多东西,此后被证明是无价之宝。让我给你们举一个例子吧：</p><p>Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this.</p><p>Reed大学在那时提供也许是全美最好的美术字课程。在这个大学里面的每个海报, 每个抽屉的标签上面全都是漂亮的美术字。因为我退学了, 没有受到正规的训练, 所以我决定去参加这个课程，去学学怎样写出漂亮的美术字。</p><p>I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><p>　　我学到了san serif 和serif字体, 我学会了怎么样在不同的字母组合之中改变空格的长度, 还有怎么样才能作出最棒的印刷式样。那是一种科学永远不能捕捉到的、美丽的、真实的艺术精妙, 我发现那实在是太美妙了。</p><p>None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts.</p><p>　　当时看起来这些东西在我的生命中，好像都没有什么实际应用的可能。但是十年之后,当我们在设计第一台Macintosh电脑的时候,就不是那样了。我把当时我学的那些家伙全都设计进了Mac。那是第一台使用了漂亮的印刷字体的电脑。</p><p>And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><p>　　如果我当时没有退学, 就不会有机会去参加这个我感兴趣的美术字课程, Mac就不会有这么多丰富的字体，以及赏心悦目的字体间距。那么现在个人电脑就不会有现在这么美妙的字型了。当然我在大学的时候，还不可能把从前的点点滴 滴串连起来,但是当我十年后回顾这一切的时候,真的豁然开朗了。</p><p>Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><p>再次强调，没人可以未卜先知，事与事间的因和果，往往只在回首时显现。你得相信，因和果会在未来生活中联系起来。人总要有些信仰才行，直觉也好，命运也罢，因果轮回，不管什么，去相信因与果的联系，会给你信心去跟从自己的意愿，哪怕离经叛道，也绝不止步，只有这样，才能有所成就。</p><p>My second story is about love and loss.</p><p>　　我的第二个故事是关于爱和损失的。</p><p>I was lucky – I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30.</p><p>　　我非常幸运, 因为我在很早的时候就找到了我钟爱的东西。Woz和我在二十岁的时候就在父母的车库里面开创了苹果公司。我们工作得很努力, 十年之后, 这个公司从那两个车库中的穷光蛋发展到了超过四千名的雇员、价值超过二十亿的大公司。在公司成立的第九年,我们刚刚发布了最好的产品,那就是 Macintosh。我也快要到三十岁了。</p><p>And then I got fired. How can you get fired from a company you started？ Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><p>　　在那一年, 我被炒了鱿鱼。你怎么可能被你自己创立的公司炒了鱿鱼呢？ 嗯,在苹果快速成长的时候，我们雇用了一个很有天分的家伙和我一起管理这个公司, 在最初的几年,公司运转的很好。但是后来我们对未来的看法发生了分歧, 最终我们吵了起来。当争吵不可开交的时候, 董事会站在了他的那一边。所以在三十岁的时候, 我被炒了。在这么多人的眼皮下我被炒了。在而立之年，我生命的全部支柱离自己远去, 这真是毁灭性的打击。</p><p>I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly.</p><p>　　在最初的几个月里，我真是不知道该做些什么。我把从前的创业激情给丢了, 我觉得自己让与我一同创业的人都很沮丧。我和David Pack和Bob Boyce见面，并试图向他们道歉。</p><p>I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><p>　　我把事情弄得糟糕透顶了。但是我渐渐发现了曙光, 我仍然喜爱我从事的这些东西。苹果公司发生的这些事情丝毫的没有改变这些, 一点也没有。我被驱逐了,但是我仍然钟爱它。所以我决定从头再来。</p><p>I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><p>　　我当时没有觉察, 但是事后证明, 从苹果公司被炒是我这辈子发生的最棒的事情。因为，作为一个成功者的沉重感觉被作为一个创业者的轻松感觉所重新代替: 对任何事情都不那么特别看重。这让我觉得如此自由, 进入了我生命中最有创造力的一个阶段。</p><p>During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world.</p><p>　　在接下来的五年里, 我创立了一个名叫NeXT的公司, 还有一个叫Pixar的公司, 然后和一个后来成为我妻子的优雅女人相识。Pixar 制作了世界上第一个用电脑制作的动画电影——“玩具总动员”,Pixar现在也是世界上最成功的电脑制作工作室。</p><p>In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><p>　　在后来的一系列运转中,Apple收购了NeXT, 然后我又回到了Apple公司。我们在NeXT发展的技术在Apple的复兴之中发挥了关键的作用。我还和Laurence 一起建立了一个幸福的家庭。</p><p>I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><p>　　我可以非常肯定,如果我不被Apple开除的话, 这其中一件事情也不会发生的。这个良药的味道实在是太苦了,但是我想病人需要这个药。有时候生活会给你迎头一击，不要灰心丧气。我坚信，唯一可以让我坚持下去的，就是我对自己事业的热爱。你必须去寻找自己所爱，无论是工作还是爱情，都是如此。工作是生活中很主要的部分，真正获得满足感，就必须做你相信是有价值的工作。要做有价值的事业，你就必须热爱你做的事业，如果你还没找到，千万不要放弃，要继续寻找，只要倾听你的心声，当你真的发现时你就会感到，就像任何伟大的感情关系一样，岁月的更迭只会让这份情愈发深刻，所以千万不要放弃，要继续寻找。</p><p>My third story is about death.</p><p>　　我的第三个故事是关于死亡的。</p><p>When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today？” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><p>　　当我十七岁的时候, 我读到了一句话:“如果你把每一天都当作生命中最后一天去生活的话,那么有一天你会发现你是正确的。”这句话给我留下了深刻的印象。从那时开始,过了33 年,我在每天早晨都会对着镜子问自己:“如果今天是我生命中的最后一天, 你会不会完成你今天想做的事情呢？”当答案连续很多次被给予“不是”的时候, 我知道自己需要改变某些事情了。</p><p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><p>　　提醒自己人的生命有限，令我一生都受益非常，令我能在人生重大问题上做出抉择。因为一切的一切，一切追求，一切荣耀，一切惶恐，一些挫折，在死亡面前都会显得微不足道 ，剩下的才是最重要的事情。记住自己总会死去是避免自己被种种担心所羁绊的最好方法，既然将一无所有，还有什么理由不追随自己的内心。</p><p>About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><p>　　大概一年以前, 我被诊断出癌症。我在早晨七点半做了一个检查, 检查清楚的显示在我的胰腺有一个肿瘤。我当时都不知道胰腺是什么东西。医生告诉我那很可能是一种无法治愈的癌症, 我还有三到六个月的时间活在这个世界上。我的医生叫我回家, 然后整理好我的一切, 那就是医生准备死亡的程序。那意味着你将要把未来十年对你小孩说的话在几个月里面说完.;那意味着把每件事情都搞定, 让你的家人会尽可能轻松的生活;那意味着你要说“再见了”。</p><p>I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><p>　　我整天和那个诊断书一起生活。后来有一天早上我作了一个活切片检查，医生将一个内窥镜从我的喉咙伸进去,通过我的胃, 然后进入我的肠子, 用一根针在我的胰腺上的肿瘤上取了几个细胞。我当时很镇静,因为我被注射了镇定剂。但是我的妻子在那里, 后来告诉我，当医生在显微镜地下观察这些细胞的时候他们开始尖叫, 因为这些细胞最后竟然是一种非常罕见的可以用手术治愈的胰腺癌症。我做了这个手术, 现在我痊愈了。</p><p>This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:</p><p>　　那是我最接近死亡的时候, 我还希望这也是以后的几十年最接近的一次。从死亡线上又活了过来, 死亡对我来说，只是一个有用但是纯粹是知识上的概念的时候，我可以更肯定一点地对你们说：</p><p>No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><p>　　没有人愿意死, 即使人们想上天堂, 人们也不会为了去那里而死。但是死亡是我们每个人共同的终点。从来没有人能够逃脱它。也应该如此。 因为死亡就是生命中最好的一个发明。它将旧的清除以便给新的让路。你们现在是新的, 但是从现在开始不久以后, 你们将会逐渐的变成旧的然后被清除。我很抱歉这很戏剧性, 但是这十分的真实。</p><p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><p>　　人生有限，所以不要把时间浪费在重复其他人的生活上;不要被教条束缚，那只是根据别人的思维结果而生活，不要让他人的喧嚣纷繁，淹没了自己内心的声音。最重要的是，你要有勇气去跟随你的直觉和心灵，因为它们在某种程度上已经知道你想要成为什么样子，所有其他的事情都是次要的。</p><p>When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.</p><p>　　在我年轻的时候，有本很棒的叫全球目录的杂志。被我们那代人奉为经典。它是由斯图尔特·布兰德在这附近的Menlo公园创办的。他把自己的文艺气质融汇其中。那是六十年代后期。那时还没有个人电脑。全用打字机，剪刀和宝丽来照相机。它就好比是三十五年前的简装版的谷歌。充满理想主义色彩。该书简洁实用，见解独到。</p><p>Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><p>Stay Hungry. Stay Foolish.</p><p>Thank you all very much.</p><p>　　斯图尔特团队出版了几期的全球目录。当它后来要停刊的时候，他们出来最后一版。那是七十年代中期，我就像你们这么大。杂志最后一期的封底上，是一幅清晨乡村公路的照片。是那种搭车旅行玩冒险时会遇到的村路，照片下面有这样一段话：求知若渴，虚心若愚。这是他们停刊的告别语。求知若渴，虚心若愚。我一直以此激励自己。在你们即将毕业开始崭新旅程的时刻，我希望你们也能做到：</p><p>求知若渴，虚心若愚。</p><p>谢谢大家！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;史蒂夫·乔布斯在斯坦福大学的演讲&quot;&gt;&lt;a href=&quot;#史蒂夫·乔布斯在斯坦福大学的演讲&quot; class=&quot;headerlink&quot; title=&quot;史蒂夫·乔布斯在斯坦福大学的演讲&quot;&gt;&lt;/a&gt;史蒂夫·乔布斯在斯坦福大学的演讲&lt;/h2&gt;&lt;p&gt;Stanford Repor</summary>
      
    
    
    
    <category term="文摘" scheme="http://damao2250.com/categories/%E6%96%87%E6%91%98/"/>
    
    
    <category term="史蒂夫·乔布斯" scheme="http://damao2250.com/tags/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF/"/>
    
    <category term="Steve Jobs" scheme="http://damao2250.com/tags/Steve-Jobs/"/>
    
  </entry>
  
  <entry>
    <title>TS内置工具类型使用</title>
    <link href="http://damao2250.com/2022/06/24/TS%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/"/>
    <id>http://damao2250.com/2022/06/24/TS%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-24T08:09:33.000Z</published>
    <updated>2022-07-25T02:27:18.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h1><ul><li>[√] <code>Partial&lt;Type&gt;</code></li><li>[√] <code>Required&lt;Type&gt;</code></li><li>[√] <code>Readonly&lt;Type&gt;</code></li><li>[√] <code>Record&lt;Keys, Type&gt;</code></li><li>[√] <code>Pick&lt;Type, Keys&gt;</code></li><li>[√] <code>Omit&lt;Type, Keys&gt;</code></li><li>[√] <code>Exclude&lt;UnionType, ExcludedMembers&gt;</code></li><li>[√] <code>Extract&lt;Type, Union&gt;</code></li><li>[√] <code>NonNullable&lt;Type&gt;</code></li><li>[√] <code>Parameters&lt;Type&gt;</code></li><li>[√] <code>ConstructorParameters&lt;Type&gt;</code></li><li>[√] <code>ReturnType&lt;Type&gt;</code></li><li>[√] <code>InstanceType&lt;Type&gt;</code></li><li>[√] <code>ThisParameterType&lt;Type&gt;</code></li><li>[√] <code>OmitThisParameter&lt;Type&gt;</code></li><li>[√] <code>ThisType&lt;Type&gt;</code></li><li>[√] <code>Uppercase&lt;StringType&gt;</code></li><li>[√] <code>Lowercase&lt;StringType&gt;</code></li><li>[√] <code>Capitalize&lt;StringType&gt;</code></li><li>[√] <code>Uncapitalize&lt;StringType&gt;</code></li></ul><h1 id="Utility-Types"><a href="#Utility-Types" class="headerlink" title="Utility Types"></a>Utility Types</h1><h2 id="Partial-lt-Type-gt"><a href="#Partial-lt-Type-gt" class="headerlink" title="Partial&lt;Type&gt;"></a><code>Partial&lt;Type&gt;</code></h2><ul><li>将接口类型中定义的属性变成可选的(Optional)</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Partial&lt;T&gt; &#x3D; &#123; [P in keyof T]?: T[P] | undefined; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;  description: string;&#125;function updateTodo(todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;) &#123;  return &#123; ...todo, ...fieldsToUpdate &#125;;&#125;const todo1 &#x3D; &#123;  title: &quot;organize desk&quot;,  description: &quot;clear clutter&quot;,&#125;;const todo2 &#x3D; updateTodo(todo1, &#123;  description: &quot;throw out trash&quot;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Required-lt-Type-gt"><a href="#Required-lt-Type-gt" class="headerlink" title="Required&lt;Type&gt;"></a><code>Required&lt;Type&gt;</code></h2><ul><li>将接口类型中定义的属性变成必选项，与<code>Partial&lt;Type&gt;</code>相反</li><li>即使在之前先将它们设为可选的，Required也会使所有符合条件的属性成为必需的，如果省略掉属性的话TypeScript将会引发错误</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Required&lt;T&gt; &#x3D; &#123; [P in keyof T]-?: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Props &#123;  a?: number;  b?: string;&#125;const obj: Props &#x3D; &#123; a: 5 &#125;;const obj2: Required&lt;Props&gt; &#x3D; &#123; a: 5 &#125;;&#x2F;&#x2F; Property &#39;b&#39; is missing in type &#39;&#123; a: number; &#125;&#39; but required in type &#39;Required&lt;Props&gt;&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Readonly-lt-Type-gt"><a href="#Readonly-lt-Type-gt" class="headerlink" title="Readonly&lt;Type&gt;"></a><code>Readonly&lt;Type&gt;</code></h2><ul><li>所有属性设置为只读的类型，不能给类型的属性重新赋值</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Readonly&lt;T&gt; &#x3D; &#123; readonly [P in keyof T]: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;&#125;const todo: Readonly&lt;Todo&gt; &#x3D; &#123;  title: &quot;Delete inactive users&quot;,&#125;;todo.title &#x3D; &quot;Hello&quot;;&#x2F;&#x2F; Cannot assign to &#39;title&#39; because it is a read-only property.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Record-lt-Keys-Type-gt"><a href="#Record-lt-Keys-Type-gt" class="headerlink" title="Record&lt;Keys, Type&gt;"></a><code>Record&lt;Keys, Type&gt;</code></h2><ul><li><p>用于生成以联合类型为键名（Keys），键值类型为Type的新接口，即把Keys的每个键值拿出来，类型规定为Type</p></li><li><p>接收两个泛型参数，构造一个对象类型，键为keys，值为type，用于将一个类型的属性映射到另一个类型</p></li><li><p>源码实现</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Record&lt;K extends string | number | symbol, T&gt; &#x3D; &#123; [P in K]: T; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>例子</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface CatInfo &#123;  age: number;  breed: string;&#125;type CatName &#x3D; &quot;miffy&quot; | &quot;boris&quot; | &quot;mordred&quot;;const cats: Record&lt;CatName, CatInfo&gt; &#x3D; &#123;  miffy: &#123; age: 10, breed: &quot;Persian&quot; &#125;,  boris: &#123; age: 5, breed: &quot;Maine Coon&quot; &#125;,  mordred: &#123; age: 16, breed: &quot;British Shorthair&quot; &#125;,&#125;;cats.boris;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Pick-lt-Type-Keys-gt"><a href="#Pick-lt-Type-Keys-gt" class="headerlink" title="Pick&lt;Type, Keys&gt;"></a><code>Pick&lt;Type, Keys&gt;</code></h2><ul><li>选择一组属性Keys来构造类型Type，即从对象中挑选部分</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Pick&lt;T, K extends keyof T&gt; &#x3D; &#123; [P in K]: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;  description: string;  completed: boolean;&#125;type TodoPreview &#x3D; Pick&lt;Todo, &quot;title&quot; | &quot;completed&quot;&gt;;const todo: TodoPreview &#x3D; &#123;  title: &quot;Clean room&quot;,  completed: false,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Omit-lt-Type-Keys-gt"><a href="#Omit-lt-Type-Keys-gt" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a><code>Omit&lt;Type, Keys&gt;</code></h2><ul><li>Omit与Pick相反，它从类型Type中删除属性Keys，即是排除部分</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Omit&lt;T, K extends string | number | symbol&gt; &#x3D; &#123; [P in Exclude&lt;keyof T, K&gt;]: T[P]; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Todo &#123;  title: string;  description: string;  completed: boolean;  createdAt: number;&#125;type TodoPreview &#x3D; Omit&lt;Todo, &quot;description&quot;&gt;;const todo: TodoPreview &#x3D; &#123;  title: &quot;Clean room&quot;,  completed: false,  createdAt: 1615544252770,&#125;;type TodoInfo &#x3D; Omit&lt;Todo, &quot;completed&quot; | &quot;createdAt&quot;&gt;;const todoInfo: TodoInfo &#x3D; &#123;  title: &quot;Pick up kids&quot;,  description: &quot;Kindergarten closes at 5pm&quot;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Exclude-lt-UnionType-ExcludedMembers-gt"><a href="#Exclude-lt-UnionType-ExcludedMembers-gt" class="headerlink" title="Exclude&lt;UnionType, ExcludedMembers&gt;"></a><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code></h2><ul><li>从UnionType(待筛选列表)中剔除ExcludedMembers(筛选条件)的所有属性</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Exclude&lt;T, U&gt; &#x3D; T extends U ? never : T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot;&gt;;&#x2F;&#x2F; type T0 &#x3D; &quot;b&quot; | &quot;c&quot;  type T1 &#x3D; Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot; | &quot;b&quot;&gt;;&#x2F;&#x2F; type T1 &#x3D; &quot;c&quot;type T2 &#x3D; Exclude&lt;string | number | (() &#x3D;&gt; void), Function&gt;;&#x2F;&#x2F; type T2 &#x3D; string | number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Extract-lt-Type-Union-gt"><a href="#Extract-lt-Type-Union-gt" class="headerlink" title="Extract&lt;Type, Union&gt;"></a><code>Extract&lt;Type, Union&gt;</code></h2><ul><li>Extract与Exclude相反，从Type(待筛选列表)中保留Union(筛选条件)的所有属性，Union不存在的属性全部剔除</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Extract&lt;T, U&gt; &#x3D; T extends U ? T : never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; Extract&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;a&quot; | &quot;f&quot;&gt;;&#x2F;&#x2F; type T0 &#x3D; &quot;a&quot;type T1 &#x3D; Extract&lt;string | number | (() &#x3D;&gt; void), Function&gt;; &#x2F;&#x2F; type T1 &#x3D; () &#x3D;&gt; void<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="NonNullable-lt-Type-gt"><a href="#NonNullable-lt-Type-gt" class="headerlink" title="NonNullable&lt;Type&gt;"></a><code>NonNullable&lt;Type&gt;</code></h2><ul><li>从Type中排除null和undefined</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type NonNullable&lt;T&gt; &#x3D; T extends null | undefined ? never : T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; NonNullable&lt;string | number | undefined&gt;;&#x2F;&#x2F; type T0 &#x3D; string | numbertype T1 &#x3D; NonNullable&lt;string[] | null | undefined&gt;;&#x2F;&#x2F; type T1 &#x3D; string[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Parameters-lt-Type-gt"><a href="#Parameters-lt-Type-gt" class="headerlink" title="Parameters&lt;Type&gt;"></a><code>Parameters&lt;Type&gt;</code></h2><ul><li>以元组的方式获得函数的入参Type的类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Parameters&lt;T extends (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends (...args: infer P) &#x3D;&gt; any ? P : never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare function f1(arg: &#123; a: number; b: string &#125;): void;type T0 &#x3D; Parameters&lt;() &#x3D;&gt; string&gt;;&#x2F;&#x2F; type T0 &#x3D; []type T1 &#x3D; Parameters&lt;(s: string) &#x3D;&gt; void&gt;;&#x2F;&#x2F; type T1 &#x3D; [s: string]type T2 &#x3D; Parameters&lt;&lt;T&gt;(arg: T) &#x3D;&gt; T&gt;;&#x2F;&#x2F; type T2 &#x3D; [arg: unknown]type T3 &#x3D; Parameters&lt;typeof f1&gt;;&#x2F;&#x2F; type T3 &#x3D; [arg: &#123;&#x2F;&#x2F;     a: number;&#x2F;&#x2F;     b: string;&#x2F;&#x2F; &#125;]type T4 &#x3D; Parameters&lt;any&gt;;&#x2F;&#x2F; type T4 &#x3D; unknown[]type T5 &#x3D; Parameters&lt;never&gt;;&#x2F;&#x2F; type T5 &#x3D; nevertype T6 &#x3D; Parameters&lt;string&gt;;&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; type T6 &#x3D; nevertype T7 &#x3D; Parameters&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.&#x2F;&#x2F; type T7 &#x3D; never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ConstructorParameters-lt-Type-gt"><a href="#ConstructorParameters-lt-Type-gt" class="headerlink" title="ConstructorParameters&lt;Type&gt;"></a><code>ConstructorParameters&lt;Type&gt;</code></h2><ul><li>以元组的方式获得构造函数的入参Type的类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ConstructorParameters&lt;T extends abstract new (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends abstract new (...args: infer P) &#x3D;&gt; any ? P : never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type T0 &#x3D; ConstructorParameters&lt;ErrorConstructor&gt;;&#x2F;&#x2F; type T0 &#x3D; [message?: string]type T1 &#x3D; ConstructorParameters&lt;FunctionConstructor&gt;;&#x2F;&#x2F; type T1 &#x3D; string[]type T2 &#x3D; ConstructorParameters&lt;RegExpConstructor&gt;;&#x2F;&#x2F; type T2 &#x3D; [pattern: string | RegExp, flags?: string]type T3 &#x3D; ConstructorParameters&lt;any&gt;;&#x2F;&#x2F; type T3 &#x3D; unknown[]type T4 &#x3D; ConstructorParameters&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.&#x2F;&#x2F; type T4 &#x3D; never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ReturnType-lt-Type-gt"><a href="#ReturnType-lt-Type-gt" class="headerlink" title="ReturnType&lt;Type&gt;"></a><code>ReturnType&lt;Type&gt;</code></h2><ul><li>用于获取函数的返回类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ReturnType&lt;T extends (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends (...args: any) &#x3D;&gt; infer R ? R : any<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare function f1(): &#123; a: number; b: string &#125;;type T0 &#x3D; ReturnType&lt;() &#x3D;&gt; string&gt;;&#x2F;&#x2F; type T0 &#x3D; stringtype T1 &#x3D; ReturnType&lt;(s: string) &#x3D;&gt; void&gt;;&#x2F;&#x2F; type T1 &#x3D; voidtype T2 &#x3D; ReturnType&lt;&lt;T&gt;() &#x3D;&gt; T&gt;;&#x2F;&#x2F; type T2 &#x3D; unknowntype T3 &#x3D; ReturnType&lt;&lt;T extends U, U extends number[]&gt;() &#x3D;&gt; T&gt;;&#x2F;&#x2F; type T3 &#x3D; number[]type T4 &#x3D; ReturnType&lt;typeof f1&gt;;&#x2F;&#x2F; type T4 &#x3D; &#123;&#x2F;&#x2F;     a: number;&#x2F;&#x2F;     b: string;&#x2F;&#x2F; &#125;type T5 &#x3D; ReturnType&lt;any&gt;;&#x2F;&#x2F; type T5 &#x3D; anytype T6 &#x3D; ReturnType&lt;never&gt;;&#x2F;&#x2F; type T6 &#x3D; nevertype T7 &#x3D; ReturnType&lt;string&gt;;&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; type T7 &#x3D; anytype T8 &#x3D; ReturnType&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;(...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;(...args: any): any&#39;.&#x2F;&#x2F; type T8 &#x3D; any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="InstanceType-lt-Type-gt"><a href="#InstanceType-lt-Type-gt" class="headerlink" title="InstanceType&lt;Type&gt;"></a><code>InstanceType&lt;Type&gt;</code></h2><ul><li>推断/获得构造函数返回值的类型</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type InstanceType&lt;T extends abstract new (...args: any) &#x3D;&gt; any&gt; &#x3D; T extends abstract new (...args: any) &#x3D;&gt; infer R ? R : any<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class C &#123;  x &#x3D; 0;  y &#x3D; 0;&#125;type T0 &#x3D; InstanceType&lt;typeof C&gt;;&#x2F;&#x2F; type T0 &#x3D; Ctype T1 &#x3D; InstanceType&lt;any&gt;;&#x2F;&#x2F; type T1 &#x3D; anytype T2 &#x3D; InstanceType&lt;never&gt;;&#x2F;&#x2F; type T2 &#x3D; nevertype T3 &#x3D; InstanceType&lt;string&gt;;&#x2F;&#x2F; Type &#39;string&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; type T3 &#x3D; anytype T4 &#x3D; InstanceType&lt;Function&gt;;&#x2F;&#x2F; Type &#39;Function&#39; does not satisfy the constraint &#39;abstract new (...args: any) &#x3D;&gt; any&#39;.&#x2F;&#x2F; Type &#39;Function&#39; provides no match for the signature &#39;new (...args: any): any&#39;.&#x2F;&#x2F; type T4 &#x3D; any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ThisParameterType-lt-Type-gt"><a href="#ThisParameterType-lt-Type-gt" class="headerlink" title="ThisParameterType&lt;Type&gt;"></a><code>ThisParameterType&lt;Type&gt;</code></h2><ul><li>提取函数Type的this参数生成一个新的Type，若函数类型并没有此参数，则提取为unknown类型。</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ThisParameterType&lt;T&gt; &#x3D; T extends (this: infer U, ...args: never) &#x3D;&gt; any ? U : unknown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function toHex(this: Number) &#123;  return this.toString(16);&#125;function numberToString(n: ThisParameterType&lt;typeof toHex&gt;) &#123;  return toHex.apply(n);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="OmitThisParameter-lt-Type-gt"><a href="#OmitThisParameter-lt-Type-gt" class="headerlink" title="OmitThisParameter&lt;Type&gt;"></a><code>OmitThisParameter&lt;Type&gt;</code></h2><ul><li>创建一个OmitThisParameter类型，从函数类型Type中移除this参数，即忽略函数Type的this参数，生成一个新的函数Type</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type OmitThisParameter&lt;T&gt; &#x3D; unknown extends ThisParameterType&lt;T&gt; ? T : T extends (...args: infer A) &#x3D;&gt; infer R ? (...args: A) &#x3D;&gt; R : T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function toHex(this: Number) &#123;  return this.toString(16);&#125;const fiveToHex: OmitThisParameter&lt;typeof toHex&gt; &#x3D; toHex.bind(5);console.log(fiveToHex());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ThisType-lt-Type-gt"><a href="#ThisType-lt-Type-gt" class="headerlink" title="ThisType&lt;Type&gt;"></a><code>ThisType&lt;Type&gt;</code></h2><ul><li>ThisType不返回转换后的类型，只是给对象标记this接口。注意，要使用ThisType，必须启用noImplicitThis</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ThisType&lt;T&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type ObjectDescriptor&lt;D, M&gt; &#x3D; &#123;  data?: D;  methods?: M &amp; ThisType&lt;D &amp; M&gt;; &#x2F;&#x2F; Type of &#39;this&#39; in methods is D &amp; M&#125;;function makeObject&lt;D, M&gt;(desc: ObjectDescriptor&lt;D, M&gt;): D &amp; M &#123;  let data: object &#x3D; desc.data || &#123;&#125;;  let methods: object &#x3D; desc.methods || &#123;&#125;;  return &#123; ...data, ...methods &#125; as D &amp; M;&#125;let obj &#x3D; makeObject(&#123;  data: &#123; x: 0, y: 0 &#125;,  methods: &#123;    moveBy(dx: number, dy: number) &#123;      this.x +&#x3D; dx; &#x2F;&#x2F; Strongly typed this      this.y +&#x3D; dy; &#x2F;&#x2F; Strongly typed this    &#125;,  &#125;,&#125;);obj.x &#x3D; 10;obj.y &#x3D; 20;obj.moveBy(5, 5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="Intrinsic-String-Manipulation-Types"><a href="#Intrinsic-String-Manipulation-Types" class="headerlink" title="Intrinsic String Manipulation Types"></a><code>Intrinsic String Manipulation Types</code></h1><ul><li><p>TypeScript的一些类型可以用于字符操作，这些类型处于性能的考虑被内置在编译器中，你不能在.d.ts文件里找到它们。如：<code>Uppercase&lt;StringType&gt;</code>、<code>Lowercase&lt;StringType&gt;</code>、<code>Capitalize&lt;StringType&gt;</code>、<code>Uncapitalize&lt;StringType&gt;</code>、</p><h2 id="Uppercase-lt-StringType-gt"><a href="#Uppercase-lt-StringType-gt" class="headerlink" title="Uppercase&lt;StringType&gt;"></a><code>Uppercase&lt;StringType&gt;</code></h2><ul><li>把每个字符转为大写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Uppercase&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Greeting &#x3D; &quot;Hello, world&quot;type ShoutyGreeting &#x3D; Uppercase&lt;Greeting&gt;&#x2F;&#x2F; type ShoutyGreeting &#x3D; &quot;HELLO, WORLD&quot;type ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;ID-$&#123;Uppercase&lt;Str&gt;&#125;&#96;type MainID &#x3D; ASCIICacheKey&lt;&quot;my_app&quot;&gt;&#x2F;&#x2F; type MainID &#x3D; &quot;ID-MY_APP&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Lowercase-lt-StringType-gt"><a href="#Lowercase-lt-StringType-gt" class="headerlink" title="Lowercase&lt;StringType&gt;"></a><code>Lowercase&lt;StringType&gt;</code></h2><ul><li>把每个字符转为小写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Lowercase&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Greeting &#x3D; &quot;Hello, world&quot;type QuietGreeting &#x3D; Lowercase&lt;Greeting&gt;&#x2F;&#x2F; type QuietGreeting &#x3D; &quot;hello, world&quot;type ASCIICacheKey&lt;Str extends string&gt; &#x3D; &#96;id-$&#123;Lowercase&lt;Str&gt;&#125;&#96;type MainID &#x3D; ASCIICacheKey&lt;&quot;MY_APP&quot;&gt;&#x2F;&#x2F; type MainID &#x3D; &quot;id-my_app&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Capitalize-lt-StringType-gt"><a href="#Capitalize-lt-StringType-gt" class="headerlink" title="Capitalize&lt;StringType&gt;"></a><code>Capitalize&lt;StringType&gt;</code></h2><ul><li>把字符串的第一个字符转为大写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Capitalize&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type LowercaseGreeting &#x3D; &quot;hello, world&quot;;type Greeting &#x3D; Capitalize&lt;LowercaseGreeting&gt;;&#x2F;&#x2F; type Greeting &#x3D; &quot;Hello, world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Uncapitalize-lt-StringType-gt"><a href="#Uncapitalize-lt-StringType-gt" class="headerlink" title="Uncapitalize&lt;StringType&gt;"></a><code>Uncapitalize&lt;StringType&gt;</code></h2><ul><li>把字符串的第一个字符转换为小写形式</li><li>源码实现<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Uncapitalize&lt;S extends string&gt; &#x3D; intrinsic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type UppercaseGreeting &#x3D; &quot;HELLO WORLD&quot;;type UncomfortableGreeting &#x3D; Uncapitalize&lt;UppercaseGreeting&gt;;&#x2F;&#x2F; type UncomfortableGreeting &#x3D; &quot;hELLO WORLD&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="工具分类一览"><a href="#工具分类一览" class="headerlink" title="工具分类一览"></a>工具分类一览</h1><ul><li>全量修饰接口：<code>Partial</code> <code>Readonly(Immutable)</code> <code>Mutable</code> <code>Required</code></li><li>裁剪接口：<code>Pick</code> <code>Omit</code> <code>PickByValueType</code> <code>OmitByValueType</code></li><li>基于 infer：<code>ReturnType`` ParamType</code> <code>PromiseType</code></li><li>获取指定条件字段：<code>FunctionKeys</code> <code>OptionalKeys</code> <code>RequiredKeys</code> </li><li>内置字符操作类型：<code>Uppercase&lt;StringType&gt;</code> <code>Lowercase&lt;StringType&gt;</code> <code>Capitalize&lt;StringType&gt;</code> <code>Uncapitalize&lt;StringType&gt;</code></li></ul><h1 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h1><ul><li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">https://www.typescriptlang.org/docs/handbook/utility-types.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工具列表&quot;&gt;&lt;a href=&quot;#工具列表&quot; class=&quot;headerlink&quot; title=&quot;工具列表&quot;&gt;&lt;/a&gt;工具列表&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;[√] &lt;code&gt;Partial&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[√] &lt;code&gt;</summary>
      
    
    
    
    
    <category term="TS" scheme="http://damao2250.com/tags/TS/"/>
    
    <category term="TypeScript" scheme="http://damao2250.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>git远程已经删除的分支本地环境仍能看到远程分支</title>
    <link href="http://damao2250.com/2022/06/11/git%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E4%BB%8D%E8%83%BD%E7%9C%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
    <id>http://damao2250.com/2022/06/11/git%E8%BF%9C%E7%A8%8B%E5%B7%B2%E7%BB%8F%E5%88%A0%E9%99%A4%E7%9A%84%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E4%BB%8D%E8%83%BD%E7%9C%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</id>
    <published>2022-06-11T01:39:58.000Z</published>
    <updated>2022-06-11T01:47:37.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git远程已经删除的分支，在本地环境仍能看到远程分支"><a href="#git远程已经删除的分支，在本地环境仍能看到远程分支" class="headerlink" title="git远程已经删除的分支，在本地环境仍能看到远程分支"></a>git远程已经删除的分支，在本地环境仍能看到远程分支</h2><ol><li><p>使用命令查看本地分支及远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> bransh -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看remote远程分支，还有本地分支与之对应的关系</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote show origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>远程不存在的分支会提示：<code> stale (use &#39;git remote prune&#39; to remove)</code></li></ul><ol start="3"><li>在本地删除远程不存在的分支<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote prune origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>or<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote prune origin <span class="token operator">&lt;</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;git远程已经删除的分支，在本地环境仍能看到远程分支&quot;&gt;&lt;a href=&quot;#git远程已经删除的分支，在本地环境仍能看到远程分支&quot; class=&quot;headerlink&quot; title=&quot;git远程已经删除的分支，在本地环境仍能看到远程分支&quot;&gt;&lt;/a&gt;git远程已经删</summary>
      
    
    
    
    <category term="版本控制工具" scheme="http://damao2250.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://damao2250.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>css实现打字效果</title>
    <link href="http://damao2250.com/2022/06/09/css%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/"/>
    <id>http://damao2250.com/2022/06/09/css%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/</id>
    <published>2022-06-09T01:11:51.000Z</published>
    <updated>2022-06-09T01:44:01.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css实现打字效果"><a href="#css实现打字效果" class="headerlink" title="css实现打字效果"></a>css实现打字效果</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 中文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.typing-cn</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 15.1em<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 2px solid transparent<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> typing 3.0s <span class="token function">steps</span><span class="token punctuation">(</span>15<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">,</span> blink-caret .75s step-end infinite<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* 打印效果 */</span>  <span class="token atrule"><span class="token rule">@keyframes</span> typing</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 15.1em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* 光标 */</span>  <span class="token atrule"><span class="token rule">@keyframes</span> blink-caret</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from, to</span> <span class="token punctuation">&#123;</span> <span class="token property">box-shadow</span><span class="token punctuation">:</span> 1px 0 0 0 transparent<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span> <span class="token property">box-shadow</span><span class="token punctuation">:</span> 1px 0 0 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typing-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>简易中文打字效果，简易打字效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 英文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.typing-en</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 22ch<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> monospace<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> typing 2s <span class="token function">steps</span><span class="token punctuation">(</span>22<span class="token punctuation">)</span> infinite<span class="token punctuation">,</span> effect .5s step-end infinite alternate<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> typing</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> effect</span> <span class="token punctuation">&#123;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span> <span class="token property">border-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typing-en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Typing effect for text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><style type="text/css">  .typing-cn {    width: 15.1em;    white-space: nowrap;    border-right: 2px solid transparent;    animation: typing 3.5s steps(15, end), blink-caret .75s step-end infinite;    overflow: hidden;  }  /* 打印效果 */  @keyframes typing {    from { width: 0; }    to { width: 15.1em; }  }  /* 光标 */  @keyframes blink-caret {    from, to { box-shadow: 1px 0 0 0 transparent; }    50% { box-shadow: 1px 0 0 0; }  }</style><div class="typing-cn">简易中文打字效果，简易打字效果</div><style type="text/css">  .typing-en {    width: 23ch;    white-space: nowrap;    overflow: hidden;    border-right: 3px solid;    font-family: monospace;    font-size: 2em;    animation: typing1 2s steps(23) infinite, effect .5s step-end infinite alternate;  }  @keyframes typing1 {    from { width: 0; }  }  @keyframes effect {    50% { border-color: transparent; }  }</style><div class="typing-en">Typing effect for text </div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;css实现打字效果&quot;&gt;&lt;a href=&quot;#css实现打字效果&quot; class=&quot;headerlink&quot; title=&quot;css实现打字效果&quot;&gt;&lt;/a&gt;css实现打字效果&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-html&quot; data-</summary>
      
    
    
    
    <category term="CSS" scheme="http://damao2250.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://damao2250.com/tags/CSS/"/>
    
    <category term="HTML" scheme="http://damao2250.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>青龙面板搭建</title>
    <link href="http://damao2250.com/2022/04/27/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/"/>
    <id>http://damao2250.com/2022/04/27/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-27T02:53:20.000Z</published>
    <updated>2022-05-13T02:57:33.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="青龙"><a href="#青龙" class="headerlink" title="青龙"></a>青龙</h2><ul><li>支持python3、javaScript、shell、typescript 的定时任务管理面板（A timed task management panel that supports typescript, javaScript, python3, and shell）</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://github.com/whyour/qinglong">青龙Github</a></li></ul><h2 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h2><ul><li>青龙正版docker镜像: <code>whyour/qinglong:latest</code></li></ul><ol><li>docker 安装<ul><li>确保docker已经安装，详细安装docker看<a href="https://damao2250.github.io/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/">docker的简易使用</a></li></ul></li><li>拉取并启动容器 <pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker run -dit \  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \  -p 5700:5700 \  --name qinglong \  --hostname qinglong \  --restart always \  whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="项目指南"><a href="#项目指南" class="headerlink" title="项目指南"></a>项目指南</h2><ol><li>拉取镜像/更新镜像<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker pull whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除镜像<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker rmi whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动容器 </li></ol><ul><li>普通服务器<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker run -dit \  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \  -p 5700:5700 \  --name qinglong \  --hostname qinglong \  --restart always \  whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>n1等路由器<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker run -dit \  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \  --net host \  --name qinglong \  --hostname qinglong \  --restart always \  whyour&#x2F;qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>删除容器 <pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker rm -f qinglong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>初次登陆</li></ol><ul><li>初次访问 http://&lt;自己ip&gt;:5700</li><li>使用 admin/adminadmin 登陆，提示已初始化密码</li><li>去自己映射目录config下找 auth.json，查看里面的 password<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong cat &#x2F;ql&#x2F;config&#x2F;auth.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="6"><li>Cookie管理</li></ol><ul><li>登陆成功进入Cookie管理页面，右上角新增Cookie(最新版已加Cookie格式验证)</li><li>添加成功，可在Cookie列表更新Cookie，删除Cookie</li></ul><ol start="7"><li>基本命令</li></ol><ul><li>(容器内执行或者新建定时任务时忽略docker exec -it qinglong)</li><li>更新青龙<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>更新青龙并编译<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>拉取自定义仓库<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">&lt;!-- 示例 --&gt;docker exec -it qinglong ql repo https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;github.com&#x2F;whyour&#x2F;hundun.git &quot;quanx&quot; &quot;tokens|caiyun|didi|donate|fold|Env&quot;&lt;!-- 可用 --&gt;docker exec -it qinglong ql repo https:&#x2F;&#x2F;github.com&#x2F;6dylan6&#x2F;jdpro.git &quot;jd_|jx_|jddj_&quot; &quot;backUp&quot; &quot;^jd[^_]|USER|JD|function|sendNotify&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>拉取单个脚本<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql raw https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;moposmall&#x2F;Script&#x2F;main&#x2F;Me&#x2F;jx_cfd.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除7天前的所有日志<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql rmlog 7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动bot<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql bot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>导出互助码<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong ql code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>通知测试<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong notify test test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>立即执行脚本<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong task test.js now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>并行执行脚本<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">docker exec -it qinglong task test.js conc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>利用谷歌浏览器获取京东Cookie抓取，cookie值千万不能泄露，设置环境变量，环境变量—&gt;添加变量</p><h1 id="tg机器人获取通知"><a href="#tg机器人获取通知" class="headerlink" title="tg机器人获取通知"></a>tg机器人获取通知</h1><h2 id="生成tg机器人"><a href="#生成tg机器人" class="headerlink" title="生成tg机器人"></a>生成tg机器人</h2><ul><li>搜索<code>@BotFather</code>，进入对话框输入<code>/newbot</code>，输入机器人呢称，输入机器人username（以bot结尾）</li><li>生成机器人成功后会发送 user token ，类似：539****961:AAgVexxxxxxxxxqfa</li><li>在搜索栏搜索<code>@userinfobot</code>,点击 Start,第二行Id即为您的UserID（telegramBotUserId）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;青龙&quot;&gt;&lt;a href=&quot;#青龙&quot; class=&quot;headerlink&quot; title=&quot;青龙&quot;&gt;&lt;/a&gt;青龙&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持python3、javaScript、shell、typescript 的定时任务管理面板（A timed task man</summary>
      
    
    
    
    <category term="Linux" scheme="http://damao2250.com/categories/Linux/"/>
    
    
    <category term="青龙面板" scheme="http://damao2250.com/tags/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>docker的简易使用</title>
    <link href="http://damao2250.com/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/"/>
    <id>http://damao2250.com/2022/04/01/docker%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-01T03:37:54.000Z</published>
    <updated>2022-04-06T06:00:38.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在CentOS上使用Docker"><a href="#在CentOS上使用Docker" class="headerlink" title="在CentOS上使用Docker"></a>在CentOS上使用Docker</h1><h2 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h2><ul><li>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</li><li>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ sudo yum install -y yum-utils \  device-mapper-persistent-data \  lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>设置完之后，根据需求指定稳定的仓库地址（建议使用国内源）<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 官方源地址$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo# 国内源地址# 阿里云$ sudo yum-config-manager \    --add-repo \    http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo    # 清华大学源$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 按安装最新版docker$ sudo yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 启动 Docker (启动守护进程)$ sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker ps# or 查看所有$ docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker start &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker stop &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重启一个容器"><a href="#重启一个容器" class="headerlink" title="重启一个容器"></a>重启一个容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker restart &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps"># 退出时容器停止$ docker attach &lt;CONTAINER ID&gt;# 退出时容器不停止（推荐）$ docker exec &lt;CONTAINER ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h2><ul><li>删除安装包<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ yum remove docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除镜像、容器、配置文件等内容<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ rm -rf &#x2F;var&#x2F;lib&#x2F;docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="使用docker安装nginx"><a href="#使用docker安装nginx" class="headerlink" title="使用docker安装nginx"></a>使用docker安装nginx</h2><ul><li><p>获取nginx镜像列表</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker search nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拉取nginx镜像到本地，使用第一个默认的’nginx’</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看拉取到本地的nginx镜像</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker images nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建并启动nginx容器</p><ul><li>-d 指定容器以守护进程方式在后台运行</li><li>–name 指定容器名称，此处我指定的是docker_nginx</li><li>-p 指定主机与容器内部的端口号映射关系，格式 -p</li><li><code>[宿主机端口号]:[容器内部端口]</code>，此处使用主机80端口，映射容器80端口</li><li>1276 是nginx的镜像IMAGE ID前4位<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker run -d --name docker_nginx -p 80:80 1276<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>查看到正在运行的容器</p><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="修改nginx的配置文件"><a href="#修改nginx的配置文件" class="headerlink" title="修改nginx的配置文件"></a>修改nginx的配置文件</h3><ul><li>1、每次都进入到nginx容器内部修改<ul><li>执行 <code>docker exec -it xxxx /bin/bash</code> 进入到nginx容器内部<ul><li>exec 命令代表附着到运行着的容器内部</li><li>-it 是 -i 与 -t两个参数合并写法，-i -t 标志着为我们指定的容器创建了TTY并捕捉了STDIN</li><li>xxxx 是我们要进入的容器Id的前4位</li><li>/bin/bash 指定了执行命令的shell</li></ul></li><li>进入到nginx容器内部后，我们可以cd /etc/nginx，可以看到相关的nginx配置文件都在/etc/nginx目录下</li><li>而nginx容器内的默认首页html文件目录为/usr/share/nginx/html</li><li>日志文件位于/var/log/nginx</li><li>nginx容器内默认没有vim编辑器<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">$ apt-get update$ apt-get install vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>容器内编辑nginx.conf配置文件</li><li>执行exit命令我们可以从容器内部退出</li></ul></li><li>2、将nginx容器内部配置文件挂载到主机<ul><li>有这个需求说明频繁改动，可直接安装到服务器</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在CentOS上使用Docker&quot;&gt;&lt;a href=&quot;#在CentOS上使用Docker&quot; class=&quot;headerlink&quot; title=&quot;在CentOS上使用Docker&quot;&gt;&lt;/a&gt;在CentOS上使用Docker&lt;/h1&gt;&lt;h2 id=&quot;设置仓库&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Docker" scheme="http://damao2250.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://damao2250.com/tags/Docker/"/>
    
    <category term="CentOS" scheme="http://damao2250.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Windows常用软件列表</title>
    <link href="http://damao2250.com/2022/03/30/Windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/"/>
    <id>http://damao2250.com/2022/03/30/Windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8/</id>
    <published>2022-03-30T06:27:47.000Z</published>
    <updated>2022-08-08T03:04:01.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows常用软件列表"><a href="#Windows常用软件列表" class="headerlink" title="Windows常用软件列表"></a>Windows常用软件列表</h1><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ul><li><a href="http://www.7-zip.org/">7-Zip</a> - 支持 7z、ZIP、GZIP、BZIP2 和 TAR 格式，其他格式可以解压。开源软件 免费软件</li><li><a href="https://www.bandisoft.com/bandizip/">Bandizip</a> - 轻量级、快速且免费的多合一 Zip 存档器。免费软件</li><li><a href="http://www.rarlab.com/">WinRAR</a> - 一个强大的存档管理器。它可以备份您的数据并减少电子邮件附件的大小，解压缩 RAR、ZIP 和其他文件。</li></ul><h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><ul><li><a href="http://www.telerik.com/fiddler">Fiddler</a> - 强大的抓包工具</li><li><a href="https://filezilla-project.org/">FileZilla</a> - FTP、FTPS 和 SFTP 客户端。开源软件 免费软件</li><li><a href="https://git-scm.com/downloads">Git</a> - Git是一个开源的分布式版本控制系统。开源软件 免费软件</li><li><a href="https://mremoteng.org/">mRemoteNG</a> - mRemoteNG是一款用于Windows开源、多协议的远程连接管理器（<a href="https://github.com/mRemoteNG/mRemoteNG">github地址</a>）。开源软件 免费软件</li></ul><h2 id="办公套件"><a href="#办公套件" class="headerlink" title="办公套件"></a>办公套件</h2><ul><li><a href="https://www.freeoffice.com/zh/">FreeOffice</a> - FreeOffice 是一个完整的办公套件，带有文字处理器、电子表格应用程序和演示程序——所有这些都与 Microsoft Office 中的同类产品兼容。免费软件</li><li><a href="http://www.office.com/">Microsoft Office</a> - 微软的办公生产力套件。收费</li><li><a href="http://www.sumatrapdfreader.org/free-pdf-reader.html">Sumatra PDF</a> - PDF、ePub、MOBI、CHM、XPS、DjVu、CBZ、CBR 阅读器。开源软件 免费软件</li></ul><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><ul><li><a href="https://atom.io/">Atom</a> - Atom 是 Github 专门为程序员推出的一个跨平台文本编辑器。开源软件 免费软件</li><li><a href="http://brackets.io/">Brackets</a> - 一个现代的、开源的文本编辑器，可以理解网页设计。开源软件 免费软件</li><li><a href="http://www.vim.org/download.php#pc">GVim</a> - (G)Vim 是一个高度可配置的文本编辑器，旨在实现高效的文本编辑。开源软件 免费软件</li><li><a href="http://lighttable.com/">Light Table</a> - 一个可定制的编辑器，具有即时反馈并显示数据值在您的代码中流动。开源软件 免费软件</li><li><a href="https://neovim.io/">Neovim</a> - 从字面上看是 vim 的未来开源软件 免费软件</li><li><a href="https://notepad-plus-plus.org/">Notepad++</a> - 支持多种编程语言的源代码编辑器。开源软件 免费软件</li><li><a href="http://www.flos-freeware.ch/notepad2.html">Notepad2</a> - 具有许多有用功能的小巧快速的记事本替换。开源软件 免费软件</li><li><a href="http://onivim.io/">Oni</a> - 现代模态编辑 - 由 Neovim 提供支持开源软件 免费软件</li><li><a href="https://spacevim.org/">SpaceVim</a> - 社区驱动的 vim 发行版开源软件 免费软件</li><li><a href="http://www.sublimetext.com/3">Sublime Text 3</a> - 是一款跨平台代码编辑器软件。</li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a> - 构建和调试现代 Web 和云应用程序。开源软件 免费软件</li></ul><h2 id="生产率"><a href="#生产率" class="headerlink" title="生产率"></a>生产率</h2><ul><li><a href="http://ditto-cp.sourceforge.net/">Ditto</a> - 剪贴板管理器。</li><li><a href="http://www.voidtools.com/">Everything</a> - 按名称最快的文件/文件夹搜索工具。</li></ul><h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><ul><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Clash</a> - Clash 是一款使用 Go 语言编写的代理工具，支持规则分流。 免费软件</li><li><a href="https://github.com/2dust/v2rayN/releases">v2rayN</a> - v2rayN是基于v2ray核心的简洁好用、功能强大的v2ray客户端,支持Vmess、Shadowsocks、Socks5等多种协议,也支持服务器订阅。</li><li><a href="https://potplayer.daum.net/?lang=zh_CN">PotPlayer</a> - 功能强大的多媒体播放器，内置解码器。</li><li><a href="https://www.disktool.cn/recovery/winfr.html">WinFR</a> - 傲梅科技开发的WinFR是Windows文件恢复（微软命令行程序）的免费图形界面，帮助用户快速从Windows 10/11中恢复已删除的文件</li></ul><h2 id="绿色软件"><a href="#绿色软件" class="headerlink" title="绿色软件"></a>绿色软件</h2><ul><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/pdfelement_58150.zip">Wondershare PDFelement</a> - Wondershare PDFelementv7.6.0.4878免安装版，是一款非常受欢迎的PDF编辑工具。该软件主要为用户提供了强大的编辑功能，也支持强大的OCR光学识别引擎，是最好用的专业pdf编辑软件之一。</li><li><a href="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/navicat_premium.zip">Navicat Premium</a> - Navicat premium是一款数据库管理工具,是一个可多重连线资料库的管理工具，它可以让你以单一程式同时连线到 MySQL、SQLite、Oracle 及 PostgreSQL 资料库，让管理不同类型的资料库更加的方便。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows常用软件列表&quot;&gt;&lt;a href=&quot;#Windows常用软件列表&quot; class=&quot;headerlink&quot; title=&quot;Windows常用软件列表&quot;&gt;&lt;/a&gt;Windows常用软件列表&lt;/h1&gt;&lt;h2 id=&quot;压缩&quot;&gt;&lt;a href=&quot;#压缩&quot; cla</summary>
      
    
    
    
    <category term="Windows" scheme="http://damao2250.com/categories/Windows/"/>
    
    
    <category term="下载" scheme="http://damao2250.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
    <category term="软件" scheme="http://damao2250.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>如何在Microsoft官网下载Windows镜像</title>
    <link href="http://damao2250.com/2022/03/30/%E5%A6%82%E4%BD%95%E5%9C%A8Microsoft%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDWindows%E9%95%9C%E5%83%8F/"/>
    <id>http://damao2250.com/2022/03/30/%E5%A6%82%E4%BD%95%E5%9C%A8Microsoft%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDWindows%E9%95%9C%E5%83%8F/</id>
    <published>2022-03-30T06:11:55.000Z</published>
    <updated>2022-03-30T06:17:36.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在Microsoft官网下载Windows镜像"><a href="#如何在Microsoft官网下载Windows镜像" class="headerlink" title="如何在Microsoft官网下载Windows镜像"></a>如何在Microsoft官网下载Windows镜像</h1><h2 id="1-直接打开链接，选择指定的版本下载"><a href="#1-直接打开链接，选择指定的版本下载" class="headerlink" title="1. 直接打开链接，选择指定的版本下载"></a>1. 直接打开链接，选择指定的版本下载</h2><ul><li><a href="https://support.microsoft.com/zh-cn/windows/%E5%88%9B%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E-windows-%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%8B%E8%B4%A8-99a58364-8c02-206f-aa6f-40c3b507420d">https://support.microsoft.com/zh-cn/windows/%E5%88%9B%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E-windows-%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%8B%E8%B4%A8-99a58364-8c02-206f-aa6f-40c3b507420d</a></li></ul><h2 id="2-在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载"><a href="#2-在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载" class="headerlink" title="2. 在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载"></a>2. 在微软官网搜索“安装介质”关键词，根据搜索结果达到下载链接，选择指定的版本下载</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何在Microsoft官网下载Windows镜像&quot;&gt;&lt;a href=&quot;#如何在Microsoft官网下载Windows镜像&quot; class=&quot;headerlink&quot; title=&quot;如何在Microsoft官网下载Windows镜像&quot;&gt;&lt;/a&gt;如何在Microsof</summary>
      
    
    
    
    <category term="Windows" scheme="http://damao2250.com/categories/Windows/"/>
    
    
    <category term="下载" scheme="http://damao2250.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
    <category term="Windows" scheme="http://damao2250.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>我喜欢你，一如心念心</title>
    <link href="http://damao2250.com/2022/03/16/%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0%EF%BC%8C%E4%B8%80%E5%A6%82%E5%BF%83%E5%BF%B5%E5%BF%83/"/>
    <id>http://damao2250.com/2022/03/16/%E6%88%91%E5%96%9C%E6%AC%A2%E4%BD%A0%EF%BC%8C%E4%B8%80%E5%A6%82%E5%BF%83%E5%BF%B5%E5%BF%83/</id>
    <published>2022-03-16T02:30:04.000Z</published>
    <updated>2022-03-16T08:35:02.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我喜欢你，一如心念心"><a href="#我喜欢你，一如心念心" class="headerlink" title="我喜欢你，一如心念心"></a>我喜欢你，一如心念心</h1><p>“生活啥子时候给过我十八岁</p><p>我奋力以赴的终点，还不如你的起点</p><p>喜欢一个人的时候，哪个又不是烂命一条</p><p>河里的虾和海里的虾能生活在一起吗</p><p>我喜欢你！！是同学之间的喜欢，是同桌之间的喜欢，也是十七十八岁的时候真心实意的喜欢！！我喜欢你，那你呢？”</p><p>看到<a href="https://foamzou.com/2020/11/29/%e9%a3%8e%e7%8a%ac%e5%b0%91%e5%b9%b4%e7%9a%84%e5%a4%a9%e7%a9%ba-%e5%96%9c%e6%ac%a2%e7%9a%84%e8%af%ad%e5%bd%95/">这篇文章</a>的开头突然有点感慨</p><p>喜欢是什么？总不能是乍见之欢，在我的经历里，喜欢是一座城市通往另一座城市的公交车，是那一段漫长但又觉得短暂的路程上美好的设想及路上景色，是两杯星巴克以及一个因为矜持而没有吃完的小cake，是一张留下瞬间回忆并时不时拿出来回味的照片，是三言两语的闲聊，是场喜欢的电影…</p><p>在大多数人的认知里，十八岁应该是青春最好的时刻，小的时候一直幻想自己的十八岁，但记忆里已全然不记得自己幻想的模样了。但此时，自己的十八已经远离自己好些个年头了，印象中那年还在奋力准备高考吧，是一个奋斗的时刻，但后来结果也不尽人意，虽然淡然面对，心里却也是有一丝丝愧意。</p><p>其实二十岁开头那几年，可能才是青春该有的样子，前无忧后无虑，去走走向往的地方，去看看喜欢的人，去学想学的东西，去做想做的事情，也喜欢漫无目的地走，去看喜欢的书，去温习看了无数遍的电影，体验过早出晚归却很充实的日子。匆匆而过的日子，像是刻画在小册子上的漫画，不经意间翻动，竟发现许多感动自己的情节。</p><p>在往后的那些日子与喜欢的你同在，生活的每一刻，都在感动着我们，在奋力前行，期许不辜负日子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我喜欢你，一如心念心&quot;&gt;&lt;a href=&quot;#我喜欢你，一如心念心&quot; class=&quot;headerlink&quot; title=&quot;我喜欢你，一如心念心&quot;&gt;&lt;/a&gt;我喜欢你，一如心念心&lt;/h1&gt;&lt;p&gt;“生活啥子时候给过我十八岁&lt;/p&gt;
&lt;p&gt;我奋力以赴的终点，还不如你的起点&lt;</summary>
      
    
    
    
    <category term="碎碎念" scheme="http://damao2250.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="http://damao2250.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>利用Chrome开发者工具进行网页长截图</title>
    <link href="http://damao2250.com/2022/03/10/%E5%88%A9%E7%94%A8Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/"/>
    <id>http://damao2250.com/2022/03/10/%E5%88%A9%E7%94%A8Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/</id>
    <published>2022-03-10T03:37:33.000Z</published>
    <updated>2022-03-10T03:49:48.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用Chrome开发者工具进行网页长截图"><a href="#利用Chrome开发者工具进行网页长截图" class="headerlink" title="利用Chrome开发者工具进行网页长截图"></a>利用Chrome开发者工具进行网页长截图</h1><h2 id="打开开发者工具（F12）"><a href="#打开开发者工具（F12）" class="headerlink" title="打开开发者工具（F12）"></a>打开开发者工具（F12）</h2><h2 id="按下-Ctrl-Shift-P"><a href="#按下-Ctrl-Shift-P" class="headerlink" title="按下 Ctrl + Shift + P"></a>按下 Ctrl + Shift + P</h2><ul><li><p>输入命令：Capture full size screenshot</p></li><li><p>敲下回车，Chrome就会自动截取整个网页内容并保存至本地（网页过长的时候需要等一会儿）</p></li><li><p>输入命令：Capture area screenshot</p></li><li><p>敲下回车，可以框选想截屏的区域</p></li><li><p>输入命令：Capture后，会提示更多截屏的方式，可根据需要进行选择</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;利用Chrome开发者工具进行网页长截图&quot;&gt;&lt;a href=&quot;#利用Chrome开发者工具进行网页长截图&quot; class=&quot;headerlink&quot; title=&quot;利用Chrome开发者工具进行网页长截图&quot;&gt;&lt;/a&gt;利用Chrome开发者工具进行网页长截图&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="小技巧" scheme="http://damao2250.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Chrome网页长截图" scheme="http://damao2250.com/tags/Chrome%E7%BD%91%E9%A1%B5%E9%95%BF%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>2021-年终总结</title>
    <link href="http://damao2250.com/2021/12/31/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://damao2250.com/2021/12/31/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T07:18:46.000Z</published>
    <updated>2022-01-10T10:36:50.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么写？"><a href="#为什么写？" class="headerlink" title="为什么写？"></a>为什么写？</h2><ul><li>History does not repeat itself, but it does often rhyme.</li><li>这句话不知道该怎么翻译才好，看了很多翻译，总觉得get不到那个点，我觉得倒不如翻译成这样：不重来的旅程，却有着重样的境遇。境遇好与坏，岂敢断言？如果不回顾旅程，细数好坏，那明天是否也会走同样的路？好的一样好，坏的同样再继续。其实人真正的成长，可能就在一瞬间，在那么一个你不经意的瞬间，“嗖”的一下，就成长了，可能你还没察觉，可能你也不知道。但所谓的“成长”，没有什么严明的界定，大概是你懂得了某件事情，也大概是你潜意识里多了一个念想。但是当你没有回顾自己的过去时，你不知道过去的好与坏，更不知道其实成长就在不经意的瞬间。2021年，是一个欢与悲共存的得一年，人生百态，尽显其中，所以趁着这个2021的最后几天，总结一下2021的得与失，总结经验之余，同样盼望未来的路会走得更加顺畅。（其实写的时候心情很复杂，时而沉重，时而欢快，如果您觉得看起来比较困难，那您大可以看到这儿就结束了，虽然我知道没人看，但是还是要温馨提示一下，haha…）</li><li>老实说，决定提笔前也是想了很多，思绪万千，情绪也是很纠结，该不该写？该怎么写？写给谁看？写了自己就能得到什么吗？其实大概率是并没有！只是情感刚好到达了某个点，就想写点东西慰藉自己，以至于不让自己觉得一整天都在浑浑噩噩地过日子，一整天都在想些已经发生却又不尽人意的事情，一整天都在无心向上的样子。所以，所谓的“总结”不一定是总结，可能在某种程度上来说是一种倾诉，从未奢望“总结”能给自己带来意外的收获，但是希望能让自己“倾诉”出来，让更多的思绪趋向于积极向上。</li></ul><h2 id="回顾预告（2021-12-23，微信朋友圈）"><a href="#回顾预告（2021-12-23，微信朋友圈）" class="headerlink" title="回顾预告（2021-12-23，微信朋友圈）"></a>回顾预告（2021-12-23，微信朋友圈）</h2><ul><li>夫风生于地，起于青蘋之末。着实慵懒了，抓住2021的尾巴来个年度总结吧！读《掌控习惯》时，作者James Clear提到他的年终总结是回答了三个问题：1.今年什么事做得比较好； 2.今年哪些事做得不太好； 3.我学到了什么。那就来个预告吧，12月31日damao2250.github.io见！</li></ul><h2 id="总结正文"><a href="#总结正文" class="headerlink" title="总结正文"></a>总结正文</h2><ul><li><p>似乎这一整年的话题都离不开COVID-19，不知不觉“抗疫运动”已经持续了两年，还记得最初的记忆是2019年香港出现暴乱，随后2019年末就出现疫情，所有药店口罩被“疯抢”，库存清零。曾经很反感带口罩的我，也渐渐习惯了出门就带口罩，健康码、行程码在生活中也担起重要角色，核酸检测更是少不了。可能对很多人来说，这一场疫情是机遇和挑战，但同样对大部分人来说，是一场生死存亡的竞速。但对于我来说，可能好坏比较均衡，因为这一整个过程还算是比较均衡，没有什么突出亮点，也没有什么“恨铁不成钢”，趋向于平稳，不过似乎时间跑赢了一点点。为什么这么说？其实没有什么具体事项，而是自我的整体感觉：一样的成绩，花费了更多的时间。</p><h3 id="先说两件能让我喜上眉梢的两件事"><a href="#先说两件能让我喜上眉梢的两件事" class="headerlink" title="先说两件能让我喜上眉梢的两件事"></a>先说两件能让我喜上眉梢的两件事</h3><ul><li>第一件就是2021年初（印象中应该是年初五了）我家和女朋友家两个家庭的人首次相聚，其实我想都没想过要这么快就到来了，感觉什么准备都没有就要父母相见了，甚至激动得有点睡不着。于是开始着手准备些礼物，毕竟大过年的，而且是第一次举家去女朋友家里。烟酒茶这些自然是少不了的了，让我印象最深的是买烟的事，为了图个吉利，那会儿就是要买“红双喜”牌的烟，但是恰逢过年，镇上所有的商店、批发部基本都卖完了，要么就只剩下散装，眼看着第二天就要去女朋友家了，所有礼品都准备好了，就还差烟。各种打电话、发微信，但凡认识跟烟有关的人都问了一遍，还是没有着落，忙活了一下午。无奈之下只能去区里看看了，心想着镇上没有，区里总该有了吧。于是我爸带着我往区里赶，先问几个大超市，再问几个批发部，得到的结果都是没有，那时天已经渐渐变暗了，还有些落日的余晖，似乎在暗示着“还有希望”，正好此时我爸想去一条小巷子里买个红包皮，然后顺便就问了下，结果居然有一条红双喜的烟，远远看到他脸上的笑容，他正向我招了一下手，我就知道有希望了。看到他拿了一个大红色得塑料袋装着烟健步走来，那种喜出望外的感觉，别提心里有多开心。他很笑着说：“我在那边买了一条烟”，然后又沉重的补了一句：“但是还差一条啊”。于是我俩“兵分两路”，穿梭在大街小巷里，逢店必问。最后我在大路边的一个小批发部找到了希望，顺利买到了第二条烟。此时天已经黑了，但是掩盖不住我们脸上的喜悦，买完后就赶紧往家的方向飞驰回去了。第二天早上，我早早就醒来了，看了下时间凌晨五点多，但是我已经睡不着了，起来收拾点自己的东西，因为我是打算去女朋友家住几天，然后跟她一起去广州的。但是爸妈他们此时还在睡梦中，此时的我已经在蹑手蹑脚的收拾自己的东西了，不敢发出太大动静，生怕这么早就吵醒他们。但没想到的是，没过多久他们也都起床了，他们也希望能出发早一点，于是天微亮，我们就已经出发了。至于女朋友那边，看得出来他们也是一大早的，忙前忙后的为我们的到来做了很多准备，每个人都很热情。那种其乐融融的氛围，可能是我这辈子也无法忘掉的一番景象。本来我还预想着会不会有那种尬聊的场景，但是看到他们茶前饭后的交谈，就大可不必担心了。两个家庭短短小半天的相聚，却汇聚了无数的情感跟欢乐，每次回想起来当时的情景，都是满满的幸福感。</li></ul><br /><ul><li>第二件就是五一的阳江之旅，说来其实算是四个家庭的户外活动了，我一家、我女朋友一家、我妹她男朋友一家、我哥他们一家，虽说这可能是我妹跟她男朋友的主场，但是一整个旅行下来，大家都还算玩得虽然没有比较尽兴的，但也还算勉强能过得去，除了路途有些遥远跟有些堵车外。其实这一次除了玩之外，我觉得最重要的一点就是大家这么多人能有机会聚在一起，特别是在疫情还存在的情况下，非常难得。期间最快乐的应该就是要返程那天的下午了，因为三天的路程中有大半时间是浪费在路上的，还有小部分时间是下雨天，而回程的那天下午天气还算是可以的，然后我们的目的地是海边。一开始的时候大家还很矜持，没有下海去玩，但后来逐渐放开之后，大家就开始一起慢慢“海上冲浪”了，玩得可起劲了。让我感觉开心的还有件事，就是带上了李思祈，这个小不点，欢乐也是挺多的，让我提前体检了“做家长”的感觉。</li></ul><h3 id="再说两件让我透骨酸心的事"><a href="#再说两件让我透骨酸心的事" class="headerlink" title="再说两件让我透骨酸心的事"></a>再说两件让我透骨酸心的事</h3><ul><li>2021-07-15，也就是六月初六的傍晚，一个让我久久不能接受的现实，奶奶与世长辞了。在这的前几天，看得出来每个人的心里都做着准备了，可是怎么办，多希望能帮奶奶分担点痛苦，每次看到她苍老的容颜，以前跟她聊天的种种场景浮现在眼前，以前还小的时候她对我的叮嘱，似乎有回响在耳旁。记得刚从广州赶回来的那晚，回到已是晚上十一点多，伯伯们怕我们饿，已经提前为我们热好饭菜，可是哪儿来的心思呀，一下车飞奔到奶奶那间熟悉的屋子，怎么就这样了，前几天看到她在视频里还帮我哥带着小孩呢，怎么一摔倒说起不来就起不来了呢！我轻轻的在她身旁叫了声奶奶，看着她用尽了全力回应了一生：“嗯”，很快又松了一口气，顿时眼角就湿润了，握着她皮包骨的双手，陪伴了她一会儿，她稍微安静了下来，没有反反复复的翻身，然后我才出去整理了下容装。此时最好的方式可能就剩下陪伴了，默默的坐在她床边，不知道做什么，也不能做点什么。持续到凌晨一点多，这是爸妈才赶回来到，看到他们焦脆的样子，估计心里也是很担心的了，回来从我妈的嘴里得知，我爸一路从广东开车赶回来，连休息都不舍得休息，有好几次自己边开车还边落着泪，我妈看不下去了，就找各种其他话题跟他聊，心里的牵挂在拉扯着他的心。那一晚，直到凌晨四点多我才回去眯了一会儿，一大早六点，天刚微亮，又起来了，只想着能多陪陪奶奶。可最后那一天还是来了，刚好六月初六，是我们那里重要的节日，每年的这一天都会宴请好多亲朋好友来家里做客，可今年我们做了个决定，取消宴请客人。可是这天依然来了很多人，但是他们都不是来做客的，都是看看望奶奶的。但大家都看得出来此时的奶奶已经没有什么意识了，翻来覆去，看着她很是痛苦的样子，感觉到很心酸。大家依然会说“没事的，会好转的，不用太担心”。持续到旁晚，客人也都走了，恢复了冷清清的。我在大门口坐着，思绪很凌乱，还没持续多久，突然大家都往奶奶的房间里跑，我也赶忙的转身跑进去，但此时已经绷不住了，我在人群外看到宁静而又慈祥的面孔，渐渐泪水迷糊了双眼，用上所有的劲咬住自己的嘴唇，没敢哭出声，久久没能平静。愿您在另一个世界里一起都安好！</li></ul><br /><ul><li>时间定格在十二月份（2021-12-14），事发前其实也是有些预感的，但可能只是巧合，因为我从来没有试过回到家还没看到她就感到很着急很着急，着急到要打电话那种。其实这个世界上，再怎么经久不衰的爱情，都离不开物质基础的支撑，但每个人的满足欲都不一样，所以会看到有些在我们眼里看来不怎好的，但是他们也是过得其乐融融。在我身上也终归逃不过这一劫。现在的情形就是，想要结婚就必须先买房，其中的原因这里就不再阐述。可是谈及买房，若是老家还好说，可是老家的房子我们完全派不上用场啊，但是广州的房子，一时间就要买，又谈何容易呢。财富都是慢慢积累的，出身贫寒家庭也不是我所能决定的，陷入了有心无力的情景。理想与现实的执拗，现实太骨感，就算你深爱着她，她也不得不面临着这样的抉择，毕竟谁不希望自己的未来能更好。我们两个未来的路如何，没人敢去拽测，但我已经为最坏的打算做好了准备。但我更希望的是我们未来的路越走越好，也希望我是那个能陪伴你走到最后的那个人。我虽然不够好，但我会努力给你更好。</li></ul></li></ul><br ><ul><li><p>说了这么多，其实无谓“总结”，权且当作是记录吧，记录自己“两进两出”之情绪变迁，世事无常，谁会意料到明天会发生什么事，回到最初的意愿，那就像《掌控习惯》作者所说的那样，回答三个问题吧。</p><h3 id="1-今年什么事做得比较好；"><a href="#1-今年什么事做得比较好；" class="headerlink" title="1. 今年什么事做得比较好；"></a>1. 今年什么事做得比较好；</h3><ul><li>几经波折，终于把自己的户口转移到广州了，定居广州的信念也更加增强了</li><li>成功地更换了新的工作，虽然新的工作也不咋地，但是相比原来的工作，还是稍稍有些提升的</li><li>坚持更新博客，今年总共坚持写27篇博文包含一些学习心得，相比去年的16篇提升了30%，平均每个月两篇多一点</li><li>更换了自己感觉比较好的租房，之前的住房虽然也不算太差，但不是自己租的，总觉得住得不够肆意</li></ul><h3 id="2-今年哪些事做得不太好；"><a href="#2-今年哪些事做得不太好；" class="headerlink" title="2. 今年哪些事做得不太好；"></a>2. 今年哪些事做得不太好；</h3><ul><li>曾经有一份很高的工作排在我面前，但是最后是关于履历时间不一致的谎话，擦肩而过</li><li>没有很认真的看及复习，英语的等级考试没过，还差几分</li><li>关于自己的性格没有完全的认识，也没有改进（软弱？没有主见？得过且过？遇事总是沉默？）</li><li>把go跟flutter都荒废了，都是刚学了一半，没有去写真实的项目，也没有坚持练习巩固</li></ul><h3 id="3-我学到了什么；"><a href="#3-我学到了什么；" class="headerlink" title="3. 我学到了什么；"></a>3. 我学到了什么；</h3><ul><li>学习了TypeScript，并在项目中实践了，总体的感觉还是比较好的，严谨，就是有些繁琐了</li><li>备份博文，说多了都是泪，意外的把电脑重装系统了，本来只是想格式化C盘的，结果连D盘也干没了，自然之前写好的博文只剩hexo打包过后的格式了，md格式没有了，一把心酸一把泪地把博文又重新复制一遍，重要的事说三遍：记得多备份！记得多备份！记得多备份！（包括自己大多数的重要数据）</li><li>重新认识了git版本控制工具，现在算是可以走一个比较完整的版本控制流程了</li><li>学习了自动化部署的一些相关知识，及docker的一些命令</li><li>把Nginx相关的知识点及反向代理原理理解了</li></ul></li></ul><h2 id="Best-buy"><a href="#Best-buy" class="headerlink" title="Best buy"></a>Best buy</h2><ul><li>买了一本书：《原则》</li><li>买了一台手机：iPhone 13</li><li>买了一个手表：Apple Watch Series 7</li></ul><h2 id="新的一年想做的（flag）"><a href="#新的一年想做的（flag）" class="headerlink" title="新的一年想做的（flag）"></a>新的一年想做的（flag）</h2><ul><li>来一次登山之旅</li><li>读《原则》</li><li>过英语等级考试</li><li>至少办一件大事（…）</li></ul><h2 id="分享一些东西"><a href="#分享一些东西" class="headerlink" title="分享一些东西"></a>分享一些东西</h2><ul><li><p>关于认知的50种偏差</p></li><li><p>马斯克说：“Should be taught to all at a young age”。这张图还是有点意思的，但是是翻译版本，有些翻译可能不太准确，但不影响理解，喜欢的话可以去看马克思的推文—&gt;<a href="https://twitter.com/elonmusk/status/1472647410568642564">https://twitter.com/elonmusk/status/1472647410568642564</a></p></li><li><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/%E5%85%B3%E4%BA%8E%E8%AE%A4%E7%9F%A5%E5%BE%9750%E7%A7%8D%E5%81%8F%E5%B7%AE.jpg" alt="关于认知的50种偏差(翻译版)"></p></li><li><p><img src="https://raw.githubusercontent.com/Damao2250/FileTransfer/master/FG_lAyfXIAIduQo.jfif" alt="关于认知的50种偏差(英文版)"></p></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>冰冻三尺非一日之寒，继续努力，加油Damao(ง •_•)ง</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么写？&quot;&gt;&lt;a href=&quot;#为什么写？&quot; class=&quot;headerlink&quot; title=&quot;为什么写？&quot;&gt;&lt;/a&gt;为什么写？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;History does not repeat itself, but it does often rh</summary>
      
    
    
    
    <category term="总结" scheme="http://damao2250.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="2021" scheme="http://damao2250.com/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>关于js宏任务和微任务的理解</title>
    <link href="http://damao2250.com/2021/12/30/%E5%85%B3%E4%BA%8Ejs%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://damao2250.com/2021/12/30/%E5%85%B3%E4%BA%8Ejs%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2021-12-30T07:05:09.000Z</published>
    <updated>2021-12-30T07:09:14.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js的宏任务和微任务（作者：老司机）"><a href="#js的宏任务和微任务（作者：老司机）" class="headerlink" title="js的宏任务和微任务（作者：老司机）"></a>js的宏任务和微任务（作者：老司机）</h1><h2 id="一、前提（随便过一下）"><a href="#一、前提（随便过一下）" class="headerlink" title="一、前提（随便过一下）"></a>一、前提（随便过一下）</h2><ol><li>同步与异步</li></ol><ul><li>异步代码，如通过事件注册的回调，调用时，特点是调用后立即返回，到没有得到结果（后续通过回调函数获取）</li><li>同步代码，逐行执行的代码，特点是调用后，要等待该调用执行完毕，否则不会往下执行（调用返回后，结果也拿到了），如全局代码、非回调函数</li></ul><ol start="2"><li>事件循环：js是单线程语言（单线程执行代码），通过该机制高效执行代码</li><li>调用栈：当调用函数时，就会开辟内存空间（压栈），调用完毕后就会释放内存</li><li>队列：当某个事件有结果后，该事件所注册的回调函数被推入队列中，等待读入主线程执行（主线程空闲后就会执行该步骤）</li></ol><h2 id="二、宏任务"><a href="#二、宏任务" class="headerlink" title="二、宏任务"></a>二、宏任务</h2><ul><li>在调用栈中直接执行的代码，如：全局代码、定时器（setInterval）、延迟器（setTimeout）、promise、function（一般的函数）等，其中一个函数可认为是一个宏任务</li></ul><h2 id="三、微任务"><a href="#三、微任务" class="headerlink" title="三、微任务"></a>三、微任务</h2><ul><li>微任务是在执行某些宏任务时产生的，它们会在执行下一个宏任务之前执行，如：Promise.then等</li></ul><h2 id="四、示例代码"><a href="#四、示例代码" class="headerlink" title="四、示例代码"></a>四、示例代码</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * - 事件循环第一轮：执行宏任务1【testPromise()、setTimeout()、console.log(123)】 * 其中，testPromise().then()生成了一个微任务，两个setTimeout()注册了两个回调函数，执行完毕后，开始执行本轮事件循环产生的微任务then() * - 事件循环第二轮：（假如已经在某一刻将回调函数推入队列）读取一个延迟器注册的函数到主线程执行，该轮事件循环没有微任务 * - 事件循环第三轮：读取一个延迟器注册的回调到主线程执行... */</span><span class="token keyword">function</span> <span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"----> Promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----> setTimeout 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----> setTimeout 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js的宏任务和微任务（作者：老司机）&quot;&gt;&lt;a href=&quot;#js的宏任务和微任务（作者：老司机）&quot; class=&quot;headerlink&quot; title=&quot;js的宏任务和微任务（作者：老司机）&quot;&gt;&lt;/a&gt;js的宏任务和微任务（作者：老司机）&lt;/h1&gt;&lt;h2 id=&quot;一</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="js" scheme="http://damao2250.com/tags/js/"/>
    
    <category term="宏任务" scheme="http://damao2250.com/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="微任务" scheme="http://damao2250.com/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>通过canvas生成水印方案</title>
    <link href="http://damao2250.com/2021/12/27/%E9%80%9A%E8%BF%87canvas%E7%94%9F%E6%88%90%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/"/>
    <id>http://damao2250.com/2021/12/27/%E9%80%9A%E8%BF%87canvas%E7%94%9F%E6%88%90%E6%B0%B4%E5%8D%B0%E6%96%B9%E6%A1%88/</id>
    <published>2021-12-27T07:21:59.000Z</published>
    <updated>2021-12-27T07:34:40.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过自定义指令生成canvas水印原理"><a href="#通过自定义指令生成canvas水印原理" class="headerlink" title="通过自定义指令生成canvas水印原理"></a>通过自定义指令生成canvas水印原理</h2><ul><li>水印（watermark）是一种容易识别、被夹于纸内，能够透过光线穿过从而显现出各种不同阴影的技术。<br>实现</li><li>前端实现的水印基本都是不安全的，可被破解的</li><li>使用canvas生成base64格式的图片文件，并将其设置为对应元素的背景图片，从而产生水印效果</li><li>通过绑定vue自定义指令，可以快速实现页面或组件局部水印效果</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>创建<code>directives.js</code>文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 添加水印</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'watermark'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">addWaterMarker</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span> font<span class="token punctuation">,</span> textColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 水印文字，父元素，字体，文字颜色</span>    <span class="token keyword">var</span> can <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>can<span class="token punctuation">)</span><span class="token punctuation">;</span>    can<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    can<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    can<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cans <span class="token operator">=</span> can<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>font <span class="token operator">=</span> font <span class="token operator">||</span> <span class="token string">"16px PingFang SC"</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> textColor <span class="token operator">||</span> <span class="token string">"rgba(180, 180, 180, 0.3)"</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">'Middle'</span><span class="token punctuation">;</span>    cans<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> can<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> can<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token string">"url("</span> <span class="token operator">+</span> can<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addWaterMarker</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>text<span class="token punctuation">,</span> el<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>font<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>textColor<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>main.js 引入directives.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span>  <span class="token string">'@/utils/directives'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div v<span class="token operator">-</span>watermark<span class="token operator">=</span><span class="token string">"&#123;text:'水印',textColor:'rgba(180, 180, 180, 0.3)'&#125;"</span><span class="token operator">></span>    这里是内容区域！  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通过自定义指令生成canvas水印原理&quot;&gt;&lt;a href=&quot;#通过自定义指令生成canvas水印原理&quot; class=&quot;headerlink&quot; title=&quot;通过自定义指令生成canvas水印原理&quot;&gt;&lt;/a&gt;通过自定义指令生成canvas水印原理&lt;/h2&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://damao2250.com/tags/Vue/"/>
    
    <category term="Canvas" scheme="http://damao2250.com/tags/Canvas/"/>
    
    <category term="水印" scheme="http://damao2250.com/tags/%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS中的递归示例</title>
    <link href="http://damao2250.com/2021/11/24/JS%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%A4%BA%E4%BE%8B/"/>
    <id>http://damao2250.com/2021/11/24/JS%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-11-24T13:48:32.000Z</published>
    <updated>2021-11-24T13:55:42.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment">// 一级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'root00'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'总区域'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'-1'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 二级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'root00'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'B-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'B区域-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'root00'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 三级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'A-01'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01-02'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01-02'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'A-01'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 四级</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">'A-01-01-01'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'A区域-01-01-01'</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">'A-01-01'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createTree</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> parentIndex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> treeData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentIndex <span class="token operator">==</span> item<span class="token punctuation">.</span>parentIndexCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      item<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">.</span>indexCode<span class="token punctuation">)</span><span class="token punctuation">;</span>      treeData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> treeData<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归结果"><a href="#递归结果" class="headerlink" title="递归结果"></a>递归结果</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">createTree</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">'root00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">"A-01"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"A区域-01"</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">"root00"</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        indexCode<span class="token operator">:</span> <span class="token string">"A-01-01"</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"A区域-01-01"</span><span class="token punctuation">,</span>        parentIndexCode<span class="token operator">:</span> <span class="token string">"A-01"</span><span class="token punctuation">,</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            indexCode<span class="token operator">:</span> <span class="token string">"A-01-01-01"</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">"A区域-01-01-01"</span><span class="token punctuation">,</span>            parentIndexCode<span class="token operator">:</span> <span class="token string">"A-01-01"</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        indexCode<span class="token operator">:</span> <span class="token string">"A-01-02"</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"A区域-01-02"</span><span class="token punctuation">,</span>        parentIndexCode<span class="token operator">:</span> <span class="token string">"A-01"</span><span class="token punctuation">,</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    indexCode<span class="token operator">:</span> <span class="token string">"B-01"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"B区域-01"</span><span class="token punctuation">,</span>    parentIndexCode<span class="token operator">:</span> <span class="token string">"root00"</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原始数据&quot;&gt;&lt;a href=&quot;#原始数据&quot; class=&quot;headerlink&quot; title=&quot;原始数据&quot;&gt;&lt;/a&gt;原始数据&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code cl</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="递归" scheme="http://damao2250.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Nginx编译安装配置</title>
    <link href="http://damao2250.com/2021/11/19/Nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://damao2250.com/2021/11/19/Nginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2021-11-19T03:52:08.000Z</published>
    <updated>2021-11-19T06:13:27.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-编译安装配置"><a href="#Nginx-编译安装配置" class="headerlink" title="Nginx 编译安装配置"></a>Nginx 编译安装配置</h1><h2 id="一、安装编译需要的软件依赖"><a href="#一、安装编译需要的软件依赖" class="headerlink" title="一、安装编译需要的软件依赖"></a>一、安装编译需要的软件依赖</h2><ul><li>gcc和gcc-c++<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">yum install -y gcc gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="二、安装Nginx依赖"><a href="#二、安装Nginx依赖" class="headerlink" title="二、安装Nginx依赖"></a>二、安装Nginx依赖</h2><ul><li>pcre-devel、openssl-devel、zlib-devel<pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">yum install -y pcre pcre-devel openssl openssl-devel zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="三、创建Nginx用户"><a href="#三、创建Nginx用户" class="headerlink" title="三、创建Nginx用户"></a>三、创建Nginx用户</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">useradd -s &#x2F;bin&#x2F;false -M nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、下载Nginx源码"><a href="#四、下载Nginx源码" class="headerlink" title="四、下载Nginx源码"></a>四、下载Nginx源码</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.0.tar.gztar -zxf nginx-1.12.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、Nginx编译安装"><a href="#五、Nginx编译安装" class="headerlink" title="五、Nginx编译安装"></a>五、Nginx编译安装</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">## 生成make文件.&#x2F;configure --user&#x3D;nginx --group&#x3D;nginx --prefix&#x3D;&#x2F;etc&#x2F;nginx-1.12.0 --with-http_v2_module --withhttp_ssl_module --with-http_sub_module --with-http_stub_status_module --withhttp_gzip_static_module --with-pcre## 编译并安装make &amp;&amp; make install## 添加软连接ln -s &#x2F;etc&#x2F;nginx-1.12.0&#x2F; &#x2F;etc&#x2F;nginx## 添加环境变量ln -s &#x2F;etc&#x2F;nginx&#x2F;sbin&#x2F;* &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、Nginx目录介绍"><a href="#六、Nginx目录介绍" class="headerlink" title="六、Nginx目录介绍"></a>六、Nginx目录介绍</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">├── conf #配置文件目录│ ├── fastcgi.conf│ ├── fastcgi.conf.default│ ├── fastcgi_params│ ├── fastcgi_params.default #fastcgi *配合php│ ├── koi-utf│ ├── koi-win│ ├── mime.types #mime 媒体类型│ ├── mime.types.default│ ├── nginx.conf #nginx主配置文件│ ├── nginx.conf.default│ ├── scgi_params│ ├── scgi_params.default│ ├── uwsgi_params│ ├── uwsgi_params.default│ └── win-utf├── html #默认站点目录│ ├── 50x.html│ └── index.html├── logs #访问日志、错误日志、pid文件目录│ ├── access.log #访问日志│ ├── error.log #错误日志│ └── nginx.pid #pid文件└── sbin #命令目录└── nginx #nginx命令文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Nginx-配置文件详解"><a href="#七、Nginx-配置文件详解" class="headerlink" title="七、Nginx 配置文件详解"></a>七、Nginx 配置文件详解</h2><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#定义Nginx运行的用户和用户组user www www;#nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log info;#进程pid文件pid &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid;#指定进程可以打开的最大描述符：数目#工作模式与连接数上限#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。worker_rlimit_nofile 65535;events&#123;    #参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型    #是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。    #补充说明：    #与apache相类，nginx针对不同的操作系统，有不同的事件模型    #A）标准事件模型    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll    #B）高效事件模型    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。    #Epoll：使用于Linux内核2.6版本及以后的系统。    #&#x2F;dev&#x2F;poll：使用于Solaris 7 11&#x2F;99+，HP&#x2F;UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。    use epoll;    #单个进程最大连接数（最大连接数&#x3D;连接数*进程数）    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。    worker_connections 65535;    #keepalive超时时间。    keepalive_timeout 60;    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。    #分页大小可以用命令getconf PAGESIZE 取得。    #[root@web001 ~]# getconf PAGESIZE    #4096    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。    client_header_buffer_size 4k;    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。    open_file_cache max&#x3D;65535 inactive&#x3D;60s;    #这个是指多长时间检查一次缓存的有效信息。    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server,location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.    open_file_cache_valid 80s;    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.    open_file_cache_min_uses 1;    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server,location 这个指令指定是否在搜索一个文件是记录cache错误.    open_file_cache_errors on;&#125;#设定http服务器，利用它的反向代理功能提供负载均衡支持http&#123;    #文件扩展名与文件类型映射表    include mime.types;    #默认文件类型    default_type application&#x2F;octet-stream;    #默认编码    #charset utf-8;    #服务器名字的hash表大小    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.    server_names_hash_bucket_size 128;    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。    client_header_buffer_size 32k;    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。    large_client_header_buffers 4 64k;    #设定通过nginx上传文件的大小    client_max_body_size 8m;    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。    sendfile on;    #开启目录列表访问，合适下载服务器，默认关闭。    autoindex on;    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用    tcp_nopush on;    tcp_nodelay on;    #长连接超时时间，单位是秒    keepalive_timeout 120;    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。    fastcgi_connect_timeout 300;    fastcgi_send_timeout 300;    fastcgi_read_timeout 300;    fastcgi_buffer_size 64k;    fastcgi_buffers 4 64k;    fastcgi_busy_buffers_size 128k;    fastcgi_temp_file_write_size 128k;    #gzip模块设置    gzip on; #开启gzip压缩输出    gzip_min_length 1k; #最小压缩文件大小    gzip_buffers 4 16k; #压缩缓冲区    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）    gzip_comp_level 2; #压缩等级    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml; #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。    gzip_vary on;    #开启限制IP连接数的时候需要使用    #limit_zone crawler $binary_remote_addr 10m;    #负载均衡配置    upstream carlosxiao.cc &#123;        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。        server 192.168.13.43:8080 weight&#x3D;3;        server 192.168.13.44:8080 weight&#x3D;2;        #nginx的upstream目前支持4种方式的分配        #1、轮询（默认）        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。        #2、weight        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。        #例如：        #upstream bakend &#123;        # server 192.168.0.14 weight&#x3D;10;        # server 192.168.0.15 weight&#x3D;10;        #&#125;        #2、ip_hash        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。        #例如：        #upstream bakend &#123;        # ip_hash;        # server 192.168.0.14:88;        # server 192.168.0.15:80;        #&#125;        #3、fair（第三方）        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。        #upstream backend &#123;        # server server1;        # server server2;        # fair;        #&#125;        #4、url_hash（第三方）        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法        #upstream backend &#123;        # server squid1:3128;        # server squid2:3128;        # hash $request_uri;        # hash_method crc32;        #&#125;        #tips:        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;        # ip_hash;        # server 127.0.0.1:9090 down;        # server 127.0.0.1:8080 weight&#x3D;2;        # server 127.0.0.1:6060;        # server 127.0.0.1:7070 backup;        #&#125;        #在需要使用负载均衡的server中增加 proxy_pass http:&#x2F;&#x2F;bakend&#x2F;;        #每个设备的状态设置为:        #1.down表示单前的server暂时不参与负载        #2.weight为weight越大，负载的权重就越大。        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误        #4.fail_timeout:max_fails次失败后，暂停的时间。        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡    &#125;    #虚拟主机的配置    server    &#123;        #监听端口        listen 80;        #域名可以有多个，用空格隔开        server_name www.carlosxiao.cc carlosxiao.cc;        index index.html index.htm index.php;        root &#x2F;data&#x2F;www;        #对******进行负载均衡        location ~ .*.(php|php5)?$        &#123;            fastcgi_pass 127.0.0.1:9000;            fastcgi_index index.php;            include fastcgi.conf;        &#125;        #图片缓存时间设置        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$        &#123;            expires 10d;        &#125;        #JS和CSS缓存时间设置        location ~ .*.(js|css)?$        &#123;            expires 1h;        &#125;        #日志格式设定        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；        #$remote_user：用来记录客户端用户名称；        #$time_local： 用来记录访问时间与时区；        #$request： 用来记录请求的url与http协议；        #$status： 用来记录请求状态；成功是200，        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；        #$http_referer：用来记录从那个页面链接访问过来的；        #$http_user_agent：记录客户浏览器的相关信息；        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。        log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;        &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;        &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;        #定义本虚拟主机的访问日志        access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host.access.log main;        access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host.access.404.log log404;        #对 &quot;&#x2F;&quot; 启用反向代理        location &#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            #以下是一些反向代理的配置，可选。            proxy_set_header Host $host;            #允许客户端请求的最大单文件字节数            client_max_body_size 10m;            #缓冲区代理缓冲用户端请求的最大字节数，            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误            client_body_buffer_size 128k;            #表示使nginx阻止HTTP应答代码为400或者更高的应答。            proxy_intercept_errors on;            #后端服务器连接的超时时间_发起握手等候响应超时时间            #nginx跟后端服务器连接超时时间(代理连接超时)            proxy_connect_timeout 90;            #后端服务器数据回传时间(代理发送超时)            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据            proxy_send_timeout 90;            #连接成功后，后端服务器响应时间(代理接收超时)            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）            proxy_read_timeout 90;            #设置代理服务器（nginx）保存用户头信息的缓冲区大小            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小            proxy_buffer_size 4k;            #proxy_buffers缓冲区，网页平均在32k以下的设置            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k            proxy_buffers 4 32k;            #高负荷下缓冲大小（proxy_buffers*2）            proxy_busy_buffers_size 64k;            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长            #设定缓存文件夹大小，大于这个值，将从upstream服务器传            proxy_temp_file_write_size 64k;        &#125;        #设定查看Nginx状态的地址        location &#x2F;NginxStatus &#123;            stub_status on;            access_log on;            auth_basic &quot;NginxStatus&quot;;            auth_basic_user_file confpasswd;            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。        &#125;        #本地动静分离反向代理配置        #所有jsp的页面均交由tomcat或resin处理        location ~ .(jsp|jspx|do)?$ &#123;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;        &#125;        #所有静态文件由nginx直接读取不经过tomcat或resin        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|        pdf|xls|mp3|wma)$        &#123;            expires 15d;        &#125;        location ~ .*.(js|css)?        &#123;            expires 1h;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="location匹配模式以及顺序"><a href="#location匹配模式以及顺序" class="headerlink" title="location匹配模式以及顺序"></a>location匹配模式以及顺序</h3><ul><li>location = /uri  =开头表示精确匹配，只有完全匹配上才能生效</li><li>location ^~ /uri  ^~ 开头对URL路径进行前缀匹配，并且在正则之前</li><li>location ~ pattern  ~开头表示区分大小写的正则匹配</li><li>location ~* pattern  ~*开头表示不区分大小写的正则匹配</li><li>location /uri  不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</li><li>location /  通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default</li></ul><h2 id="八、Nginx常用命令"><a href="#八、Nginx常用命令" class="headerlink" title="八、Nginx常用命令"></a>八、Nginx常用命令</h2><h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指定其他配置文件启动nginx"><a href="#指定其他配置文件启动nginx" class="headerlink" title="指定其他配置文件启动nginx"></a>指定其他配置文件启动nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">nginx -c file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">## 快速停止nginxnginx -s stop## 平滑停止nginxnginx -s quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">## 平滑重载所有配置nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="九、配置示例"><a href="#九、配置示例" class="headerlink" title="九、配置示例"></a>九、配置示例</h2><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#user nobody;worker_processes auto;#worker_cpu_affinity auto;worker_rlimit_nofile 655350;#pid logs&#x2F;nginx.pid;error_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;error.log error;events &#123;    use epoll;    worker_connections 655350;&#125;http &#123;    include mime.types;    default_type application&#x2F;octet-stream;    charset utf-8;    log_format main &#39;$remote_addr $server_addr $remote_user [$time_local] $host &#39;                    &#39;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#39;                    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;                    access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access.log main;        sendfile on;    keepalive_timeout 90000;    server_names_hash_max_size 1024;    server_names_hash_bucket_size 512;    client_header_buffer_size 16k;    large_client_header_buffers 4 64k;    client_header_timeout 300m;    client_body_timeout 300m;    send_timeout 300m;    tcp_nopush on;    tcp_nodelay on;    client_max_body_size 100M;    client_body_buffer_size 50m;    proxy_connect_timeout 5;    proxy_send_timeout 15;    proxy_read_timeout 15;    proxy_buffer_size 256k;    proxy_buffers 8 256k;    proxy_busy_buffers_size 256k;    proxy_temp_file_write_size 256k;    proxy_intercept_errors on;    proxy_headers_hash_max_size 512;    proxy_headers_hash_bucket_size 256;    variables_hash_max_size 512;    variables_hash_bucket_size 128;    gzip on;    gzip_min_length 1100;    gzip_buffers 4 8k;    gzip_comp_level 3;    gzip_http_version 1.0;    gzip_types text&#x2F;plain application&#x2F;x-javascript application&#x2F;json application&#x2F;javascript    text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;    output_buffers 1 32k;    postpone_output 1460;    gzip_vary on;    map_hash_max_size 102400;    map_hash_bucket_size 256;    fastcgi_intercept_errors on;    server &#123;        listen 80;        server_name carlosxiao.cc;        location &#x2F; &#123;            root &#x2F;data&#x2F;www;            index index.html index.htm;        &#125;        access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;carlosxiao.log;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#user nobody;worker_processes auto;#worker_cpu_affinity auto;worker_rlimit_nofile 655350;#pid logs&#x2F;nginx.pid;error_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;error.log error;events &#123;    use epoll;    worker_connections 655350;&#125;http &#123;    include mime.types;    default_type application&#x2F;octet-stream;    charset utf-8;    log_format main &#39;$remote_addr $server_addr $remote_user [$time_local] $host &#39;                    &#39;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#39;                    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;                    access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access.log main;        sendfile on;    keepalive_timeout 90000;    server_names_hash_max_size 1024;    server_names_hash_bucket_size 512;    client_header_buffer_size 16k;    large_client_header_buffers 4 64k;    client_header_timeout 300m;    client_body_timeout 300m;    send_timeout 300m;    tcp_nopush on;    tcp_nodelay on;    client_max_body_size 100M;    client_body_buffer_size 50m;    proxy_connect_timeout 5;    proxy_send_timeout 15;    proxy_read_timeout 15;    proxy_buffer_size 256k;    proxy_buffers 8 256k;    proxy_busy_buffers_size 256k;    proxy_temp_file_write_size 256k;    proxy_intercept_errors on;    proxy_headers_hash_max_size 512;    proxy_headers_hash_bucket_size 256;    variables_hash_max_size 512;    variables_hash_bucket_size 128;    gzip on;    gzip_min_length 1100;    gzip_buffers 4 8k;    gzip_comp_level 3;    gzip_http_version 1.0;    gzip_types text&#x2F;plain application&#x2F;x-javascript application&#x2F;json application&#x2F;javascript    text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;    output_buffers 1 32k;    postpone_output 1460;    gzip_vary on;    map_hash_max_size 102400;    map_hash_bucket_size 256;    fastcgi_intercept_errors on;    upstream carlosxiao.cc&#123;        server 192.168.13.43:8080;        server 192.168.13.44:8080;        check interval&#x3D;3000 rise&#x3D;2 fall&#x3D;3 timeout&#x3D;3000 type&#x3D;http;    &#125;    server &#123;        listen 80;        server_name carlosxiao.cc;        location &#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;carlosxiao.cc;            proxy_set_header Host $host;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_connect_timeout 60;            proxy_read_timeout 600;            proxy_send_timeout 600;        &#125;        access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;carlosxiao.log;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><pre class="line-numbers language-ps" data-language="ps"><code class="language-ps">#user nobody;worker_processes auto;#worker_cpu_affinity auto;worker_rlimit_nofile 655350;#pid logs&#x2F;nginx.pid;error_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;error.log error;events &#123;    use epoll;    worker_connections 655350;&#125;http &#123;    include mime.types;    default_type application&#x2F;octet-stream;    charset utf-8;    log_format main &#39;$remote_addr $server_addr $remote_user [$time_local] $host &#39;                    &#39;&quot;$request&quot; $status $body_bytes_sent $request_time $upstream_response_time &#39;                    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;                    access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access.log main;    sendfile on;    keepalive_timeout 90000;    server_names_hash_max_size 1024;    server_names_hash_bucket_size 512;    client_header_buffer_size 16k;    large_client_header_buffers 4 64k;    client_header_timeout 300m;    client_body_timeout 300m;    send_timeout 300m;    tcp_nopush on;    tcp_nodelay on;    client_max_body_size 100M;    client_body_buffer_size 50m;    proxy_connect_timeout 5;    proxy_send_timeout 15;    proxy_read_timeout 15;    proxy_buffer_size 256k;    proxy_buffers 8 256k;    proxy_busy_buffers_size 256k;    proxy_temp_file_write_size 256k;    proxy_intercept_errors on;    proxy_headers_hash_max_size 512;    proxy_headers_hash_bucket_size 256;    variables_hash_max_size 512;    variables_hash_bucket_size 128;    gzip on;    gzip_min_length 1100;    gzip_buffers 4 8k;    gzip_comp_level 3;    gzip_http_version 1.0;    gzip_types text&#x2F;plain application&#x2F;x-javascript application&#x2F;json application&#x2F;javascript    text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;    output_buffers 1 32k;    postpone_output 1460;    gzip_vary on;    map_hash_max_size 102400;    map_hash_bucket_size 256;    fastcgi_intercept_errors on;    upstream carlosxiao.cc&#123;        server 127.0.0.1:10179;    &#125;    server &#123;        listen 80;        server_name carlosxiao.cc;        location &#x2F;api &#123;            proxy_pass http:&#x2F;&#x2F;carlosxiao.cc;            proxy_set_header Host $host;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_connect_timeout 60;            proxy_read_timeout 600;            proxy_send_timeout 600;        &#125;        location ~ .(jsp|jspx|do)?$ &#123;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_pass http:&#x2F;&#x2F;carlosxiao.cc;        &#125;        #所有静态文件由nginx直接读取不经过tomcat或resin        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|        pdf|xls|mp3|wma)$        &#123;            expires 15d;        &#125;                location ~ .*.(js|css)?$        &#123;            expires 1h;        &#125;        access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;carlosxiao.log;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx-编译安装配置&quot;&gt;&lt;a href=&quot;#Nginx-编译安装配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx 编译安装配置&quot;&gt;&lt;/a&gt;Nginx 编译安装配置&lt;/h1&gt;&lt;h2 id=&quot;一、安装编译需要的软件依赖&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Linux" scheme="http://damao2250.com/categories/Linux/"/>
    
    
    <category term="Nginx" scheme="http://damao2250.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>css画梯形</title>
    <link href="http://damao2250.com/2021/11/10/css%E7%94%BB%E6%A2%AF%E5%BD%A2/"/>
    <id>http://damao2250.com/2021/11/10/css%E7%94%BB%E6%A2%AF%E5%BD%A2/</id>
    <published>2021-11-10T05:38:12.000Z</published>
    <updated>2021-11-10T05:45:19.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用html-css画出梯形"><a href="#使用html-css画出梯形" class="headerlink" title="使用html+css画出梯形"></a>使用html+css画出梯形</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a1,.a2</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ccff66<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a3,.a4</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ccff66<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a1</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a2</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a3</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -15px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.a4</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>14px<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 50px    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><style type="text/css">    .box {        position: relative;        margin: 50px;        height: 100px;    }    .a1,.a2 {        width: 15px;        height: 50px;        position: absolute;        background: #ccff66;        display: inline-block;    }    .a3,.a4 {        width: 50px;        height: 15px;        position: absolute;        background: #ccff66;        display: inline-block;    }    .a1 {        transform: perspective(14px) rotateY(25deg);        left: 0;        top: 0;    }    .a2 {        transform: perspective(14px) rotateY(-25deg);        left: 65px;        top: 0;    }    .a3 {        transform: perspective(14px) rotateX(-25deg);        left: 15px;        top: -15px;    }    .a4 {        transform: perspective(14px) rotateX(25deg);        left: 15px;        top: 50px    }</style><div class="box">    <a class="a1"></a>    <a class="a2"></a>    <a class="a3"></a>    <a class="a4"></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用html-css画出梯形&quot;&gt;&lt;a href=&quot;#使用html-css画出梯形&quot; class=&quot;headerlink&quot; title=&quot;使用html+css画出梯形&quot;&gt;&lt;/a&gt;使用html+css画出梯形&lt;/h2&gt;&lt;pre class=&quot;line-numbers </summary>
      
    
    
    
    <category term="CSS" scheme="http://damao2250.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://damao2250.com/tags/CSS/"/>
    
    <category term="HTML" scheme="http://damao2250.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Vue自定义组件的v-model例子</title>
    <link href="http://damao2250.com/2021/11/08/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84v-model%E4%BE%8B%E5%AD%90/"/>
    <id>http://damao2250.com/2021/11/08/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84v-model%E4%BE%8B%E5%AD%90/</id>
    <published>2021-11-08T02:58:33.000Z</published>
    <updated>2022-03-16T09:54:05.211Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框或者其他自定义组件等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>父元素的formData<span class="token punctuation">.</span>msg<span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> formData<span class="token punctuation">.</span>msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>父元素的formData<span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>son v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"formData.msg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">"./son.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span> son <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      formData<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        msg<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>formData<span class="token punctuation">.</span>msg<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>这里是子元素<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>子元素的msg<span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"onClick"</span><span class="token operator">></span>子元素的msg<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"son"</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      sonMsg<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  model<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    prop<span class="token operator">:</span> <span class="token string">"msg"</span><span class="token punctuation">,</span>    event<span class="token operator">:</span> <span class="token string">"change"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 注意不能直接修改父元素的props</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sonMsg<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sonMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框或者其他自定义组件等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="v-model" scheme="http://damao2250.com/tags/v-model/"/>
    
  </entry>
  
  <entry>
    <title>异步函数</title>
    <link href="http://damao2250.com/2021/10/18/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/"/>
    <id>http://damao2250.com/2021/10/18/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-18T05:05:41.000Z</published>
    <updated>2022-04-21T06:50:21.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><ul><li>async 变体 (async(异步) 函数总是返回 Promises )<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 异步函数声明</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 异步函数表达式</span><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 异步函数定义</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token keyword">async</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 异步箭头函数 </span><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// async(异步) 函数的 Promise 完成状态</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span><span class="token comment">// async(异步) 函数的 Promise 拒绝状态</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Problem!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Problem!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"helloAsync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//await后面可以是Promise对象么 也可以是字符串，布尔值，数值以及普通函数</span><span class="token keyword">function</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"helloAsync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// await针对所跟的表达式不同，有两种处理方式：</span><span class="token comment">// 1、对于Promise对象，await会阻塞主函数的执行，等待 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果，然后继续执行主函数接下来的代码。</span><span class="token comment">// 2、对于非Promise对象，await等待函数或者直接量的返回，而不是等待其执行结果。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await并行-串行触发"><a href="#async-await并行-串行触发" class="headerlink" title="async/await并行/串行触发"></a>async/await并行/串行触发</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAwait1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">testAwait2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"testTime"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> pramiseFn1 <span class="token operator">=</span> <span class="token function">testAwait1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> pramiseFn2 <span class="token operator">=</span> <span class="token function">testAwait2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> pramiseFn1<span class="token punctuation">;</span>  <span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> pramiseFn2<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"两个promise并行执行，done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"testTime"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"test1Time"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAwait1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAwait2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"两个promise串行执行，done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"test1Time"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await在for循环中使用"><a href="#async-await在for循环中使用" class="headerlink" title="async/await在for循环中使用"></a>async/await在for循环中使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"testAwait"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> promises <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token operator">=></span><span class="token function">testAwait</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> promise <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> promise    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise结果："</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"for循环promise，done"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await捕获异常"><a href="#async-await捕获异常" class="headerlink" title="async/await捕获异常"></a>async/await捕获异常</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">testPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await与Generator"><a href="#async-await与Generator" class="headerlink" title="async/await与Generator"></a>async/await与Generator</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Generator函数，可以多次返回</span><span class="token comment">// yield暂停执行，next恢复执行</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token string">'11111111'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'22222222'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'33333333'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: '11111111', done: false&#125;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: '22222222', done: false&#125;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: '33333333', done: true&#125;</span>test<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: undefined, done: true&#125;</span><span class="token comment">// async是Generator函数的语法糖</span><span class="token comment">// async函数就是将Generator函数的星号(*)替换成async，将yield替换成await</span><span class="token comment">// async函数自带执行器，而Generator函数需要每次都调用next()来执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;async&quot;&gt;&lt;a href=&quot;#async&quot; class=&quot;headerlink&quot; title=&quot;async&quot;&gt;&lt;/a&gt;async&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;async 变体 (async(异步) 函数总是返回 Promises )&lt;pre class=&quot;lin</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="async" scheme="http://damao2250.com/tags/async/"/>
    
    <category term="await" scheme="http://damao2250.com/tags/await/"/>
    
    <category term="promise" scheme="http://damao2250.com/tags/promise/"/>
    
    <category term="Generator" scheme="http://damao2250.com/tags/Generator/"/>
    
  </entry>
  
  <entry>
    <title>简易的发布订阅模式</title>
    <link href="http://damao2250.com/2021/10/09/%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://damao2250.com/2021/10/09/%E7%AE%80%E6%98%93%E7%9A%84%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-10-09T03:10:42.000Z</published>
    <updated>2021-10-09T06:46:27.363Z</updated>
    
    <content type="html"><![CDATA[<ul><li>购买者订阅是否有库存商品<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> storeObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 定义发布者</span>storeObj<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 缓存列表，存放订阅的回调函数</span><span class="token comment">// 添加订阅者</span>storeObj<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此时this指向storeObj</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 发布消息</span>storeObj<span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// arguments为类数组</span>    <span class="token comment">// shift() 方法用于把数组的第一个元素从其中删除,并返回第一个元素的值</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn<span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// fn.apply(this, arguments)</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 订阅</span>storeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您订阅的尺码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>size<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，有库存了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>storeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'小张'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您订阅的尺码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>size<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，有库存了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 取消订阅</span>storeObj<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>_fn <span class="token operator">==</span> fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>storeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span>storeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>封装<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        listen<span class="token punctuation">,</span>        trigger<span class="token punctuation">,</span>        remove<span class="token punctuation">;</span>    <span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            list<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">let</span> fns <span class="token operator">=</span> list<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn<span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// fn.apply(this, arguments)</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fns <span class="token operator">=</span> list<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>_fn <span class="token operator">==</span> fn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;购买者订阅是否有库存商品&lt;pre class=&quot;line-numbers language-js&quot; data-language=&quot;js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/spa</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://damao2250.com/categories/JavaScript/"/>
    
    
    <category term="发布订阅" scheme="http://damao2250.com/tags/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目中应用TypeScript</title>
    <link href="http://damao2250.com/2021/10/08/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript/"/>
    <id>http://damao2250.com/2021/10/08/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BA%94%E7%94%A8TypeScript/</id>
    <published>2021-10-08T02:27:00.000Z</published>
    <updated>2021-10-08T03:29:54.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li>在VUE项目中应用typescript，我们需要引入一个库<code>vue-property-decorator</code>，</li><li><code>vue-property-decorator</code>是基于<code>vue-class-component</code>库而来，这个库vue官方推出的一个支持使用class方式来开发vue单文件组件的库</li><li>主要的功能如下：<ul><li>methods 可以直接声明为类的成员方法</li><li>计算属性可以被声明为类的属性访问器</li><li>初始化的 data 可以被声明为类属性</li><li>data、render 以及所有的 Vue 生命周期钩子可以直接作为类的成员方法</li><li>所有其他属性，需要放在装饰器中</li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><code>vue-property-decorator</code> 主要提供了以下装饰器<ul><li>@Prop</li><li>@PropSync</li><li>@Model</li><li>@Watch</li><li>@Provide</li><li>@Inject</li><li>@ProvideReactive</li><li>@InjectReactive</li><li>@Emit</li><li>@Ref</li><li>@Component (由 <code>vue-class-component</code> 提供)</li><li>Mixins (由 <code>vue-class-component</code> 提供)<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3></li></ul></li><li>Component装饰器它注明了此类为一个Vue组件，因此即使没有设置选项也不能省略</li><li>如果需要定义比如 name、components、filters、directives以及自定义属性，就可以在Component装饰器中定义，如下：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">,</span>Vue<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>componentA<span class="token punctuation">,</span>componentB<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/components'</span><span class="token punctuation">;</span> @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    components<span class="token operator">:</span><span class="token punctuation">&#123;</span>        componentA<span class="token punctuation">,</span>        componentB<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    directives<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        focus<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 指令的定义</span>            <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">YourCompoent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span><span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="computed、data、methods"><a href="#computed、data、methods" class="headerlink" title="computed、data、methods"></a>computed、data、methods</h3></li><li>这里取消了组件的data和methods属性，以往data返回对象中的属性、methods中的方法需要直接定义在Class中，当做类的属性和方法<pre class="line-numbers language-js" data-language="js"><code class="language-js">@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 类属性相当于以前的 data</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span> <span class="token comment">// 类方法就是以前的方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取计算属性</span>    <span class="token keyword">get</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置计算属性</span>    <span class="token keyword">set</span> <span class="token function">total</span><span class="token punctuation">(</span>param<span class="token operator">:</span>number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> param    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="props"><a href="#props" class="headerlink" title="@props"></a>@props</h3></li><li>组件接收属性的装饰器，如下使用：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">,</span>Vue<span class="token punctuation">,</span>Prop<span class="token punctuation">&#125;</span> from vue<span class="token operator">-</span>property<span class="token operator">-</span>decorator<span class="token punctuation">;</span>@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">YourComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">Prop</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>    propA<span class="token operator">:</span>string<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">[</span>String<span class="token punctuation">,</span>Number<span class="token punctuation">]</span><span class="token punctuation">)</span>    propB<span class="token operator">:</span>string<span class="token operator">|</span>number<span class="token punctuation">;</span>        @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     type<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// type: [String , Number]</span>     <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'default value'</span><span class="token punctuation">,</span> <span class="token comment">// 一般为String或Number</span>      <span class="token comment">//如果是对象或数组的话。默认值从一个工厂函数中返回</span>      <span class="token comment">// defatult: () => &#123;</span>      <span class="token comment">//     return ['a','b']</span>      <span class="token comment">// &#125;</span>     required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>          <span class="token string">'InProcess'</span><span class="token punctuation">,</span>          <span class="token string">'Settled'</span>        <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    propC<span class="token operator">:</span>string<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch"><a href="#watch" class="headerlink" title="@watch"></a>@watch</h3></li><li>实际就是Vue中的监听器，如下：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Vue<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span>@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">YourComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span>  <span class="token function">onChildChanged</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> string<span class="token punctuation">,</span> oldVal<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">onPersonChanged1</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> Person<span class="token punctuation">,</span> oldVal<span class="token operator">:</span> Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span>  <span class="token function">onPersonChanged2</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> Person<span class="token punctuation">,</span> oldVal<span class="token operator">:</span> Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emit"><a href="#emit" class="headerlink" title="@emit"></a>@emit</h3></li><li>vue-property-decorator 提供的 @Emit 装饰器就是代替Vue中的事件的触发$emit，如下：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Vue<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Emit<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Some</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span><span class="token punctuation">&#123;</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'emit-todo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitTodo</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        @<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">emitTodo</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在VUE项目中应用typescript，我们需要引入一个库&lt;code&gt;vue-property-decorator&lt;/code&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://damao2250.com/categories/Vue/"/>
    
    
    <category term="TypeScript" scheme="http://damao2250.com/tags/TypeScript/"/>
    
  </entry>
  
</feed>
